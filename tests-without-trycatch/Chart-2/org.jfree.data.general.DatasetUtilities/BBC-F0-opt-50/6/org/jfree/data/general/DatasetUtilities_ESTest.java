/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:28:01 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.EventListener;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JTable;
import javax.swing.plaf.synth.SynthProgressBarUI;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.event.DatasetChangeInfo;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeEvent;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray1[0] = (Number) bigInteger0;
      int int0 = 305;
      bigInteger0.setBit(305);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[1] = (Number) bigInteger0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      defaultIntervalCategoryDataset0.validateObject();
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.byteValueExact();
      bigInteger0.subtract(bigInteger1);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      Range.expand(range0, 646.0, (-154.0));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, (List) list0, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Series index out of bounds
//         //
//         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "?E<*]0z+8|I+.", false);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("69NPK>");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, false);
      arrayList0.add("y:/L\"v99hkt5YI@5");
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) null, range0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-123);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      categoryTableXYDataset0.add((Number) bigInteger0, (Number) (byte) (-48), "!+P4Ww5S)4divL<?q.", true);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("!+P4Ww5S)4divL<?q.");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, false);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (byte) (-48), (-1207));
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "69NPK>", false);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("69NPK>");
      arrayList0.stream();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "69NPK>", true);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("69NPK>");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Rquires 'samples' > 1", 10, 10);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 6.283185307179586);
      DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2818.30071;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 4186.3727;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 4080.300881255221;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "69NPK>", true);
      Set<String> set0 = new TreeSet<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("69NPK>");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray0[0] = numberArray1;
      DatasetUtilities.createCategoryDataset("69NPK>", "69NPK>", numberArray0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Byte byte0 = new Byte((byte) (-56));
      categoryTableXYDataset0.add((Number) byte0, (Number) byte0, "4", true);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1277.9064);
      doubleArray1[1] = (-311.928597);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1027.2069893053);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1277.9064);
      doubleArray2[1] = (-1277.9064);
      doubleArray2[2] = (-1277.9064);
      doubleArray2[3] = (-1277.9064);
      doubleArray2[4] = (-1027.2069893053);
      doubleArray2[5] = (-1027.2069893053);
      doubleArray2[6] = (-737.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-737.0);
      doubleArray4[1] = (-1277.9064);
      doubleArray4[2] = (-1.0);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", (String) null, doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Ewb<iE+BD#", false);
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Instant instant0 = MockInstant.now();
      Date[] dateArray0 = new Date[4];
      int int0 = 608;
      int int1 = 10;
      int int2 = 632;
      MockDate mockDate0 = new MockDate(608, 10, 10, 10, 632);
      dateArray0[0] = (Date) mockDate0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      dateArray0[1] = date0;
      Date date1 = mockGregorianCalendar0.getGregorianChange();
      dateArray0[2] = date1;
      MockDate mockDate1 = new MockDate(10);
      dateArray0[3] = (Date) mockDate1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      String string0 = "hJ{$w";
      arrayList0.add("hJ{$w");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1193, 1193, 1193);
      Instant instant0 = MockInstant.now();
      Date[] dateArray0 = new Date[9];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      dateArray0[8] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1193;
      doubleArray0[1] = (double) 1193;
      doubleArray0[2] = (double) 1193;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)108);
      linkedList0.add(byte0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(linkedList0, byte0, byte0);
      linkedList0.add(byte0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      JDBCXYDataset jDBCXYDataset0 = null;
//      try {
        jDBCXYDataset0 = new JDBCXYDataset("D$,*ku", "", (String) null, "D$,*ku");
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(Throwable e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(646, 646);
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month(mockDate0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 0.8, 646, 646, month0);
      DatasetUtilities.iterateDomainBounds(xYDataset0);
      DatasetUtilities.isEmptyOrNull(xYDataset0);
      DatasetUtilities.iterateRangeBounds(xYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, ">4BN", false);
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, ">4BN", false);
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date[] dateArray0 = new Date[1];
      Date date0 = Date.from(instant0);
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-263.67296221227);
      doubleArray0[1] = 1740.8676;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-263.67296221227);
      doubleArray0[4] = (-1203.7939);
      doubleArray0[5] = (-788.6066001029988);
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      IntervalXYDelegate intervalXYDelegate1 = new IntervalXYDelegate(defaultHighLowDataset0);
      Range range0 = intervalXYDelegate1.getDomainBounds(true);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-2813));
      Vector<Short> vector0 = new Vector<Short>();
      vector0.add(short0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Requires 'samples' > 1", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (double) 1;
      doubleArray2[8] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = (double) 1;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-61);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divideAndRemainder(bigInteger1);
      categoryTableXYDataset0.add((Number) integer0, (Number) bigInteger0, ">4BN", false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 13);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 13, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-519));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 1576;
      mockDate0.toInstant();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = new Range(1576, 1576);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)243);
      stack0.add(short0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 3224, (-1846), (-1846), 3224, (-1));
      MockInstant.now();
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1576;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) (-1846);
      doubleArray0[6] = (double) (-1846);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, false);
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("hJ{$w");
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      Instant instant0 = MockInstant.now();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1576;
      doubleArray0[1] = (double) 1576;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, false);
      intervalXYDelegate0.getDomainBounds(true);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)243);
      stack0.add(short0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, false);
      Range.shift(range1, (double) 1576);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Byte byte0 = Byte.valueOf((byte)8);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add(byte0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(linkedList0, byte0, byte0);
      linkedList0.add(byte0);
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 5.160546937E13;
      doubleArray1[1] = (double) (byte)8;
      doubleArray1[2] = (double) (byte) (-68);
      doubleArray1[3] = (double) (byte) (-68);
      doubleArray1[3] = (double) (byte)8;
      doubleArray1[5] = (double) (byte)8;
      doubleArray1[6] = (double) (byte)8;
      doubleArray1[7] = (double) (byte) (-68);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      linkedList0.stream();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MockDate mockDate0 = new MockDate((-1804), (-1804), (-2627), 1576, 1, (-1804));
      Instant instant0 = MockInstant.now();
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1804);
      doubleArray0[1] = (double) 1576;
      doubleArray0[2] = (double) 1576;
      doubleArray0[3] = (double) (-1804);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 1178.761322101;
      doubleArray0[6] = (double) 1576;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, false);
      intervalXYDelegate0.getDomainBounds(false);
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      Stack<Short> stack0 = new Stack<Short>();
      range0.toString();
      Short short0 = new Short((short)243);
      stack0.add(short0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 1576;
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      MockInstant.now();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      intervalXYDelegate0.getDomainBounds(true);
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) comparableArray0, (Comparable[]) dateArray0, (double[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Duplicate items in 'columnKeys'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[][] doubleArray0 = new double[6][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Short short0 = new Short((short)243);
      Stack<Short> stack0 = new Stack<Short>();
      stack0.add(short0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate(638, 290, (-1496), 290, (-1496));
      Millisecond millisecond0 = new Millisecond(mockDate0);
      millisecond0.compareTo(mockDate0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(millisecond0);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(999, 2289.66);
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      millisecond0.getEnd();
      mockDate0.clone();
      DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 290);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Day day0 = new Day(mockDate0, timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      millisecond0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Hour hour0 = new Hour(638, day0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, 2.0, 16);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("", "", (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      defaultIntervalCategoryDataset0.getColumnKeys();
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ZoneOffset.ofTotalSeconds(2857);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2857, 2857);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("\"Wj;='Bl<g7SL:%HjR");
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      Range.combine(range0, range0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MockDate mockDate0 = new MockDate(1010, 0, 2574, (-704), 2574, 364);
      Instant instant0 = MockInstant.now();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 364;
      doubleArray0[1] = (double) 2574;
      doubleArray0[2] = (double) 2574;
      doubleArray0[3] = (double) 845;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-704);
      doubleArray0[6] = (double) 845;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, false);
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)243);
      stack0.add(short0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-306), 2, (-306), 1010, 845, (-306));
      MockInstant.now();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1010;
      doubleArray0[1] = (double) 845;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1010;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 845;
      doubleArray0[6] = (double) 2;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, false);
      intervalXYDelegate0.getDomainBounds(false);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)243);
      stack0.add(short0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 1, 1, (-1749.3), 1);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-1749.3), 1.0, (-1749.3), 1.0, 1.5);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, (-1749.3), (-708.6786665), 1.0, 1, Double.NEGATIVE_INFINITY);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, (-30000.0), Double.NEGATIVE_INFINITY, (-1.0), (-771.13657), (-1586.236196686423));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, Double.NEGATIVE_INFINITY, (-2237.66894699), 1.0, (-30000.0), (-1.0));
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, 1, Double.NEGATIVE_INFINITY, (-2237.66894699), (-708.6786665), (-1.0));
      oHLCDataItemArray0[5] = oHLCDataItem5;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("\"1fYYZ/)", oHLCDataItemArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      String string0 = "%Yxw?@7)X@6tiEg";
      String string1 = "";
      Number[][] numberArray0 = new Number[9][6];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = number0;
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray1[1] = (Number) bigInteger0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 1);
      // Undeclared exception!
//      try { 
        slidingGanttCategoryDataset0.getEndValue((Comparable) oHLCDataItem1, (Comparable) oHLCDataItem4, (-2955));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unknown columnKey: org.jfree.data.xy.OHLCDataItem@9
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate(133, 255, 133, 133, 133, 133);
      mockDate0.clone();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1591.0146381595598, 1591.0146381595598, 2.0, 255, (-1091.63758174));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2.0, (-1091.63758174), 1591.0146381595598, 133, (-1031.454586341));
      oHLCDataItemArray0[0] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (1591.0146381595598) <= upper (-1091.63758174).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-68));
      linkedList0.add(byte0);
      double[][] doubleArray0 = new double[7][1];
      defaultMultiValueCategoryDataset0.add(linkedList0, (byte) (-68), (byte) (-68));
      linkedList0.add(byte0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Number[][] numberArray0 = new Number[9][5];
      DatasetUtilities.createCategoryDataset("F", "xN:D.cfLEVtbx:", numberArray0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-6894336.0), (-6894336.0));
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-6894336.0), (-231.036), 1075, "xN:D.cfLEVtbx:");
      DatasetUtilities.iterateDomainBounds(xYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 1576;
      mockDate0.toInstant();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = new Range(1576, 1576);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)243);
      stack0.add(short0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      stack0.add((CategoryTableXYDataset) null);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[][] doubleArray1 = new double[4][8];
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 3088.1;
      doubleArray2[1] = (-3935.4934);
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-809.4);
      doubleArray3[1] = (-3935.4934);
      doubleArray3[2] = (-3935.4934);
      doubleArray3[3] = 3088.1;
      doubleArray1[1] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-809.4);
      doubleArray1[2] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-809.4);
      doubleArray1[3] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-666), 5);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      MockInstant.now();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[0], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      intervalXYDelegate0.setAutoWidth(false);
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-1369));
      Short short1 = Short.valueOf((short)3061);
      stack0.add(short1);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-52));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add(byte0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) byte0;
      numberArray1[1] = (Number) byte0;
      numberArray1[2] = (Number) byte0;
      numberArray1[3] = (Number) byte0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (byte) (-52));
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) byte0, (KeyedValues) categoryToPieDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Number[][] numberArray0 = new Number[11][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DtasetUtilities", "org.jfree.data.general.DtasetUtilities", numberArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      MockDate mockDate0 = new MockDate((-4220), (-4220), (-4220), (-4220), (-4220), (-2181));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-4220), (-1.0), (-4220), (-1.0), (-1.0));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1.0), (-849.462615677102), (-849.462615677102), Double.POSITIVE_INFINITY, (-1.0));
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-849.462615677102), 1641.8598, (-1.7976931348623157E308), 1641.8598, Double.POSITIVE_INFINITY);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, (-1.0), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, (-1.7976931348623157E308), 1133.919, 1.7976931348623157E308, (-849.462615677102));
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("org.jfree.data.general.DtasetUtilities", oHLCDataItemArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(646, 646);
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month(mockDate0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 0.8, 646, 91, month0);
      DatasetUtilities.iterateDomainBounds(xYDataset0);
      mockDate0.clone();
      DatasetUtilities.findRangeBounds(xYDataset0, false);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("Null 'columnKeys' argument.", "5{0'6pBe{@9", "", "KeyedObjectComparatorType.BY_KEY");
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(Throwable e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(646, 646);
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month(mockDate0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 0.8, 646, 91, month0);
      DatasetUtilities.iterateDomainBounds(xYDataset0);
      DatasetUtilities.findDomainBounds(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 969.7647009685971;
      doubleArray2[1] = (-2.147483648E9);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = (-1577.3462446415717);
      doubleArray2[4] = 1259.2862669;
      doubleArray2[5] = (-2136.3324263992117);
      doubleArray2[6] = 646.5;
      doubleArray2[7] = 1112.488176046185;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-1577.3462446415717);
      doubleArray4[1] = (-2.147483648E9);
      doubleArray4[2] = (-1577.3462446415717);
      doubleArray4[3] = (-1577.3462446415717);
      doubleArray4[4] = (-3318.8);
      doubleArray4[5] = 1112.488176046185;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = (-1577.3462446415717);
      doubleArray4[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "Uvoi<@qlks", doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-361));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(646, 646);
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month(mockDate0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 0.8, 646, 91, month0);
      DatasetUtilities.iterateDomainBounds(xYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-68));
      linkedList0.add(byte0);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = (double) (byte) (-68);
      doubleArray0[5] = (double) (byte) (-68);
      defaultMultiValueCategoryDataset0.add(linkedList0, 0.0, 0.0);
      doubleArray0[6] = (double) (byte) (-68);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, (-65), 59, 1576, 1900, 1576);
      MockInstant.now();
      Date[] dateArray0 = new Date[8];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 59;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      intervalXYDelegate0.getDomainBounds(false);
      LinkedHashSet<XYSeriesCollection> linkedHashSet0 = new LinkedHashSet<XYSeriesCollection>();
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>(linkedHashSet0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 1576;
      doubleArray0[3] = (double) 1576;
      MockInstant.now();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)243);
      stack0.add(short0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DtasetUtilities", "org.jfree.data.general.DtasetUtilities", numberArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][9];
      DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, (-65), 59, 1576, 1900, 1096);
      MockInstant.now();
      Date[] dateArray0 = new Date[8];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 59;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)243);
      mockDate0.setTime((-65));
      Short short1 = new Short((short)1);
      vector0.add(short1);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, (-65), 59, 1576, 1900, 1096);
      MockInstant.now();
      Date[] dateArray0 = new Date[8];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 59;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)243);
      Short short1 = new Short((short)1);
      vector0.add(short1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Minute minute0 = new Minute();
      Byte byte0 = new Byte((byte) (-90));
      Instant instant0 = MockInstant.now();
      Date[] dateArray0 = new Date[1];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3070, 59, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      boolean boolean0 = false;
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, false);
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)147);
      Short short1 = new Short((byte) (-90));
      vector0.add(short1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)31);
      linkedList0.add(byte0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset1, tableOrder0, 1872);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      categoryToPieDataset0.equals(xYSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'columnKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      TimeSeries timeSeries0 = new TimeSeries("\"1fYYZ/)", "/^Z", "Q found at end of string.");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-54));
      linkedList0.add(byte0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, linkedList0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-24));
      linkedList0.add(byte0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1468, 129);
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection1 = new DynamicTimeSeriesCollection(2, (-5039), timeZone0);
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection1, (List) linkedList0, true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Week week0 = new Week();
      Number[][] numberArray0 = new Number[3][7];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) 1;
      numberArray1[1] = (Number) 1;
      numberArray1[2] = (Number) 53;
      numberArray1[3] = (Number) 53;
      numberArray1[4] = (Number) 53;
      numberArray1[5] = (Number) 1;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      numberArray1[6] = (Number) integer0;
      numberArray1[7] = (Number) 53;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      numberArray3[0] = (Number) 53;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) 1;
      numberArray3[4] = (Number) 53;
      numberArray3[5] = (Number) integer0;
      numberArray3[6] = (Number) 53;
      numberArray3[7] = (Number) 1;
      numberArray3[8] = (Number) 53;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) week0, 39.5926214691391);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 1576;
      doubleArray0[3] = (double) 1576;
      MockInstant.now();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)243);
      vector0.add(short0);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      Vector<CategoryTableXYDataset> vector1 = new Vector<CategoryTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector1, range1, true);
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      MockDate mockDate0 = new MockDate(2943, 186, 2943, 21, 21, 2);
      Instant instant0 = MockInstant.now();
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 21;
      doubleArray0[1] = (double) 2943;
      doubleArray0[2] = (double) 2943;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 21;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, false);
      intervalXYDelegate0.getDomainBounds(false);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)243);
      stack0.add(short0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      Day.parseDay("/y0c?|)BBA");
      TimeZone.getDefault();
      MockInstant.ofEpochSecond((long) (-1341), (-2593L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2593L);
      doubleArray0[2] = (double) (-2593L);
      doubleArray0[3] = (double) (-1341);
      doubleArray0[4] = (double) (-1341);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2618.271502675377), 0.0, 78, (-1341.0));
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) (-1341.0);
      Number[] numberArray2 = new Number[6];
      numberArray2[0] = (Number) 0.0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = (Number) (-1341.0);
      numberArray2[3] = (Number) 0.0;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      numberArray2[4] = (Number) integer0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      defaultIntervalCategoryDataset0.validateObject();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) integer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2846);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2846, 2818, timeZone0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      dynamicTimeSeriesCollection0.addValue(53, 290, 2014.204F);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 2;
      numberArray1[1] = (Number) 1;
      numberArray1[2] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("ZgJ]nlQt;]h<QFvZv)", "", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) dateArray0[0], (Number) null);
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) dateArray0[0], Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 1576;
      doubleArray0[3] = (double) 1576;
      MockInstant.now();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      defaultHighLowDataset0.addChangeListener(intervalXYDelegate0);
      intervalXYDelegate0.getDomainBounds(true);
      Stack<Short> stack0 = new Stack<Short>();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Number[][] numberArray0 = new Number[16][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5o4))<`@X9A2$'", "(", numberArray0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)19);
      vector0.add(short0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>(vector0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Minute minute0 = new Minute();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(minute0);
      DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "us!(";
      stringArray0[1] = " 1srCxZ";
      stringArray0[3] = "/VU^L";
      stringArray0[4] = "Null 'dataset' argument.";
      stringArray0[5] = "~@K{>fFcgE-D%[S";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Minute minute0 = new Minute();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(minute0);
      DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      Number[][] numberArrayArray0 = null;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) minute0, (KeyedValues) categoryToPieDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Minute minute0 = new Minute();
      minute0.toString();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(minute0);
      DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[8];
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[1] = (Number) 59;
      numberArray1[2] = (Number) 0;
      Integer integer0 = new Integer(59);
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = (Number) 0;
      numberArray1[5] = (Number) 0;
      numberArray1[6] = (Number) 59;
      numberArray1[7] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      numberArray3[0] = (Number) 0;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) 59;
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = (Number) bigInteger0;
      numberArray3[5] = (Number) bigInteger0;
      numberArray3[6] = (Number) bigInteger0;
      numberArray3[7] = (Number) bigInteger0;
      numberArray3[8] = (Number) bigInteger0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      numberArray4[0] = (Number) bigInteger0;
      numberArray4[1] = (Number) 0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2846);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2846, 2846, timeZone0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2846, 2);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-2320.0), 2, 304, 0);
      DatasetUtilities.iterateDomainBounds(xYDataset0);
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 304;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 304;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 2846;
      doubleArray2[4] = (double) 304;
      doubleArray0[1] = doubleArray2;
      DatasetUtilities.createCategoryDataset("mO;2w", "mO;2w", doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2228.50960613507;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 2228.50960613507;
      doubleArray2[1] = 3150.510441064;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 2228.50960613507;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 2228.50960613507;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 2228.50960613507;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 3150.510441064;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 3150.510441064;
      doubleArray6[1] = 3150.510441064;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      doubleArray0[18] = (double) 1576;
      doubleArray0[3] = (double) 1576;
      MockInstant.now();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)243);
      vector0.add(short0);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      Vector<CategoryTableXYDataset> vector1 = new Vector<CategoryTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector1, range1, true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray1);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[4][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Day day0 = new Day();
      day0.getDayOfMonth();
      MockDate mockDate0 = new MockDate(14, (-579), 2);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2, 2, Double.NEGATIVE_INFINITY, (-579), 3376.26);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1031.7777105, 2, 14, 1031.7777105, Double.NEGATIVE_INFINITY);
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2846);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2846, 2818, timeZone0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("kPRW;%");
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      zoneOffset0.equals(categoryTableXYDataset0);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2846);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2846, 2846, timeZone0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2846, 2);
      DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-2320.0), 2, 304, 0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, 1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 7, 7);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)7);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2193.26913795934), (-3939.0));
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(lineFunction2D0, 759.15192361037, 2271.4897012, (byte)7, byte0);
      DatasetUtilities.iterateRangeBounds(xYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Number number0 = null;
      defaultKeyedValuesDataset0.setValue((Comparable) quarter0, (Number) null);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) quarter0, (-2320.946121114444), 1);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 1;
      numberArray1[1] = (Number) 1;
      numberArray1[2] = (Number) 1;
      numberArray1[3] = (Number) 1;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      // Undeclared exception!
//      try { 
        timeTableXYDataset0.getStartY(1, (-2175));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1934L, (-59.1302648), (-59.1302648), 1934L, (-59.1302648));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1934L, 1934L, 1934L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 1934L, (-59.1302648), (-521.7), (-412.2468901179));
      oHLCDataItemArray0[2] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-59.1302648), 4515.9, 4515.9, (-59.1302648), (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem1;
      day0.getDayOfMonth();
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-59.1302648), 1.4012577262736357, Double.NEGATIVE_INFINITY, 1934L, 1934L);
      oHLCDataItemArray0[7] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 3);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 3, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1rYr/)");
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-7), 292);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)32;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      defaultKeyedValues2DDataset0.addValue((Number) bigInteger0, (Comparable) (byte) (-100), (Comparable) (byte)32);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-172));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultKeyedValuesDataset0.setValue((Comparable) integer0, (Number) integer0);
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) defaultKeyedValuesDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultKeyedValuesDataset0.setValue((Comparable) integer0, (Number) integer0);
      defaultKeyedValuesDataset0.insertValue(1, (Comparable) integer0, (Number) integer0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) integer0, (-708.028415407), 38);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Integer cannot be cast to org.jfree.data.SelectableValue
//         //
//         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Number[][] numberArray0 = new Number[16][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1531));
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "5&o4))<`@eX9A2$'", 1025.79, 12);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 1);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NEGATIVE_INFINITY, 4);
      comparableArray0[0] = (Comparable<Float>) simpleHistogramBin0;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte byte0 = (byte) (-60);
      byte byte1 = (byte) (-65);
      Byte byte2 = new Byte((byte) (-65));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) defaultKeyedValuesDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-2.147483648E9), 465.71211704801044, 4.0, 4.0, 4.0);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-592.11), 1391.5, (-521.7), 1049.09963069, (-521.7));
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 2588.0, (-2667.1713415313), (-592.11), (-521.7), Double.NEGATIVE_INFINITY);
      Day day0 = new Day(mockDate0);
      day0.getDayOfMonth();
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 3808.45, 2183.28, 1868.235, (-2667.1713415313), 226.3683556);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem2, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      MatrixSeries matrixSeries0 = new MatrixSeries("'~E~sL", 4, 4);
      matrixSeries0.setNotify(false);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1rYr/)");
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-472.7));
      ArrayList<String> arrayList0 = new ArrayList<String>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Week week0 = new Week();
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][2];
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of column keys does not match the number of columns in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      arrayList0.add((Object) null);
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, true);
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 459.82316786327084;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 459.82316786327084;
      doubleArray2[1] = 459.82316786327084;
      doubleArray2[2] = (-449.0752023255458);
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-449.0752023255458);
      doubleArray3[1] = 459.82316786327084;
      doubleArray3[2] = 459.82316786327084;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = (-449.0752023255458);
      doubleArray3[6] = (-449.0752023255458);
      doubleArray3[7] = (-449.0752023255458);
      doubleArray3[8] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-2.147483648E9);
      doubleArray4[1] = 319.08510371;
      doubleArray4[2] = (-449.0752023255458);
      doubleArray4[3] = (-449.0752023255458);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-2.147483648E9);
      doubleArray5[1] = 459.82316786327084;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-2.147483648E9);
      doubleArray6[1] = 319.08510371;
      doubleArray6[2] = (-2.147483648E9);
      doubleArray6[3] = 774.40688;
      doubleArray6[4] = 459.82316786327084;
      doubleArray6[5] = (-2.147483648E9);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = Double.POSITIVE_INFINITY;
      doubleArray7[1] = (-1759.0809);
      doubleArray7[2] = (-449.0752023255458);
      doubleArray7[3] = 459.82316786327084;
      doubleArray7[4] = (-449.0752023255458);
      doubleArray7[5] = 319.08510371;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (-1759.0809);
      doubleArray8[1] = (-1759.0809);
      doubleArray8[2] = (-449.0752023255458);
      doubleArray8[3] = Double.POSITIVE_INFINITY;
      doubleArray8[4] = Double.POSITIVE_INFINITY;
      doubleArray8[5] = Double.NEGATIVE_INFINITY;
      doubleArray8[6] = Double.NEGATIVE_INFINITY;
      doubleArray8[7] = 774.40688;
      doubleArray8[8] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      doubleArray9[0] = 774.40688;
      doubleArray9[1] = 774.40688;
      doubleArray9[2] = 319.08510371;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("WgQ", (String) null, doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 887.228084142363;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-830.3268);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-830.3268);
      doubleArray2[1] = (-830.3268);
      doubleArray2[2] = (-2501.555234893);
      doubleArray2[3] = (-830.3268);
      doubleArray2[4] = 887.228084142363;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-830.3268);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-2501.555234893);
      doubleArray3[4] = 887.228084142363;
      doubleArray3[5] = (-830.3268);
      doubleArray3[6] = (-830.3268);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeTableXYDataset0, (-2822.21));
      defaultIntervalCategoryDataset0.removeChangeListener(xYBarDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, (-953.97));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      defaultCategoryDataset0.getRowKeys();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2778), 1, 2);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 217.75258753, 0.5, (-2778), 2, 217.75258753);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 5.0, 1, 5.0, (-1268.3400930040261), 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 1, 0.0, (-1268.3400930040261), 2786.36249, 2786.36249);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 2, Double.POSITIVE_INFINITY, (-1.0), (-1.0), (-1035.1305319));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("1fYYZ/)", oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultKeyedValuesDataset0.setValue((Comparable) integer0, (Number) integer0);
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "Null 'seriesKey' argument.";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "y#Is.]ZmmQ`b}pmdd";
      stringArray0[4] = "m|.I@Pb#\"N*T";
      stringArray0[5] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 2;
      int int1 = 2;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 2, 2);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Random.setNextRandom(2000);
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 2000;
      doubleArray1[1] = (double) 2000;
      doubleArray1[2] = (double) 2000;
      doubleArray1[3] = (double) 2000;
      doubleArray1[4] = (double) 2000;
      doubleArray1[5] = (double) 2000;
      doubleArray1[6] = (double) 2000;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2000;
      doubleArray2[1] = (double) 2000;
      doubleArray2[2] = (-2292.1);
      doubleArray2[3] = (double) 2000;
      doubleArray2[4] = (double) 2000;
      doubleArray2[5] = (double) 2000;
      doubleArray2[6] = 1657.9;
      doubleArray2[7] = 1923.6416723730374;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 1923.6416723730374;
      doubleArray3[1] = (double) 2000;
      doubleArray3[2] = (double) 2000;
      doubleArray3[3] = 1657.9;
      doubleArray3[4] = (double) 2000;
      doubleArray3[5] = (-2292.1);
      doubleArray3[6] = 0.5;
      doubleArray3[7] = 1657.9;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 1657.9;
      doubleArray4[1] = (double) 2000;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-1718.0);
      doubleArray5[1] = (double) 2000;
      doubleArray5[2] = 1923.6416723730374;
      doubleArray5[3] = 484.949924968548;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 1923.6416723730374;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (-2292.1);
      doubleArray7[1] = (-1718.0);
      doubleArray7[2] = 1.5;
      doubleArray7[3] = 1024.204044806452;
      doubleArray7[4] = 1657.9;
      doubleArray7[5] = 1923.6416723730374;
      doubleArray7[6] = (double) 2000;
      doubleArray7[7] = 1657.9;
      doubleArray7[8] = 484.949924968548;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 1024.204044806452;
      doubleArray8[1] = (double) 2000;
      doubleArray8[2] = 1.5;
      doubleArray8[3] = (-1718.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = 1024.204044806452;
      doubleArray9[1] = 1024.204044806452;
      doubleArray9[2] = 1657.9;
      doubleArray9[3] = 484.949924968548;
      doubleArray9[4] = (-2292.1);
      doubleArray9[5] = 1657.9;
      doubleArray9[6] = 2272.469086;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray1[1] = 2887.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 2887.0;
      doubleArray2[1] = 3643.0;
      doubleArray2[2] = (-1.7976931348623157E308);
      doubleArray2[3] = (-1.7976931348623157E308);
      doubleArray2[4] = 2887.0;
      doubleArray2[5] = (-1.7976931348623157E308);
      doubleArray2[6] = 2887.0;
      doubleArray2[7] = 2887.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 3643.0;
      doubleArray3[2] = 3643.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 740.0;
      doubleArray4[1] = 2887.0;
      doubleArray4[2] = (-1.7976931348623157E308);
      doubleArray4[3] = 3643.0;
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = 3643.0;
      doubleArray4[6] = (-1.7976931348623157E308);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = 2887.0;
      doubleArray5[2] = (-1.7976931348623157E308);
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 2887.0;
      doubleArray5[5] = (-1.0);
      doubleArray5[6] = 2887.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 3643.0;
      doubleArray6[1] = 740.0;
      doubleArray6[2] = 2887.0;
      doubleArray6[3] = (-1.7976931348623157E308);
      doubleArray6[4] = 100.0;
      doubleArray6[5] = 3643.0;
      doubleArray6[6] = 740.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 100.0;
      doubleArray7[1] = 3643.0;
      doubleArray7[2] = (-1.0);
      doubleArray7[3] = (-1.7976931348623157E308);
      doubleArray7[4] = 2887.0;
      doubleArray7[5] = 3643.0;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2852);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2852, 2852, timeZone0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2852, 2);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-2320.0), 2, 304, 0);
      DatasetUtilities.iterateRangeBounds(xYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      DatasetUtilities.iterateDomainBounds(xYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      Week week0 = new Week(1125, (-698));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(53);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-698), (-147.9), 1125, (-620.644718), 1);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week0, oHLCDataItemArray0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-147.9));
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYBarDataset0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      stack0.add(categoryTableXYDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-1.0));
      Range range1 = Range.combine(range0, range0);
      Vector<Byte> vector0 = new Vector<Byte>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) null, range1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[2][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      stack0.add(categoryTableXYDataset0);
      Range.combine(range0, range0);
      Vector<Byte> vector0 = new Vector<Byte>();
      Byte byte0 = new Byte((byte)4);
      vector0.add(byte0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[2][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Byte byte0 = new Byte((byte)7);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.add(byte0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)64);
      linkedList0.add(byte0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) linkedList1, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ZoneOffset.ofTotalSeconds(2857);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2857, 2857);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(dynamicTimeSeriesCollection0);
      dynamicTimeSeriesCollection0.removeChangeListener(intervalXYDelegate0);
      arrayList0.add("\"Wj;='Bl<g7SL:%HjR");
      DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2849);
      ZoneOffset zoneOffset1 = ZoneOffset.ofTotalSeconds(2849);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2849, 2849, timeZone0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createCategoryDataset((Comparable) zoneOffset0, (KeyedValues) defaultKeyedValuesDataset0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) zoneOffset1);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 287);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(365.71211704801044, 365.71211704801044);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-34.0), 365.71211704801044, 4, integer0);
      DatasetUtilities.iterateRangeBounds(xYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2839);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2839, 2839, timeZone0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2839, 2);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-2320.0), 2, 304, 0);
      DatasetUtilities.iterateRangeBounds(xYDataset0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-27));
      linkedList1.add(byte0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 1576;
      doubleArray0[3] = (double) 1576;
      mockDate0.toInstant();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)243);
      vector0.add(short0);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      Vector<CategoryTableXYDataset> vector1 = new Vector<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      vector1.add(categoryTableXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector1, range1, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-119));
      linkedList1.add(byte0);
      Byte byte1 = new Byte((byte) (-118));
      linkedList1.add(byte1);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByValues(sortOrder0);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      Number[][] numberArray0 = new Number[5][1];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) byte0;
      numberArray1[1] = (Number) byte1;
      numberArray1[2] = (Number) byte0;
      numberArray1[3] = (Number) byte1;
      numberArray1[4] = (Number) byte1;
      numberArray1[5] = (Number) byte1;
      numberArray1[6] = (Number) byte0;
      numberArray1[7] = (Number) byte0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) byte1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      numberArray3[0] = (Number) byte0;
      numberArray3[1] = (Number) byte0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      numberArray4[0] = (Number) byte0;
      numberArray4[1] = (Number) byte1;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[6];
      numberArray5[0] = (Number) byte0;
      numberArray5[1] = (Number) byte0;
      numberArray5[2] = (Number) byte0;
      numberArray5[3] = (Number) byte1;
      numberArray5[4] = (Number) byte1;
      numberArray5[5] = (Number) byte0;
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)14);
      linkedList0.add(byte0);
      TimeSeries timeSeries0 = new TimeSeries(byte0, (String) null, (String) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, linkedList0, true);
      defaultMultiValueCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, (Range) null, false);
      Vector<CategoryTableXYDataset> vector0 = new Stack<CategoryTableXYDataset>();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) arrayList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 4553.43;
      doubleArray1[1] = 2969.015449798864;
      doubleArray1[2] = (-410.30531);
      doubleArray1[3] = (-601.479198);
      doubleArray1[4] = (-60.0);
      doubleArray1[5] = 312.305632;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      doubleArray1[8] = (-60.299061350234);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-410.30531);
      doubleArray2[1] = 4553.43;
      doubleArray2[2] = 4553.43;
      doubleArray2[3] = 4553.43;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1685.0);
      doubleArray2[6] = (-60.299061350234);
      doubleArray2[7] = 0.0;
      doubleArray2[8] = (-601.479198);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-60.0);
      doubleArray3[1] = 312.305632;
      doubleArray3[2] = (-410.30531);
      doubleArray3[3] = (-60.0);
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = (-410.30531);
      doubleArray3[6] = (-60.0);
      doubleArray3[7] = (-1685.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-601.479198);
      doubleArray4[1] = 312.305632;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-1685.0);
      doubleArray5[1] = (-410.30531);
      doubleArray5[2] = (-60.0);
      doubleArray5[3] = (-410.30531);
      doubleArray5[4] = (-410.30531);
      doubleArray5[5] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 2969.015449798864;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (-410.30531);
      doubleArray7[1] = (-1685.0);
      doubleArray7[2] = 312.305632;
      doubleArray7[3] = Double.POSITIVE_INFINITY;
      doubleArray7[4] = (-60.299061350234);
      doubleArray7[5] = (-2.147483648E9);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 4553.43;
      doubleArray8[1] = (-2.147483648E9);
      doubleArray8[2] = 4553.43;
      doubleArray8[3] = (-410.30531);
      doubleArray8[4] = (-2.147483648E9);
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3285);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 2969.015449798864, 2.0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 3285, Size: 9
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (byte) (-60);
      doubleArray1[1] = (double) (byte) (-60);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (byte) (-60);
      doubleArray2[1] = (double) (byte) (-60);
      doubleArray2[2] = (double) (byte) (-60);
      doubleArray2[3] = (double) (byte) (-60);
      doubleArray2[4] = (double) (byte) (-60);
      doubleArray2[5] = (double) (byte) (-60);
      doubleArray2[6] = (double) (byte) (-60);
      doubleArray2[7] = (double) (byte) (-60);
      doubleArray2[8] = (double) (byte) (-60);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) (byte) (-60);
      doubleArray3[1] = (double) (byte) (-60);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SerialDate serialDate0 = SerialDate.createInstance(1075);
      defaultIntervalCategoryDataset0.getColumnIndex((-60.0));
      double[][] doubleArray4 = new double[3][2];
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray3;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-1804.0);
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = (double) 23;
      doubleArray4[2] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray4, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(serialDate0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, (-610), (-610), (-610), 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 1576;
      doubleArray0[3] = (double) 1576;
      mockDate0.toInstant();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)243);
      vector0.add(short0);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      Vector<CategoryTableXYDataset> vector1 = new Vector<CategoryTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector1, range1, true);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-1575.37054);
      doubleArray3[2] = (-60.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (-60.0);
      doubleArray5[2] = (-1575.37054);
      doubleArray5[3] = (-1575.37054);
      doubleArray5[4] = (-60.0);
      doubleArray5[5] = (-60.0);
      doubleArray5[6] = (-1575.37054);
      doubleArray5[7] = 1.0;
      doubleArray5[8] = (-1575.37054);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = (-60.0);
      doubleArray6[2] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-60.0);
      doubleArray7[1] = (-1575.37054);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (-60.0);
      doubleArray8[1] = (-1575.37054);
      doubleArray8[2] = (-1575.37054);
      doubleArray8[3] = (-667.91284);
      doubleArray8[4] = 1.0;
      doubleArray8[5] = 3654.01270187776;
      doubleArray8[6] = (-1575.37054);
      doubleArray8[7] = 1.0;
      doubleArray8[8] = (-1575.37054);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      doubleArray9[0] = (-60.0);
      doubleArray9[1] = (-667.91284);
      doubleArray9[2] = 1.0;
      doubleArray9[3] = (-667.91284);
      doubleArray9[4] = (-1575.37054);
      doubleArray9[5] = 3654.01270187776;
      doubleArray9[6] = (-1575.37054);
      doubleArray9[7] = (-1575.37054);
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(3654.01270187776);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)2);
      linkedList0.add(byte0);
      MockDate mockDate0 = new MockDate((byte)2);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (byte)2, (byte)2, (byte)2, (byte)2, (-1.0));
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), 1.5);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1.0), (byte)2, (byte)2, oHLCDataItem0);
      DatasetUtilities.isEmptyOrNull(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)45);
      Byte byte1 = new Byte((byte)93);
      linkedList0.add(byte1);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 79, 79);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 1576;
      int int1 = 230;
      MockDate mockDate0 = new MockDate(1576, 1576, (-610), (-610), (-610), 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 1576;
      doubleArray0[2] = (double) 1576;
      doubleArray0[3] = (double) 230;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      String string0 = "Null 'array' argument.";
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'array' argument.", "Null 'array' argument.", doubleArray1);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1576);
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1576, Size: 2
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      linkedList1.add(byte0);
      TimeZone timeZone0 = TimeZone.getTimeZone("NOID");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) (byte)0);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList1, range0, false);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), (-59.1302648));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 9223372036854775807L;
      doubleArray1[1] = (double) 9223372036854775807L;
      doubleArray1[2] = (-59.1302648);
      doubleArray1[3] = (double) 9223372036854775807L;
      doubleArray1[4] = (-59.1302648);
      doubleArray1[5] = (double) 9223372036854775807L;
      doubleArray1[6] = (-3448.293859762136);
      doubleArray1[7] = (double) 9223372036854775807L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-3448.293859762136);
      doubleArray2[1] = (-59.1302648);
      doubleArray2[2] = (-3448.293859762136);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-3448.293859762136);
      doubleArray3[1] = 3426.875282903;
      doubleArray3[2] = (-59.1302648);
      doubleArray3[3] = 1719.0;
      doubleArray3[4] = (double) 9223372036854775807L;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 3426.875282903;
      doubleArray4[1] = (-3448.293859762136);
      doubleArray4[2] = 1719.0;
      doubleArray4[3] = (-59.1302648);
      doubleArray4[4] = 3426.875282903;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-59.1302648);
      doubleArray5[1] = (-2187.490552861888);
      doubleArray5[2] = 1719.0;
      doubleArray5[3] = (-59.1302648);
      doubleArray5[4] = (double) 9223372036854775807L;
      doubleArray5[5] = 3426.875282903;
      doubleArray5[6] = (-59.1302648);
      doubleArray5[7] = 3426.875282903;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-59.1302648);
      doubleArray6[1] = (-59.1302648);
      doubleArray6[2] = (double) 9223372036854775807L;
      doubleArray6[3] = (-3448.293859762136);
      doubleArray6[4] = (-3448.293859762136);
      doubleArray6[5] = 3426.875282903;
      doubleArray6[6] = 3426.875282903;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (-59.1302648);
      doubleArray7[1] = 3426.875282903;
      doubleArray7[2] = Double.POSITIVE_INFINITY;
      doubleArray7[3] = (-3448.293859762136);
      doubleArray7[4] = 3426.875282903;
      doubleArray7[5] = 3426.875282903;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (-3448.293859762136);
      doubleArray8[1] = (-59.1302648);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][3];
      Number[] numberArray1 = new Number[5];
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray1[0] = (Number) bigInteger0;
      Integer integer0 = new Integer(273);
      numberArray1[1] = (Number) integer0;
      byte byte0 = (byte) (-43);
      Byte byte1 = new Byte((byte) (-43));
      numberArray1[2] = (Number) byte1;
      short short0 = (short) (-2169);
      Short short1 = new Short((short) (-2169));
      numberArray1[3] = (Number) short1;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3130, 3130);
      MockDate mockDate0 = new MockDate((-1L));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 948.8664237, 2793.723541515302, 948.8664237, 2793.723541515302, (-1.0));
      Number number0 = oHLCDataItem0.getVolume();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) oHLCDataItem0, number0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) mockDate0, 10.0, 2465);
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      Hour hour0 = new Hour();
      stack0.removeElement(hour0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (double) (-1L));
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) stack0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), (-59.1302648));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 9223372036854775807L, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-59.1302648), 4515.9, 0.0, (-59.1302648), (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem2;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, (-59.1302648), (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem4;
      oHLCDataItem0.compareTo(oHLCDataItem4);
      day0.getDayOfMonth();
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, Double.NEGATIVE_INFINITY, 9223372036854775807L, 9223372036854775807L);
      oHLCDataItemArray0[7] = oHLCDataItem5;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      Stack<JDBCXYDataset> stack0 = new Stack<JDBCXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2849);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1859, 1859);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) zoneOffset0);
      arrayList0.add((Object) zoneOffset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(true);
      Number[][] numberArray0 = new Number[10][5];
      Number[] numberArray1 = new Number[5];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Float float0 = new Float(1.0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, (-610), 230);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 1576;
      doubleArray0[2] = (double) 1576;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 79, 79);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      double[][] doubleArray0 = new double[0][1];
      // Undeclared exception!
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3130, 3130);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'dataset' argument.", 3049, 2);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      arrayList0.add((Object) null);
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'dataset' argument.");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      timeSeriesCollection0.validateObject();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("8-#`6}9");
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      TimeSeries timeSeries0 = new TimeSeries("8-#`6}9", "SpreadsheetDate: Serial must be in range 2 to 2958465.", "8-#`6}9");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      defaultBoxAndWhiskerXYDataset0.setSelectionState(timeSeriesCollection0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-499.0107266262064));
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("8-#`6}9");
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      linkedList0.add(defaultTableXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      stack0.add(xIntervalSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Vector<ChronoLocalDate> vector0 = new Vector<ChronoLocalDate>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      vector0.add((ChronoLocalDate) localDate0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2849);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2849, 2849, timeZone0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) zoneOffset0, (KeyedValues) defaultKeyedValuesDataset0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2849, 2);
      defaultKeyedValuesDataset0.setValue((Comparable) 2, (Number) 0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) zoneOffset0, (double) 1, (-2309));
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 114.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 3362.9799981;
      doubleArray1[3] = (-419.24517825485026);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = (-839.036710683);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 114.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-839.036710683);
      doubleArray2[3] = 114.0;
      doubleArray2[4] = 3362.9799981;
      doubleArray2[5] = (-839.036710683);
      doubleArray2[6] = 1.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      MockDate mockDate0 = new MockDate(1576, (-610), 220);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1576;
      doubleArray0[2] = (double) 1576;
      doubleArray0[3] = (double) 220;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) defaultKeyedValuesDataset0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-1.0), 1.0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, number0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), (-59.1302648));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 9223372036854775807L, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-59.1302648), 4515.9, 0.0, (-59.1302648), (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 9223372036854775807L, 9223372036854775807L, 2183.28, 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, (-59.1302648), (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem5;
      oHLCDataItem0.compareTo(oHLCDataItem5);
      day0.getDayOfMonth();
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, Double.NEGATIVE_INFINITY, 9223372036854775807L, 9223372036854775807L);
      oHLCDataItemArray0[7] = oHLCDataItem6;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      Short short0 = new Short((short)1530);
      arrayList0.add((Object) short0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) arrayList0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      Number[][] numberArray0 = new Number[0][4];
      Number[][] numberArray1 = new Number[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      defaultTableXYDataset0.getDomainBounds(true);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.replaceAll(unaryOperator0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      arrayList0.add((Object) timeSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1317L);
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      arrayList0.add((Object) timeTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) fixedMillisecond0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), (-59.1302648));
      day0.getYear();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 9223372036854775807L, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-59.1302648), 4515.9, 0.0, (-59.1302648), (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 9223372036854775807L, 9223372036854775807L, 2183.28, 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, (-59.1302648), (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem5;
      oHLCDataItem0.compareTo(oHLCDataItem5);
      day0.getDayOfMonth();
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, Double.NEGATIVE_INFINITY, 9223372036854775807L, 9223372036854775807L);
      oHLCDataItemArray0[7] = oHLCDataItem6;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 554);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex(1.0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[2][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, linkedList0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2849);
      TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(zoneOffset0, (OHLCDataItem[]) null);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 2849);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      arrayList0.add((Object) null);
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer((-3950));
      Date[] dateArray0 = new Date[3];
      MockDate mockDate0 = new MockDate((-68), 2528, (-68));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(0L);
      dateArray0[1] = (Date) mockDate1;
      MockDate mockDate2 = new MockDate(3374, 2528, 3374);
      dateArray0[2] = (Date) mockDate2;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3950);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, 0.0, (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem5;
      day0.getDayOfMonth();
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0);
      oHLCDataItemArray0[7] = oHLCDataItem6;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      MatrixSeries matrixSeries0 = new MatrixSeries("UGj=y4]D!OT_WhB", 2700, 0);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Short short0 = new Short((short)114);
      defaultKeyedValuesDataset0.setValue((Comparable) oHLCDataItem0, (Number) short0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      System.setCurrentTimeMillis((short)114);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'dataset' argument.", 3049, 2);
      matrixSeries0.setNotify(false);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) "Null 'dataset' argument.", (Number) null);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 702;
      doubleArray1[1] = (double) 702;
      doubleArray1[2] = (double) 269;
      doubleArray1[3] = (double) 269;
      doubleArray1[4] = (double) 702;
      doubleArray1[5] = (double) 269;
      doubleArray1[6] = 1487.0;
      doubleArray1[7] = (double) 702;
      doubleArray1[8] = (double) 269;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 269;
      doubleArray2[1] = 586.1904;
      doubleArray2[2] = (double) 702;
      doubleArray2[3] = (double) 269;
      doubleArray2[4] = (double) 702;
      doubleArray2[5] = (double) 702;
      doubleArray2[6] = (-1187.29);
      doubleArray2[7] = (double) 702;
      doubleArray2[8] = (double) 702;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 702;
      doubleArray3[1] = (double) 702;
      doubleArray3[2] = 43.0;
      doubleArray3[3] = 1487.0;
      doubleArray3[4] = 586.1904;
      doubleArray3[5] = 328.047;
      doubleArray3[6] = (double) 702;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-1704.17203);
      doubleArray4[1] = (double) 702;
      doubleArray4[2] = 586.1904;
      doubleArray4[3] = 43.0;
      doubleArray4[4] = (double) 702;
      doubleArray4[5] = (-1187.29);
      doubleArray4[6] = (-1187.29);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 1487.0;
      doubleArray5[1] = (double) 269;
      doubleArray5[2] = (-1704.17203);
      doubleArray5[3] = 586.1904;
      doubleArray5[4] = (double) 702;
      doubleArray5[5] = 586.1904;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-1187.29);
      doubleArray6[1] = 328.047;
      doubleArray6[2] = (double) 269;
      doubleArray6[3] = (-1187.29);
      doubleArray6[4] = (double) 269;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-1187.29);
      doubleArray7[1] = 43.0;
      doubleArray7[2] = 1487.0;
      doubleArray7[3] = 1487.0;
      doubleArray7[4] = 328.047;
      doubleArray7[5] = (-1187.29);
      doubleArray7[6] = 586.1904;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(43, 1334, 169);
      dateArray0[0] = (Date) mockDate0;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) mockDate0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 79, 79);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      double[][] doubleArray0 = new double[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex("\"1fYYZ/)");
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 1;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 754.2273984599626;
      doubleArray1[1] = 754.2273984599626;
      doubleArray1[4] = (-1929.816528);
      doubleArray1[2] = (-1929.816528);
      jDBCXYDataset0.validateObject();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      stack0.add((CategoryTableXYDataset) null);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      Range.scale(range0, 754.2273984599626);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) stack0, range0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-1929.816528));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.replaceAll(unaryOperator0);
      arrayList0.add((Object) unaryOperator0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.util.function.UnaryOperator$$Lambda$149/2029789349 cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      MockDate mockDate0 = new MockDate(1334, 1334, 43);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1169.0), (-1844.4707127690435), 100.2859523441, 43, (-2618.271502675377));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      linkedList0.add(byte0);
      Byte byte1 = new Byte((byte) (-92));
      Byte byte2 = new Byte((byte) (-92));
      Byte byte3 = new Byte((byte)29);
      linkedList0.add(byte3);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList1, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = (-2088.54709093);
      doubleArray3[4] = (double) 2;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      SerialDate.createInstance(267);
      Quarter quarter0 = new Quarter();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      Number[][] numberArray0 = new Number[5][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 5;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = (Number) (-1);
      numberArray2[1] = (Number) 1;
      numberArray2[2] = (Number) 3;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      numberArray3[0] = (Number) 0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      numberArray4[0] = (Number) integer0;
      numberArray4[1] = (Number) 1;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[3];
      numberArray5[0] = (Number) 1900;
      numberArray5[1] = (Number) 3;
      numberArray5[2] = (Number) 4;
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 18.558664136776645);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      System.setCurrentTimeMillis(1L);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      BigInteger bigInteger0 = BigInteger.ONE;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) timeSeriesDataItem0, (double) 683, 683);
      Number[][] numberArray0 = new Number[9][6];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[1] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = (Number) bigInteger0;
      numberArray2[2] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      numberArray3[0] = (Number) bigInteger0;
      numberArray3[1] = (Number) bigInteger0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      numberArray4[0] = (Number) bigInteger0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[3];
      numberArray5[0] = (Number) bigInteger0;
      numberArray5[1] = (Number) bigInteger0;
      numberArray5[2] = (Number) bigInteger0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[9];
      numberArray6[0] = (Number) bigInteger0;
      numberArray6[1] = (Number) bigInteger0;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      numberArray6[2] = (Number) integer0;
      numberArray6[3] = (Number) bigInteger0;
      numberArray6[4] = (Number) bigInteger0;
      numberArray6[5] = (Number) bigInteger0;
      numberArray6[6] = (Number) bigInteger0;
      numberArray6[7] = (Number) bigInteger0;
      numberArray6[8] = (Number) bigInteger0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[3];
      numberArray7[0] = (Number) bigInteger0;
      numberArray7[1] = (Number) integer0;
      numberArray7[2] = (Number) bigInteger0;
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[4];
      numberArray8[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray8[1] = (Number) integer1;
      numberArray8[2] = (Number) bigInteger0;
      numberArray8[3] = (Number) integer0;
      numberArray0[7] = numberArray8;
      Number[] numberArray9 = new Number[1];
      numberArray9[0] = (Number) integer1;
      numberArray0[8] = numberArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-257.01126212453);
      doubleArray1[1] = 766.651;
      doubleArray1[2] = 89.1;
      doubleArray1[3] = (-519.1751957575988);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-257.01126212453);
      doubleArray2[1] = 89.1;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SerialDate serialDate0 = SerialDate.createInstance(7);
      Integer integer0 = new Integer(2);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset2 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) serialDate0;
      Quarter quarter0 = new Quarter();
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) quarter0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) serialDate0;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Duplicate items in 'rowKeys'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(43, 1334, 169);
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1334;
      doubleArray0[1] = (double) 1334;
      doubleArray0[2] = (double) 1334;
      doubleArray0[3] = (double) 1334;
      doubleArray0[4] = (double) 43;
      doubleArray0[5] = (double) 169;
      doubleArray0[6] = (double) 169;
      doubleArray0[7] = (double) 43;
      doubleArray0[8] = (double) 43;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("5&o4))<`@eX9A2$'", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.getDomainUpperBound(true);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 1227.4482376782787;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = Double.NaN;
      doubleArray1[8] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'dataset' argument.", "Null 'dataset' argument.", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1rYY/)");
      DatasetGroup datasetGroup0 = new DatasetGroup();
      MockDate mockDate0 = new MockDate(528, (-831), 63);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, (Number) integer0);
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      TimeZone.getTimeZone("");
      Locale.forLanguageTag("Dj");
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 63;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 528;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("ny", "", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(byte0, "Null 'columnKeys' argument.", "Null 'columnKeys' argument.");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "Nul 'dataet argumnt.";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Nul 'dataet argumnt.");
      MockDate mockDate0 = new MockDate(169, 4, 4);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Float float0 = new Float((double) 4);
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, (Number) float0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[2][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.validateObject();
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockDate mockDate0 = new MockDate(29, 2432, (-716), 0, 2432);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 29, (-380.621663), (-380.621663), 2432, 2.0);
      mockDate0.getTime();
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-530), (-1929.816528), 0, 0, (-2127.247));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)36);
      Byte byte1 = new Byte((byte)36);
      linkedList0.add(byte1);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      linkedList0.add(byte0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-2347.56));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 947.6051975272;
      doubleArray0[1] = 947.6051975272;
      doubleArray0[3] = (double) 121;
      doubleArray0[4] = 947.6051975272;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[1] = doubleArray1[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-1));
      linkedList0.add(byte0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(43, 1334, 169);
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1334;
      doubleArray0[1] = (double) 1334;
      doubleArray0[2] = (double) 1334;
      doubleArray0[3] = (double) 1334;
      doubleArray0[4] = (double) 43;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) dateArray0[0], (Number) 43.0);
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      TimeZone.getTimeZone("");
      Locale.forLanguageTag("");
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      SerialDate.createInstance(2);
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 7, 7, 2, 1900, (-2.147483648E9));
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)14);
      Byte byte1 = new Byte((byte)2);
      linkedList1.add(byte1);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList1, true);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      String string0 = "5&o4))<`@eX9A2$'";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(43, 1334, 169);
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1334;
      doubleArray0[1] = (double) 1334;
      doubleArray0[2] = (double) 1334;
      doubleArray0[3] = (double) 1334;
      doubleArray0[4] = (double) 43;
      doubleArray0[5] = (double) 169;
      doubleArray0[6] = (double) 169;
      doubleArray0[7] = (double) 43;
      doubleArray0[8] = (double) 43;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("5&o4))<`@eX9A2$'", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, false);
      boolean boolean0 = true;
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 43);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 43, Size: 5
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (-653.4808157150784);
      doubleArray1[2] = 1900.0;
      doubleArray1[3] = 0.5;
      doubleArray1[4] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-925.81724);
      doubleArray2[3] = 1900.0;
      doubleArray2[5] = 0.5;
      doubleArray2[6] = (-30000.0);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SerialDate.createInstance(1014);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Stack<CategoryTableXYDataset> stack1 = new Stack<CategoryTableXYDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, false);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'dataset argumnt.", 2, 39);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Integer integer0 = new Integer(0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.clear();
      Day day0 = new Day();
      defaultKeyedValuesDataset0.setValue((Comparable) day0, (Number) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) integer0, Double.POSITIVE_INFINITY);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Null 'dataset argumnt.", (KeyedValues) pieDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      Quarter quarter0 = new Quarter();
      Float float0 = new Float(2629.0);
      Byte byte0 = new Byte((byte)0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte)0);
      linkedList0.add(byte0);
      TimeSeries timeSeries0 = new TimeSeries(byte1, "6a0 gj4&}(hG", "6a0 gj4&}(hG");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, linkedList0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      MockInstant.now();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("hJ{$w");
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, false);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, false);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)14);
      linkedList0.add(byte0);
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries(byte0, (String) null, (String) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, linkedList0, false);
      DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      double double0 = 10.0;
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
//      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(10.0, (-1076.763034813873));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'std' > 0.
//         //
//         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      vector0.add(xIntervalSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XIntervalSeriesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      System.setCurrentTimeMillis(2130L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2130L;
      doubleArray0[1] = (double) 2130L;
      doubleArray0[2] = (double) 2130L;
      doubleArray0[3] = (double) 2130L;
      doubleArray0[4] = (double) 2130L;
      doubleArray0[5] = (double) 2130L;
      doubleArray0[6] = (double) 2130L;
      doubleArray0[7] = (double) 2130L;
      doubleArray0[8] = (double) 2130L;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) 2130.0, (Number) 2130.0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) 2130.0, 2130.0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(2130.0, "", "");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(44, 44);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)14);
      linkedList0.add(byte0);
      TimeZone timeZone0 = TimeZone.getTimeZone("HN;F>iizG{HJ\"2");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) (byte)14);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 4515.9, 0.0, 1748.6, (-59.1302648), 0.0);
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, 0.0, (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem6;
      day0.getDayOfMonth();
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0);
      oHLCDataItemArray0[7] = oHLCDataItem7;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[3][6];
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      byte byte0 = (byte)104;
      Byte byte1 = new Byte((byte)104);
      linkedList0.add(byte1);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      double double0 = 1662.83;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      quarter0.toString();
      Float float0 = new Float((double) 4);
      int int0 = 3459;
      String string0 = "key";
      int int1 = 3124;
      int int2 = 274;
      int int3 = 2588;
      int int4 = 2149;
      int int5 = (-214);
      int int6 = 3136;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Null 'datasgt arguont.");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "Null 'dataset argumnt.";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Null 'dataset argumnt.");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Week week0 = new Week(0, (-3419));
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<Double>) week0;
      double[][] doubleArray0 = new double[0][2];
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockDate mockDate0 = new MockDate(29, 2432, (-716), 0, 2432);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 29, (-380.621663), (-380.621663), 2432, 2.0);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-530), (-1929.816528), 0, 0, (-2127.247));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)36);
      Byte byte1 = new Byte((byte)36);
      linkedList0.add(byte1);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Float float0 = new Float((double) 4);
      MockDate mockDate0 = new MockDate((-530), 4, 4, (-530), 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.0, 849.341, 2.0, 1662.83, 4);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2943.6226), 1662.83, 4, (-180.0), 849.341);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)36);
      Byte byte1 = new Byte((byte)0);
      linkedList0.add(byte1);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[0] = (double) 1;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1, 1, 4463.19329742, 1.0, 1.0, (-1472.4041));
      DatasetGroup datasetGroup0 = new DatasetGroup();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Null 'dataset argumnt.");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)60);
      Byte byte1 = new Byte((byte) (-105));
      linkedList0.add(byte1);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[] doubleArray0 = new double[3];
      Byte byte0 = new Byte((byte) (-105));
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte) (-114));
      Byte byte2 = new Byte((byte) (-114));
      linkedList1.add(byte2);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 9223372036854775807L);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 9223372036854775807L, 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 0.0, 9223372036854775807L);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-105));
      linkedList0.add((Byte) null);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList1, true);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Quarter quarter0 = new Quarter();
      Float float0 = new Float(10.0);
      Byte byte0 = new Byte((byte)48);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte)0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.add(byte0);
      TimeSeries timeSeries0 = new TimeSeries(byte0, "6a0 gj4&}(hG", "Requires 'start' < 'end'.");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, linkedList1, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)14);
      linkedList0.add(byte0);
      TimeSeries timeSeries0 = new TimeSeries(byte0, (String) null, (String) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, linkedList0, true);
      defaultMultiValueCategoryDataset0.getRangeBounds(true);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (byte)14);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      Float float0 = new Float((double) 4);
      Byte byte0 = new Byte((byte)0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (-1929.816528);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      stack0.add((CategoryTableXYDataset) null);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) stack0, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      int int0 = 1;
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2593.0);
      doubleArray1[1] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      int int1 = 1;
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) (-2593.0), 5863.248, 1);
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = null;
      Comparable<Instant>[] comparableArray1 = (Comparable<Instant>[]) Array.newInstance(Comparable.class, 3);
      // Undeclared exception!
//      try { 
        Week.parseWeek("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Could not find separator.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      String string0 = "\"1fYYZ/)";
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1, 1431, 1, 1, 1069.29512, 1431);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultCategoryDataset0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(3459, 1, (-1265.460956), 4, 1662.83, 4);
      MockDate mockDate0 = new MockDate();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-105));
      System.setCurrentTimeMillis((byte) (-91));
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      defaultTableXYDataset0.getDomainOrder();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 2044.749765404);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      Day.parseDay("/y0c?|)BBA");
      TimeZone.getDefault();
      Instant instant0 = MockInstant.ofEpochSecond((long) (-1341), (-2593L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2593L);
      doubleArray0[2] = (double) (-2593L);
      doubleArray0[3] = (double) (-1341);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2618.271502675377), 0.0, 78, 0.0);
      Number[] numberArray0 = new Number[1];
      numberArray0[0] = (Number) 0.0;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) instant0, (Number) (-2593.0));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "/y0c?|)BBA", (-2618.271502675377));
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Integer integer0 = new Integer(1);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.clear();
      defaultKeyedValuesDataset0.setValue((Comparable) "\"1fYYZ/)", (Number) integer0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) integer0, (double) 1);
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-1), (-4), 1);
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("4C/yMvVmyl", 2, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Integer integer0 = new Integer(2);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.clear();
      defaultKeyedValuesDataset0.insertValue(0, (Comparable) integer0, (double) 2);
      defaultKeyedValuesDataset0.setValue((Comparable) "4C/yMvVmyl", (Number) integer0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4C/yMvVmyl", 700.071564579);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
//         //
//         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Null 'dataset argumnt.");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      double[][] doubleArray0 = new double[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      boolean boolean0 = false;
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 4420);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, false);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\"1fYYZ/)", "\"1fYYZ/)", "\"1fYYZ/)");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("\"1fYYZ/)", (OHLCDataItem[]) null);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("PW%C4(Bcm");
      defaultKeyedValuesDataset0.setGroup(datasetGroup0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "\"1fYYZ/)", (-1.0));
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("4C/yMvVmyl", 2, 2);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Integer integer0 = new Integer(2);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.clear();
      defaultKeyedValuesDataset0.setValue((Comparable) "4C/yMvVmyl", (Number) integer0);
      matrixSeries0.isEmpty();
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'dataset' argument.", 3049, 2);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) "Null 'dataset' argument.", number0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Null 'dataset' argument.", (-2770.38206));
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) null, range0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate();
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2072.44), 1131.4696799, 193, mockDate0);
      day0.previous();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 193, 193);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (Comparable) "gv=");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Null 'dataset argumnt.");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)60);
      Byte byte1 = new Byte((byte) (-105));
      linkedList0.add(byte1);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, false);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[2][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      stack0.add(categoryTableXYDataset0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)75);
      linkedList1.add(byte0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      Float float0 = new Float(1.0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      Byte byte0 = new Byte((byte)94);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte)6);
      linkedList0.add(byte0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, false);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, linkedList0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index outside valid range.
//         //
//         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'dataset' argument.", 3049, 2);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      SynthProgressBarUI synthProgressBarUI0 = new SynthProgressBarUI();
      matrixSeriesCollection0.hasListener(synthProgressBarUI0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      // Undeclared exception!
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'dataset' argument.", 3049, 2);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) "Null 'dataset' argument.", number0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Null 'dataset' argument.", (-2770.38206));
      // Undeclared exception!
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1, 1, 4463.19329742, 1.0, 1.0, (-1472.4041));
      DatasetGroup datasetGroup0 = new DatasetGroup();
      Byte byte0 = new Byte((byte) (-105));
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte) (-105));
      linkedList1.add(byte1);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList1, true);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-68));
      linkedList0.add(byte0);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (byte) (-68);
      doubleArray1[1] = (double) 2314;
      doubleArray1[2] = (double) (byte) (-68);
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = (double) (byte) (-68);
      doubleArray1[5] = (double) (byte) (-68);
      defaultMultiValueCategoryDataset0.add(linkedList0, 2314.0, (-68.0));
      doubleArray1[6] = (double) (byte) (-68);
      doubleArray1[7] = (double) (byte) (-68);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1, 1, 4463.19329742, 1.0, 1.0, (-1472.4041));
      DatasetGroup datasetGroup0 = new DatasetGroup();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(linkedList0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-1));
      Byte byte1 = new Byte((byte) (-100));
      linkedList0.add(byte1);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MatrixSeries matrixSeries0 = new MatrixSeries("", 2, 3049);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) "", number0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "", 3980.697165114);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'dataset' argument.", 3066, 2);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) "Null 'dataset' argument.", (Number) null);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Null 'dataset' argument.", (-2770.38206));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("4C/yMvVmyl", 2, 2);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Integer integer0 = new Integer(2);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.clear();
      defaultKeyedValuesDataset0.setValue((Comparable) "4C/yMvVmyl", (Number) integer0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4C/yMvVmyl", 700.071564579);
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[3][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) double0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Null 'dataset argumnt.");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      timePeriodValues0.setNotify(true);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-420.9856586);
      doubleArray0[2] = (-1742.876646890817);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-420.9856586));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) xYSeriesCollection0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      Predicate<Object> predicate3 = predicate2.negate();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      linkedList0.add(defaultTableXYDataset0);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      linkedList0.removeIf(predicate4);
      TimeSeries timeSeries0 = new TimeSeries((-1742.876646890817), "", "Duplicate items in 'rowKeys'.");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, (Range) null, true);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 11);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'dataset' argument.", 3049, 2);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) "Null 'dataset' argument.", number0);
      Stack<DefaultBoxAndWhiskerXYDataset> stack0 = new Stack<DefaultBoxAndWhiskerXYDataset>();
      boolean boolean0 = true;
      // Undeclared exception!
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(842, hour0);
      hour0.getMiddleMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, (String) null, "org.jfree.data.general.DefaultKeyedValues2DDataset");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("org.jfree.data.general.DefaultKeyedValues2DDataset", (OHLCDataItem[]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(true);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Float float0 = new Float(1.0);
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-220.7);
      doubleArray1[2] = (double) 1487;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 2123.18;
      doubleArray1[5] = (-420.9856586);
      doubleArray1[6] = (-420.9856586);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      int int0 = 21;
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 21, 21);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      linkedList0.add(byte0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index outside valid range.
//         //
//         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(false);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1487, 1487, (-2618.271502675377), 6.283185307179586, 6.283185307179586, 6.283185307179586);
      defaultHeatMapDataset0.getGroup();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      LinkedList<XYDatasetTableModel> linkedList0 = new LinkedList<XYDatasetTableModel>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, false);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      double[][] doubleArray0 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, false);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      Float float0 = new Float(1.0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(3459, 1, 1.0, 4, 1662.83, 4);
      quarter0.getEnd();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-105));
      linkedList0.add(byte0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(842, hour0);
      hour0.getMiddleMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, (String) null, "org.jfree.data.general.DefaultKeyedValues2DDataset");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("org.jfree.data.general.DefaultKeyedValues2DDataset", (OHLCDataItem[]) null);
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[2][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      stack0.add(categoryTableXYDataset0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      Vector<Byte> vector0 = new Vector<Byte>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(true);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Float float0 = new Float(1.0);
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-220.7);
      doubleArray1[2] = (double) 1487;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 2123.18;
      doubleArray1[5] = (-420.9856586);
      doubleArray1[6] = (-420.9856586);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      stack0.add(categoryTableXYDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-49));
      linkedList0.add(byte0);
      TimeZone timeZone0 = TimeZone.getTimeZone("NOID");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) (byte) (-49));
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[2][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultIntervalCategoryDataset1);
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      int int0 = 50;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 50);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      vector0.add(integer0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, vector0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index outside valid range.
//         //
//         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultKeyedValuesDataset0.setValue((Comparable) integer0, (Number) integer0);
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'dataset' argument.", 3049, 2);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) "Null 'dataset' argument.", number0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "Null 'dataset' argument.";
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'dataset' argument.", 3049, 2);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) "Null 'dataset' argument.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 745.8;
      doubleArray1[1] = 745.8;
      doubleArray1[2] = (-1929.816528);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = (-420.9856586);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      stack0.add((CategoryTableXYDataset) null);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1576, 1576, 1576, 1576, 1576, 1576);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[21];
      MockInstant.now();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      defaultHighLowDataset0.getDomainOrder();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, true);
      Range range0 = new Range(1576, 1576);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("hJ{$w");
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, false);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(159);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2818, 2818, timeZone0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("kPRW;%");
      Object object0 = new Object();
      zoneOffset0.equals(object0);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList1, range0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, (double) 4);
      Number[][] numberArray0 = new Number[0][4];
      Number[][] numberArray1 = new Number[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      double[][] doubleArray0 = new double[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      stack0.spliterator();
      stack0.add((CategoryTableXYDataset) null);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, (List) stack0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      boolean boolean0 = true;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Number[][] numberArray0 = new Number[0][4];
      Number[][] numberArray1 = new Number[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      Float float0 = new Float(1.0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(3459, 1, 1.0, 1487, 1662.83, 1487);
      defaultHeatMapDataset0.equals(jDBCPieDataset0);
      quarter0.getEnd();
      defaultHeatMapDataset0.getGroup();
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      Quarter quarter1 = new Quarter();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-105));
      linkedList0.add(byte0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      defaultBoxAndWhiskerXYDataset0.hasListener(matrixSeriesCollection0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      LinkedList<XYDatasetTableModel> linkedList1 = new LinkedList<XYDatasetTableModel>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList1, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 100);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      XYSeries xYSeries0 = new XYSeries(1.0, true, false);
      xYSeries0.addOrUpdate(Double.NEGATIVE_INFINITY, (-67.0));
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 627.1855, 627.1855, 1, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) "\"1fYYZ/)");
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "\"1fYYZ/)", (KeyedValues) pieDataset0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex(0.0);
      Range range0 = new Range((-1), (-1));
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      MockDate mockDate0 = new MockDate((-1256L));
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second((-2930), minute0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) second0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      IntervalXYDelegate intervalXYDelegate1 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 1;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Number[][] numberArray0 = new Number[0][4];
      Number[][] numberArray1 = new Number[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      Float float0 = new Float(1.0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(3459, 1, 1.0, 1487, 1662.83, 1487);
      quarter0.getEnd();
      defaultHeatMapDataset0.getGroup();
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      Quarter quarter1 = new Quarter();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate();
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(120, 1, 1, 10.0, 10.0, 10.0);
      DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      quarter0.getEnd();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-105));
      linkedList0.add(byte0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) fixedMillisecond0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      MockDate mockDate0 = new MockDate(32, 32, 0, 0, (-1));
      Minute minute0 = new Minute(mockDate0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(minute0);
      DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0);
      minute0.getMiddleMillisecond();
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (-807));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      MockDate mockDate0 = new MockDate(32, 32, 0, 0, (-1));
      Minute minute0 = new Minute(mockDate0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(minute0);
      DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.clone();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("Cj&v&CIk{!f2l;", 1, 1);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Cj&v&CIk{!f2l;");
      double[][] doubleArray0 = new double[2][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Cj&v&CIk{!f2l;", "", doubleArray0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 1);
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 1);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      jDBCXYDataset0.close();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 121;
      doubleArray0[1] = 947.6051975272;
      doubleArray0[3] = (double) 121;
      doubleArray0[4] = 947.6051975272;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      defaultIntervalCategoryDataset0.getColumnKeys();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, arrayList0, false);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      Stack<CategoryTableXYDataset> stack1 = new Stack<CategoryTableXYDataset>();
      stack1.add((CategoryTableXYDataset) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      Day.parseDay("/y0c?|)BBA");
      TimeZone.getDefault();
      MockInstant.ofEpochSecond((long) (-1341), (-2593L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2593L);
      doubleArray0[2] = (double) (-2593L);
      doubleArray0[3] = (double) (-1341);
      doubleArray0[4] = (double) (-1341);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2618.271502675377), 0.0, 78, (-1341.0));
      Number[] numberArray0 = new Number[1];
      numberArray0[0] = (Number) (-1341.0);
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 0.0;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) (-1341.0), (KeyedValues) defaultKeyedValuesDataset0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray0[0] = numberArray1;
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(842, hour0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, (String) null, "org.jfree.data.general.DefaultKeyedValues2DDataset");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex("\"1fYYZ/)");
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 121, 121);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(timeSeriesCollection0, timeSeriesCollection0, datasetChangeInfo0);
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      intervalXYDelegate0.setAutoWidth(false);
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 947.6051975272;
      doubleArray0[1] = 947.6051975272;
      doubleArray0[2] = 947.6051975272;
      doubleArray0[3] = (double) 121;
      doubleArray0[4] = 947.6051975272;
      doubleArray0[5] = (double) 121;
      doubleArray0[6] = 121.0;
      doubleArray0[7] = (double) 121;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) 947.6051975272, (KeyedValues) defaultKeyedValuesDataset0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("4C/yMvVmyl", 2, 2);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 2);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      JDBCXYDataset jDBCXYDataset1 = (JDBCXYDataset)jDBCXYDataset0.clone();
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Float float0 = new Float(1.0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1487, 1487, (-2618.271502675377), 6.283185307179586, 6.283185307179586, 6.283185307179586);
      defaultHeatMapDataset0.getGroup();
      LineFunction2D lineFunction2D0 = new LineFunction2D(3528.588, (-1.7976931348623157E308));
      Long long0 = new Long(1487);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(long0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 11, 11);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      Range range1 = Range.expandToInclude(range0, 11);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(jDBCXYDataset1);
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, true);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset1, (List) linkedList0, range1, true);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) double0, (-1.7976931348623157E308), (-2225));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, 0.0, (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem5;
      day0.getDayOfMonth();
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0);
      oHLCDataItemArray0[7] = oHLCDataItem6;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1748.6;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 9223372036854775807L;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-521.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 1748.6;
      doubleArray2[2] = (-59.1302648);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-59.1302648);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 4515.9;
      doubleArray3[2] = (double) 9223372036854775807L;
      doubleArray3[3] = (double) 9223372036854775807L;
      doubleArray3[4] = (-521.7);
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 1748.6;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-2.147483648E9);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-2033.89);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 4515.9;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1748.6;
      doubleArray5[3] = (-2.147483648E9);
      doubleArray5[4] = Double.NEGATIVE_INFINITY;
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray5[6] = (-59.1302648);
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = (double) 14;
      doubleArray6[4] = Double.NEGATIVE_INFINITY;
      doubleArray6[5] = (-521.7);
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 2183.28;
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "TH`i,xf]sbR$&RK5?", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(842, hour0);
      hour0.getMiddleMillisecond();
      String string0 = null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, (String) null, "org.jfree.data.general.DefaultKeyedValues2DDataset");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("org.jfree.data.general.DefaultKeyedValues2DDataset", (OHLCDataItem[]) null);
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 121, 121);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      jDBCXYDataset0.clone();
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 947.6051975272;
      doubleArray0[1] = 947.6051975272;
      doubleArray0[3] = (double) 121;
      doubleArray0[4] = 947.6051975272;
      doubleArray0[5] = (double) 121;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) 947.6051975272, (KeyedValues) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowData' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      Date[] dateArray0 = new Date[1];
      ((DefaultCategoryDataset) categoryDataset0).getColumnIndex("");
      MockDate mockDate0 = new MockDate(43, 1334, 169);
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1334;
      doubleArray0[1] = (double) 1334;
      doubleArray0[2] = (double) 1334;
      doubleArray0[3] = (double) 1334;
      doubleArray0[4] = (double) 43;
      doubleArray0[5] = (double) 169;
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) 1334.0, (KeyedValues) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowData' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, true);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.fireSelectionEvent();
      DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (KeyToGroupMap) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(true);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Float float0 = new Float(1.0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1487, 1487, (-2618.271502675377), 6.283185307179586, 6.283185307179586, 6.283185307179586);
      defaultHeatMapDataset0.getGroup();
      LineFunction2D lineFunction2D0 = new LineFunction2D(3528.588, (-1.7976931348623157E308));
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-2.147483648E9), 6.283185307179586, 16, float0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      LinkedList<XYDatasetTableModel> linkedList0 = new LinkedList<XYDatasetTableModel>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.createCategoryDataset((String) null, "5&o4))<`@eX9A2$'", numberArray0);
      System.setCurrentTimeMillis(1487);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 745.8;
      doubleArray1[1] = 1131.4696799;
      doubleArray1[2] = (-1929.816528);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = (-420.9856586);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      stack0.add((CategoryTableXYDataset) null);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      defaultIntervalCategoryDataset0.getRowKey(1);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      stack0.add((CategoryTableXYDataset) null);
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      Range.expand(range0, 1.0, 1.0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range1, false);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Vector<Integer> vector0 = new Vector<Integer>();
      DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, vector0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, 1662.83);
      Number[][] numberArray0 = new Number[0][4];
      Number[][] numberArray1 = new Number[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      Float float0 = new Float(1.0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 1, 1);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      defaultIntervalCategoryDataset0.validateObject();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("org.jfree.data.KeyedObjects2D", "org.jfree.data.KeyedObjects2D", (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Null 'dataset argumnt.");
      MockDate mockDate0 = new MockDate(1511L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 4.0, 4.0, 1511L, (-517.3180175388), 1511L);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 315.7348784, (-195.37140034224), 1511L, (-111.84923686), 0.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-50));
      Byte byte1 = new Byte((byte) (-50));
      linkedList0.add(byte1);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      stack0.add(categoryTableXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 1, 266);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(matrixSeries0, seriesChangeInfo0);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      ChronoField chronoField0 = ChronoField.DAY_OF_MONTH;
      Instant instant0 = MockInstant.ofEpochSecond((-73L));
      Date date0 = Date.from(instant0);
      Day day0 = new Day(date0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 1045);
      DatasetUtilities.createCategoryDataset((Comparable) day0, (KeyedValues) categoryToPieDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Vector<Integer> vector0 = new Vector<Integer>();
      DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, vector0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, 1662.83);
      Number[][] numberArray0 = new Number[0][4];
      Number[][] numberArray1 = new Number[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray1);
      Float float0 = new Float(1.0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 1, 1);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(quarter0);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) jDBCPieDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)64);
      Byte byte1 = new Byte((byte) (-49));
      linkedList0.add(byte0);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1187.29);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1187.29);
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-1187.29);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-1187.29);
      doubleArray4[1] = (-1187.29);
      doubleArray4[2] = (-1187.29);
      doubleArray4[3] = (-1187.29);
      doubleArray0[3] = doubleArray4;
      defaultIntervalCategoryDataset0.hasListener((EventListener) null);
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-1187.29);
      doubleArray5[1] = (-1187.29);
      doubleArray5[2] = (-1187.29);
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      Vector<ChronoLocalDate> vector0 = new Vector<ChronoLocalDate>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) vector0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Week week0 = new Week(1, 54);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      Float float0 = new Float((double) 54);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent("[2Sv}\"c@9I{}");
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(4, 1, 4463.19329742, 1.0, 1.0, (-1472.4041));
      defaultHeatMapDataset0.getGroup();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(linkedList0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      JDBCXYDataset jDBCXYDataset1 = (JDBCXYDataset)jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(true);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Float float0 = new Float(1.0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1487, 1487, (-2646.5823267487576), 6.283185307179586, 6.283185307179586, 6.283185307179586);
      defaultHeatMapDataset0.getGroup();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(float0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset1, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate(9223372036854775807L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.1474836459096842E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1203.4), 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 4515.9, 0.0, 1748.6, (-59.1302648), 0.0);
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, 0.0, (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem6;
      oHLCDataItemArray0[7] = oHLCDataItem1;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(vectorSeriesCollection0, (-1203.4));
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("SO^:PA,g[:KE# ", "SO^:PA,g[:KE# ", numberArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 273);
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 273;
      doubleArray1[1] = (-1996.170955918);
      doubleArray1[2] = (double) 273;
      doubleArray1[3] = (double) 273;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("SO^:PA,g[:KE# ", "N", doubleArray0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset1, 2901.528518479);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      TimeSeries timeSeries0 = new TimeSeries("", "", "org.jfree.data.general.DatasetUtilities");
      SimpleTimeZone simpleTimeZone0 = null;
//      try {
        simpleTimeZone0 = new SimpleTimeZone((-4377), "org.jfree.data.xy.DefaultWindDataset", (-4377), (-4377), (-4377), 1842, (-2254), (-2254), (-2254), 30);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal start month -4377
//         //
//         verifyException("java.util.SimpleTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(true);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Float float0 = new Float(1.0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1487, 1487, (-2618.271502675377), 6.283185307179586, 6.283185307179586, 6.283185307179586);
      defaultHeatMapDataset0.getGroup();
      LineFunction2D lineFunction2D0 = new LineFunction2D(3528.588, (-1.7976931348623157E308));
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-2.147483648E9), 6.283185307179586, 16, float0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      LinkedList<XYDatasetTableModel> linkedList0 = new LinkedList<XYDatasetTableModel>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, false);
      DatasetUtilities.createCategoryDataset((String) null, "5&o4))<`@eX9A2$'", numberArray0);
      System.setCurrentTimeMillis(1487);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNull(number0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, (double[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      Comparable<DynamicTimeSeriesCollection>[] comparableArray0 = (Comparable<DynamicTimeSeriesCollection>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<DynamicTimeSeriesCollection>) quarter0;
      Minute minute0 = new Minute();
      comparableArray0[1] = (Comparable<DynamicTimeSeriesCollection>) minute0;
      comparableArray0[2] = (Comparable<DynamicTimeSeriesCollection>) regularTimePeriod0;
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 59;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 4;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 4;
      doubleArray2[8] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 4;
      doubleArray3[5] = (double) 59;
      doubleArray3[6] = (double) 4;
      doubleArray3[7] = (-935.6172);
      doubleArray3[8] = 642.712262681;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = 642.712262681;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-935.6172);
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = (double) 4;
      doubleArray5[3] = (double) 4;
      doubleArray5[4] = (double) 4;
      doubleArray5[5] = 642.712262681;
      doubleArray5[6] = (double) 4;
      doubleArray5[7] = 642.712262681;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = (double) 4;
      doubleArray6[3] = 642.712262681;
      doubleArray6[4] = (double) 59;
      doubleArray6[5] = (double) 0;
      doubleArray6[6] = (double) 4;
      doubleArray6[7] = 642.712262681;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (double) 1;
      doubleArray7[1] = (-1.86);
      doubleArray7[2] = (double) 4;
      doubleArray7[3] = (double) 1;
      doubleArray7[4] = (double) 1;
      doubleArray7[5] = (double) 59;
      doubleArray7[6] = (double) 59;
      doubleArray7[7] = 642.712262681;
      doubleArray7[8] = (double) 1;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      doubleArray9[0] = (double) 1;
      doubleArray9[1] = 642.712262681;
      doubleArray9[2] = (double) 4;
      doubleArray9[3] = (-1.86);
      doubleArray9[4] = (-1.86);
      doubleArray9[5] = (-935.6172);
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 745.8;
      doubleArray1[1] = 1131.4696799;
      doubleArray1[2] = (-1929.816528);
      doubleArray1[3] = 745.8;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = (-420.9856586);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      stack0.add((CategoryTableXYDataset) null);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), 4515.9);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1203.4), 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 4515.9, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 4515.9, 0.0, 1748.6, (-59.1302648), 0.0);
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, 0.0, (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem6;
      oHLCDataItemArray0[7] = oHLCDataItem1;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(vectorSeriesCollection0, (-1203.4));
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.NaN);
      Year year0 = new Year(1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) year0, (double) (-9999));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1.0));
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(true);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Float float0 = new Float(1.0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1487, 1487, (-2618.271502675377), 6.283185307179586, 6.283185307179586, 6.283185307179586);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      defaultIntervalCategoryDataset0.getColumnIndex(float0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.REMOVE;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 121, 121);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 947.6051975272;
      doubleArray0[1] = 947.6051975272;
      doubleArray0[3] = (double) 121;
      doubleArray0[4] = 947.6051975272;
      doubleArray0[5] = (double) 121;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = Byte.valueOf((byte) (-68));
      linkedList0.add(byte0);
      double[][] doubleArray0 = new double[7][1];
      defaultMultiValueCategoryDataset0.add(linkedList0, (byte) (-68), (byte) (-68));
      linkedList0.add(byte0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(linkedList0, byte0, byte0);
      linkedList0.add(byte0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add(byte0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(linkedList0, byte0, byte0);
      linkedList0.add(byte0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      Day.parseDay("/y0c?|)BBA");
      TimeZone.getDefault();
      MockInstant.ofEpochSecond((long) (-1341), (-2593L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2593L);
      doubleArray0[2] = (double) (-2593L);
      doubleArray0[3] = (double) (-1341);
      doubleArray0[4] = (double) (-1341);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2618.271502675377), 0.0, 78, (-1341.0));
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) (-1341.0);
      Number[] numberArray2 = new Number[6];
      numberArray2[0] = (Number) 0.0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = (Number) (-1341.0);
      numberArray2[3] = (Number) 0.0;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      numberArray2[4] = (Number) integer0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      defaultIntervalCategoryDataset0.validateObject();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1rYr/)");
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-472.7));
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("kPRW;%");
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) xYSeriesCollection0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      linkedList0.removeIf(predicate1);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      LinkedList<XYDatasetTableModel> linkedList1 = new LinkedList<XYDatasetTableModel>();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) linkedList1, true);
      stack0.add((CategoryTableXYDataset) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("\"1fYYZ/)");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      defaultCategoryDataset0.setValue(327.085210636, (Comparable) "5&o4))<`@eX9A2$'", (Comparable) "5&o4))<`@eX9A2$'");
      Millisecond millisecond0 = new Millisecond();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      defaultCategoryDataset0.clone();
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.REMOVE;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 121, 121);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 947.6051975272;
      doubleArray0[1] = 947.6051975272;
      doubleArray0[3] = (double) 121;
      doubleArray0[4] = 947.6051975272;
      doubleArray0[5] = (double) 121;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 4515.9, 0.0, 1748.6, (-59.1302648), 0.0);
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, 0.0, (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem6;
      day0.getDayOfMonth();
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0);
      oHLCDataItemArray0[7] = oHLCDataItem7;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      TimeZone.getDefault();
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-919L);
      doubleArray1[1] = (double) (-919L);
      doubleArray1[2] = (double) (-919L);
      doubleArray1[3] = (double) (-2593L);
      doubleArray0[2] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) (-2593L);
      doubleArray2[1] = (double) (-919L);
      doubleArray2[2] = (double) (-919L);
      doubleArray2[3] = (double) 12L;
      doubleArray2[4] = (double) (-919L);
      doubleArray2[5] = (double) (-2593L);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SerialDate.createInstance(23);
      defaultIntervalCategoryDataset0.getColumnIndex((-919.0));
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-919.0));
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, keyToGroupMap0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SerialDate serialDate0 = SerialDate.createInstance(7);
      SerialDate.getNearestDayOfWeek(3, serialDate0);
      defaultIntervalCategoryDataset0.getColumnIndex(serialDate0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, range0, false);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(43, 1334, 169);
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1334;
      doubleArray0[1] = (double) 1334;
      doubleArray0[2] = (double) 1334;
      doubleArray0[3] = (double) 1334;
      doubleArray0[4] = (double) 43;
      doubleArray0[5] = (double) 169;
      doubleArray0[6] = (double) 169;
      doubleArray0[7] = (double) 43;
      doubleArray0[8] = (double) 43;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("5&o4))<`@eX9A2$'", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(1334.0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) vector0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex(1.0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      JDBCXYDataset jDBCXYDataset1 = (JDBCXYDataset)jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(true);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Float float0 = new Float(1.0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1487, 1487, (-2646.5823267487576), 6.283185307179586, 6.283185307179586, 6.283185307179586);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(float0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset1, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      JDBCXYDataset jDBCXYDataset1 = (JDBCXYDataset)jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(true);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Float float0 = new Float(1.0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1487, 1487, (-2618.271502675377), 6.283185307179586, 6.283185307179586, 6.283185307179586);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1487);
      defaultHeatMapDataset0.addChangeListener(categoryToPieDataset0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset1, 1.0);
      defaultHeatMapDataset0.removeChangeListener(xYBarDataset0);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.REMOVE;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) double0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) "\"1fYYZ/)");
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      JDBCXYDataset jDBCXYDataset1 = (JDBCXYDataset)jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(true);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Float float0 = new Float(1.0);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1487, 1487, (-2618.271502675377), 6.283185307179586, 6.283185307179586, 6.283185307179586);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(float0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset1, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex(1.0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      TableXYDataset tableXYDataset0 = null;
      int int0 = 1070;
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "69NPK>", true);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ArrayList<String> arrayList0 = new ArrayList<String>(set0);
      arrayList0.add("69NPK>");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      linkedList0.add(defaultBoxAndWhiskerCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-829));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-829);
      doubleArray0[1] = (double) (-829);
      doubleArray0[2] = (double) (-829);
      doubleArray0[3] = (double) (-829);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      List<XYIntervalSeriesCollection> list0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYTaskDataset0, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Null 'dataset argumnt.");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Vector<Integer> vector0 = new Vector<Integer>();
      DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, vector0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Quarter quarter0 = new Quarter();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, 1662.83);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) quarter0, 1453.6, 4);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) quarter0, 1.0);
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1662.83;
      doubleArray2[1] = 1662.83;
      doubleArray2[2] = (double) 4;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = 1662.83;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 4;
      doubleArray3[1] = 1662.83;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = 1453.6;
      doubleArray3[4] = (double) 1;
      doubleArray3[5] = (double) 1;
      doubleArray3[6] = 1.0;
      doubleArray3[7] = (double) 1;
      doubleArray3[8] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1662.83;
      doubleArray4[2] = (double) 4;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 1662.83;
      doubleArray5[1] = 1662.83;
      doubleArray5[2] = 1453.6;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = 1662.83;
      doubleArray0[4] = doubleArray5;
      DatasetUtilities.createCategoryDataset("", "", doubleArray0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex(1.0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "\"1fYYZ/)", 358.8361275320131, 1299);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1, 1, 4463.19329742, 1.0, 1.0, (-1472.4041));
      DatasetGroup datasetGroup0 = new DatasetGroup();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(linkedList0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) "\"1fYYZ/)");
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "\"1fYYZ/)", (-180.0), 1124);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) 1.0, 1.0, (-1690));
      DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) 1.0, (double) (-1690));
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 0);
      defaultBoxAndWhiskerCategoryDataset0.addChangeListener(categoryToPieDataset0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(45);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 1131);
      DatasetUtilities.createCategoryDataset((Comparable) zoneOffset0, (KeyedValues) pieDataset0);
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 45;
      doubleArray1[1] = (double) 1131;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray2);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2046.819409613116), 1.0, 305, zoneOffset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      doubleArray0[0] = (double) 1;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1, 1, 4463.19329742, 1.0, 1.0, (-1472.4041));
      DatasetGroup datasetGroup0 = new DatasetGroup();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-105));
      linkedList1.add(byte0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, 1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 745.8;
      doubleArray1[1] = 1131.4696799;
      doubleArray1[2] = (-1929.816528);
      doubleArray1[3] = (-1546.526952678153);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = (-420.9856586);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      stack0.add((CategoryTableXYDataset) null);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray1[0] = (Number) bigInteger0;
      int int0 = 305;
      bigInteger0.setBit(305);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      defaultIntervalCategoryDataset0.validateObject();
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.byteValueExact();
      bigInteger0.subtract(bigInteger1);
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      Range.expand(range0, 646.0, (-154.0));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, (List) list0, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Series index out of bounds
//         //
//         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      TimeZone.getDefault();
      MockInstant.ofEpochSecond((-919L), 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2593L);
      doubleArray0[1] = (double) (-919L);
      doubleArray0[2] = (double) (-919L);
      doubleArray0[3] = (double) (-919L);
      doubleArray0[4] = (double) (-2593L);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 699.2303825901321, 78, (-919.0));
      Byte byte0 = new Byte((byte) (-105));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add(byte0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      linkedList0.removeAll(hashSet0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 3094, 3094);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-2210), (-2210));
      SeriesChangeInfo seriesChangeInfo1 = new SeriesChangeInfo(seriesChangeType0, 2979, (-2210));
      seriesChangeEvent0.setSummary(seriesChangeInfo1);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      double double0 = (-4518.35);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-4518.35), (-4518.35));
      double double1 = 2542.563125699;
      int int0 = 0;
      String string0 = "Jb8j)Uz?ptl{@-$";
      Locale locale0 = Locale.TAIWAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
//      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("Jb8j)Uz?ptl{@-$", locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern character 'J'
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, false);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ<)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      double[][] doubleArray0 = new double[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex("\"1fYYZ<)");
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      Day.parseDay("/y0c?|)BBA");
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, 0);
      TimeZone.getDefault();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 1058, (-1341));
      SeriesChangeInfo seriesChangeInfo1 = new SeriesChangeInfo(seriesChangeType0, (-2765), 999);
      seriesChangeEvent0.setSummary(seriesChangeInfo1);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      Number[][] numberArrayArray0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("", "vaVxtcUd", (Number[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-2210), (-2210));
      SeriesChangeInfo seriesChangeInfo1 = new SeriesChangeInfo(seriesChangeType0, 2987, (-2210));
      seriesChangeEvent0.setSummary(seriesChangeInfo1);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("T+4i^_p=%8}Q|L<e", "i2`mikNH", (Number[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 1060, (-2210));
      SeriesChangeInfo seriesChangeInfo1 = new SeriesChangeInfo(seriesChangeType0, 1, 1060);
      SeriesChangeInfo seriesChangeInfo2 = new SeriesChangeInfo(seriesChangeType0, 2979, 1060);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(seriesChangeInfo1, seriesChangeInfo2);
      seriesChangeEvent0.setSummary(seriesChangeInfo2);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
//      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Week week0 = new Week(1, 54);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "Column key (", "[2Sv}\"c@9I{}");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(timePeriodValuesCollection0);
      Number[][] numberArray0 = new Number[8][7];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[8];
      numberArray4[0] = (Number) 53;
      week0.getYear();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      // Undeclared exception!
//      try { 
        defaultOHLCDataset0.getXDate(1, 806);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex(0.0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex(0.0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Quarter quarter0 = new Quarter();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Float float0 = new Float((-2.147483648E9));
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1, 1, 59, (-8491.972666407), 3459, (-1161.4));
      quarter0.getEnd();
      LineFunction2D lineFunction2D0 = new LineFunction2D(3459, 59);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 59, 2020.8266819792302, 1445, float0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      int int0 = 1;
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) xYSeriesCollection0);
      matrixSeriesCollection0.removeSeries(matrixSeries0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      linkedList0.removeIf(predicate1);
      intervalXYDelegate0.getDomainBounds(false);
      Vector<Short> vector0 = new Vector<Short>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      int int0 = 1;
      int int1 = 54;
      Week week0 = new Week(1, 54);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "Column key (", "[2Sv}\"c@9I{}");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(timePeriodValuesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      String string0 = "Tpq`P";
      String string1 = null;
      Number[][] numberArray0 = new Number[8][7];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[8];
      numberArray4[0] = (Number) 53;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      // Undeclared exception!
//      try { 
        defaultOHLCDataset0.getXDate(1, 806);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 121, 121);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      intervalXYDelegate0.setAutoWidth(false);
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 947.6051975272;
      doubleArray0[1] = 947.6051975272;
      doubleArray0[2] = 947.6051975272;
      doubleArray0[3] = (double) 121;
      doubleArray0[4] = 947.6051975272;
      doubleArray0[5] = (double) 121;
      doubleArray0[6] = 947.6051975272;
      doubleArray0[7] = (double) 121;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 16);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      boolean boolean0 = true;
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.jfree.data.category.DefaultCategoryDataset";
      stringArray0[1] = "TableOrder.BY_COLUMN";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "hnsL?MH>P2cKZ1}K6n<";
      stringArray0[5] = "org.jfree.data.general.DatasetUtilities";
      stringArray0[6] = "";
      stringArray0[7] = "You are attempting to add an observation for ";
      Number[][] numberArray0 = new Number[2][1];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
//      try { 
        taskSeriesCollection0.getStartValue(73, 73, Integer.MAX_VALUE);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 73, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 745.8;
      doubleArray0[1] = 1131.4696799;
      doubleArray0[2] = (-1929.816528);
      doubleArray0[3] = (-1546.526952678153);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-420.9856586);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-804));
      DatasetUtilities.createCategoryDataset((Comparable) 1131.4696799, (KeyedValues) pieDataset0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1546.526952678153), (-1546.526952678153), (-804), (-1929.816528));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, (-521.7), 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 4515.9, 0.0, 1748.6, (-59.1302648), 0.0);
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 0.0, 1748.6, 0.0, 0.0, (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem6;
      day0.getDayOfMonth();
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0);
      oHLCDataItem3.compareTo(oHLCDataItem6);
      oHLCDataItemArray0[7] = oHLCDataItem7;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) stack0, true);
      stack0.add((CategoryTableXYDataset) null);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1);
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) vector0, false);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate(9223372036854775807L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.1474836459096842E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1203.4), 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 4515.9, 0.0, 1748.6, (-59.1302648), 0.0);
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, 0.0, (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem6;
      oHLCDataItemArray0[7] = oHLCDataItem1;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      int int0 = (-942);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      // Undeclared exception!
//      try { 
        SerialDate.createInstance((-942), 46, 46);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The 'year' argument must be in range 1900 to 9999.
//         //
//         verifyException("org.jfree.data.time.SpreadsheetDate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      Day.parseDay("/y0c?|)BBA");
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Instant instant0 = MockInstant.ofEpochSecond((long) (-1341), (-2593L));
      Date date0 = Date.from(instant0);
      Month month0 = new Month(date0, timeZone0, locale0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2593L);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2593L);
      doubleArray0[3] = (double) (-1341);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-1333.7056837325065);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2618.271502675377), (-1333.7056837325065), 126, 0.0);
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      numberArray2[0] = (Number) 0.0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = (Number) (-1341.0);
      numberArray2[3] = (Number) 0.0;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      numberArray2[4] = (Number) integer0;
      numberArray2[5] = (Number) (-2593.0);
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'dataset' argument.", 3049, 2);
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) "Null 'dataset' argument.", number0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Null 'dataset' argument.", (-2770.38206));
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-2770.38206), (-261.806931));
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, 2, 1472.0, 3049, "Null 'dataset' argument.");
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 745.8;
      doubleArray1[1] = 1131.4696799;
      doubleArray1[2] = (-1929.816528);
      doubleArray1[3] = (-1546.526952678153);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = (-420.9856586);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1131.4696799, 45.0);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1546.526952678153), 0.0, 1664, (-1546.526952678153));
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 0);
      defaultBoxAndWhiskerCategoryDataset0.addChangeListener(categoryToPieDataset0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(45);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 1131);
      pieDataset0.addChangeListener(categoryToPieDataset0);
      DatasetUtilities.createCategoryDataset((Comparable) zoneOffset0, (KeyedValues) pieDataset0);
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 45;
      doubleArray1[1] = (double) 1131;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      categoryTableXYDataset0.add((Number) integer2, (Number) integer1, ">4BN", false);
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, ">4BN", false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-519));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 121, 121);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 947.6051975272;
      doubleArray0[1] = 947.6051975272;
      doubleArray0[2] = 947.6051975272;
      doubleArray0[3] = (double) 121;
      doubleArray0[4] = 947.6051975272;
      doubleArray0[5] = (double) 121;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 121);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-180));
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0);
      DatasetUtilities.createCategoryDataset((Comparable) zoneOffset0, (KeyedValues) pieDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 1339);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[2][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(80.0, 6.283185307179586);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      JTable.PrintMode jTable_PrintMode0 = JTable.PrintMode.NORMAL;
      MockDate mockDate0 = new MockDate(7, 244, 244, 244, 2);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 80.0, 1.0, 244, 80.0, 572.57);
      Number number0 = oHLCDataItem0.getVolume();
      defaultKeyedValuesDataset0.setValue((Comparable) jTable_PrintMode0, number0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) mockDate0, (double) 244, (-4948));
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate(9223372036854775807L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 4515.9, 0.0, 1748.6, (-59.1302648), 0.0);
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, 0.0, (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem6;
      day0.getDayOfMonth();
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, 1.7976931348623157E308, 0.0, 0.0);
      oHLCDataItemArray0[7] = oHLCDataItem7;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) oHLCDataItem4, 1414.47210951272, 1391);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-832));
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-832);
      doubleArray1[1] = (double) (-832);
      doubleArray1[2] = (double) (-832);
      doubleArray1[3] = (double) (-832);
      doubleArray1[4] = (double) (-832);
      doubleArray1[5] = (double) (-832);
      doubleArray1[6] = (double) (-832);
      doubleArray1[7] = (double) (-832);
      doubleArray1[8] = (double) (-832);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (-832);
      doubleArray2[1] = (double) (-832);
      doubleArray2[2] = (double) (-832);
      doubleArray2[3] = (double) (-832);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Byp", doubleArray0);
      assertNotNull(categoryDataset0);
      
      DatasetUtilities.isEmptyOrNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TimeSeries timeSeries0 = new TimeSeries("", "", "org.jfree.data.general.DatasetUtilities");
      Byte byte0 = new Byte((byte) (-89));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add(byte0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-1));
      Byte byte1 = new Byte((byte) (-105));
      linkedList0.add(byte1);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      Stack<Double> stack0 = new Stack<Double>();
      timeTableXYDataset0.getDomainBounds(true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-357));
      defaultKeyedValues2DDataset0.getColumnCount();
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, (-823.0), 6092);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (-1571.8887127335847);
      doubleArray1[3] = 899.566;
      doubleArray1[4] = (-138.5);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1571.8887127335847);
      doubleArray2[1] = (-3568.93035);
      doubleArray2[2] = 899.566;
      doubleArray2[3] = (-138.5);
      doubleArray2[4] = (-138.5);
      doubleArray2[5] = (-138.5);
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-1571.8887127335847);
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.validateObject();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex(1.0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 0);
      defaultBoxAndWhiskerCategoryDataset0.addChangeListener(categoryToPieDataset0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(45);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 1131);
      DatasetUtilities.createCategoryDataset((Comparable) zoneOffset0, (KeyedValues) pieDataset0);
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 45;
      doubleArray1[1] = (double) 1131;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 45;
      doubleArray2[1] = (double) 45;
      doubleArray2[2] = (double) 45;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 45;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 1131;
      doubleArray4[1] = (double) 1131;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 45;
      doubleArray4[4] = (double) 0;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2320.0);
      doubleArray1[1] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = (-1830.3420105288274);
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = (-2320.0);
      doubleArray2[6] = (-2320.0);
      doubleArray2[7] = (-60.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-60.0);
      doubleArray3[1] = (-1830.3420105288274);
      doubleArray3[2] = Double.NaN;
      doubleArray3[3] = (-2320.0);
      doubleArray3[4] = (-2320.0);
      doubleArray3[5] = (-1830.3420105288274);
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-1830.3420105288274);
      doubleArray4[1] = (-2320.0);
      doubleArray4[2] = Double.NaN;
      doubleArray4[3] = (-1830.3420105288274);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      IntervalXYDelegate intervalXYDelegate1 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Year year0 = new Year(mockDate0, timeZone0);
      Quarter quarter0 = new Quarter(1, year0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset1);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      Day.parseDay("/y0c?|)BBA");
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Instant instant0 = MockInstant.ofEpochSecond((long) (-1341), (-2593L));
      Date date0 = Date.from(instant0);
      Month month0 = new Month(date0, timeZone0, locale0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2593L);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2593L);
      doubleArray0[3] = (double) (-1341);
      doubleArray0[4] = (double) (-1341);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-1333.7056837325065);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2618.271502675377), (-1333.7056837325065), 126, (-1341.0));
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) (-1341.0);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      numberArray2[0] = (Number) 0.0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = (Number) (-1341.0);
      numberArray2[3] = (Number) 0.0;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      numberArray2[4] = (Number) integer0;
      numberArray2[5] = (Number) (-2593.0);
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      int int0 = 1;
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) xYSeriesCollection0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      linkedList0.removeIf(predicate1);
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = null;
//      try {
        timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) null, (-1269.35254895));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.getItemCount();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      double[][] doubleArray0 = new double[3][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SerialDate serialDate0 = SerialDate.createInstance(7);
      SerialDate serialDate1 = SerialDate.getNearestDayOfWeek(7, serialDate0);
      defaultIntervalCategoryDataset0.getColumnIndex(serialDate1);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 121, 121);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 947.6051975272;
      doubleArray1[1] = 947.6051975272;
      doubleArray1[2] = 947.6051975272;
      doubleArray1[3] = (double) 121;
      doubleArray1[4] = 947.6051975272;
      doubleArray1[5] = (double) 121;
      doubleArray1[6] = 947.6051975272;
      doubleArray1[7] = (double) 121;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate(9223372036854775807L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, (-485.72550548), 9223372036854775807L, 9223372036854775807L);
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-1.0), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1.0));
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1610.964), 0.0, 10.0, Double.NEGATIVE_INFINITY, 0.0);
      Day.parseDay("lj3^=(vaoD`0p ");
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1365.459472, 6413.931796491109);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1164.094), Double.NaN, (-223), month0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'samples' > 1
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 121, 121);
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) stack0, true);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      Day day0 = null;
//      try {
        day0 = new Day(121, 121, 121);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The 'year' argument must be in range 1900 to 9999.
//         //
//         verifyException("org.jfree.data.time.SpreadsheetDate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("", "", (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      MockDate mockDate0 = new MockDate(149, 212, 212, 366, 366, 149);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 608.5681854564472, 0.0, 149, 212, Double.NEGATIVE_INFINITY);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, 1063.08986843, Double.POSITIVE_INFINITY, 366, Double.NEGATIVE_INFINITY);
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-2.147483648E9), 4848.756426266219, 4848.756426266219, (-209.573), Double.NEGATIVE_INFINITY);
      Day.parseDay("lj3^=(vaoD`0p ");
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, Double.NEGATIVE_INFINITY, 0, 149, oHLCDataItem0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "69NPK>", true);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ArrayList<String> arrayList0 = new ArrayList<String>(set0);
      arrayList0.add("69NPK>");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2849);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2849, 2849, timeZone0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 1);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MockDate mockDate0 = new MockDate(1398, 1398, 213, 213, 1398);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      serialDate0.toDate();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(119, (-1260), timeZone0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset1, 127);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)35);
      linkedList0.addLast(byte0);
      Byte byte1 = new Byte((byte)109);
      linkedList0.add(byte1);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(291, 291);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) xYSeriesCollection0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      linkedList0.removeIf(predicate1);
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      LinkedList<XYDatasetTableModel> linkedList1 = new LinkedList<XYDatasetTableModel>();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) linkedList1, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(122, 121);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-180));
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) zoneOffset0, (KeyedValues) pieDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(72.1976112344, 72.1976112344);
      int int0 = 0;
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(72.1976112344, 72.1976112344);
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-1296.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 72.1976112344;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1296.0);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 72.1976112344;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (-1296.0);
      doubleArray2[5] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (-1296.0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, (-1296.0), 0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 0.0, 9223372036854775807L);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-105));
      linkedList0.add((Byte) null);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("4C/yMvVmyl", 2, 2);
      boolean boolean0 = true;
      matrixSeries0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Integer integer0 = new Integer(2);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.clear();
      defaultKeyedValuesDataset0.setValue((Comparable) "4C/yMvVmyl", (Number) integer0);
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValuesDataset0.sortByValues(sortOrder0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4C/yMvVmyl", 700.071564579);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[19][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      Byte byte0 = new Byte((byte) (-105));
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.add(byte0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SeriesChangeType.CHANGE_KEY";
      String string0 = "org.jfree.data.xy.AbstractIntervalXYDataset";
      stringArray0[1] = "org.jfree.data.xy.AbstractIntervalXYDataset";
      stringArray0[2] = "_t{%`^d#j#`G";
      stringArray0[3] = "Null 'rowData' argument.";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "q4H6P*n";
      stringArray0[8] = "";
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(4, 1, 4463.19329742, 1.0, 1.0, (-1472.4041));
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, Double.POSITIVE_INFINITY, 1335.53402584, Double.NaN, 1, Double.POSITIVE_INFINITY);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(vectorSeriesCollection0, 1);
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range0, false);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-180));
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) zoneOffset0, (KeyedValues) pieDataset0);
      ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertNull(range0);
      
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, 1.5);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2849);
      Locale locale0 = Locale.ITALY;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      XYSeries xYSeries0 = new XYSeries(zoneOffset0, true);
      // Undeclared exception!
//      try { 
        xYSeries0.remove(2849);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2849, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = 92;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 92, 92);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 92, 92);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, 4);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      ZoneOffset.ofTotalSeconds((-1673));
      TimeZone.getDefault();
      int int1 = 7;
      // Undeclared exception!
//      try { 
        TimeZone.getTimeZone((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.TimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex(0.0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-832));
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-832);
      doubleArray1[1] = (double) (-832);
      doubleArray1[2] = (double) (-832);
      doubleArray1[3] = (double) (-832);
      doubleArray1[4] = (double) (-832);
      doubleArray1[5] = (double) (-832);
      doubleArray1[6] = (double) (-832);
      doubleArray1[7] = (double) (-832);
      doubleArray1[8] = (double) (-832);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (-832);
      doubleArray2[1] = (double) (-832);
      doubleArray2[2] = (double) (-832);
      doubleArray2[3] = (double) (-832);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "ClassContext", doubleArray0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 549.5);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getDomainUpperBound(false);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-180));
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0);
      defaultPieDataset0.setValue((Comparable) zoneOffset0, (-2613.29));
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) zoneOffset0, (KeyedValues) defaultPieDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ZoneOffset.ofTotalSeconds((-180));
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-180);
      doubleArray1[1] = (double) (-180);
      doubleArray1[2] = (-963.578864);
      doubleArray1[3] = (double) (-180);
      doubleArray1[4] = (double) (-180);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (-180);
      doubleArray2[1] = (double) (-180);
      doubleArray2[2] = (-963.578864);
      doubleArray2[3] = (double) (-180);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) (-180);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-420.9856586);
      doubleArray0[2] = (-1742.876646890817);
      doubleArray0[3] = 1131.4696799;
      doubleArray0[4] = 1644.90536;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2145800106, 2, timeZone0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-420.9856586);
      doubleArray0[2] = (-1742.876646890817);
      doubleArray0[3] = 1131.4696799;
      doubleArray0[4] = 1644.90536;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 2.0, 10, 10, 1131.4696799);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "", "uATHg%e(/K-KL]2", "");
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(Throwable e) {
//      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.clone();
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      numberArray1[0] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, Double.POSITIVE_INFINITY, 12, 0.0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "", "/7=(]X", "");
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(Throwable e) {
//      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate(9223372036854775807L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1203.4), 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 4515.9, 0.0, 1748.6, (-59.1302648), 0.0);
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, 0.0, (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem6;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, 1.7976931348623157E308, (-1203.4), 0.0);
      oHLCDataItemArray0[7] = oHLCDataItem7;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(vectorSeriesCollection0, (-1203.4));
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate(9223372036854775807L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      Day.parseDay("lj3^=(vaoD`0p ");
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, (-2.147483648E9));
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-59.1302648), (-1333.7056837325065), (-1341), month0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(72.1976112344, 72.1976112344);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 72.1976112344);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2849, 0, timeZone0);
      PieDataset pieDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) zoneOffset0, Double.NEGATIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, 1.5);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2849);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2849, 2849, timeZone0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) 2, Double.NEGATIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate(9223372036854775807L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1203.4), 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[2] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 4515.9, 0.0, 1748.6, (-59.1302648), 0.0);
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, 0.0, (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem6;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, 1.7976931348623157E308, (-1203.4), 0.0);
      oHLCDataItemArray0[7] = oHLCDataItem7;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SeriesChangeType.CHANGE_KEY";
      stringArray0[1] = "org.jfree.data.xy.AbstractIntervalXYDataset";
      stringArray0[2] = "_t{%`^d#j#`G";
      stringArray0[3] = "Null 'rowData' argument.";
      stringArray0[4] = "";
      stringArray0[5] = "Null 'columnKeys' argument.";
      stringArray0[6] = "";
      stringArray0[7] = "q4H6P*n";
      stringArray0[8] = "";
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultIntervalXYDataset0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(45);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 45, timeZone0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1.5);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-835));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
//      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-835), (-835), timeZone0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, 1.5);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2849);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2849, 2849, timeZone0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Byte byte0 = new Byte((byte) (-16));
      Long long0 = new Long(1397L);
      BigInteger bigInteger0 = BigInteger.TEN;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      BigInteger bigInteger1 = BigInteger.TEN;
      Long long1 = new Long(1397L);
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[1] = (Number) integer1;
      numberArray1[2] = (Number) (byte)0;
      numberArray1[3] = (Number) (byte)0;
      numberArray1[5] = (Number) long0;
      numberArray0[0] = numberArray1;
      Number[][] numberArray2 = new Number[1][8];
      numberArray2[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray2);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      int int0 = 1;
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 2347, (-2210));
      SeriesChangeInfo seriesChangeInfo1 = new SeriesChangeInfo((SeriesChangeType) null, 92, 2347);
      SeriesChangeInfo seriesChangeInfo2 = new SeriesChangeInfo(seriesChangeType0, 1060, 45);
      SeriesChangeEvent seriesChangeEvent0 = null;
//      try {
        seriesChangeEvent0 = new SeriesChangeEvent((Object) null, seriesChangeInfo1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null source
//         //
//         verifyException("java.util.EventObject", e);
//      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      boolean boolean0 = false;
      DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, false);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      boolean boolean1 = true;
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultIntervalXYDataset0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = null;
//      try {
        simpleTimeZone0 = new SimpleTimeZone((-965), "", (-965), 0, 2, 0, (-1577), (-1982), 0, (-2958), 0, (-965), (-2958));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal daylight saving value: -2958
//         //
//         verifyException("java.util.SimpleTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Number[][] numberArray0 = new Number[9][4];
      Number[] numberArray1 = new Number[5];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      numberArray1[0] = (Number) bigInteger0;
      Byte byte0 = new Byte((byte) (-97));
      numberArray1[1] = (Number) byte0;
      Long long0 = Long.getLong("", (long) (byte) (-97));
      numberArray1[2] = (Number) long0;
      BigInteger bigInteger1 = BigInteger.TEN;
      numberArray1[3] = (Number) bigInteger1;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      numberArray1[4] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) (byte) (-72);
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      numberArray3[0] = (Number) (byte) (-72);
      BigInteger bigInteger2 = BigInteger.TEN;
      numberArray3[1] = (Number) bigInteger2;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      numberArray4[0] = (Number) bigInteger2;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      numberArray5[0] = (Number) (byte) (-72);
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[8];
      numberArray6[0] = (Number) (byte) (-72);
      numberArray6[1] = (Number) bigInteger2;
      numberArray6[2] = (Number) (byte) (-72);
      numberArray6[3] = (Number) bigInteger0;
      numberArray6[4] = (Number) long0;
      numberArray6[5] = (Number) (byte) (-72);
      numberArray6[6] = (Number) byte0;
      numberArray6[7] = (Number) byte0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[8];
      numberArray7[0] = (Number) bigInteger1;
      numberArray7[1] = (Number) (byte)0;
      numberArray7[2] = (Number) (byte)0;
      numberArray7[3] = (Number) bigInteger2;
      numberArray7[4] = (Number) bigInteger0;
      Long long1 = new Long((-3042L));
      numberArray7[5] = (Number) long1;
      numberArray7[6] = (Number) bigInteger0;
      numberArray7[7] = (Number) bigInteger0;
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[3];
      numberArray8[0] = (Number) (byte) (-72);
      numberArray8[1] = (Number) bigInteger0;
      numberArray8[2] = (Number) long0;
      numberArray0[7] = numberArray8;
      Number[] numberArray9 = new Number[2];
      numberArray9[0] = (Number) bigInteger2;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      numberArray9[1] = (Number) integer1;
      numberArray0[8] = numberArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (int) (byte)0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-180));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      millisecond0.toString();
      Locale locale0 = JComponent.getDefaultLocale();
      locale0.toLanguageTag();
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      millisecond0.peg(calendar0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(millisecond0);
      DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.getRowIndex("Fri Feb 14 20:21:21 GMT 2014");
      double double0 = 2.0;
      // Undeclared exception!
//      try { 
        defaultCategoryDataset0.getRowKey(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("\"1fYYZ/)");
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      double[][] doubleArray1 = new double[1][4];
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-2593.0);
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      doubleArray1[0] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
      assertFalse(boolean0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
      assertEquals(0.0, number1);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.setTranspose(true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      TimeZone.setDefault(timeZone0);
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      boolean boolean0 = false;
      int int0 = 31;
      // Undeclared exception!
//      try { 
        arrayList0.subList(31, 31);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // toIndex = 31
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) 1);
      ZoneOffset.ofTotalSeconds((-1));
      Locale locale0 = Locale.ITALY;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      XYSeries xYSeries0 = new XYSeries("\"1fYYZ/)", true);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-832));
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-832);
      doubleArray1[1] = (double) (-832);
      doubleArray1[2] = (double) (-832);
      doubleArray1[3] = (double) (-832);
      doubleArray1[4] = (double) (-832);
      doubleArray1[5] = (double) (-832);
      doubleArray1[6] = (double) (-832);
      doubleArray1[7] = (double) (-832);
      doubleArray1[8] = (double) (-832);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (-832);
      doubleArray2[1] = (double) (-832);
      doubleArray2[2] = (double) (-832);
      doubleArray2[3] = (double) (-832);
      doubleArray0[1] = doubleArray2;
      DatasetUtilities.createCategoryDataset("", "Byp", doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      int int0 = 274;
      Minute minute0 = null;
//      try {
        minute0 = new Minute(274, (Hour) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'hour' argument.
//         //
//         verifyException("org.jfree.data.time.Minute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MockDate mockDate0 = new MockDate(1398, 1398, 213, 213, 1398);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      Date date0 = serialDate0.toDate();
      String string0 = "0q";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "0q");
      Second second0 = new Second(date0, simpleTimeZone0);
      defaultStatisticalCategoryDataset0.getColumnIndex(second0);
      defaultStatisticalCategoryDataset0.equals(defaultBoxAndWhiskerCategoryDataset0);
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      defaultStatisticalCategoryDataset0.setGroup(datasetGroup0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string1 = "/US/qY]bx";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "/US/qY]bx");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Float float0 = new Float(1.0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(float0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) float0, (-371.93));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(day0);
      Vector<Short> vector0 = new Vector<Short>();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 4);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      matrixSeriesCollection0.removeAllSeries();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0);
      matrixSeriesCollection0.addChangeListener(intervalXYDelegate0);
      boolean boolean0 = false;
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      Minute minute0 = null;
//      try {
        minute0 = new Minute(576, (Hour) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'hour' argument.
//         //
//         verifyException("org.jfree.data.time.Minute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(72.1976112344, 72.1976112344);
      String string0 = "lj3^=(vaoD`0p ";
      String string1 = "Null 'visibleSeriesKeys' argument.";
      String string2 = "";
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-1296.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 72.1976112344;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1296.0);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1296.0);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (-1296.0);
      doubleArray2[5] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (-1296.0);
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = 947.6051975272;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (-1296.0);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      System.setCurrentTimeMillis(2130L);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.clearSelection();
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-386.9020269561104);
      doubleArray0[1] = (double) 2130L;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-386.9020269561104);
      doubleArray1[1] = (double) 2130L;
      doubleArray1[2] = (double) 2130L;
      doubleArray1[4] = (-386.9020269561104);
      doubleArray1[5] = (-386.9020269561104);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.jfree.data.statistics.BoxAndWhiskerItem");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, simpleTimeZone0);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0, false);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("org.jfree.data.statistics.BoxAndWhiskerItem");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) defaultBoxAndWhiskerXYDataset0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      linkedList0.removeIf(predicate2);
      intervalXYDelegate0.getDomainBounds(false);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, (Range) null, false);
      Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 4);
      TimeSeriesDataItem timeSeriesDataItem0 = null;
//      try {
        timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) null, (-4023.0397));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      MockDate mockDate0 = new MockDate(32, 32, 0, 0, (-1));
      Minute minute0 = new Minute(mockDate0);
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(regularTimePeriod0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Day day0 = new Day();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate(9223372036854775807L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9223372036854775807L, (-59.1302648), (-59.1302648), (-59.1302648), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 9223372036854775807L, 0.0, 9223372036854775807L, 4515.9, 0.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-59.1302648), 9223372036854775807L, (-59.1302648), (-521.7), (-2.147483648E9));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1203.4), 4515.9, 0.0, 1748.6, (-521.7));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1748.6, 1748.6, 2183.28, 0.0, 9223372036854775807L);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 4515.9, 0.0, 1748.6, (-59.1302648), 0.0);
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 0.0, 2183.28, 0.0, 0.0, (-59.1302648));
      oHLCDataItemArray0[6] = oHLCDataItem6;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, (-59.1302648), 0.0, 1.7976931348623157E308, (-1203.4), 0.0);
      oHLCDataItemArray0[7] = oHLCDataItem7;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotNull(range0);
      assertEquals((-59.1302648), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      boolean boolean1 = true;
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultIntervalXYDataset0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = null;
//      try {
        simpleTimeZone0 = new SimpleTimeZone((-965), "", (-965), 0, 2, 0, (-1577), (-1982), 0, (-2958), 0, (-965), (-2958));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal daylight saving value: -2958
//         //
//         verifyException("java.util.SimpleTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(72.1976112344, 72.1976112344);
      Day.parseDay("lj3^=(vaoD`0p ");
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 0.0, 0.0, 0, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'seriesKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-420.9856586);
      doubleArray0[2] = (-1742.876646890817);
      doubleArray0[3] = 1131.4696799;
      doubleArray0[4] = 1644.90536;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-209.573), (-420.9856586), 10, (-420.9856586));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-749.6);
      doubleArray1[2] = (-2655.09788725);
      doubleArray1[3] = 2.0;
      doubleArray1[4] = (-47.94);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-2655.09788725);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (-227.2);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-47.94);
      doubleArray2[6] = (-749.6);
      doubleArray2[7] = (-2655.09788725);
      doubleArray2[8] = (-47.94);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-2655.09788725);
      doubleArray4[2] = (-2655.09788725);
      doubleArray4[3] = (-2655.09788725);
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (-47.94);
      doubleArray5[2] = (-2655.09788725);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-227.2);
      doubleArray6[2] = (-227.2);
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 2.0;
      doubleArray6[5] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-749.6);
      doubleArray7[1] = (-749.6);
      doubleArray7[2] = (-47.94);
      doubleArray7[3] = 3657.407;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = (-227.2);
      doubleArray7[6] = 2.0;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKey' argument.", "Null 'rowKey' argument.", doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-1198), (-233));
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1162.930017399776);
      doubleArray1[2] = 937.2;
      doubleArray1[3] = 1209.0;
      doubleArray1[4] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 937.2;
      doubleArray2[3] = (-1162.930017399776);
      doubleArray2[4] = 1209.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 2.0;
      doubleArray3[1] = 1209.0;
      doubleArray3[2] = 1209.0;
      doubleArray3[3] = 937.2;
      doubleArray3[4] = 1209.0;
      doubleArray3[5] = 2.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 937.2;
      doubleArray4[1] = 2701.0;
      doubleArray4[2] = 1209.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-1162.930017399776);
      doubleArray4[5] = 1209.0;
      doubleArray4[6] = 937.2;
      doubleArray4[7] = 2.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 2130.0;
      doubleArray5[1] = 1209.0;
      doubleArray5[2] = 937.2;
      doubleArray5[3] = (-1297.0);
      doubleArray5[4] = (-1162.930017399776);
      doubleArray5[5] = 937.2;
      doubleArray5[6] = 2701.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 2130.0;
      doubleArray6[1] = 2701.0;
      doubleArray6[2] = 2130.0;
      doubleArray6[3] = 1209.0;
      doubleArray6[4] = (-1297.0);
      doubleArray6[5] = 937.2;
      doubleArray6[6] = 2701.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 937.2;
      doubleArray7[1] = (-1297.0);
      doubleArray7[2] = (-1297.0);
      doubleArray7[3] = 1209.0;
      doubleArray7[4] = (-1162.930017399776);
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 1209.0;
      doubleArray7[7] = 1209.0;
      doubleArray7[8] = 2701.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 1209.0;
      doubleArray8[1] = 1209.0;
      doubleArray8[2] = (-107.98609);
      doubleArray8[3] = 937.2;
      doubleArray8[4] = 2.0;
      doubleArray8[5] = 114.718938216244;
      doubleArray8[6] = 2.0;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 4396);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      int int0 = (-180);
      defaultCategoryDataset0.fireSelectionEvent();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-180));
      DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      Quarter quarter0 = null;
//      try {
        quarter0 = new Quarter((-180), (-180));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Quarter outside valid range.
//         //
//         verifyException("org.jfree.data.time.Quarter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"1fYYZ/)", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeries0.addChangeListener(matrixSeriesCollection0);
      DefaultEditorKit.InsertContentAction defaultEditorKit_InsertContentAction0 = new DefaultEditorKit.InsertContentAction();
      matrixSeriesCollection0.hasListener(defaultEditorKit_InsertContentAction0);
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      Byte byte0 = new Byte((byte) (-87));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add(byte0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(byte0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5&o4))<`@eX9A2$'", "", numberArray0);
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "", "0~(a");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 121, 121);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[] doubleArray0 = new double[27];
      doubleArray0[0] = 947.6051975272;
      doubleArray0[1] = 947.6051975272;
      doubleArray0[2] = 947.6051975272;
      doubleArray0[3] = (double) 121;
      doubleArray0[4] = 947.6051975272;
      doubleArray0[5] = (double) 121;
      doubleArray0[21] = 121.0;
      doubleArray0[13] = (double) 121;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) 947.6051975272, (KeyedValues) defaultKeyedValuesDataset0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(true);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      int int0 = 1569;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 1569);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }
}
