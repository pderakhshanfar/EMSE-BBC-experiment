/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:27:10 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Panel;
import java.beans.PropertyChangeListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.EventListener;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import javax.swing.JLayeredPane;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.plaf.synth.SynthProgressBarUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.event.SeriesChangeListener;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetSelectionState;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(3922.0, 3922.0, "Category 3");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(3922.0, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3922.0, range0.getLowerBound(), 0.01);
      assertEquals(3922.0, range0.getCentralValue(), 0.01);
      assertEquals(3922.0, range0.getUpperBound(), 0.01);
      
      ArrayList<XYBarDataset> arrayList0 = null;
//      try {
        arrayList0 = new ArrayList<XYBarDataset>((-2926));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -2926
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(3922.0, 3922.0, "Category 3");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short)254);
      assertNotNull(short0);
      assertEquals((short)254, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[254]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short)254));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals("[254]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(3922.0, range0.getLowerBound(), 0.01);
      assertEquals(3922.0, range0.getCentralValue(), 0.01);
      assertEquals(3922.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short)254));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Short short0 = new Short((short)482);
      assertNotNull(short0);
      assertEquals((short)482, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[482]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(1967.0, 1967.0, "Null 'data' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[482]", stack0.toString());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(stack0.contains(short0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, ":$5gd,q");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, 966.62523, ">K^dsXHU0s,v.|\"");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = categoryTableXYDataset0.getEndY(0, 0);
      assertNotNull(number0);
      assertEquals(966.62523, number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Short short0 = new Short((short) (-3778));
      assertNotNull(short0);
      assertEquals((short) (-3778), (short)short0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(87.2281717697, 87.2281717697, "ategoby @");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(44.61408588485, range0.getCentralValue(), 0.01);
      assertEquals(87.2281717697, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(88.2281717697, range0.getUpperBound(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (int) (short) (-3778));
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(87.2281717697, range1.getCentralValue(), 0.01);
      assertEquals(87.2281717697, range1.getLowerBound(), 0.01);
      assertEquals(87.2281717697, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "Category 1");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1201.5939049058413), (-1201.5939049058413), "Category 1");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = categoryTableXYDataset0.getEndY(0, 0);
      assertNotNull(number0);
      assertEquals((-1201.5939049058413), number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short) (-283));
      assertNotNull(short0);
      assertEquals((short) (-283), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-283]", stack0.toString());
      assertTrue(stack0.contains((short) (-283)));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-283]", stack0.toString());
      assertEquals((-1202.0939049058413), range0.getLowerBound(), 0.01);
      assertEquals((-1201.5939049058413), range0.getCentralValue(), 0.01);
      assertEquals((-1201.0939049058413), range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short) (-283)));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Short short0 = Short.valueOf((short) (-1344));
      assertNotNull(short0);
      assertEquals((short) (-1344), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[-1344]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short) (-1344)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = defaultMultiValueCategoryDataset0.equals(short0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((short) (-1344)));
      
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (short) (-1344);
      doubleArray1[1] = (double) (short) (-1344);
      doubleArray1[2] = (double) (short) (-1344);
      doubleArray1[3] = (double) (short) (-1344);
      doubleArray1[4] = (double) (short) (-1344);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short) (-1344);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (double) (short) (-1344);
      doubleArray2[3] = (double) (short) (-1344);
      doubleArray2[4] = (double) (short) (-1344);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (double) (short) (-1344);
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 1.0;
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = (double) (short) (-1344);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      boolean boolean2 = linkedList0.add((Object) defaultIntervalCategoryDataset0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(linkedList0.contains((short) (-1344)));
      assertEquals(3, doubleArray0.length);
      
      defaultMultiValueCategoryDataset0.add(linkedList0, short0, short0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains((short) (-1344)));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals("[-1344]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short) (-1344)));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1201.5939049058413), (-1201.5939049058413), "Ca tegory 1");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = categoryTableXYDataset0.getEndY(0, 0);
      assertNotNull(number0);
      assertEquals((-1201.5939049058413), number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Stack<JDBCXYDataset> stack0 = new Stack<JDBCXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1201.5939049058413), range0.getLowerBound(), 0.01);
      assertEquals((-1201.5939049058413), range0.getCentralValue(), 0.01);
      assertEquals((-1201.5939049058413), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals((-1201.5939049058413), range0.getLowerBound(), 0.01);
      assertEquals((-1201.5939049058413), range0.getCentralValue(), 0.01);
      assertEquals((-1201.5939049058413), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number1);
      assertEquals((-1201.5939049058413), number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1135.1939831468067, 1135.1939831468067);
      assertNotNull(powerFunction2D0);
      assertEquals(1135.1939831468067, powerFunction2D0.getB(), 0.01);
      assertEquals(1135.1939831468067, powerFunction2D0.getA(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      
      Date date0 = week0.getStart();
      assertNotNull(date0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 1, 1135.1939831468067, 53, week0);
      assertNotNull(xYSeries0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1135.1939831468067, powerFunction2D0.getB(), 0.01);
      assertEquals(1135.1939831468067, powerFunction2D0.getA(), 0.01);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1135.1939831468067, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(53, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1135.1939831468067, xYSeries0.getMaxX(), 0.01);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-1.0), 2037.0, 171.1, 2706.6849854391, (-191.36288203));
      assertNotNull(oHLCDataItem0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 2037.0, 171.1, 53, 2785.14628, 2706.6849854391);
      assertNotNull(oHLCDataItem1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 1135.1939831468067, (-191.36288203), 2037.0, 53.0, 2037.0);
      assertNotNull(oHLCDataItem2);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 53, (-191.36288203), Double.NaN, (-1.0), 2017.305238);
      assertNotNull(oHLCDataItem3);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, 1135.1939831468067, 1135.1939831468067, 1135.1939831468067, (-4637.2416642), 2037.0);
      assertNotNull(oHLCDataItem4);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, 2706.6849854391, 1135.1939831468067, 2037.0, 1135.1939831468067, 1.0);
      assertNotNull(oHLCDataItem5);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(date0, 2017.305238, Double.NaN, 415.0, 160.90608, Double.NEGATIVE_INFINITY);
      assertNotNull(oHLCDataItem6);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem4));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[6] = oHLCDataItem6;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(date0, 53.0, 1.7976931348623157E308, 160.90608, (-1318.255644319962), 1135.1939831468067);
      assertNotNull(oHLCDataItem7);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem1));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[7] = oHLCDataItem7;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals(53.0, range0.getLowerBound(), 0.01);
      assertEquals(8.988465674311579E307, range0.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertEquals(8, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(1134.1796521467343, 3595.47279757, "Ca tegory 1");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = categoryTableXYDataset0.getEndY(0, 0);
      assertNotNull(number0);
      assertEquals(3595.47279757, number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(3595.47279757, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "Null 'columnKeys' argument.";
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.validateObject();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      categoryTableXYDataset1.add(2150.0, (double) 22, "org.jfree.data.DomainOrder");
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset1, (double) 22);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotNull(range0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(22.0, range0.getLowerBound(), 0.01);
      assertEquals(44.0, range0.getUpperBound(), 0.01);
      assertEquals(33.0, range0.getCentralValue(), 0.01);
      assertEquals(22.0, range0.getLength(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((short)0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (short)0, (double) (short)0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short)0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.validateObject();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "org.jfree.data.DomainOrder");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1201.5939049058413), (-1201.5939049058413), "Category 1");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = categoryTableXYDataset0.getEndY(0, 0);
      assertNotNull(number0);
      assertEquals((-1201.5939049058413), number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1201.5939049058413));
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1201.5939049058413, range0.getLength(), 0.01);
      assertEquals((-2403.1878098116827), range0.getLowerBound(), 0.01);
      assertEquals((-1201.5939049058413), range0.getUpperBound(), 0.01);
      assertEquals((-1802.3908573587619), range0.getCentralValue(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number1);
      assertEquals((-1201.5939049058413), number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1201.5939049058413), (-1201.5939049058413), "CatNgony 1");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Double double0 = (Double)categoryTableXYDataset0.getEndY(0, 0);
      assertNotNull(double0);
      assertEquals((-1201.5939049058413), (double)double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double1 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals((-1201.5939049058413), double1, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1201.5939049058413), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1201.0939049058413), range0.getUpperBound(), 0.01);
      assertEquals((-1202.0939049058413), range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 1900.0, (-1201.5939049058413), 75, double0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1201.5939049058413), (-1201.5939049058413), "Category 1");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = categoryTableXYDataset0.getEndY(0, 0);
      assertNotNull(number0);
      assertEquals((-1201.5939049058413), number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals((-1201.5939049058413), double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1201.5939049058413), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1201.5939049058413), range0.getCentralValue(), 0.01);
      assertEquals((-1201.5939049058413), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1201.5939049058413, range1.getLength(), 0.01);
      assertEquals((-600.7969524529207), range1.getCentralValue(), 0.01);
      assertEquals((-1201.5939049058413), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(1134.5598840859318, 1134.5598840859318, "CatWaegory 1");
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Double double0 = (Double)categoryTableXYDataset0.getEndY(0, 0);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotNull(double0);
      assertEquals(1134.5598840859318, (double)double0, 0.01);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotNull(range0);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(567.2799420429659, range0.getCentralValue(), 0.01);
      assertEquals(1134.5598840859318, range0.getUpperBound(), 0.01);
      assertEquals(1134.5598840859318, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short) (-1521));
      assertNotNull(short0);
      assertEquals((short) (-1521), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-1521]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((short) (-1521)));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range1);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-1521]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((short) (-1521)));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1201.5939049058413), (-1201.5939049058413), "Category 1");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = categoryTableXYDataset0.getEndY(0, 0);
      assertNotNull(number0);
      assertEquals((-1201.5939049058413), number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1201.0939049058413), range0.getUpperBound(), 0.01);
      assertEquals((-1202.0939049058413), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1201.5939049058413), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1201.5939049058413), (-1201.5939049058413), "Category 1");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = categoryTableXYDataset0.getEndY(0, 0);
      assertNotNull(number0);
      assertEquals((-1201.5939049058413), number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals((-1201.5939049058413), double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1201.5939049058413, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-600.7969524529207), range0.getCentralValue(), 0.01);
      assertEquals((-1201.5939049058413), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short short0 = (short)2303;
      Short short1 = new Short((short)2303);
      assertNotNull(short1);
      assertEquals((short)2303, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(short1));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[2303]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(short1));
      
      boolean boolean1 = stack0.add(short1);
      assertTrue(boolean1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stack0.size());
      assertEquals("[2303, 2303]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(short1));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short1, short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals(2, stack0.size());
      assertEquals("[2303, 2303]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(short1));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) short1);
      assertNotNull(pieDataset0);
      assertTrue(short1.equals((Object)short0));
      
      double double0 = (-1248.808645023);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short1, (-1248.808645023));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(boolean2);
      assertTrue(short1.equals((Object)short0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      double double1 = 4108.0;
      double double2 = 0.0;
      LineFunction2D lineFunction2D0 = new LineFunction2D(4108.0, 0.0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4108.0, lineFunction2D0.getIntercept(), 0.01);
      
      double double3 = (-2078.0985);
      int int0 = (-1277);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-2078.0985), (-1248.808645023), (-1277), short1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'samples' > 1
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Short short0 = new Short((short)482);
      assertNotNull(short0);
      assertEquals((short)482, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[482]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(short0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      
      Number[][] numberArray0 = new Number[8][2];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) short0;
      Long long0 = Long.getLong("Third");
      assertNull(long0);
      
      numberArray1[1] = (Number) null;
      numberArray1[2] = (Number) short0;
      Byte byte0 = new Byte((byte)77);
      assertNotNull(byte0);
      assertEquals((byte)77, (byte)byte0);
      
      numberArray1[3] = (Number) byte0;
      numberArray1[4] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) null;
      numberArray2[1] = (Number) byte0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) byte0;
      numberArray3[1] = (Number) null;
      numberArray3[2] = (Number) byte0;
      numberArray3[3] = (Number) short0;
      numberArray3[4] = (Number) short0;
      numberArray3[5] = (Number) short0;
      numberArray3[6] = (Number) null;
      numberArray3[7] = (Number) null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[8];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) null;
      numberArray4[1] = (Number) short0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      numberArray4[2] = (Number) bigInteger0;
      numberArray4[3] = (Number) null;
      BigInteger bigInteger1 = BigInteger.TEN;
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      
      numberArray4[4] = (Number) bigInteger1;
      numberArray4[5] = (Number) null;
      numberArray4[6] = (Number) short0;
      numberArray4[7] = (Number) short0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[5];
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray1));
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray5[0] = (Number) integer0;
      Byte byte1 = new Byte((byte)77);
      assertNotNull(byte1);
      assertEquals((byte)77, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      numberArray5[1] = (Number) byte1;
      numberArray5[2] = (Number) bigInteger1;
      numberArray5[3] = (Number) short0;
      numberArray5[4] = (Number) null;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[1];
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray2));
      
      numberArray6[0] = (Number) integer0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[4];
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray4));
      
      numberArray7[0] = (Number) byte1;
      numberArray7[1] = (Number) byte1;
      numberArray7[2] = (Number) short0;
      numberArray7[3] = (Number) null;
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[3];
      assertFalse(numberArray8.equals((Object)numberArray4));
      assertFalse(numberArray8.equals((Object)numberArray7));
      assertFalse(numberArray8.equals((Object)numberArray6));
      assertFalse(numberArray8.equals((Object)numberArray3));
      assertFalse(numberArray8.equals((Object)numberArray5));
      assertFalse(numberArray8.equals((Object)numberArray1));
      assertFalse(numberArray8.equals((Object)numberArray2));
      
      numberArray8[0] = (Number) bigInteger1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)77;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      assertNotNull(bigInteger2);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-33), (byte)77, (byte)77, (byte) (-28), (byte)77}, byteArray0);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertEquals((short) (-7091), bigInteger2.shortValue());
      assertEquals((byte)77, bigInteger2.byteValue());
      assertEquals(6, byteArray0.length);
      
      numberArray8[1] = (Number) bigInteger2;
      numberArray8[2] = (Number) null;
      numberArray0[7] = numberArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, numberArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1201.5939049058413), (-1201.5939049058413), "Category 1");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Double double0 = (Double)categoryTableXYDataset0.getEndY(0, 0);
      assertNotNull(double0);
      assertEquals((-1201.5939049058413), (double)double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1201.5939049058413), range0.getLowerBound(), 0.01);
      assertEquals((-1201.5939049058413), range0.getCentralValue(), 0.01);
      assertEquals((-1201.5939049058413), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
      assertNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1201.5939049058413), range0.getLowerBound(), 0.01);
      assertEquals((-1201.5939049058413), range0.getCentralValue(), 0.01);
      assertEquals((-1201.5939049058413), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(double1);
      assertEquals((-1201.5939049058413), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Double double2 = (Double)DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(double2);
      assertEquals((-1201.0939049058413), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) double0);
      assertNotNull(defaultPieDataset0);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.geWeral.DatasetUtili,ies", 91, 91);
      assertNotNull(matrixSeries0);
      assertEquals(8281, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      
      Number number0 = matrixSeries0.getItem(335);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(8281, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(8281, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DomainOrder domainOrder0 = matrixSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(8281, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(8281, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(90.0, range1.getLength(), 0.01);
      assertEquals(45.0, range1.getCentralValue(), 0.01);
      assertEquals(90.0, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(8281, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(45.0, range2.getCentralValue(), 0.01);
      assertEquals(90.0, range2.getUpperBound(), 0.01);
      assertEquals(90.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, 0L, 0L, 2079.64, Double.NEGATIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((short)0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short)0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short)0));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(stack0.contains((short)0));
      assertEquals(1, oHLCDataItemArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertTrue(stack0.contains((short)0));
      assertEquals(1, oHLCDataItemArray0.length);
      
      MatrixSeries matrixSeries0 = null;
//      try {
        matrixSeries0 = new MatrixSeries("", (-1552), (short)0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.MatrixSeries", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 53, 53, 1, 53);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=53,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=53,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=53,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 566.0722546222734, 5911.444928554169, (-12.4), 1);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=53,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=53,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=53,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short)42);
      assertNotNull(short0);
      assertEquals((short)42, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((short)42));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[42]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short)42));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[42]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short)42));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(range1.equals((Object)range0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[42]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-12.4), range1.getCentralValue(), 0.01);
      assertEquals((-12.4), range1.getUpperBound(), 0.01);
      assertEquals((-12.4), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(stack0.contains((short)42));
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(566.0722546222734, number0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number1);
      assertEquals((-1.22192928E13), number1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(number1.equals((Object)number0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.22192928E13), range2.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range2.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range2.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Number[][] numberArray0 = new Number[10][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("a>< 3Y3E", "a>< 3Y3E", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(10, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(10, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3142);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(3142, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, numberArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 3142, Size: 4
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Short short0 = new Short((short)2303);
      assertNotNull(short0);
      assertEquals((short)2303, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains((short)2303));
      
      Short short1 = new Short((short)2303);
      assertNotNull(short1);
      assertEquals((short)2303, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[2303]", stack0.toString());
      assertTrue(stack0.contains((short)2303));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2303);
      assertNotNull(spreadsheetDate0);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals(4, spreadsheetDate0.getMonth());
      
      MockDate mockDate0 = new MockDate(85, (-4197), (-1), 3005, 0);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 492.0357, 3, (-3385.0), 0, 3);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Aug 02 05:00:00 GMT 1635", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(short1.equals((Object)short0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      boolean boolean1 = stack0.add(short1);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(stack0.isEmpty());
      assertEquals("[2303, 2303]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short)2303));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertTrue(short1.equals((Object)short0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals("[2303, 2303]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.05531372E13), range0.getUpperBound(), 0.01);
      assertEquals((-1.05531372E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.05531372E13), range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains((short)2303));
      assertEquals(9, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(short1.equals((Object)short0));
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals("[2303, 2303]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.05531372E13), range0.getUpperBound(), 0.01);
      assertEquals((-1.05531372E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.05531372E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(stack0.contains((short)2303));
      assertEquals(9, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(1475.0, 1475.0, "Nb");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = categoryTableXYDataset0.getEndY(0, 0);
      assertNotNull(number0);
      assertEquals(1475.0, number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1475.0, range0.getLowerBound(), 0.01);
      assertEquals(1475.0, range0.getUpperBound(), 0.01);
      assertEquals(1475.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Short short0 = new Short((short)482);
      assertNotNull(short0);
      assertEquals((short)482, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((short)482));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[482]", stack0.toString());
      assertTrue(stack0.contains((short)482));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNull(range1);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[482]", stack0.toString());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(stack0.contains((short)482));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range2);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[482]", stack0.toString());
      assertTrue(stack0.contains((short)482));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("]R<sROOW(%6Pkgk3;GL");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-474.11913), 0.0, false, false);
      assertNotNull(simpleHistogramBin0);
      assertEquals((-474.11913), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-772), (-772));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-772), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-772), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean0 = slidingGanttCategoryDataset0.hasListener(simpleHistogramDataset0);
      assertFalse(boolean0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-772), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-772), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.8, (-2508.5951623422097), 4, 310.365368013, 0.8);
      assertNotNull(oHLCDataItem0);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short1 = new Short((short) (-25));
      assertNotNull(short1);
      assertEquals((short) (-25), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Range range0 = new Range(0, 2);
      assertNotNull(range0);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1.39240928132E12, number0);
      assertFalse(short0.equals((Object)short1));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1900;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertFalse(boolean0);
      assertFalse(short0.equals((Object)short1));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertNotNull(number1);
      assertEquals(1.39240928132E12, number1);
      assertTrue(number1.equals((Object)number0));
      assertFalse(short0.equals((Object)short1));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray1.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray1.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) date0, (double) 9999, 1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray1.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(1900.0, double0, 0.01);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 53, 53, 1, 53);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=53,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=53,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=53,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 566.0722546222734, 5911.444928554169, (-12.4), 1);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=53,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=53,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=53,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short)42);
      assertNotNull(short0);
      assertEquals((short)42, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((short)42));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[42]", stack0.toString());
      assertTrue(stack0.contains((short)42));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[42]", stack0.toString());
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short)42));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = Range.shift(range0, (double) (short)42);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[42]", stack0.toString());
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.2219292799958E13), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.2219292799958E13), range1.getCentralValue(), 0.01);
      assertEquals((-1.2219292799958E13), range1.getUpperBound(), 0.01);
      assertTrue(stack0.contains((short)42));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[42]", stack0.toString());
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-12.4), range2.getLowerBound(), 0.01);
      assertEquals((-12.4), range2.getCentralValue(), 0.01);
      assertEquals((-12.4), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(stack0.contains((short)42));
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(566.0722546222734, number0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Number[][] numberArray0 = new Number[10][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("a>< 3Y3E", "a>< 3Y3E", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(10, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(10, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(10, numberArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(10, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Requires 'samples' > 1", 91, 91);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(90.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Short short0 = new Short((short) (-3778));
      assertNotNull(short0);
      assertEquals((short) (-3778), (short)short0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      timeTableXYDataset0.add((TimePeriod) quarter0, (Number) 4, "", false);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset1);
      assertFalse(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 527);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 527, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 13);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Short short0 = new Short((short)1112);
      assertNotNull(short0);
      assertEquals((short)1112, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[1112]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(short0));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      timeTableXYDataset0.add((TimePeriod) month0, (Number) short0, "org.jfree.data.DomainOrder", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset1);
      assertFalse(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("]R<sROOW(%6Pkgk3;GL");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-474.11913), 0.0, false, false);
      assertNotNull(simpleHistogramBin0);
      assertEquals((-474.11913), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-474.11913), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      System.setCurrentTimeMillis(4L);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Short short0 = new Short((short) (-14));
      assertNotNull(short0);
      assertEquals((short) (-14), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains((short) (-14)));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[-14]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short) (-14)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[-14]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short) (-14)));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-14.0), range0.getLowerBound(), 0.01);
      assertEquals((-14.0), range0.getCentralValue(), 0.01);
      assertEquals((-14.0), range0.getUpperBound(), 0.01);
      
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-14.0), range0.getLowerBound(), 0.01);
      assertEquals((-14.0), range0.getCentralValue(), 0.01);
      assertEquals((-14.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-14.0), range1.getCentralValue(), 0.01);
      assertEquals((-14.0), range1.getUpperBound(), 0.01);
      assertEquals((-14.0), range1.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range1, false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-14.0), range0.getLowerBound(), 0.01);
      assertEquals((-14.0), range0.getCentralValue(), 0.01);
      assertEquals((-14.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-14.0), range1.getCentralValue(), 0.01);
      assertEquals((-14.0), range1.getUpperBound(), 0.01);
      assertEquals((-14.0), range1.getLowerBound(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("a>< 3Y3E", "Description", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean2 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      
      Range range0 = new Range((-1.7976931348623157E308), (-1035.146429798013));
      assertNotNull(range0);
      assertEquals((-1035.146429798013), range0.getUpperBound(), 0.01);
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Short short0 = new Short((short)489);
      assertNotNull(short0);
      assertEquals((short)489, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((short)489));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[489]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short)489));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = defaultMultiValueCategoryDataset0.equals(stack0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("[489]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short)489));
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertEquals("[489]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short)489));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals("[489]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(489.0, range0.getCentralValue(), 0.01);
      assertEquals(489.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(489.0, range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains((short)489));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals("[489]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(489.0, range1.getLowerBound(), 0.01);
      assertEquals(489.0, range1.getCentralValue(), 0.01);
      assertEquals(489.0, range1.getUpperBound(), 0.01);
      assertTrue(stack0.contains((short)489));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2034), 1, (-935), (-1815), 1159, 6);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2034,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-935,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1815,HOUR_OF_DAY=-1815,MINUTE=1159,SECOND=6,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.8, 0.8, (-643.39822493), 0.8, 515.7479);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2034,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-935,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1815,HOUR_OF_DAY=-1815,MINUTE=1159,SECOND=6,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-3753.6744371481), 1.0, 743.955364, (-3795.0), Double.NEGATIVE_INFINITY);
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2034,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-935,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1815,HOUR_OF_DAY=-1815,MINUTE=1159,SECOND=6,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, Double.POSITIVE_INFINITY, 1024.9354129545356, (-1815), (-3795.0), (-2034));
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2034,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-935,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1815,HOUR_OF_DAY=-1815,MINUTE=1159,SECOND=6,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, (-1344.74094786767), 328.5111727321, 144.29203812798, 1159, (-3795.0));
      assertNotNull(oHLCDataItem3);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2034,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-935,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1815,HOUR_OF_DAY=-1815,MINUTE=1159,SECOND=6,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, 1126.149227849656, 2575.240789, Double.POSITIVE_INFINITY, (-2034), Double.NEGATIVE_INFINITY);
      assertNotNull(oHLCDataItem4);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2034,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-935,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1815,HOUR_OF_DAY=-1815,MINUTE=1159,SECOND=6,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, (-3795.0), 3016.793626, 1159, (-643.39822493), (-2449.8043851));
      assertNotNull(oHLCDataItem5);
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2034,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-935,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1815,HOUR_OF_DAY=-1815,MINUTE=1159,SECOND=6,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(fixedMillisecond0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(6, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1815.0), range0.getLowerBound(), 0.01);
      assertEquals(600.8968130000001, range0.getCentralValue(), 0.01);
      assertEquals(4831.793626000001, range0.getLength(), 0.01);
      assertEquals(3016.793626, range0.getUpperBound(), 0.01);
      assertEquals(6, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Short short0 = new Short((short) (-14));
      assertNotNull(short0);
      assertEquals((short) (-14), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains((short) (-14)));
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.capacity());
      assertFalse(stack0.contains((short) (-14)));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short) (-14)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short) (-14)));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) short0);
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) short0, (double) (short) (-14));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(range0);
      assertEquals(14.0, range0.getLength(), 0.01);
      assertEquals((-14.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-7.0), range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-14.0), range1.getLowerBound(), 0.01);
      assertEquals((-14.0), range1.getCentralValue(), 0.01);
      assertEquals((-14.0), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) "Null 'columnKeys' argument.", (Number) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Null 'columnKeys' argument.", (double) 470, 482);
      assertNotNull(pieDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("]R<sROOW(%6Pkgk3;GL", 72, 72);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(72, matrixSeries0.getColumnsCount());
      assertEquals(72, matrixSeries0.getRowCount());
      assertEquals(5184, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(72, matrixSeries0.getColumnsCount());
      assertEquals(72, matrixSeries0.getRowCount());
      assertEquals(5184, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 3016.793626;
      doubleArray1[1] = (-2685.37335);
      doubleArray1[2] = 699.8776547092498;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = 3882.32;
      doubleArray1[6] = 1610.0;
      doubleArray1[7] = (-3795.0);
      doubleArray1[8] = 20.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3882.32;
      doubleArray3[1] = 3882.32;
      doubleArray3[2] = 3016.793626;
      doubleArray3[3] = 699.8776547092498;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      
      Year year1 = (Year)year0.next();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(year1.equals((Object)year0));
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals("2015", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(2015, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) year1, (Comparable) year1);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals("2015", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(2015, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      
      Short short0 = new Short((short)1112);
      assertNotNull(short0);
      assertEquals((short)1112, (short)short0);
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.contains((short)1112));
      
      boolean boolean0 = stack1.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack1.capacity());
      assertEquals("[1112]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains((short)1112));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack1, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Short short0 = new Short((short) (-3778));
      assertNotNull(short0);
      assertEquals((short) (-3778), (short)short0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) short0, (-1783.8726992866295), (int) (short) (-3778));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      defaultPieDataset1.setValue((Comparable) short0, (Number) short0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) short0, (-1783.8726992866295), (int) (short) (-3778));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotNull(defaultPieDataset2);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (short) (-3778);
      doubleArray1[1] = (double) (short) (-3778);
      doubleArray1[2] = (double) (short) (-3778);
      doubleArray1[3] = (double) (short) (-3778);
      doubleArray1[4] = (-1783.8726992866295);
      doubleArray1[5] = (double) (short) (-3778);
      doubleArray1[6] = (double) (short) (-3778);
      doubleArray1[7] = (-1783.8726992866295);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short) (-3778);
      doubleArray2[1] = (double) (short) (-3778);
      doubleArray2[2] = (-1783.8726992866295);
      doubleArray2[3] = (-1783.8726992866295);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1783.8726992866295);
      doubleArray3[1] = (double) (short) (-3778);
      doubleArray3[2] = (-1783.8726992866295);
      doubleArray3[3] = (double) (short) (-3778);
      doubleArray3[4] = (double) (short) (-3778);
      doubleArray0[2] = doubleArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("3lV?s+c", "", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      
      Short short0 = new Short((short)2292);
      assertNotNull(short0);
      assertEquals((short)2292, (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals("[2292]", stack1.toString());
      assertTrue(stack1.contains((short)2292));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2292);
      assertNotNull(spreadsheetDate0);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2292, spreadsheetDate0.toSerial());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(10, spreadsheetDate0.getDayOfMonth());
      
      MockDate mockDate0 = new MockDate(2958465, 2, 0, 1, 3, 1);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1900, 9999, 3);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Feb 28 01:03:01 GMT 2960365", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[17];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Sun Feb 28 01:03:01 GMT 2960365", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(17, oHLCDataItemArray0.length);
      
      Stack<Short> stack2 = new Stack<Short>();
      assertNotNull(stack2);
      assertTrue(stack2.equals((Object)stack0));
      assertFalse(stack2.equals((Object)stack1));
      assertEquals(10, stack2.capacity());
      assertEquals(0, stack2.size());
      assertEquals("[]", stack2.toString());
      assertTrue(stack2.empty());
      assertTrue(stack2.isEmpty());
      assertFalse(stack2.contains((short)2292));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Null 'columnKeys' argument.";
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, stringArray0.length);
      assertEquals(0, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, stringArray0.length);
      assertEquals(0, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, stringArray0.length);
      assertEquals(0, numberArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(short0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertEquals("[1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals("[1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertTrue(stack0.contains(short0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) short0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short0, 1.0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[][] doubleArray0 = new double[19][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
      assertNotNull(range0);
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(19, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Short short0 = new Short((short) (-14));
      assertNotNull(short0);
      assertEquals((short) (-14), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((short) (-14)));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-14]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short) (-14)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-14]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short) (-14)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-14]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals((-14.0), range0.getCentralValue(), 0.01);
      assertEquals((-14.0), range0.getUpperBound(), 0.01);
      assertEquals((-14.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short) (-14)));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals((-14.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-14.0), range1.getCentralValue(), 0.01);
      assertEquals((-14.0), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Short short0 = new Short((short) (-14));
      assertNotNull(short0);
      assertEquals((short) (-14), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[-14]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(short0));
      
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (short) (-14);
      doubleArray1[1] = (double) (short) (-14);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short) (-14);
      doubleArray2[1] = (double) (short) (-14);
      doubleArray2[2] = (-3492.09);
      doubleArray2[3] = (double) (short) (-14);
      doubleArray2[4] = (double) (short) (-14);
      doubleArray2[5] = (double) (short) (-14);
      doubleArray2[6] = (double) (short) (-14);
      doubleArray2[7] = 1517.3482649991;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (short) (-14);
      doubleArray3[1] = 1517.3482649991;
      doubleArray3[2] = (-3492.09);
      doubleArray3[3] = 1517.3482649991;
      doubleArray3[4] = (double) (short) (-14);
      doubleArray3[5] = (-3492.09);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-3492.09);
      doubleArray4[1] = (-3492.09);
      doubleArray4[2] = (double) (short) (-14);
      doubleArray4[3] = (double) (short) (-14);
      doubleArray4[4] = (-3492.09);
      doubleArray4[5] = (double) (short) (-14);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-3492.09);
      doubleArray5[1] = (-3492.09);
      doubleArray5[2] = 1517.3482649991;
      doubleArray5[3] = 1517.3482649991;
      doubleArray5[4] = (-3492.09);
      doubleArray5[5] = (double) (short) (-14);
      doubleArray5[6] = 1517.3482649991;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (double) (short) (-14);
      doubleArray6[1] = 1517.3482649991;
      doubleArray6[2] = 1517.3482649991;
      doubleArray6[3] = (-3492.09);
      doubleArray6[4] = 1517.3482649991;
      doubleArray6[5] = (-3492.09);
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "org.jfree.data.xy.OHLCDataItem", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-987.3708675004501), range0.getCentralValue(), 0.01);
      assertEquals(1517.3482649991, range0.getUpperBound(), 0.01);
      assertEquals(5009.4382649991, range0.getLength(), 0.01);
      assertEquals((-3492.09), range0.getLowerBound(), 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      Week week1 = (Week)week0.previous();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      MockDate mockDate0 = (MockDate)week0.getStart();
      assertNotSame(week0, week1);
      assertNotNull(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 566.0722546222734, 5911.444928554169, (-12.4), 1);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 765.64, 566.0722546222734, 1, 2265.7357, (-1850.43));
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short) (-4));
      assertNotNull(short0);
      assertEquals((short) (-4), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(range0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains(short0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = new Range(53, 53);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(53.0, range1.getLowerBound(), 0.01);
      assertEquals(53.0, range1.getCentralValue(), 0.01);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(range0.equals((Object)range1));
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(2278.1357000000003, range2.getLength(), 0.01);
      assertEquals(2265.7357, range2.getUpperBound(), 0.01);
      assertEquals((-12.4), range2.getLowerBound(), 0.01);
      assertEquals(1126.66785, range2.getCentralValue(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains(short0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(double0);
      assertEquals((-1.22192928E13), (double)double0, 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-269));
      assertNotNull(defaultPieDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotNull(range3);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(565.0722546222734, range3.getLength(), 0.01);
      assertEquals(1.0, range3.getLowerBound(), 0.01);
      assertEquals(566.0722546222734, range3.getUpperBound(), 0.01);
      assertEquals(283.5361273111367, range3.getCentralValue(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range4 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, false);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotNull(range4);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1.22192928E13), range4.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range4.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range4.getUpperBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains(short0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) 1;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) short0;
      numberArray1[3] = (Number) short0;
      numberArray1[4] = (Number) 53;
      numberArray1[5] = (Number) 1;
      numberArray1[6] = (Number) double0;
      numberArray1[7] = (Number) short0;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNotNull(defaultCategoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Short short0 = new Short((short) (-14));
      assertNotNull(short0);
      assertEquals((short) (-14), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((short) (-14)));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[-14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((short) (-14)));
      
      MockDate mockDate0 = new MockDate((short) (-14), (-2832), (-2832), (-2832), (short) (-14));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 0.0, (-2607.93232219198), 383.0, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Dec 02 23:46:00 GMT 1641", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      boolean boolean1 = stack0.add(short0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("[-14, -14]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((short) (-14)));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals("[-14, -14]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.035314004E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.035314004E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.035314004E13), range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains((short) (-14)));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals("[-14, -14]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.035314004E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.035314004E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.035314004E13), range0.getUpperBound(), 0.01);
      assertEquals(2607.93232219198, range1.getLength(), 0.01);
      assertEquals((-2607.93232219198), range1.getLowerBound(), 0.01);
      assertEquals((-1303.96616109599), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertTrue(stack0.contains((short) (-14)));
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("o1PB$ly9eUhP~_!!lb", 3, 3);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(9, matrixSeries0.getItemCount());
      assertEquals(3, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3, matrixSeries0.getColumnsCount());
      
      Number[][] numberArray0 = new Number[3][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[2] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, numberArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[][] doubleArray0 = new double[16][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(16, doubleArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(16, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(16, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(16, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(16, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(16, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Short short0 = new Short((short) (-14));
      assertNotNull(short0);
      assertEquals((short) (-14), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[-14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(short0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertEquals("[-14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals("[-14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals((-14.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-14.0), range0.getCentralValue(), 0.01);
      assertEquals((-14.0), range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(short0));
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals("[-14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals((-14.0), range1.getUpperBound(), 0.01);
      assertEquals((-14.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-14.0), range1.getLowerBound(), 0.01);
      assertTrue(stack0.contains(short0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1267.7);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 543.8228750685;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[7] = 1994.97250824573;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (-14.0);
      doubleArray2[4] = 543.8228750685;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-14.0);
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = (-1267.7);
      doubleArray3[3] = 1.7976931348623157E308;
      doubleArray3[4] = 6.283185307179586;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1994.97250824573;
      doubleArray4[1] = (-14.0);
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = 1994.97250824573;
      doubleArray4[5] = 1994.97250824573;
      doubleArray4[6] = 543.8228750685;
      doubleArray4[7] = 543.8228750685;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short)87);
      assertNotNull(short0);
      assertEquals((short)87, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[87]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(short0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[87]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[87]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(87.0, range0.getLowerBound(), 0.01);
      assertEquals(87.0, range0.getCentralValue(), 0.01);
      assertEquals(87.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains(short0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) short0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short0, (double) (short)87);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals("[-1]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertTrue(stack1.contains((short) (-1)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((short) (-1)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack1, false);
      assertNotSame(stack1, stack0);
      assertNull(range0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals("[-1]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertTrue(stack1.contains((short) (-1)));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) short0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short0, (double) (short)87);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((short)0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertTrue(stack0.contains((short)0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertTrue(stack0.contains((short)0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains((short)0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[][] doubleArray0 = new double[15][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("X{rC)BZd)", "X{rC)BZd)", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, doubleArray0.length);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-410.0);
      doubleArray1[1] = 8.0;
      doubleArray1[2] = 346.0;
      doubleArray1[3] = (-1224.911);
      doubleArray1[4] = 1806.7002284756;
      doubleArray1[5] = 36.203314324;
      doubleArray1[6] = 36.203314324;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("X{rC)BZd)", dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-410.0), 8.0, 346.0, (-1224.911), 1806.7002284756, 36.203314324, 36.203314324}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray1.length);
      
      Vector<Object> vector0 = new Vector<Object>(17);
      assertNotNull(vector0);
      assertEquals(17, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(36.203314324));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-410.0), 8.0, 346.0, (-1224.911), 1806.7002284756, 36.203314324, 36.203314324}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-410.0), range0.getCentralValue(), 0.01);
      assertEquals((-410.0), range0.getUpperBound(), 0.01);
      assertEquals((-410.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray1.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertArrayEquals(new double[] {(-410.0), 8.0, 346.0, (-1224.911), 1806.7002284756, 36.203314324, 36.203314324}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals((-410.0), range0.getCentralValue(), 0.01);
      assertEquals((-410.0), range0.getUpperBound(), 0.01);
      assertEquals((-410.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(vector0.contains(36.203314324));
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      Week week1 = (Week)week0.previous();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      MockDate mockDate0 = (MockDate)week0.getStart();
      assertNotSame(week0, week1);
      assertNotNull(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 566.0722546222734, 5911.444928554169, (-12.4), 1);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      double double0 = (-1850.43);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 765.64, 566.0722546222734, 1, 2265.7357, (-1850.43));
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short) (-4));
      assertNotNull(short0);
      assertEquals((short) (-4), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(short0));
      
      Short short1 = new Short((short) (-2675));
      assertNotNull(short1);
      assertEquals((short) (-2675), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-2675]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((short) (-2675)));
      assertFalse(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(range0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-2675]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains((short) (-2675)));
      assertFalse(stack0.contains(short0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = new Range(1.5, 53);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals(51.5, range1.getLength(), 0.01);
      assertEquals(27.25, range1.getCentralValue(), 0.01);
      assertEquals(1.5, range1.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(range0.equals((Object)range1));
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-2675]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(566.0722546222734, range2.getUpperBound(), 0.01);
      assertEquals(283.5361273111367, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(565.0722546222734, range2.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains((short) (-2675)));
      assertFalse(stack0.contains(short0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double1 = (Double)DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(double1);
      assertEquals((-1.22192928E13), (double)double1, 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "DomainOrder.ASCENDING");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(5, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      defaultHighLowDataset0.addChangeListener(xYTaskDataset0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(5, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(5, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      CategoryDataset categoryDataset0 = null;
      int int0 = 24;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 24, 8);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(24, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(8, slidingCategoryDataset0.getMaximumCategoryCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      TableOrder tableOrder1 = TableOrder.BY_ROW;
      assertSame(tableOrder1, tableOrder0);
      assertNotNull(tableOrder1);
      assertEquals("TableOrder.BY_ROW", tableOrder1.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder1, 8);
      assertNotNull(categoryToPieDataset0);
      assertEquals(24, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(8, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals("TableOrder.BY_ROW", tableOrder1.toString());
      assertEquals(8, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.7976931348623157E308);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("o1PB$ly9eUhP~_!!lb", 3, 3);
      assertNotNull(matrixSeries0);
      assertEquals(3, matrixSeries0.getColumnsCount());
      assertEquals(9, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3, matrixSeries0.getRowCount());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((-2112), 1, 32);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.7976931348623157E308, 0.5, Double.POSITIVE_INFINITY, (-3164.573258934492));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Mar 03 00:00:00 GMT 213", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("o1PB$ly9eUhP~_!!lb", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Short short0 = new Short((short)5);
      assertNotNull(short0);
      assertEquals((short)5, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[5]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 700.7294153725147);
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(700.7294153725147, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[5]", stack0.toString());
      assertEquals(700.7294153725147, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-6.88522464E13), range0.getCentralValue(), 0.01);
      assertEquals((-6.885224639964963E13), range0.getUpperBound(), 0.01);
      assertEquals((-6.885224640035037E13), range0.getLowerBound(), 0.01);
      assertEquals(700.734375, range0.getLength(), 0.01);
      assertTrue(stack0.contains(short0));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYBarDataset0);
      assertNull(number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(700.7294153725147, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2303);
      assertNotNull(spreadsheetDate0);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, (-1031.5154), 2424.03, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      SerialDate serialDate0 = SerialDate.addYears(3, spreadsheetDate0);
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      assertNotNull(serialDate0);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(1909, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(4, serialDate0.getMonth());
      assertEquals(21, serialDate0.getDayOfMonth());
      assertEquals(3399, serialDate0.toSerial());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 92.0, 493.52, (-1), 92.0, 5);
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-61.09848221426453), 0, 493.52, (-1.0), 6.283185307179586);
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[5] = oHLCDataItem2;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(9, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short) (-1658));
      assertNotNull(short0);
      assertEquals((short) (-1658), (short)short0);
      
      Short short1 = new Short((short)10);
      assertNotNull(short1);
      assertEquals((short)10, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack1.add(short1);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(short1.equals((Object)short0));
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals("[10]", stack1.toString());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains(short1));
      assertFalse(stack1.contains((short)2303));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1525.0354, range0.getLength(), 0.01);
      assertEquals((-1031.5154), range0.getLowerBound(), 0.01);
      assertEquals((-268.9977), range0.getCentralValue(), 0.01);
      assertEquals(493.52, range0.getUpperBound(), 0.01);
      assertEquals(9, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(9, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1031.5154), range2.getLowerBound(), 0.01);
      assertEquals(1525.0354, range2.getLength(), 0.01);
      assertEquals(493.52, range2.getUpperBound(), 0.01);
      assertEquals((-268.9977), range2.getCentralValue(), 0.01);
      assertEquals(9, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      
      Short short0 = new Short((short)2322);
      assertNotNull(short0);
      assertEquals((short)2322, (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(1, stack1.size());
      assertEquals("[2322]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains(short0));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2322);
      assertNotNull(spreadsheetDate0);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2322, spreadsheetDate0.toSerial());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(10, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2322, spreadsheetDate0.toSerial());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(10, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      MockDate mockDate0 = new MockDate((-1), 26, 0, 9, 26);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3171.2754936538, 9999, 26, (-1442.39), 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Feb 28 09:26:00 GMT 1901", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 9999, 2, 9999, 0.0, (short)2322);
      assertNotNull(oHLCDataItem1);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(2322, spreadsheetDate0.toSerial());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(10, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Thu Feb 28 09:26:00 GMT 1901", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Stack<Short> stack2 = new Stack<Short>();
      assertNotNull(stack2);
      assertFalse(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      assertEquals(10, stack2.capacity());
      assertEquals(0, stack2.size());
      assertEquals("[]", stack2.toString());
      assertTrue(stack2.empty());
      assertTrue(stack2.isEmpty());
      assertFalse(stack2.contains((short)2322));
      
      boolean boolean1 = stack1.add(short0);
      assertNotSame(stack1, stack2);
      assertNotSame(stack1, stack0);
      assertTrue(boolean1);
      assertFalse(stack1.equals((Object)stack2));
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertEquals("[2322, 2322]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(2, stack1.size());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains((short)2322));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 1650.5448506397);
      assertNotNull(xYBarDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Thu Feb 28 09:26:00 GMT 1901", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1650.5448506397, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) stack1, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      Week week1 = (Week)week0.previous();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      MockDate mockDate0 = (MockDate)week0.getStart();
      assertNotSame(week0, week1);
      assertNotNull(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 566.0722546222734, 5911.444928554169, 566.0722546222734, 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 765.64, 566.0722546222734, 1, 2265.7357, (-1850.43));
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short) (-4));
      assertNotNull(short0);
      assertEquals((short) (-4), (short)short0);
      
      Week week2 = (Week)week0.previous();
      assertNotSame(week2, week0);
      assertNotSame(week2, week1);
      assertNotSame(week0, week2);
      assertNotSame(week0, week1);
      assertNotNull(week2);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week2.equals((Object)week0));
      assertTrue(week2.equals((Object)week1));
      assertFalse(week0.equals((Object)week1));
      assertEquals(1392409281319L, week2.getLastMillisecond());
      assertEquals(2014, week2.getYearValue());
      assertEquals(6, week2.getWeek());
      assertEquals(1392409281320L, week2.getFirstMillisecond());
      assertEquals(106748L, week2.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((short) (-4)));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-4]", stack0.toString());
      assertTrue(stack0.contains((short) (-4)));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotSame(week0, week2);
      assertNotSame(week0, week1);
      assertNotSame(week1, week2);
      assertNotSame(week1, week0);
      assertNotNull(range0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week2));
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertTrue(week1.equals((Object)week2));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains((short) (-4)));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = new Range(53, 53);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(53.0, range1.getLowerBound(), 0.01);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals(53.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNotSame(week0, week2);
      assertNotSame(week0, week1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(week1, week2);
      assertNotSame(week1, week0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week2));
      assertFalse(week0.equals((Object)week1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(week1.equals((Object)week0));
      assertTrue(week1.equals((Object)week2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1415.9039773111367, range2.getCentralValue(), 0.01);
      assertEquals(1699.663445377727, range2.getLength(), 0.01);
      assertEquals(2265.7357, range2.getUpperBound(), 0.01);
      assertEquals(566.0722546222734, range2.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains((short) (-4)));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotSame(week0, week2);
      assertNotSame(week0, week1);
      assertNotSame(week1, week2);
      assertNotSame(week1, week0);
      assertNotNull(double0);
      assertEquals((-1.22192928E13), (double)double0, 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week2));
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertTrue(week1.equals((Object)week2));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-269));
      assertNotNull(defaultPieDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) mockGregorianCalendar0, 1063.931268);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNull(range3);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[][] doubleArray0 = new double[15][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add((Short) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, (-1372.2), 1.39240928229978E12, (-1372.2), (-3274.407237865985));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-5043.906911279), (-1.0), (-5043.906911279), (-3274.407237865985), 1046.39);
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short)1600);
      assertNotNull(short0);
      assertEquals((short)1600, (short)short0);
      
      Short short1 = new Short((short)2);
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean1 = stack0.add(short1);
      assertTrue(boolean1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[null, 2]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.contains((short)1600));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(range0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(5042.906911279, range0.getLength(), 0.01);
      assertEquals((-2522.4534556395), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-5043.906911279), range0.getLowerBound(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add((Object) "Negative 'width' argument6");
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[Negative 'width' argument6]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("Negative 'width' argument6"));
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      MockDate mockDate0 = new MockDate(2L);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2L;
      doubleArray0[1] = (-2.147483648E9);
      doubleArray0[2] = (double) 2L;
      doubleArray0[3] = (double) 2L;
      doubleArray0[4] = 3482.32691317112;
      doubleArray0[5] = (double) 2L;
      doubleArray0[6] = (double) 2L;
      doubleArray0[7] = (-2438.270534068);
      doubleArray0[8] = (double) 2L;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2438.270534068);
      doubleArray1[1] = 3482.32691317112;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3482.32691317112;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray2, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-2438.270534068), 3482.32691317112}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3482.32691317112}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.0, (-2.147483648E9), 2.0, 2.0, 3482.32691317112, 2.0, 2.0, (-2438.270534068), 2.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(0, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(domainOrder0);
      assertArrayEquals(new double[] {(-2438.270534068), 3482.32691317112}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3482.32691317112}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.0, (-2.147483648E9), 2.0, 2.0, 3482.32691317112, 2.0, 2.0, (-2438.270534068), 2.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(0, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNull(range1);
      assertArrayEquals(new double[] {(-2438.270534068), 3482.32691317112}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3482.32691317112}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.0, (-2.147483648E9), 2.0, 2.0, 3482.32691317112, 2.0, 2.0, (-2438.270534068), 2.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(1, stack0.size());
      assertEquals("[Negative 'width' argument6]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains("Negative 'width' argument6"));
      assertFalse(stack0.contains((-2.147483648E9)));
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(0, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNull(number0);
      assertArrayEquals(new double[] {(-2438.270534068), 3482.32691317112}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3482.32691317112}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.0, (-2.147483648E9), 2.0, 2.0, 3482.32691317112, 2.0, 2.0, (-2438.270534068), 2.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(0, dateArray0.length);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((short)1, (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0.0, 795.9616251841769, 30, week0);
      assertNotNull(xYSeries0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertEquals(30, xYSeries0.getItemCount());
      assertEquals(795.9616251841769, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.001256341974738557, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("", "", (Number[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[24][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(24, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 273, 273);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(273, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(24, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(273, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(24, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate((-2388), (-3490), 107, 273, 107, 273);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Jun 26 10:51:33 GMT 780", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(26, week0.getWeek());
      assertEquals(41366L, week0.getSerialIndex());
      assertEquals(780, week0.getYearValue());
      assertEquals((-86735452107000L), week0.getFirstMillisecond());
      assertEquals((-86735452107001L), week0.getLastMillisecond());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(273, 273, week0, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals("Fri Jun 26 10:51:33 GMT 780", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(26, week0.getWeek());
      assertEquals(41366L, week0.getSerialIndex());
      assertEquals(780, week0.getYearValue());
      assertEquals((-86735452107000L), week0.getFirstMillisecond());
      assertEquals((-86735452107001L), week0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(272, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      dynamicTimeSeriesCollection0.addValue(31, 107, 0.0F);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals("Fri Jun 26 10:51:33 GMT 780", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(26, week0.getWeek());
      assertEquals(41366L, week0.getSerialIndex());
      assertEquals(780, week0.getYearValue());
      assertEquals((-86735452107000L), week0.getFirstMillisecond());
      assertEquals((-86735452107001L), week0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(272, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(dynamicTimeSeriesCollection0, 2405.05479595426);
      assertNotNull(xYBarDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals("Fri Jun 26 10:51:33 GMT 780", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(26, week0.getWeek());
      assertEquals(41366L, week0.getSerialIndex());
      assertEquals(780, week0.getYearValue());
      assertEquals((-86735452107000L), week0.getFirstMillisecond());
      assertEquals((-86735452107001L), week0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(272, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2405.05479595426, xYBarDataset0.getBarWidth(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      
      Short short0 = new Short((short)2318);
      assertNotNull(short0);
      assertEquals((short)2318, (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals("[2318]", stack1.toString());
      assertTrue(stack1.contains((short)2318));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2318);
      assertNotNull(spreadsheetDate0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2318, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2318, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 908.2062190929736, Double.NEGATIVE_INFINITY, 1900, 9999, 3);
      assertNotNull(oHLCDataItem0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2318, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2318, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Stack<Short> stack2 = new Stack<Short>();
      assertNotNull(stack2);
      assertFalse(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      assertTrue(stack2.empty());
      assertTrue(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertEquals(0, stack2.size());
      assertEquals("[]", stack2.toString());
      assertFalse(stack2.contains((short)2318));
      
      boolean boolean1 = stack2.add(short0);
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertTrue(boolean1);
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(stack2.equals((Object)stack1));
      assertTrue(boolean1 == boolean0);
      assertEquals("[2318]", stack2.toString());
      assertEquals(10, stack2.capacity());
      assertEquals(1, stack2.size());
      assertFalse(stack2.isEmpty());
      assertFalse(stack2.empty());
      assertTrue(stack2.contains((short)2318));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 1959.5601416);
      assertNotNull(xYBarDataset0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2318, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1959.5601416, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertNotNull(number0);
      assertEquals(1.39240928229978E12, number0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2318, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1959.5601416, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      String string0 = null;
      String string1 = "QqFxhx,9b{l)LTvB";
      Number[][] numberArray0 = new Number[8][0];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 2;
      numberArray1[1] = (Number) 1;
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
//      try { 
        defaultKeyedValues0.getValue(4);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 4, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      assertNotNull(instant0);
      
      Instant instant1 = MockInstant.minusNanos(instant0, (-5730L));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      
      Date date0 = Date.from(instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(date0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 2093.3, 1334.709511526979, (-5730L), 1532.4, (-2409.86235));
      assertNotNull(oHLCDataItem0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, Double.POSITIVE_INFINITY, 1532.4, 1334.709511526979, (-2409.86235), 38.06736435176);
      assertNotNull(oHLCDataItem1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Short short0 = new Short((short) (-18402));
      assertNotNull(short0);
      assertEquals((short) (-18402), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[-18402]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((short) (-18402)));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-147.69));
      assertNotNull(xYBarDataset0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals((-147.69), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(range0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[-18402]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((short) (-18402)));
      assertEquals(5, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("BWvq", (short)1, 32);
      assertNotNull(matrixSeries0);
      assertEquals(32, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      
      matrixSeries0.addChangeListener((SeriesChangeListener) null);
      assertEquals(32, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(32, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Integer integer0 = new Integer((short)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(32, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[][] doubleArray0 = new double[28][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(28, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(28, doubleArray0.length);
      
      Short short0 = new Short((short)901);
      assertNotNull(short0);
      assertEquals((short)901, (short)short0);
      
      double[][] doubleArray1 = new double[4][7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (short)901;
      doubleArray2[1] = (double) (short)901;
      doubleArray2[2] = (double) (short)901;
      doubleArray2[3] = (double) (short)901;
      doubleArray2[4] = (double) (short)901;
      doubleArray2[5] = (double) (short)901;
      doubleArray2[6] = (double) (short)901;
      doubleArray2[7] = (double) (short)901;
      doubleArray2[8] = (double) (short)901;
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (short)901;
      doubleArray3[1] = (double) (short)901;
      doubleArray3[2] = (double) (short)901;
      doubleArray1[1] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) (short)901;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(4, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      
      Short short0 = new Short((short)2875);
      assertNotNull(short0);
      assertEquals((short)2875, (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals("[2875]", stack1.toString());
      assertTrue(stack1.contains(short0));
      
      Short short1 = new Short((short)2303);
      assertNotNull(short1);
      assertEquals((short)2303, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean1 = stack1.add(short1);
      assertNotSame(stack1, stack0);
      assertTrue(boolean1);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack1.isEmpty());
      assertEquals("[2875, 2303]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(2, stack1.size());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains((short)2875));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2303);
      assertNotNull(spreadsheetDate0);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      CategoryDataset categoryDataset0 = null;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 60, (-1));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-1), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(60, slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short)92);
      assertNotNull(short0);
      assertEquals((short)92, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[92]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short)92));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertEquals("[92]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short)92));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals("[92]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(92.0, range0.getUpperBound(), 0.01);
      assertEquals(92.0, range0.getLowerBound(), 0.01);
      assertEquals(92.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short)92));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) short0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short0, (double) (short)92);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Short short0 = new Short((short) (-3752));
      assertNotNull(short0);
      assertEquals((short) (-3752), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-3752]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-3752]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, arrayList0, true);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) short0, (-1783.8726992866295), (int) (short) (-3752));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotNull(pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short0, (-1783.8726992866295), (int) (short) (-3752));
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotNull(pieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      
      Short short0 = new Short((short)2322);
      assertNotNull(short0);
      assertEquals((short)2322, (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertFalse(stack1.isEmpty());
      assertEquals("[2322]", stack1.toString());
      assertTrue(stack1.contains(short0));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2322);
      assertNotNull(spreadsheetDate0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(10, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(2322, spreadsheetDate0.toSerial());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(10, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(2322, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 908.2062190929736, Double.NEGATIVE_INFINITY, 1900, 9999, 3);
      assertNotNull(oHLCDataItem0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(10, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(2322, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(10, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(2322, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Stack<Short> stack2 = new Stack<Short>();
      assertNotNull(stack2);
      assertFalse(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      assertEquals(10, stack2.capacity());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertEquals("[]", stack2.toString());
      assertEquals(0, stack2.size());
      assertFalse(stack2.contains(short0));
      
      Stream<Short> stream0 = stack2.stream();
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertNotNull(stream0);
      assertFalse(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      assertEquals(10, stack2.capacity());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertEquals("[]", stack2.toString());
      assertEquals(0, stack2.size());
      assertFalse(stack2.contains(short0));
      
      boolean boolean1 = stack2.add(short0);
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertTrue(boolean1);
      assertTrue(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.empty());
      assertEquals("[2322]", stack2.toString());
      assertEquals(1, stack2.size());
      assertFalse(stack2.isEmpty());
      assertTrue(stack2.contains(short0));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 1959.5601416);
      assertNotNull(xYBarDataset0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(10, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(2322, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1959.5601416, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) stack2, true);
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertNotNull(range0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertTrue(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(10, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(2322, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.empty());
      assertEquals("[2322]", stack2.toString());
      assertEquals(1, stack2.size());
      assertFalse(stack2.isEmpty());
      assertEquals(1959.5601416, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1959.56005859375, range0.getLength(), 0.01);
      assertEquals(1.39240928229978E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928034022E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertTrue(stack2.contains(short0));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, stack2, true);
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertTrue(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(range1.equals((Object)range0));
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(10, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(2322, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.empty());
      assertEquals("[2322]", stack2.toString());
      assertEquals(1, stack2.size());
      assertFalse(stack2.isEmpty());
      assertEquals(1959.5601416, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1959.56005859375, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928229978E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928034022E12, range1.getLowerBound(), 0.01);
      assertTrue(stack2.contains(short0));
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[1]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = stack0.add(short0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[1, 1]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(4162.60722352623, Double.POSITIVE_INFINITY, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[1, 1]", stack0.toString());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(short0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[15][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(15, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 331, 2736);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2736, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(331, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(15, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2736, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(331, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(15, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(15, doubleArray0.length);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 667.851, (-1402.0165776338977), 667.851, 667.851, (-50.34));
      assertNotNull(oHLCDataItem0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number1);
      assertEquals((-1402.0165776338977), number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[1]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(short0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = stack0.add(short0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("[1, 1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(short0));
      
      defaultStatisticalCategoryDataset0.add(Double.POSITIVE_INFINITY, (-1.0), (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals("[1, 1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(short0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      
      Short short0 = new Short((short)2303);
      assertNotNull(short0);
      assertEquals((short)2303, (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals("[2303]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.contains(short0));
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2392.9855, 2392.9855);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(2392.9855, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2392.9855, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 2392.9855, 1.7976931348623157E308, 2, short0);
      assertNotNull(xYSeries0);
      assertEquals(2392.9855, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2392.9855, normalDistributionFunction2D0.getMean(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.7976931348623157E308, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.6671320423856841E-4, xYSeries0.getMaxY(), 0.01);
      assertEquals(2392.9855, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      
      Number[][] numberArray0 = new Number[3][4];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 1;
      numberArray2[1] = (Number) 53;
      numberArray2[2] = (Number) 1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) 53;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(27.0, range0.getCentralValue(), 0.01);
      assertEquals(53.0, range0.getUpperBound(), 0.01);
      assertEquals(52.0, range0.getLength(), 0.01);
      assertEquals(3, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[][] doubleArray0 = new double[9][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      short short0 = (short) (-767);
      Short short1 = new Short((short) (-767));
      assertNotNull(short1);
      assertEquals((short) (-767), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertEquals("[-767]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(short0));
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (short) (-767), 1922);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1922, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-767), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Short short0 = new Short((short) (-3752));
      assertNotNull(short0);
      assertEquals((short) (-3752), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(short0));
      
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[6];
      Float float0 = new Float(1303.0F);
      assertNotNull(float0);
      assertEquals(1303.0F, (float)float0, 0.01F);
      
      numberArray1[0] = (Number) float0;
      numberArray1[1] = (Number) short0;
      numberArray1[2] = (Number) short0;
      Double double0 = new Double((short) (-3752));
      assertNotNull(double0);
      assertEquals((-3752.0), (double)double0, 0.01);
      
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) short0;
      numberArray1[5] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) short0;
      numberArray2[2] = (Number) float0;
      numberArray2[3] = (Number) short0;
      numberArray2[4] = (Number) short0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[mean=", "i,>q^|V`\"cdW3", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1303.0, range0.getUpperBound(), 0.01);
      assertEquals(18760.0, range0.getLength(), 0.01);
      assertEquals((-8077.0), range0.getCentralValue(), 0.01);
      assertEquals((-17457.0), range0.getLowerBound(), 0.01);
      assertEquals(2, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(2606.0, number0);
      assertFalse(number0.equals((Object)double0));
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Short short0 = new Short((short) (-3752));
      assertNotNull(short0);
      assertEquals((short) (-3752), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((short) (-3752)));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[-3752]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short) (-3752)));
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Short short0 = new Short((short) (-3752));
      assertNotNull(short0);
      assertEquals((short) (-3752), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains((short) (-3752)));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[-3752]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short) (-3752)));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.isEmpty());
      assertEquals("[-3752]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short) (-3752)));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (short) (-3752);
      doubleArray1[1] = (double) (short) (-3752);
      doubleArray1[2] = (double) (short) (-3752);
      doubleArray1[3] = (double) (short) (-3752);
      doubleArray1[4] = (-318.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-318.0);
      doubleArray2[1] = (-318.0);
      doubleArray2[2] = (double) (short) (-3752);
      doubleArray2[3] = (-318.0);
      doubleArray2[4] = (-318.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (short) (-3752);
      doubleArray3[1] = (-318.0);
      doubleArray3[2] = (-318.0);
      doubleArray3[3] = (double) (short) (-3752);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-318.0);
      doubleArray5[1] = (double) (short) (-3752);
      doubleArray5[2] = (double) (short) (-3752);
      doubleArray5[3] = (double) (short) (-3752);
      doubleArray5[4] = (double) (short) (-3752);
      doubleArray5[5] = (-318.0);
      doubleArray5[6] = (-318.0);
      doubleArray5[7] = (double) (short) (-3752);
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.TimePeriodAnchor", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals((-3752.0), range1.getLowerBound(), 0.01);
      assertEquals((-2035.0), range1.getCentralValue(), 0.01);
      assertEquals((-318.0), range1.getUpperBound(), 0.01);
      assertEquals(3434.0, range1.getLength(), 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      
      boolean boolean0 = stack0.add((Short) null);
      assertNotSame(stack0, stack1);
      assertTrue(boolean0);
      assertFalse(stack0.equals((Object)stack1));
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      Short short0 = new Short((short)2303);
      assertNotNull(short0);
      assertEquals((short)2303, (short)short0);
      
      boolean boolean1 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean1);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals("[2303]", stack1.toString());
      assertTrue(stack1.contains(short0));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2303);
      assertNotNull(spreadsheetDate0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 907.456515, 6, 1900, 9999, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      boolean boolean2 = stack0.add(short0);
      assertNotSame(stack0, stack1);
      assertTrue(boolean2);
      assertFalse(stack0.equals((Object)stack1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(stack0.isEmpty());
      assertEquals("[null, 2303]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short)2303));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (short)2303);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2302, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Short short0 = new Short((short)2102);
      assertNotNull(short0);
      assertEquals((short)2102, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      Short short1 = new Short((short)2102);
      assertNotNull(short1);
      assertEquals((short)2102, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[2102]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(short0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short1, short0);
      assertTrue(short0.equals((Object)short1));
      assertTrue(short1.equals((Object)short0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[2102]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[2102]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2102.0, range0.getUpperBound(), 0.01);
      assertEquals(2102.0, range0.getCentralValue(), 0.01);
      assertEquals(2102.0, range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains(short0));
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, false);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2102.0, range1.getCentralValue(), 0.01);
      assertEquals(2102.0, range1.getUpperBound(), 0.01);
      assertEquals(2102.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 92, 92);
      assertNotNull(matrixSeries0);
      assertEquals(8464, matrixSeries0.getItemCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(92, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(8464, matrixSeries0.getItemCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(92, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(8464, matrixSeries0.getItemCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(92, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(91.0, range0.getLength(), 0.01);
      assertEquals(45.5, range0.getCentralValue(), 0.01);
      assertEquals(91.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(8464, matrixSeries0.getItemCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(92, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(91.0, range1.getUpperBound(), 0.01);
      assertEquals(91.0, range1.getLength(), 0.01);
      assertEquals(45.5, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][0];
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of column keys does not match the number of columns in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Short short0 = Short.valueOf((short)8262);
      assertNotNull(short0);
      assertEquals((short)8262, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains((short)8262));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[8262]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short)8262));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)8262);
      assertNotNull(spreadsheetDate0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1922, spreadsheetDate0.getYYYY());
      assertEquals(14, spreadsheetDate0.getDayOfMonth());
      assertEquals(8262, spreadsheetDate0.toSerial());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1922, spreadsheetDate0.getYYYY());
      assertEquals(14, spreadsheetDate0.getDayOfMonth());
      assertEquals(8262, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-1180.028209938932), 795.9616251841769, (-1180.028209938932), Double.NaN, (-1));
      assertNotNull(oHLCDataItem0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1922, spreadsheetDate0.getYYYY());
      assertEquals(14, spreadsheetDate0.getDayOfMonth());
      assertEquals(8262, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1922, spreadsheetDate0.getYYYY());
      assertEquals(14, spreadsheetDate0.getDayOfMonth());
      assertEquals(8262, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains((short)8262));
      
      Short short2 = new Short((short)638);
      assertNotNull(short2);
      assertEquals((short)638, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      boolean boolean1 = stack1.add(short2);
      assertNotSame(stack1, stack0);
      assertTrue(boolean1);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals("[638]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.contains(short1));
      assertTrue(stack1.contains((short)638));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertNotSame(stack0, stack1);
      assertNotNull(range0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertFalse(stack0.equals((Object)stack1));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[8262]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1922, spreadsheetDate0.getYYYY());
      assertEquals(14, spreadsheetDate0.getDayOfMonth());
      assertEquals(8262, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short)8262));
      assertFalse(stack0.contains(short1));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack1, range0, false);
      assertNotSame(stack0, stack1);
      assertNotSame(stack1, stack0);
      assertNull(range1);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[8262]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1922, spreadsheetDate0.getYYYY());
      assertEquals(14, spreadsheetDate0.getDayOfMonth());
      assertEquals(8262, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals("[638]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short)8262));
      assertFalse(stack0.contains(short1));
      assertFalse(stack1.contains(short1));
      assertTrue(stack1.contains((short)638));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertFalse(range2.equals((Object)range0));
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1922, spreadsheetDate0.getYYYY());
      assertEquals(14, spreadsheetDate0.getDayOfMonth());
      assertEquals(8262, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(795.9616251841769, range2.getUpperBound(), 0.01);
      assertEquals((-1180.028209938932), range2.getLowerBound(), 0.01);
      assertEquals(1975.9898351231088, range2.getLength(), 0.01);
      assertEquals((-192.0332923773775), range2.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Short short0 = Short.valueOf((short)2303);
      assertNotNull(short0);
      assertEquals((short)2303, (short)short0);
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains((short)2303));
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[2303]", stack1.toString());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains((short)2303));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2303);
      assertNotNull(spreadsheetDate0);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 6, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 6);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      
      Short short1 = new Short((short)213);
      assertNotNull(short1);
      assertEquals((short)213, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Stack<Short> stack2 = new Stack<Short>();
      assertNotNull(stack2);
      assertFalse(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      assertTrue(stack2.empty());
      assertEquals(10, stack2.capacity());
      assertEquals(0, stack2.size());
      assertEquals("[]", stack2.toString());
      assertTrue(stack2.isEmpty());
      assertFalse(stack2.contains((short)2303));
      
      boolean boolean1 = stack2.add(short0);
      assertNotSame(stack2, stack0);
      assertNotSame(stack2, stack1);
      assertTrue(boolean1);
      assertFalse(short0.equals((Object)short1));
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(stack2.equals((Object)stack1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stack2.size());
      assertFalse(stack2.empty());
      assertEquals(10, stack2.capacity());
      assertEquals("[2303]", stack2.toString());
      assertFalse(stack2.isEmpty());
      assertTrue(stack2.contains((short)2303));
      assertFalse(stack2.contains(short1));
      
      Range range0 = new Range(1, 9999);
      assertNotNull(range0);
      assertEquals(5000.0, range0.getCentralValue(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(9998.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack2, range0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Week week0 = new Week(20, 20);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(20, week0.getWeek());
      assertEquals(1080L, week0.getSerialIndex());
      assertEquals(20, week0.getYearValue());
      
      Week week1 = (Week)week0.previous();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(20, week0.getWeek());
      assertEquals(1080L, week0.getSerialIndex());
      assertEquals(20, week0.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(19, week1.getWeek());
      assertEquals(20, week1.getYearValue());
      assertEquals(1079L, week1.getSerialIndex());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 566.0722546222734, 20, (-1809.8), 53, 1);
      assertNotNull(oHLCDataItem0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 765.64, 2.0, 53, (-1139.8990860274632), 2171.273666243702);
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset1.getRangeBounds(false);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(range0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1192.8990860274632, range1.getLength(), 0.01);
      assertEquals((-543.4495430137316), range1.getCentralValue(), 0.01);
      assertEquals((-1139.8990860274632), range1.getLowerBound(), 0.01);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      
      Week week1 = (Week)week0.previous();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 566.0722546222734, 5911.444928554169, (-12.4), 1);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 765.64, 566.0722546222734, 1, 2265.7357, (-1850.43));
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short) (-4));
      assertNotNull(short0);
      assertEquals((short) (-4), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-4]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(range0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains(short0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = new Range(53, 53);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(53.0, range1.getCentralValue(), 0.01);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals(53.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(week0, week1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(week1, week0);
      assertNotNull(range2);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(range0.equals((Object)range1));
      assertFalse(week0.equals((Object)week1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(2278.1357000000003, range2.getLength(), 0.01);
      assertEquals((-12.4), range2.getLowerBound(), 0.01);
      assertEquals(1126.66785, range2.getCentralValue(), 0.01);
      assertEquals(2265.7357, range2.getUpperBound(), 0.01);
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains(short0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(double0);
      assertEquals((-1.22192928E13), (double)double0, 0.01);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-269));
      assertNotNull(defaultPieDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) mockGregorianCalendar0, 1063.931268);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNull(range3);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1084, 91);
      assertNotNull(powerFunction2D0);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(91.0, powerFunction2D0.getB(), 0.01);
      
      MockDate mockDate0 = new MockDate(1, (-1146), (-1502), (-1146), (-1502));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1035.828239292322, 1.0, 180.97663396798703, (-1502), 2265.7357);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Apr 01 04:58:00 GMT 1801", mockDate0.toString());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(fixedMillisecond0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset1.getRangeBounds(false);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(range0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (180.97663396798703) <= upper (1.0).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'yData' argument.", 91, 91);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      Week week1 = (Week)week0.previous();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 566.0722546222734, 5911.444928554169, (-12.4), 1);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 765.64, 566.0722546222734, 1, 2265.7357, (-1850.43));
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range1, range0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(range1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(range1.equals((Object)range0));
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(565.0722546222734, range1.getLength(), 0.01);
      assertEquals(566.0722546222734, range1.getUpperBound(), 0.01);
      assertEquals(283.5361273111367, range1.getCentralValue(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      Week week1 = (Week)week0.previous();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 566.0722546222734, 5911.444928554169, (-12.4), 1);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 765.64, 566.0722546222734, 1, 2265.7357, (-1850.43));
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short) (-4));
      assertNotNull(short0);
      assertEquals((short) (-4), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-4]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(range0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-4]", stack0.toString());
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains(short0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(range1, range0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(range1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(range1.equals((Object)range0));
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1126.66785, range1.getCentralValue(), 0.01);
      assertEquals(2278.1357000000003, range1.getLength(), 0.01);
      assertEquals((-12.4), range1.getLowerBound(), 0.01);
      assertEquals(2265.7357, range1.getUpperBound(), 0.01);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(6, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3482.2);
      doubleArray1[1] = 608.92883;
      doubleArray1[2] = (-2356.7142900389117);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-2356.7142900389117));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-3482.2), range0.getLowerBound(), 0.01);
      assertEquals(4091.1288299999997, range0.getLength(), 0.01);
      assertEquals((-1436.635585), range0.getCentralValue(), 0.01);
      assertEquals(608.92883, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 4162.60722352623;
      doubleArray1[1] = (-831.9259251);
      doubleArray1[2] = 2824.90223337;
      doubleArray1[3] = 158.212695;
      doubleArray1[4] = (-3519.53761871);
      doubleArray1[5] = 1.5;
      doubleArray1[6] = 3617.982330190609;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.5;
      doubleArray2[1] = 1.5;
      doubleArray2[2] = (-831.9259251);
      doubleArray2[3] = 3617.982330190609;
      doubleArray2[4] = 158.212695;
      doubleArray2[5] = 2824.90223337;
      doubleArray2[6] = (-831.9259251);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-3519.53761871));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(7683.64484223623, range0.getLength(), 0.01);
      assertEquals(4164.10722352623, range0.getUpperBound(), 0.01);
      assertEquals((-3519.53761871), range0.getLowerBound(), 0.01);
      assertEquals(322.28480240811496, range0.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(91, 1084);
      assertNotNull(powerFunction2D0);
      assertEquals(91.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getB(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      Week week1 = (Week)week0.next();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-558.086893), Double.POSITIVE_INFINITY, 91, week1);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(xYSeries0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(91.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(91, xYSeries0.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(91.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(91, xYSeries0.getItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(range0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(91.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(91, xYSeries0.getItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[28][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(28, doubleArray0.length);
      
      Short short0 = new Short((short)901);
      assertNotNull(short0);
      assertEquals((short)901, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[901]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(28, doubleArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[901]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(stack0.contains(short0));
      assertEquals(28, doubleArray0.length);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[0][0];
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1084, 91);
      assertNotNull(powerFunction2D0);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(91.0, powerFunction2D0.getB(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1179.492330763), 53, 91, week0);
      assertNotNull(xYSeries0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(91.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertTrue(xYSeries0.getNotify());
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-3.624810673791425E282), xYSeries0.getMinY(), 0.01);
      assertEquals(91, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1179.492330763), xYSeries0.getMinX(), 0.01);
      assertEquals(8.792925952634672E159, xYSeries0.getMaxY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(91.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertTrue(xYSeries0.getNotify());
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-3.624810673791425E282), xYSeries0.getMinY(), 0.01);
      assertEquals(91, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1179.492330763), xYSeries0.getMinX(), 0.01);
      assertEquals(8.792925952634672E159, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(91.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertTrue(xYSeries0.getNotify());
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-3.624810673791425E282), xYSeries0.getMinY(), 0.01);
      assertEquals(91, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1179.492330763), xYSeries0.getMinX(), 0.01);
      assertEquals(8.792925952634672E159, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-1179.992330763), range0.getLowerBound(), 0.01);
      assertEquals(53.5, range0.getUpperBound(), 0.01);
      assertEquals((-563.2461653815), range0.getCentralValue(), 0.01);
      assertEquals(1233.492330763, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(91.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertTrue(xYSeries0.getNotify());
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-3.624810673791425E282), xYSeries0.getMinY(), 0.01);
      assertEquals(91, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1179.492330763), xYSeries0.getMinX(), 0.01);
      assertEquals(8.792925952634672E159, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-3.624810673791425E282), range1.getLowerBound(), 0.01);
      assertEquals((-1.8124053368957125E282), range1.getCentralValue(), 0.01);
      assertEquals(3.624810673791425E282, range1.getLength(), 0.01);
      assertEquals(8.792925952634672E159, range1.getUpperBound(), 0.01);
      
      double double0 = 1.7976931348623157E308;
      double double1 = 32.63;
      int int0 = (-2057);
      // Undeclared exception!
//      try { 
        Quarter.parseQuarter("(2");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Missing Q.
//         //
//         verifyException("org.jfree.data.time.Quarter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 92, 92);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(92, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(92, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeries0.addChangeListener(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(92, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValues0);
      assertNotNull(categoryDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 92, 15);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(15, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(92, slidingCategoryDataset0.getFirstCategoryIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(15, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(92, slidingCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(92, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(91.0, range0.getLength(), 0.01);
      assertEquals(45.5, range0.getCentralValue(), 0.01);
      assertEquals(91.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      
      Week week1 = (Week)week0.previous();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 597.95440612, 5911.444928554169, (-12.4), 1);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 765.64, 597.95440612, 1, 2265.7357, (-1850.43));
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      MockDate mockDate0 = (MockDate)week0.getStart();
      assertNotSame(week0, week1);
      assertNotNull(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(range0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(597.95440612, range0.getUpperBound(), 0.01);
      assertEquals(299.47720306, range0.getCentralValue(), 0.01);
      assertEquals(596.95440612, range0.getLength(), 0.01);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(range1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(range1.equals((Object)range0));
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals((-1.22192928E13), range1.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range1.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      
      Short short0 = new Short((short)2303);
      assertNotNull(short0);
      assertEquals((short)2303, (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals("[2303]", stack1.toString());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.contains(short0));
      
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (short)2303;
      doubleArray1[1] = (double) (short)2303;
      doubleArray1[2] = (double) (short)2303;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (short)2303;
      doubleArray3[1] = (double) (short)2303;
      doubleArray3[2] = (double) (short)2303;
      doubleArray3[3] = (double) (short)2303;
      doubleArray3[4] = (double) (short)2303;
      doubleArray3[5] = (double) (short)2303;
      doubleArray3[6] = (double) (short)2303;
      doubleArray3[7] = (double) (short)2303;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-2.147483648E9));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      
      Short short0 = new Short((short)2303);
      assertNotNull(short0);
      assertEquals((short)2303, (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals("[2303]", stack1.toString());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.contains(short0));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2303);
      assertNotNull(spreadsheetDate0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 907.456515, Double.NEGATIVE_INFINITY, 1900, 9999, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Stack<Short> stack2 = new Stack<Short>();
      assertNotNull(stack2);
      assertFalse(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      assertEquals("[]", stack2.toString());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertEquals(0, stack2.size());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.contains(short0));
      
      defaultOHLCDataset0.validateObject();
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Short short1 = new Short((short)120);
      assertNotNull(short1);
      assertEquals((short)120, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean1 = stack2.add(short0);
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertTrue(boolean1);
      assertFalse(short0.equals((Object)short1));
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(stack2.equals((Object)stack1));
      assertTrue(boolean1 == boolean0);
      assertEquals("[2303]", stack2.toString());
      assertEquals(1, stack2.size());
      assertFalse(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.empty());
      assertTrue(stack2.contains(short0));
      assertFalse(stack2.contains((short)120));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 1959.5601416);
      assertNotNull(xYBarDataset0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1959.5601416, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) stack2, true);
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertNotNull(range0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(stack2.equals((Object)stack1));
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[2303]", stack2.toString());
      assertEquals(1, stack2.size());
      assertFalse(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.empty());
      assertEquals(1959.5601416, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1959.56005859375, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928229978E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928034022E12, range0.getLowerBound(), 0.01);
      assertTrue(stack2.contains(short0));
      assertFalse(stack2.contains((short)120));
      assertEquals(1, oHLCDataItemArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack1, short0, oHLCDataItem0);
      assertNotSame(stack1, stack0);
      assertNotSame(stack1, stack2);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(stack1.equals((Object)stack2));
      assertFalse(short0.equals((Object)short1));
      assertEquals("[2303]", stack1.toString());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(stack1.contains((short)120));
      assertTrue(stack1.contains(short0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack2, false);
      assertNotSame(range1, range0);
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(stack2.equals((Object)stack1));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2303.0, range1.getLowerBound(), 0.01);
      assertEquals(2303.0, range1.getUpperBound(), 0.01);
      assertEquals(2303.0, range1.getCentralValue(), 0.01);
      assertEquals("[2303]", stack2.toString());
      assertEquals(1, stack2.size());
      assertFalse(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.empty());
      assertTrue(stack2.contains(short0));
      assertFalse(stack2.contains((short)120));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (1900.0) <= upper (-Infinity).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[][] doubleArray0 = new double[16][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^", "^", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(16, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(16, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(16, doubleArray0.length);
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(day0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap(day0);
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[][] doubleArray0 = new double[16][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^", "^", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(16, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(16, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(16, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(1406L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1850.43), (-1850.43), Double.NaN, (-1850.43), (-1428.525094));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1406L, Double.POSITIVE_INFINITY, 1406L, (-2.147483648E9), Double.NaN);
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(16, doubleArray0.length);
      assertEquals(5, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(16, doubleArray0.length);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short) (-4));
      assertNotNull(short0);
      assertEquals((short) (-4), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((short) (-4)));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-4]", stack0.toString());
      assertTrue(stack0.contains((short) (-4)));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(1406.0, range1.getCentralValue(), 0.01);
      assertEquals(1406.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1406.0, range1.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains((short) (-4)));
      assertEquals(16, doubleArray0.length);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNotSame(range0, range1);
      assertNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains((short) (-4)));
      assertEquals(16, doubleArray0.length);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertEquals(Double.POSITIVE_INFINITY, range3.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getUpperBound(), 0.01);
      assertEquals(1406.0, range3.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(16, doubleArray0.length);
      assertEquals(5, oHLCDataItemArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 92, 92);
      assertNotNull(matrixSeries0);
      assertEquals(92, matrixSeries0.getRowCount());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(92, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(92, matrixSeries0.getRowCount());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeries0.addChangeListener(matrixSeriesCollection0);
      assertEquals(92, matrixSeries0.getRowCount());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(92, matrixSeries0.getRowCount());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(91.0, range0.getLength(), 0.01);
      assertEquals(45.5, range0.getCentralValue(), 0.01);
      assertEquals(91.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(92, matrixSeries0.getRowCount());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(91.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(45.5, range1.getCentralValue(), 0.01);
      assertEquals(91.0, range1.getUpperBound(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      Week week1 = (Week)week0.previous();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 597.95440612, 5911.444928554169, (-12.4), 1);
      assertNotNull(oHLCDataItem0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 765.64, 597.95440612, 1, 2265.7357, (-1850.43));
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short) (-4));
      assertNotNull(short0);
      assertEquals((short) (-4), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[-4]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(range0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals("[-4]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains(short0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(range1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(range1.equals((Object)range0));
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals("[-4]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(596.95440612, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(597.95440612, range1.getUpperBound(), 0.01);
      assertEquals(299.47720306, range1.getCentralValue(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains(short0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(week0, week1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(week1, week0);
      assertNotNull(range2);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(596.95440612, range2.getLength(), 0.01);
      assertEquals(299.47720306, range2.getCentralValue(), 0.01);
      assertEquals(597.95440612, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range2, false);
      assertNotSame(week0, week1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(week1, week0);
      assertNull(range3);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(week1.equals((Object)week0));
      assertEquals("[-4]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(596.95440612, range2.getLength(), 0.01);
      assertEquals(299.47720306, range2.getCentralValue(), 0.01);
      assertEquals(597.95440612, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains(short0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(double0);
      assertEquals((-1.22192928E13), (double)double0, 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      
      Short short0 = new Short((short)2303);
      assertNotNull(short0);
      assertEquals((short)2303, (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals("[2303]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains((short)2303));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2303);
      assertNotNull(spreadsheetDate0);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 907.456515, Double.NEGATIVE_INFINITY, 1900, 9999, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Stack<Short> stack2 = new Stack<Short>();
      assertNotNull(stack2);
      assertTrue(stack2.equals((Object)stack0));
      assertFalse(stack2.equals((Object)stack1));
      assertEquals("[]", stack2.toString());
      assertEquals(10, stack2.capacity());
      assertEquals(0, stack2.size());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertFalse(stack2.contains((short)2303));
      
      Short short1 = new Short((short)120);
      assertNotNull(short1);
      assertEquals((short)120, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean1 = stack2.add(short0);
      assertNotSame(stack2, stack0);
      assertNotSame(stack2, stack1);
      assertTrue(boolean1);
      assertFalse(short0.equals((Object)short1));
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(stack2.equals((Object)stack1));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertEquals(1, stack2.size());
      assertEquals("[2303]", stack2.toString());
      assertFalse(stack2.empty());
      assertFalse(stack2.contains((short)120));
      assertTrue(stack2.contains((short)2303));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(short0);
      assertNotNull(simpleHistogramDataset0);
      assertFalse(short0.equals((Object)short1));
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotNull(range0);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 2);
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[][] doubleArray0 = new double[20][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, doubleArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("&");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1199), (-1199), 1);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1199,MONTH=-1199,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, (-1199), (-1199), (-1199), Double.NEGATIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1199,MONTH=-1199,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1199,MONTH=-1199,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1199,MONTH=-1199,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short) (-4));
      assertNotNull(short0);
      assertEquals((short) (-4), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((short) (-4)));
      
      Short short1 = new Short((short) (-4));
      assertNotNull(short1);
      assertEquals((short) (-4), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(short1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1199,MONTH=-1199,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(short1));
      assertEquals(4, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1199.0), range1.getLowerBound(), 0.01);
      assertEquals((-1199.0), range1.getCentralValue(), 0.01);
      assertEquals((-1199.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1199,MONTH=-1199,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-4]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(short1));
      assertEquals(4, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range2);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0);
      assertNull(range1);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 134.19296232000693;
      doubleArray1[1] = 555.48496;
      doubleArray1[2] = (-1548.32146301979);
      doubleArray1[3] = 2687.196291476;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2687.196291476;
      doubleArray3[1] = 555.48496;
      doubleArray3[2] = (-1548.32146301979);
      doubleArray3[3] = 134.19296232000693;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = 134.19296232000693;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-1548.32146301979);
      doubleArray5[1] = 134.19296232000693;
      doubleArray5[2] = 2687.196291476;
      doubleArray5[3] = 2687.196291476;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = Double.NEGATIVE_INFINITY;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = Double.NEGATIVE_INFINITY;
      doubleArray6[5] = Double.NEGATIVE_INFINITY;
      doubleArray6[6] = 2687.196291476;
      doubleArray6[7] = 555.48496;
      doubleArray6[8] = 2687.196291476;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      
      Short short0 = new Short((short)2303);
      assertNotNull(short0);
      assertEquals((short)2303, (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals("[2303]", stack1.toString());
      assertTrue(stack1.contains((short)2303));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2303);
      assertNotNull(spreadsheetDate0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 907.456515, Double.NEGATIVE_INFINITY, 1900, 9999, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Stack<Short> stack2 = new Stack<Short>();
      assertNotNull(stack2);
      assertTrue(stack2.equals((Object)stack0));
      assertFalse(stack2.equals((Object)stack1));
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertEquals(0, stack2.size());
      assertEquals(10, stack2.capacity());
      assertEquals("[]", stack2.toString());
      assertFalse(stack2.contains((short)2303));
      
      Short short1 = new Short((short)120);
      assertNotNull(short1);
      assertEquals((short)120, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean1 = stack2.add(short0);
      assertNotSame(stack2, stack0);
      assertNotSame(stack2, stack1);
      assertTrue(boolean1);
      assertFalse(short0.equals((Object)short1));
      assertTrue(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack2.isEmpty());
      assertEquals("[2303]", stack2.toString());
      assertEquals(1, stack2.size());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.empty());
      assertTrue(stack2.contains((short)2303));
      assertFalse(stack2.contains(short1));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 1959.5601416);
      assertNotNull(xYBarDataset0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1959.5601416, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) stack2, true);
      assertNotSame(stack2, stack0);
      assertNotSame(stack2, stack1);
      assertNotNull(range0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertTrue(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack2.isEmpty());
      assertEquals("[2303]", stack2.toString());
      assertEquals(1, stack2.size());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.empty());
      assertEquals(1959.5601416, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.39240928034022E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928229978E12, range0.getUpperBound(), 0.01);
      assertEquals(1959.56005859375, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertTrue(stack2.contains((short)2303));
      assertFalse(stack2.contains(short1));
      assertEquals(1, oHLCDataItemArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack1, short0, oHLCDataItem0);
      assertNotSame(stack1, stack2);
      assertNotSame(stack1, stack0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertTrue(stack1.equals((Object)stack2));
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(short0.equals((Object)short1));
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals("[2303]", stack1.toString());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(stack1.contains(short1));
      assertTrue(stack1.contains((short)2303));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack2, false);
      assertNotSame(range1, range0);
      assertNotSame(stack2, stack0);
      assertNotSame(stack2, stack1);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2303.0, range1.getCentralValue(), 0.01);
      assertEquals(2303.0, range1.getUpperBound(), 0.01);
      assertEquals(2303.0, range1.getLowerBound(), 0.01);
      assertFalse(stack2.isEmpty());
      assertEquals("[2303]", stack2.toString());
      assertEquals(1, stack2.size());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.empty());
      assertTrue(stack2.contains((short)2303));
      assertFalse(stack2.contains(short1));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      
      short short0 = (short)2303;
      Short short1 = new Short((short)2303);
      assertNotNull(short1);
      assertEquals((short)2303, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack1.add(short1);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(short1.equals((Object)short0));
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals("[2303]", stack1.toString());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains(short1));
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate((short)2303);
      assertNotNull(spreadsheetDate0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 907.456515, Double.NEGATIVE_INFINITY, 1900, 9999, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Stack<Short> stack2 = new Stack<Short>();
      assertNotNull(stack2);
      assertTrue(stack2.equals((Object)stack0));
      assertFalse(stack2.equals((Object)stack1));
      assertEquals("[]", stack2.toString());
      assertTrue(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertEquals(0, stack2.size());
      assertTrue(stack2.empty());
      assertFalse(stack2.contains(short1));
      
      Short short2 = new Short((short)120);
      assertNotNull(short2);
      assertEquals((short)120, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      boolean boolean1 = stack2.add(short1);
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertTrue(boolean1);
      assertTrue(short1.equals((Object)short0));
      assertFalse(short1.equals((Object)short2));
      assertTrue(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stack2.size());
      assertEquals(10, stack2.capacity());
      assertEquals("[2303]", stack2.toString());
      assertFalse(stack2.empty());
      assertFalse(stack2.isEmpty());
      assertTrue(stack2.contains((short)2303));
      assertFalse(stack2.contains(short2));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 1959.5601416);
      assertNotNull(xYBarDataset0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1959.5601416, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) stack2, true);
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertNotNull(range0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.SUNDAY);
      assertTrue(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, stack2.size());
      assertEquals(10, stack2.capacity());
      assertEquals("[2303]", stack2.toString());
      assertFalse(stack2.empty());
      assertFalse(stack2.isEmpty());
      assertEquals(1959.5601416, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.39240928034022E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928229978E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1959.56005859375, range0.getLength(), 0.01);
      assertTrue(stack2.contains((short)2303));
      assertFalse(stack2.contains(short2));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
      assertNotSame(stack0, stack2);
      assertNotSame(stack0, stack1);
      assertNull(range1);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.SUNDAY);
      assertFalse(stack0.equals((Object)stack2));
      assertFalse(stack0.equals((Object)stack1));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.contains((short)2303));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.SUNDAY);
      assertFalse(range2.equals((Object)range0));
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(1906, spreadsheetDate0.getYYYY());
      assertEquals(2303, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(21, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "Null 'rowKeys' argument.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "";
      MatrixSeries matrixSeries0 = new MatrixSeries("", 92, 92);
      assertNotNull(matrixSeries0);
      assertEquals(92, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(92, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(92, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(91.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(45.5, range0.getCentralValue(), 0.01);
      assertEquals(91.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Short short0 = new Short((short)2102);
      assertNotNull(short0);
      assertEquals((short)2102, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      Short short1 = new Short((short)2102);
      assertNotNull(short1);
      assertEquals((short)2102, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(stack0.empty());
      assertEquals("[2102]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short)2102));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short1, short0);
      assertTrue(short0.equals((Object)short1));
      assertTrue(short1.equals((Object)short0));
      assertFalse(stack0.empty());
      assertEquals("[2102]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short)2102));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertFalse(stack0.empty());
      assertEquals("[2102]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(2102.0, range0.getCentralValue(), 0.01);
      assertEquals(2102.0, range0.getUpperBound(), 0.01);
      assertEquals(2102.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short)2102));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 31, 31);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(31, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(31, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      slidingGanttCategoryDataset0.setMaximumCategoryCount(31);
      assertEquals(31, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(31, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) 31);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(0L, long0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 23, (-2162.219644938), (-2162.219644938), 23, (-2638.5088687631));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short) (-25));
      assertNotNull(short0);
      assertEquals((short) (-25), (short)short0);
      
      Range range0 = new Range((-2638.5088687631), (-1545.0));
      assertNotNull(range0);
      assertEquals((-2638.5088687631), range0.getLowerBound(), 0.01);
      assertEquals((-2091.75443438155), range0.getCentralValue(), 0.01);
      assertEquals(1093.5088687631, range0.getLength(), 0.01);
      assertEquals((-1545.0), range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[6][8];
      Number[] numberArray1 = new Number[1];
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      numberArray2[0] = (Number) byte0;
      numberArray2[1] = (Number) float0;
      numberArray2[2] = (Number) float0;
      numberArray2[3] = (Number) float0;
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) float0;
      numberArray2[6] = (Number) float0;
      numberArray2[7] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) byte0;
      numberArray4[1] = (Number) float0;
      numberArray4[2] = (Number) float0;
      numberArray4[3] = (Number) float0;
      numberArray4[4] = (Number) float0;
      numberArray4[5] = (Number) byte0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[8];
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      
      numberArray5[0] = (Number) float0;
      numberArray5[1] = (Number) float0;
      numberArray5[2] = (Number) float0;
      numberArray5[3] = (Number) float0;
      numberArray5[4] = (Number) byte0;
      numberArray5[5] = (Number) float0;
      numberArray5[6] = (Number) byte0;
      numberArray5[7] = (Number) float0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[3];
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray4));
      
      numberArray6[0] = (Number) byte0;
      numberArray6[1] = (Number) byte0;
      numberArray6[2] = (Number) byte0;
      numberArray0[5] = numberArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, numberArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      ArrayList<IntervalXYDelegate> arrayList0 = new ArrayList<IntervalXYDelegate>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = arrayList0.add(intervalXYDelegate0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(arrayList0.contains(intervalXYDelegate0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.IntervalXYDelegate cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 23, (-2162.219644938), (-2162.219644938), 23, (-2638.5088687631));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short) (-25));
      assertNotNull(short0);
      assertEquals((short) (-25), (short)short0);
      
      Range range0 = new Range((-2638.5088687631), (-1545.0));
      assertNotNull(range0);
      assertEquals((-2091.75443438155), range0.getCentralValue(), 0.01);
      assertEquals(1093.5088687631, range0.getLength(), 0.01);
      assertEquals((-1545.0), range0.getUpperBound(), 0.01);
      assertEquals((-2638.5088687631), range0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1800, 1800, (-3335), 100, 1800);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.5, 1800, 1800, 485.82708312, 836.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Nov 18 10:00:00 GMT 3840", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Nov 18 10:00:00 GMT 3840", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      xYDatasetTableModel0.fireTableRowsInserted(23, 100);
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals("Wed Nov 18 10:00:00 GMT 3840", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short)273);
      assertNotNull(short0);
      assertEquals((short)273, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((short)273));
      
      Short short1 = new Short((short)273);
      assertNotNull(short1);
      assertEquals((short)273, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)273);
      assertNotNull(short2);
      assertEquals((short)273, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertTrue(short0.equals((Object)short1));
      assertTrue(short0.equals((Object)short2));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[273]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals("Wed Nov 18 10:00:00 GMT 3840", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[273]", stack0.toString());
      assertEquals(5.9039316E13, range0.getUpperBound(), 0.01);
      assertEquals(5.9039316E13, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(5.9039316E13, range0.getCentralValue(), 0.01);
      assertTrue(stack0.contains(short0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals("Wed Nov 18 10:00:00 GMT 3840", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1800.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1800.0, range1.getUpperBound(), 0.01);
      assertEquals(1800.0, range1.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      String string0 = "yC{`\\1gG'DL@nv:";
      Number[][] numberArray0 = new Number[9][8];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) short1;
      numberArray1[1] = (Number) short0;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      // Undeclared exception!
//      try { 
        defaultKeyedValuesDataset0.getValue((Comparable) short1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The key (273) is not recognised.
//         //
//         verifyException("org.jfree.data.KeyedObjects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = new double[20][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&", "&", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, doubleArray0.length);
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((short) (-1)));
      
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-1]", stack0.toString());
      assertTrue(stack0.contains((short) (-1)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<XYBarDataset> stack1 = new Stack<XYBarDataset>();
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      
      defaultMultiValueCategoryDataset0.add(stack1, short1, "&");
      assertTrue(short1.equals((Object)short0));
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-1]", stack0.toString());
      assertTrue(stack0.contains((short) (-1)));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Stack stack1 = new Stack<XYDatasetTableModel>();
      assertNotNull(stack1);
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      
      Short short0 = new Short((short) (-318));
      assertNotNull(short0);
      assertEquals((short) (-318), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-318]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short) (-318)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-318]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short) (-318)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-318.0), range0.getCentralValue(), 0.01);
      assertEquals((-318.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-318.0), range0.getLowerBound(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index outside valid range.
//         //
//         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      
      Short short0 = new Short((short)2318);
      assertNotNull(short0);
      assertEquals((short)2318, (short)short0);
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.isEmpty());
      assertEquals("[2318]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains((short)2318));
      
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 907.456515, Double.NEGATIVE_INFINITY, 1900, 9999, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date1 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotSame(date1, date0);
      assertNotNull(date1);
      assertTrue(date1.equals((Object)date0));
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      
      MockDate mockDate0 = new MockDate((-3655L));
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[9];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = date1;
      dateArray0[4] = date1;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = date0;
      dateArray0[7] = date0;
      dateArray0[8] = date1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray2);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertTrue(date0.equals((Object)date1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(9, dateArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(714, 0, hour0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-6), (-1), (-3076), 0, (-1321), 0);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      MockDate mockDate2 = new MockDate((short)1);
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate2;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = date0;
      dateArray0[3] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3076);
      doubleArray0[1] = (double) (-1321);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-3076.0), (-1321.0)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-3076.0), (-1321.0)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4.05931094132E12, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals((-6.3724618934E11), range0.getCentralValue(), 0.01);
      assertEquals((-2.66690166E12), range0.getLowerBound(), 0.01);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertArrayEquals(new double[] {(-3076.0), (-1321.0)}, doubleArray0, 0.01);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4.05931094132E12, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals((-6.3724618934E11), range0.getCentralValue(), 0.01);
      assertEquals((-2.66690166E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.66690166E12), range1.getLowerBound(), 0.01);
      assertEquals((-6.3724618934E11), range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(4.05931094132E12, range1.getLength(), 0.01);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Range range2 = Range.shift(range1, (-1.0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertArrayEquals(new double[] {(-3076.0), (-1321.0)}, doubleArray0, 0.01);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4.05931094132E12, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals((-6.3724618934E11), range0.getCentralValue(), 0.01);
      assertEquals((-2.66690166E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.66690166E12), range1.getLowerBound(), 0.01);
      assertEquals((-6.3724618934E11), range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(4.05931094132E12, range1.getLength(), 0.01);
      assertEquals(1.392409281319E12, range2.getUpperBound(), 0.01);
      assertEquals((-2.666901660001E12), range2.getLowerBound(), 0.01);
      assertEquals((-6.37246189341E11), range2.getCentralValue(), 0.01);
      assertEquals(4.05931094132E12, range2.getLength(), 0.01);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range2, false);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNull(range3);
      assertArrayEquals(new double[] {(-3076.0), (-1321.0)}, doubleArray0, 0.01);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(4.05931094132E12, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals((-6.3724618934E11), range0.getCentralValue(), 0.01);
      assertEquals((-2.66690166E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.66690166E12), range1.getLowerBound(), 0.01);
      assertEquals((-6.3724618934E11), range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(4.05931094132E12, range1.getLength(), 0.01);
      assertEquals(1.392409281319E12, range2.getUpperBound(), 0.01);
      assertEquals((-2.666901660001E12), range2.getLowerBound(), 0.01);
      assertEquals((-6.37246189341E11), range2.getCentralValue(), 0.01);
      assertEquals(4.05931094132E12, range2.getLength(), 0.01);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = 91;
      MatrixSeries matrixSeries0 = new MatrixSeries("", 91, 91);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(90.0, range0.getLength(), 0.01);
      assertEquals(45.0, range0.getCentralValue(), 0.01);
      assertEquals(90.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("w");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2173.095023202619), 624.39438437606);
      assertNotNull(simpleHistogramBin0);
      assertEquals((-2173.095023202619), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(624.39438437606, simpleHistogramBin0.getUpperBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-2173.095023202619), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(624.39438437606, simpleHistogramBin0.getUpperBound(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNotNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-774.3503194132795), range0.getCentralValue(), 0.01);
      assertEquals((-774.3503194132795), range0.getUpperBound(), 0.01);
      assertEquals((-774.3503194132795), range0.getLowerBound(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      int int0 = taskSeriesCollection0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1084, (-454.9));
      assertNotNull(powerFunction2D0);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1876.5610659371137), 795.9616251841769, 1084, week0);
      assertNotNull(xYSeries0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1084, xYSeries0.getItemCount());
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.3185974867719638E-58, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1876.5610659371137), xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1084, xYSeries0.getItemCount());
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.3185974867719638E-58, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1876.5610659371137), xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1084, xYSeries0.getItemCount());
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.3185974867719638E-58, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1876.5610659371137), xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(2673.5226911212903, range0.getLength(), 0.01);
      assertEquals((-540.2997203764685), range0.getCentralValue(), 0.01);
      assertEquals(796.4616251841767, range0.getUpperBound(), 0.01);
      assertEquals((-1877.0610659371137), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[][] doubleArray0 = new double[15][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("X{rC)BZd)", "X{rC)BZd)", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((Short) null);
      assertTrue(boolean0);
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      Short short0 = new Short((short)25);
      assertNotNull(short0);
      assertEquals((short)25, (short)short0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(15, doubleArray0.length);
      
      Date[] dateArray0 = new Date[6];
      MockDate mockDate0 = new MockDate((short)25, (-1321), (short)25, (short)25, (short)25, (-1321));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(dateArray0[0], (-2.147483648E9), (-1.0), (-2.147483648E9), 0.5, (short)25);
      assertNotNull(oHLCDataItem0);
      assertEquals(6, dateArray0.length);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Short short1 = new Short((short)25);
      assertNotNull(short1);
      assertEquals((short)25, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)1069);
      assertNotNull(short2);
      assertEquals((short)1069, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      boolean boolean1 = stack0.add(short2);
      assertTrue(boolean1);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertEquals("[null, 1069]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains((short)25));
      assertTrue(stack0.contains((short)1069));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotSame(range1, range0);
      assertNotSame(mockDate1, mockDate0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("[null, 1069]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals((-4.891877821E12), range1.getLowerBound(), 0.01);
      assertEquals((-4.891877821E12), range1.getUpperBound(), 0.01);
      assertEquals((-4.891877821E12), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.contains((short)25));
      assertTrue(stack0.contains((short)1069));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range1, true);
      assertNotSame(range1, range0);
      assertNotSame(mockDate1, mockDate0);
      assertNull(range2);
      assertFalse(range1.equals((Object)range0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[null, 1069]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals((-4.891877821E12), range1.getLowerBound(), 0.01);
      assertEquals((-4.891877821E12), range1.getUpperBound(), 0.01);
      assertEquals((-4.891877821E12), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.contains(defaultOHLCDataset0));
      assertFalse(stack0.contains((short)25));
      assertTrue(stack0.contains((short)1069));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(mockDate1, mockDate0);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals((-1.0737418245E9), range3.getCentralValue(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertEquals((-2.147483648E9), range3.getLowerBound(), 0.01);
      assertEquals(2.147483647E9, range3.getLength(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.5, 1785, 1785, 485.82708312, 836.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 836.0, 91.43985659057863, 1202.188, 836.0, 1785);
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      xYDatasetTableModel0.fireTableRowsInserted(23, 100);
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short)273);
      assertNotNull(short0);
      assertEquals((short)273, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((short)273));
      
      Short short1 = new Short((short)273);
      assertNotNull(short1);
      assertEquals((short)273, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[273]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(short1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(range0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[273]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(short1));
      assertEquals(2, oHLCDataItemArray0.length);
      
      String string0 = range0.toString();
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(string0);
      assertEquals("Range[1.39240928132E12,1.39240928132E12]", string0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[273]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(short1));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNotSame(range1, range0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(range0, range1);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(485.82708312, range1.getUpperBound(), 0.01);
      assertEquals(485.82708312, range1.getLowerBound(), 0.01);
      assertEquals(485.82708312, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[273]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(short1));
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(number0);
      assertEquals(1785.0, number0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[20][4];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, numberArray0.length);
      
      Short short0 = new Short((short)15);
      assertNotNull(short0);
      assertEquals((short)15, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(short0));
      
      Short short1 = new Short((short)60);
      assertNotNull(short1);
      assertEquals((short)60, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (short)60);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(60, categoryToPieDataset0.getExtractIndex());
      assertEquals(20, numberArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 60, Size: 20
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[][] doubleArray0 = new double[28][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(28, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(28, doubleArray0.length);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("1|2#=zR2/uP", 31, 1);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(31, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(31, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(31, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-3125.291655061188);
      doubleArray1[1] = 806.285261;
      doubleArray1[2] = 156.0;
      doubleArray1[3] = (-2772.80846419);
      doubleArray1[4] = (-831.9259251);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2772.80846419);
      doubleArray2[1] = (-831.9259251);
      doubleArray2[2] = 156.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[][] doubleArray0 = new double[15][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("X{rC)BZd)", "X{rC)BZd)", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add((Short) null);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short)25);
      assertNotNull(short0);
      assertEquals((short)25, (short)short0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(15, doubleArray0.length);
      
      Date[] dateArray0 = new Date[6];
      MockDate mockDate0 = new MockDate(1623, (-1321), 1623, 1623, 1623, (-1321));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      dateArray0[3] = date0;
      MockDate mockDate2 = new MockDate(1623);
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      
      dateArray0[4] = (Date) mockDate1;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-1321);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(short0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-1321.0)}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, doubleArray1.length);
      assertEquals(6, dateArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[][] doubleArray0 = new double[15][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("X{rC)BZd)", "X{rC)BZd)", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add((Short) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      Short short0 = new Short((short)25);
      assertNotNull(short0);
      assertEquals((short)25, (short)short0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(15, doubleArray0.length);
      
      Date[] dateArray0 = new Date[6];
      MockDate mockDate0 = new MockDate(1623, (-1321), 1623, 1623, 1623, (-1321));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1321), "X{rC)BZd)");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1321), simpleTimeZone0.getRawOffset());
      assertEquals("X{rC)BZd)", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=X{rC)BZd),offset=-1321,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1321), simpleTimeZone0.getRawOffset());
      assertEquals("X{rC)BZd)", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=X{rC)BZd),offset=-1321,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=X{rC)BZd),offset=-1321,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=19,MILLISECOND=999,ZONE_OFFSET=-1321,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      dateArray0[2] = date0;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date1 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotSame(date1, date0);
      assertNotNull(date1);
      assertFalse(date1.equals((Object)date0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      
      dateArray0[3] = date1;
      MockDate mockDate2 = new MockDate(1623);
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      
      dateArray0[4] = (Date) mockDate1;
      MockDate mockDate3 = new MockDate((-1321), 1623, 8277, 2, 8271, 2);
      assertNotNull(mockDate3);
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertFalse(mockDate3.equals((Object)mockDate1));
      assertFalse(mockDate3.equals((Object)mockDate0));
      
      dateArray0[5] = (Date) mockDate3;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 8277;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(short0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {8277.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(6, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1173.6894496);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1173.6894496);
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = (-1173.6894496);
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-1173.6894496), range0.getLowerBound(), 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      
      Short short0 = new Short((short) (-342));
      assertNotNull(short0);
      assertEquals((short) (-342), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-342]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(short0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-342]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(short0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) short0);
      assertNotNull(defaultPieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[][] doubleArray0 = new double[28][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(28, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(28, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(28, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(28, doubleArray0.length);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("+8s8E&!T[v'2u\"", 278, 31);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(278, matrixSeries0.getRowCount());
      assertEquals(8618, matrixSeries0.getItemCount());
      
      matrixSeries0.removeChangeListener(defaultIntervalCategoryDataset0);
      assertEquals(28, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(278, matrixSeries0.getRowCount());
      assertEquals(8618, matrixSeries0.getItemCount());
      assertEquals(28, doubleArray0.length);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(278, matrixSeries0.getRowCount());
      assertEquals(8618, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(278, matrixSeries0.getRowCount());
      assertEquals(8618, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(30.0, range0.getLength(), 0.01);
      assertEquals(15.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(278, matrixSeries0.getRowCount());
      assertEquals(8618, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(277.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(138.5, range1.getCentralValue(), 0.01);
      assertEquals(277.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 2255);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.capacity());
      
      Short short0 = new Short((short) (-342));
      assertNotNull(short0);
      assertEquals((short) (-342), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-342]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short) (-342)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-342]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short) (-342)));
      
      Comparable comparable0 = defaultMultiValueCategoryDataset0.getColumnKey(0);
      assertNotNull(comparable0);
      assertEquals((short) (-342), comparable0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-342]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals((-342.0), range0.getCentralValue(), 0.01);
      assertEquals((-342.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-342.0), range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains(comparable0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      
      short short0 = (short)1546;
      Short short1 = new Short((short)1546);
      assertNotNull(short1);
      assertEquals((short)1546, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      short short2 = (short)2271;
      Short short3 = new Short((short)2271);
      assertNotNull(short3);
      assertEquals((short)2271, (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      
      boolean boolean0 = stack1.add(short3);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertEquals("[2271]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertFalse(stack1.contains((short)1546));
      assertTrue(stack1.contains(short2));
      
      Short short4 = new Short((short)1546);
      assertNotNull(short4);
      assertEquals((short)1546, (short)short4);
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      
      Short short0 = new Short((short) (-342));
      assertNotNull(short0);
      assertEquals((short) (-342), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[-342]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short) (-342)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, short0, short0);
      assertEquals("[-342]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short) (-342)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals("[-342]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals((-342.0), range0.getLowerBound(), 0.01);
      assertEquals((-342.0), range0.getCentralValue(), 0.01);
      assertEquals((-342.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short) (-342)));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2175.1), 624.39438437606);
      assertNotNull(simpleHistogramBin0);
      assertEquals((-2175.1), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(624.39438437606, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-2175.1), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(624.39438437606, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertFalse(boolean0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNotNull(number0);
      assertEquals((-2175.1), number0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[7][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("%azW}|4x-", "5{Ii{k`k", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(7, numberArray0.length);
      
      Comparable<DynamicTimeSeriesCollection>[] comparableArray0 = (Comparable<DynamicTimeSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.8, (-2508.5951623422097), 4, 310.365368013, 0.8);
      assertNotNull(oHLCDataItem0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-2638.5088687631), 865.9769215446404, (-1), 2, 7);
      assertNotNull(oHLCDataItem1);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short1 = new Short((short) (-25));
      assertNotNull(short1);
      assertEquals((short) (-25), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Range range0 = new Range(0, 2);
      assertNotNull(range0);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1.39240928132E12, number0);
      assertFalse(short0.equals((Object)short1));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1900;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertFalse(boolean0);
      assertFalse(short0.equals((Object)short1));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = Range.shift(range0, 0.0, true);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertNotNull(number1);
      assertEquals(1.39240928132E12, number1);
      assertTrue(number1.equals((Object)number0));
      assertFalse(short0.equals((Object)short1));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNotSame(range0, range1);
      assertNull(range2);
      assertFalse(short0.equals((Object)short1));
      assertTrue(range0.equals((Object)range1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range3);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) (short) (-25));
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Comparable<CategoryTableXYDataset>[] comparableArray0 = null;
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = 2800.9779310984;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = 2800.9779310984;
      doubleArray3[2] = 1.7976931348623157E308;
      doubleArray3[3] = 2800.9779310984;
      doubleArray3[4] = 1.7976931348623157E308;
      doubleArray3[5] = 2800.9779310984;
      doubleArray3[6] = 2800.9779310984;
      doubleArray3[7] = 2800.9779310984;
      doubleArray3[8] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 119.91, 4, (-1769.952866309425), 0, 0.0);
      assertNotNull(oHLCDataItem0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 9999, (-4213.0), (-2508.5951623422097), 151.9148111, 2475.6);
      assertNotNull(oHLCDataItem1);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short1 = new Short((short) (-426));
      assertNotNull(short1);
      assertEquals((short) (-426), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Range range0 = new Range((-1769.952866309425), 250);
      assertNotNull(range0);
      assertEquals(2019.952866309425, range0.getLength(), 0.01);
      assertEquals(250.0, range0.getUpperBound(), 0.01);
      assertEquals((-1769.952866309425), range0.getLowerBound(), 0.01);
      assertEquals((-759.9764331547125), range0.getCentralValue(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertFalse(boolean0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, Double.NEGATIVE_INFINITY, 2, 0.8, 9999, 7);
      assertNotNull(oHLCDataItem0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, Double.NEGATIVE_INFINITY, 4, 689.0, (short) (-426), (-1.0));
      assertNotNull(oHLCDataItem1);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short1 = new Short((short) (-25));
      assertNotNull(short1);
      assertEquals((short) (-25), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      Short short0 = new Short((short)177);
      assertNotNull(short0);
      assertEquals((short)177, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[177]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(short0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertEquals("[177]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(short0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[][] doubleArray0 = new double[28][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(28, doubleArray0.length);
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DatasetUtilities", 80, 80);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(80, matrixSeries0.getColumnsCount());
      assertEquals(6400, matrixSeries0.getItemCount());
      assertEquals(80, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short) (-558));
      assertNotNull(short0);
      assertEquals((short) (-558), (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[-558]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short) (-558)));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals("[-558]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short) (-558)));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1016.6471326817;
      doubleArray1[1] = 1503.8347;
      doubleArray1[2] = 1.5;
      doubleArray1[3] = 91.0;
      doubleArray1[4] = 1.5;
      doubleArray1[5] = (-2.147483648E9);
      doubleArray1[6] = 3438.087982438;
      doubleArray1[7] = 983.04231;
      doubleArray1[8] = 1.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("I:o!O\"h)t oyN+Xh %B", "I:o!O\"h)t oyN+Xh %B", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList1 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("I:o!O\"h)t oyN+Xh %B", "p\"E", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset1, 1503.8347);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(range0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals((-1.0737386011213087E9), range0.getCentralValue(), 0.01);
      assertEquals(4941.922682438, range0.getUpperBound(), 0.01);
      assertEquals(2.147487086087982E9, range0.getLength(), 0.01);
      assertEquals((-2.1474821441653E9), range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(boolean0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotSame(range1, range0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(3438.087982438, range1.getUpperBound(), 0.01);
      assertEquals(2.1474870860879827E9, range1.getLength(), 0.01);
      assertEquals((-2.147483648E9), range1.getLowerBound(), 0.01);
      assertEquals((-1.0737401049560088E9), range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3707.8944396;
      doubleArray1[1] = 1252.0259711871;
      doubleArray1[2] = (-376.1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1252.0259711871;
      doubleArray2[1] = 3707.8944396;
      doubleArray2[2] = (-1799.0);
      doubleArray2[3] = (-376.1);
      doubleArray2[4] = 1252.0259711871;
      doubleArray2[5] = (-376.1);
      doubleArray2[6] = 3707.8944396;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 3707.8944396;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9[XQ(:b0sbQ%jH", "]ST-W]^", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(8667.8148503871, range0.getUpperBound(), 0.01);
      assertEquals(10842.9148503871, range0.getLength(), 0.01);
      assertEquals((-2175.1), range0.getLowerBound(), 0.01);
      assertEquals(3246.3574251935497, range0.getCentralValue(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(954.4472198000001, range1.getCentralValue(), 0.01);
      assertEquals(3707.8944396, range1.getUpperBound(), 0.01);
      assertEquals((-1799.0), range1.getLowerBound(), 0.01);
      assertEquals(5506.894439600001, range1.getLength(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(10842.9148503871, range2.getLength(), 0.01);
      assertEquals(3246.3574251935497, range2.getCentralValue(), 0.01);
      assertEquals((-2175.1), range2.getLowerBound(), 0.01);
      assertEquals(8667.8148503871, range2.getUpperBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-2175.1), number0);
      assertEquals(4, doubleArray0.length);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<Float> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) arrayList0, false);
      assertNull(range3);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds(categoryDataset0, (KeyToGroupMap) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.8, (-2508.5951623422097), 4, 310.365368013, 0.8);
      assertNotNull(oHLCDataItem0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-2638.5088687631), 865.9769215446404, (-1), 2, 7);
      assertNotNull(oHLCDataItem1);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short1 = new Short((short) (-25));
      assertNotNull(short1);
      assertEquals((short) (-25), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Range range0 = new Range(0, 2);
      assertNotNull(range0);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1.39240928132E12, number0);
      assertFalse(short0.equals((Object)short1));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1900;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertFalse(boolean0);
      assertFalse(short0.equals((Object)short1));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertNotNull(number1);
      assertEquals(1.39240928132E12, number1);
      assertTrue(number1.equals((Object)number0));
      assertFalse(short0.equals((Object)short1));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      int int0 = taskSeriesCollection0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = stack0.add((Object) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(true));
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3332.88989, 1084);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(3332.88989, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1084.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-153.7289), 1.5, 999, fixedMillisecond0);
      assertNotNull(xYSeries0);
      assertEquals(3332.88989, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1084.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(3.2731840593785116E-6, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.5, xYSeries0.getMaxX(), 0.01);
      assertEquals(2.0863625536751645E-6, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(999, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-153.7289), xYSeries0.getMinX(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(3332.88989, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1084.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(3.2731840593785116E-6, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.5, xYSeries0.getMaxX(), 0.01);
      assertEquals(2.0863625536751645E-6, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(999, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-153.7289), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals(3332.88989, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1084.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(3.2731840593785116E-6, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.5, xYSeries0.getMaxX(), 0.01);
      assertEquals(2.0863625536751645E-6, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(999, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-153.7289), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-153.7289), range1.getLowerBound(), 0.01);
      assertEquals(1.5, range1.getUpperBound(), 0.01);
      assertEquals(155.2289, range1.getLength(), 0.01);
      assertEquals((-76.11445), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short) (-426);
      doubleArray1[1] = (double) (short) (-426);
      doubleArray1[2] = (-2847.06476278073);
      doubleArray1[3] = (double) (short) (-426);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.5;
      doubleArray2[1] = (double) (short) (-426);
      doubleArray2[2] = (-2847.06476278073);
      doubleArray2[3] = (double) (short) (-426);
      doubleArray2[4] = (-2847.06476278073);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.5;
      doubleArray3[1] = (-2847.06476278073);
      doubleArray3[2] = (-2847.06476278073);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "y!,k?_z", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-2847.06476278073), number0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      String string0 = "";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2000);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2000, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(simpleHistogramDataset0);
      assertNotNull(intervalXYDelegate0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      categoryToPieDataset0.addChangeListener(intervalXYDelegate0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2000, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "", (double) 2000, (-682));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2000, Size: 8
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      Short short1 = new Short((short) (-342));
      assertNotNull(short1);
      assertEquals((short) (-342), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add((Short) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(short0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[][] doubleArray1 = new double[3][1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(range0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(number1.equals((Object)number0));
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MockDate mockDate0 = new MockDate(1800, 1, (-3335), 100, 1800);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.5, 1800, 1800, 485.82708312, 836.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 836.0, 91.0726416, 1202.188, 1.0, 1800);
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(100));
      
      boolean boolean0 = stack0.add((Object) oHLCDataItem1);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertTrue(boolean0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains(100));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.geWeral.DatasetUtili,ies", 91, 91);
      assertNotNull(matrixSeries0);
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(90.0, range1.getLength(), 0.01);
      assertEquals(90.0, range1.getUpperBound(), 0.01);
      assertEquals(45.0, range1.getCentralValue(), 0.01);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(90.0, range2.getLength(), 0.01);
      assertEquals(45.0, range2.getCentralValue(), 0.01);
      assertEquals(90.0, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(250, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(250, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      SerialDate serialDate1 = SerialDate.addDays(2, serialDate0);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertNotNull(serialDate1);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertEquals(250, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(7, serialDate1.getDayOfWeek());
      assertEquals(9, serialDate1.getMonth());
      assertEquals(1900, serialDate1.getYYYY());
      assertEquals(252, serialDate1.toSerial());
      assertEquals(8, serialDate1.getDayOfMonth());
      assertNull(serialDate1.getDescription());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.8, (-2508.5951623422097), 4, 310.365368013, 0.8);
      assertNotNull(oHLCDataItem0);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertEquals(250, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-2638.5088687631), 865.9769215446404, (-1), 2, 7);
      assertNotNull(oHLCDataItem1);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(250, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      int int0 = xYDatasetTableModel0.getColumnCount();
      assertEquals(0, int0);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(250, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      defaultOHLCDataset1.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(250, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short1 = new Short((short) (-25));
      assertNotNull(short1);
      assertEquals((short) (-25), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (4.0) <= upper (-2508.5951623422097).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^", "^", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("^");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertTrue(stack0.contains((short)0));
      
      Short short1 = new Short((short)25);
      assertNotNull(short1);
      assertEquals((short)25, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(stack0.contains((short)25));
      assertTrue(stack0.contains((short)0));
      assertEquals(1, doubleArray0.length);
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      comparableArray0[0] = (Comparable<Float>) second0;
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("`", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.parse("`");
      assertNotNull(date0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("`", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("`", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("`", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("`", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, simpleTimePeriod0.getStartMillis());
      assertEquals(1392409281320L, simpleTimePeriod0.getEndMillis());
      
      comparableArray0[1] = (Comparable<Float>) simpleTimePeriod0;
      Second second1 = new Second(date0);
      assertNotNull(second1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertTrue(second1.equals((Object)second0));
      assertEquals(21, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("`", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("`", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      comparableArray0[2] = (Comparable<Float>) second1;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Duplicate items in 'rowKeys'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[][] doubleArray1 = new double[3][1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(range0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(number1.equals((Object)number0));
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MockDate mockDate0 = new MockDate(1800, 1, (-3335), 100, 1800);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.5, 1800, 1800, 485.82708312, 836.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 836.0, 91.0726416, 1202.188, 1.0, 1800);
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short)273);
      assertNotNull(short0);
      assertEquals((short)273, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(short0));
      
      Short short1 = new Short((short)631);
      assertNotNull(short1);
      assertEquals((short)631, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      assertEquals("[631]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(short0));
      assertTrue(stack0.contains((short)631));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotSame(range1, range0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("[631]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5.4308484E13, range1.getLowerBound(), 0.01);
      assertEquals(5.4308484E13, range1.getUpperBound(), 0.01);
      assertEquals(5.4308484E13, range1.getCentralValue(), 0.01);
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.contains(short0));
      assertTrue(stack0.contains((short)631));
      assertEquals(2, oHLCDataItemArray0.length);
      
      String string0 = range1.toString();
      assertNotSame(range1, range0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(string0);
      assertEquals("Range[5.4308484E13,5.4308484E13]", string0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("[631]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5.4308484E13, range1.getLowerBound(), 0.01);
      assertEquals(5.4308484E13, range1.getUpperBound(), 0.01);
      assertEquals(5.4308484E13, range1.getCentralValue(), 0.01);
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.contains(short0));
      assertTrue(stack0.contains((short)631));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range1, false);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(range2);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("[631]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5.4308484E13, range1.getLowerBound(), 0.01);
      assertEquals(5.4308484E13, range1.getUpperBound(), 0.01);
      assertEquals(5.4308484E13, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(484.82708312, range2.getLength(), 0.01);
      assertEquals(243.41354156, range2.getCentralValue(), 0.01);
      assertEquals(485.82708312, range2.getUpperBound(), 0.01);
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.contains(short0));
      assertTrue(stack0.contains((short)631));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(597.8119999999999, range3.getLength(), 0.01);
      assertEquals(1202.188, range3.getLowerBound(), 0.01);
      assertEquals(1800.0, range3.getUpperBound(), 0.01);
      assertEquals(1501.094, range3.getCentralValue(), 0.01);
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(range4);
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Tue Dec 19 10:00:00 GMT 3690", mockDate0.toString());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(5.4308484E13, range4.getLowerBound(), 0.01);
      assertEquals(5.4308484E13, range4.getCentralValue(), 0.01);
      assertEquals(5.4308484E13, range4.getUpperBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[][] doubleArray0 = new double[15][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("X{rC)BZd)", "X{rC)BZd)", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add((Short) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      
      Short short0 = new Short((short)25);
      assertNotNull(short0);
      assertEquals((short)25, (short)short0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(15, doubleArray0.length);
      
      Date[] dateArray0 = new Date[6];
      MockDate mockDate0 = new MockDate(1623, (-1321), 1623, 1623, 1623, (-1321));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1321), "X{rC)BZd)");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1321), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("X{rC)BZd)", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=X{rC)BZd),offset=-1321,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1321), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("X{rC)BZd)", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=X{rC)BZd),offset=-1321,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=X{rC)BZd),offset=-1321,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=19,MILLISECOND=999,ZONE_OFFSET=-1321,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      dateArray0[2] = date0;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date1 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotSame(date1, date0);
      assertNotNull(date1);
      assertFalse(date1.equals((Object)date0));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      
      dateArray0[3] = date1;
      MockDate mockDate2 = new MockDate(1623);
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      
      dateArray0[4] = (Date) mockDate2;
      int int0 = 8277;
      MockDate mockDate3 = new MockDate((-1321), 1623, 8277, 2, 8271, 2);
      assertNotNull(mockDate3);
      assertFalse(mockDate3.equals((Object)mockDate1));
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertFalse(mockDate3.equals((Object)mockDate0));
      
      dateArray0[5] = (Date) mockDate3;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 8277;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(short0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {8277.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(6, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(short0));
      
      Stream<Short> stream0 = stack0.parallelStream();
      assertNotNull(stream0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(short0));
      
      Short short1 = new Short((short) (-342));
      assertNotNull(short1);
      assertEquals((short) (-342), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(short0.equals((Object)short1));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[1]", stack0.toString());
      assertTrue(stack0.contains((short)1));
      assertFalse(stack0.contains(short1));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[1]", stack0.toString());
      assertTrue(stack0.contains((short)1));
      assertFalse(stack0.contains(short1));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DatasetUtilities", 91, 91);
      assertNotNull(matrixSeries0);
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(45.0, range1.getCentralValue(), 0.01);
      assertEquals(90.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(90.0, range1.getLength(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("PP7", 1, 2699);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2699, matrixSeries0.getItemCount());
      assertEquals(2699, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2699, matrixSeries0.getItemCount());
      assertEquals(2699, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2699, matrixSeries0.getItemCount());
      assertEquals(2699, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short)15);
      assertNotNull(short0);
      assertEquals((short)15, (short)short0);
      
      boolean boolean0 = stack0.add((Short) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains((short)15));
      
      Short short1 = new Short((short)15);
      assertNotNull(short1);
      assertEquals((short)15, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains((short)15));
      
      boolean boolean1 = stack1.add(short1);
      assertNotSame(stack1, stack0);
      assertTrue(boolean1);
      assertTrue(short1.equals((Object)short0));
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack1.isEmpty());
      assertEquals("[15]", stack1.toString());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains((short)15));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DatasetUtilities", 91, 91);
      assertNotNull(matrixSeries0);
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(8281, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      int int0 = keyToGroupMap0.getGroupIndex("");
      assertEquals(0, int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      int int1 = keyToGroupMap0.getKeyCount("");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      int int2 = keyToGroupMap0.getGroupIndex("");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNull(range1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 1L);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.NaN);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>(arrayList0);
      assertNotNull(linkedList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      assertNotNull(list0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(locale0));
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      assertNotNull(dateFormatSymbols0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      timeTableXYDataset0.clear();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-426]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(short0));
      
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(9, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(9, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack1 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(stack1);
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack1, true);
      assertNull(range0);
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range1);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1.0));
      assertNotNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range3);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Long long0 = new Long(1467L);
      assertNotNull(long0);
      assertEquals(1467L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((short) (-426)));
      
      Short short1 = new Short((short)8278);
      assertNotNull(short1);
      assertEquals((short)8278, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[8278]", stack0.toString());
      assertTrue(stack0.contains((short)8278));
      assertFalse(stack0.contains((short) (-426)));
      
      SerialDate serialDate0 = SerialDate.createInstance(8275);
      assertNotNull(serialDate0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(27, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(8275, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(1922, serialDate0.getYYYY());
      assertEquals(8, serialDate0.getMonth());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(27, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(8275, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(1922, serialDate0.getYYYY());
      assertEquals(8, serialDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-1119.744476443), (-2115.0), 250, Double.POSITIVE_INFINITY, (-1119.744476443));
      assertNotNull(oHLCDataItem0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(27, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(8275, serialDate0.toSerial());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(1922, serialDate0.getYYYY());
      assertEquals(8, serialDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(short0.equals((Object)short1));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
      assertNotNull(range0);
      assertFalse(short0.equals((Object)short1));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[8278]", stack0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short)8278));
      assertFalse(stack0.contains((short) (-426)));
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[][] doubleArray0 = new double[28][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(28, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, (-1435.835292));
      assertNotNull(powerFunction2D0);
      assertEquals((-1435.835292), powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1435.835292), 0.0, 136, "");
      assertNotNull(xYSeries0);
      assertEquals((-1435.835292), powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(136, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals((-1435.835292), xYSeries0.getMinX(), 0.01);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        defaultXYDataset0.getY(136, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 136, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 23, 865.9769215446404, (-2638.5088687631), (-2638.5088687631), 4.95176037850245E27);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, 23, (-2638.5088687631), 6.283185307179586, (-125.0));
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      defaultOHLCDataset1.validateObject();
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      defaultOHLCDataset1.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Short short0 = new Short((short)1082);
      assertNotNull(short0);
      assertEquals((short)1082, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[1082]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotNull(range0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[1082]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains(short0));
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotNull(range1);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[1082]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals((-2638.5088687631), range1.getLowerBound(), 0.01);
      assertEquals(3504.4857903077404, range1.getLength(), 0.01);
      assertEquals((-886.2659736092298), range1.getCentralValue(), 0.01);
      assertEquals(865.9769215446404, range1.getUpperBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.contains(short0));
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotNull(range2);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-2638.5088687631), range2.getLowerBound(), 0.01);
      assertEquals(3504.4857903077404, range2.getLength(), 0.01);
      assertEquals(865.9769215446404, range2.getUpperBound(), 0.01);
      assertEquals((-886.2659736092298), range2.getCentralValue(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.contains(short0));
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals("[-426]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.contains(short0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(250, serialDate0.toSerial());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(250, serialDate0.toSerial());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, 0.0, 7, (-1027.269771), 2108.28664047919);
      assertNotNull(oHLCDataItem0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(250, serialDate0.toSerial());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack1, false);
      assertNotSame(stack1, stack0);
      assertNotNull(range0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals("[-426]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack1.contains(short0));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNotSame(stack0, stack1);
      assertNotSame(stack1, stack0);
      assertNull(range1);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals("[-426]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(stack0.contains(short0));
      assertTrue(stack1.contains(short0));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number[][] numberArray0 = new Number[3][1];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 3;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) 0;
      numberArray1[3] = (Number) 1;
      numberArray1[4] = (Number) 7;
      numberArray1[5] = (Number) 3;
      numberArray1[6] = (Number) long0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 1900;
      numberArray2[1] = (Number) 2958465;
      numberArray2[2] = (Number) 0;
      numberArray2[3] = (Number) 2;
      Float float0 = new Float((double) 2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) 2;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) 2;
      numberArray3[1] = (Number) 1;
      numberArray3[2] = (Number) 2;
      numberArray3[3] = (Number) 6;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
//      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(oHLCDataItemArray0, oHLCDataItemArray0, numberArray0, numberArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of series keys does not match the number of series in the data.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains((short) (-426)));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-426]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short) (-426)));
      
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getDayOfWeek());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.8, (-2508.5951623422097), 4, 310.365368013, 0.8);
      assertNotNull(oHLCDataItem0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-2638.5088687631), 865.9769215446404, (-1), 2, 7);
      assertNotNull(oHLCDataItem1);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      defaultOHLCDataset1.removeChangeListener(xYDatasetTableModel0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Short short1 = new Short((short) (-25));
      assertNotNull(short1);
      assertEquals((short) (-25), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean1 = stack0.add(short1);
      assertTrue(boolean1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-426, -25]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(short1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset1, (List) stack0, true);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-426, -25]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(stack0.contains(short1));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNull(range1);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-426, -25]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(stack0.contains(short1));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset1);
      assertNotSame(range2, range0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotNull(range2);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertFalse(range2.equals((Object)range0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(866.9769215446404, range2.getLength(), 0.01);
      assertEquals(432.4884607723202, range2.getCentralValue(), 0.01);
      assertEquals(865.9769215446404, range2.getUpperBound(), 0.01);
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1.39240928132E12, number0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1900;
      doubleArray1[1] = (double) (short) (-25);
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 4;
      doubleArray2[4] = 865.9769215446404;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (double) 3;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("X2GqXbcy0j+D{F", "X2GqXbcy0j+D{F", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range3 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertEquals(1900.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(950.0, range3.getCentralValue(), 0.01);
      assertEquals(1900.0, range3.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNull(number0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Short short0 = new Short((short)1900);
      assertNotNull(short0);
      assertEquals((short)1900, (short)short0);
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains((short)1900));
      
      Short short1 = new Short((short)1900);
      assertNotNull(short1);
      assertEquals((short)1900, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)90);
      assertNotNull(short2);
      assertEquals((short)90, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      boolean boolean0 = stack1.add(short2);
      assertTrue(boolean0);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals("[90]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.contains(short0));
      assertTrue(stack1.contains(short2));
      
      boolean boolean1 = stack1.add(short1);
      assertTrue(boolean1);
      assertTrue(short1.equals((Object)short0));
      assertFalse(short1.equals((Object)short2));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[90, 1900]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains(short0));
      
      Stream<Short> stream0 = stack1.parallelStream();
      assertNotNull(stream0);
      assertEquals(2, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[90, 1900]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains(short0));
      
      Short short3 = new Short((short)699);
      assertNotNull(short3);
      assertEquals((short)699, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      
      boolean boolean2 = stack1.add(short3);
      assertTrue(boolean2);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[90, 1900, 699]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains(short0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[20][4];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, numberArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, (short)60);
      assertNotNull(powerFunction2D0);
      assertEquals(60.0, powerFunction2D0.getB(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((short)60));
      
      Short short0 = new Short((short)60);
      assertNotNull(short0);
      assertEquals((short)60, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[60]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) stack0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[13][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(13, doubleArray0.length);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) double0);
      assertNotNull(defaultPieDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(13, doubleArray0.length);
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[][] doubleArray0 = new double[28][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(28, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(28, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(28, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(28, doubleArray0.length);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("+8s8E&!T[v'2u\"", 278, 31);
      assertNotNull(matrixSeries0);
      assertEquals(8618, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(278, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(8618, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(278, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(8618, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(278, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(15.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(30.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains((short) (-426)));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-426]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((short) (-426)));
      
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      Short short0 = new Short((short)15);
      assertNotNull(short0);
      assertEquals((short)15, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((short)15));
      
      Short short1 = new Short((short) (-8));
      assertNotNull(short1);
      assertEquals((short) (-8), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short)13);
      assertNotNull(short2);
      assertEquals((short)13, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short2);
      assertTrue(boolean0);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[13]", stack0.toString());
      assertFalse(stack0.contains((short) (-8)));
      assertTrue(stack0.contains(short2));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      Short short0 = new Short((short)15);
      assertNotNull(short0);
      assertEquals((short)15, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((short)15));
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (short)15);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(15, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 373, (-7));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(373, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-7), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, (-989));
      assertNotNull(categoryToPieDataset1);
      assertFalse(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(373, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-7), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-989), categoryToPieDataset1.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(boolean0);
      assertFalse(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(373, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-7), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-989), categoryToPieDataset1.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(373, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-7), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.insertValue(0, (Comparable) hour0, (double) 23);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) hour0, (KeyedValues) defaultKeyedValues0);
      assertNotNull(categoryDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset1, tableOrder0, (-1110));
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1110), categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "^r", (-487.0), 0);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotNull(pieDataset0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1110), categoryToPieDataset0.getExtractIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1110), categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-2751));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.fireSelectionEvent();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "^r", (KeyedValues) pieDataset0);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset1, categoryDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(categoryDataset0, defaultCategoryDataset1);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotNull(categoryDataset0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset1));
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1110), categoryToPieDataset0.getExtractIndex());
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset1, categoryDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(categoryDataset0, defaultCategoryDataset1);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertFalse(defaultCategoryDataset1.equals((Object)categoryDataset0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset1));
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1110), categoryToPieDataset0.getExtractIndex());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) bigInteger0, (double) (-495));
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotNull(pieDataset2);
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DatasetUtilities", 91, 91);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(91, matrixSeries0.getColumnsCount());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
//      try { 
        defaultBoxAndWhiskerXYDataset0.getXDate(91, 91);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 91, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DatasetUtilities", 91, 91);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(91, matrixSeries0.getColumnsCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
      assertNull(range1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range0);
      
      defaultXYZDataset0.validateObject();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(false));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertNull(range1);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      int int0 = taskSeriesCollection0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1084, (-454.9));
      assertNotNull(powerFunction2D0);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1876.9), 795.9616251841769, 1084, week0);
      assertNotNull(xYSeries0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1084, xYSeries0.getItemCount());
      assertEquals(2.0708053515327694E-43, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-1876.9), xYSeries0.getMinX(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1084, xYSeries0.getItemCount());
      assertEquals(2.0708053515327694E-43, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-1876.9), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1084, xYSeries0.getItemCount());
      assertEquals(2.0708053515327694E-43, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-1876.9), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-540.4691874079117), range0.getCentralValue(), 0.01);
      assertEquals(796.4616251841767, range0.getUpperBound(), 0.01);
      assertEquals(2673.861625184177, range0.getLength(), 0.01);
      assertEquals((-1877.4), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 1081.753);
      assertNotNull(range0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1081.753, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1081.753, range0.getUpperBound(), 0.01);
      assertEquals(1081.753, range0.getCentralValue(), 0.01);
      
      Range range1 = Range.shift(range0, 1081.753, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1081.753, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1081.753, range0.getUpperBound(), 0.01);
      assertEquals(1081.753, range0.getCentralValue(), 0.01);
      assertEquals(2163.506, range1.getCentralValue(), 0.01);
      assertEquals(2163.506, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2163.506, range1.getLowerBound(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) linkedList0, range1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DatasetUtilities", 91, 91);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "org.jfree.data.general.DatasetUtilities");
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(90.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = stack0.add((Object) timeTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimeTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^r", "^r", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("^r"));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("^r");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      boolean boolean0 = stack0.add((Object) defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertFalse(stack0.contains("^r"));
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains("^r"));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains(short0));
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals("[-426]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.contains(short0));
      
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Stack<Object> stack2 = new Stack<Object>();
      assertNotNull(stack2);
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertEquals(0, stack2.size());
      assertEquals("[]", stack2.toString());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.contains(1074L));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = stack2.add(object0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(stack2.isEmpty());
      assertEquals(1, stack2.size());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.empty());
      assertTrue(stack2.contains(object0));
      assertFalse(stack2.contains(1074L));
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 2;
      numberArray1[1] = (Number) 2;
      numberArray1[2] = (Number) 3;
      numberArray1[3] = (Number) long0;
      numberArray1[4] = (Number) 0;
      numberArray1[5] = (Number) 4;
      numberArray1[6] = (Number) 1;
      numberArray1[7] = (Number) short0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      boolean boolean3 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DatasetUtilities", 91, 91);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(45.0, range1.getCentralValue(), 0.01);
      assertEquals(90.0, range1.getUpperBound(), 0.01);
      assertEquals(90.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = Range.combine(range1, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(45.0, range1.getCentralValue(), 0.01);
      assertEquals(90.0, range1.getUpperBound(), 0.01);
      assertEquals(90.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(45.0, range2.getCentralValue(), 0.01);
      assertEquals(90.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(90.0, range2.getLength(), 0.01);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 91, 91);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(91, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(91, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) "org.jfree.data.general.DatasetUtilities");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Long long0 = new Long(1046L);
      assertNotNull(long0);
      assertEquals(1046L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Short short0 = new Short((short)595);
      assertNotNull(short0);
      assertEquals((short)595, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[595]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short)595));
      
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, (-1027.269771), 1, 581.9866229, 3);
      assertNotNull(oHLCDataItem0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 3731.3857;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (-496.0913946056);
      doubleArray1[4] = 244.0;
      doubleArray1[5] = 6.283185307179586;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[7] = 345.564;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      int int0 = taskSeriesCollection0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1084, (-454.9));
      assertNotNull(powerFunction2D0);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) stack0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.fireSelectionEvent();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      Short short0 = new Short((short) (-2286));
      assertNotNull(short0);
      assertEquals((short) (-2286), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((short) (-2286)));
      
      Short short1 = new Short((short) (-2286));
      assertNotNull(short1);
      assertEquals((short) (-2286), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertEquals("[-2286]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short) (-2286)));
      
      Short short2 = new Short((short) (-2286));
      assertNotNull(short2);
      assertEquals((short) (-2286), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      boolean boolean1 = stack0.add(short2);
      assertTrue(boolean1);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[-2286, -2286]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short) (-2286)));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = (-2062);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-2062), (-2062));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-2062), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2062), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[][] doubleArray0 = new double[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Short short0 = new Short((short)15);
      assertNotNull(short0);
      assertEquals((short)15, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((short)15));
      
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      assertTrue(short1.equals((Object)short2));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-1]", stack0.toString());
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.contains((short)15));
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(975, (short) (-1), year0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-2), dynamicTimeSeriesCollection0.getNewestIndex());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-1]", stack0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-2), dynamicTimeSeriesCollection0.getNewestIndex());
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.contains((short)15));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-1]", stack0.toString());
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.contains((short)15));
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertNull(range2);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-2), dynamicTimeSeriesCollection0.getNewestIndex());
      
      Range range3 = Range.combine((Range) null, (Range) null);
      assertNull(range3);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int int0 = 1168;
      int int1 = (-2741);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1168, (-2741));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-2742), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      String string0 = "";
      Number[][] numberArray0 = new Number[20][4];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, numberArray0.length);
      
      short short0 = (short)60;
      Short short1 = new Short((short)15);
      assertNotNull(short1);
      assertEquals((short)15, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((short)15));
      
      Short short2 = new Short((short)60);
      assertNotNull(short2);
      assertEquals((short)60, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((short)60, 341.38);
      assertNotNull(powerFunction2D0);
      assertEquals(60.0, powerFunction2D0.getA(), 0.01);
      assertEquals(341.38, powerFunction2D0.getB(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-76), 1L, (short)60, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'seriesKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.fireSelectionEvent();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      short short0 = (short) (-2286);
      Short short1 = new Short((short) (-2286));
      assertNotNull(short1);
      assertEquals((short) (-2286), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(short0));
      
      Short short2 = new Short((short) (-2286));
      assertNotNull(short2);
      assertEquals((short) (-2286), (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      boolean boolean0 = stack0.add(short2);
      assertTrue(boolean0);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals("[-2286]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short) (-2286)));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      short short0 = (short) (-426);
      Short short1 = new Short((short) (-426));
      assertNotNull(short1);
      assertEquals((short) (-426), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains(short0));
      
      boolean boolean0 = stack1.add(short1);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.isEmpty());
      assertEquals("[-426]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertTrue(stack1.contains(short0));
      
      int int0 = 250;
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1074L;
      doubleArray1[1] = (double) 1074L;
      doubleArray1[2] = (double) (short) (-426);
      doubleArray1[3] = (double) 250;
      doubleArray1[4] = (double) 250;
      doubleArray1[5] = (double) 1074L;
      doubleArray1[6] = (double) 1074L;
      doubleArray1[7] = (double) (short) (-426);
      doubleArray1[8] = (double) 1074L;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals((-426.0), number0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2509.0, range0.getCentralValue(), 0.01);
      assertEquals(5018.0, range0.getUpperBound(), 0.01);
      assertEquals(5018.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(250, (-426.0));
      assertNotNull(powerFunction2D0);
      assertEquals(250.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-426.0), powerFunction2D0.getB(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, (-426.0), 250.0, (-1231), 1074.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'samples' > 1
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[20][4];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, numberArray0.length);
      
      Short short0 = new Short((short)15);
      assertNotNull(short0);
      assertEquals((short)15, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      Short short1 = new Short((short)60);
      assertNotNull(short1);
      assertEquals((short)60, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertFalse(short1.equals((Object)short0));
      assertEquals(10, stack0.capacity());
      assertEquals("[60]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.contains(short0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(10, stack0.capacity());
      assertEquals("[60]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(short1));
      assertFalse(stack0.contains(short0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger1 = BigInteger.probablePrime(1082, mockRandom0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)53, bigInteger1.shortValue());
      assertEquals((byte)53, bigInteger1.byteValue());
      
      int int0 = bigInteger1.compareTo(bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(1, int0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)53, bigInteger1.shortValue());
      assertEquals((byte)53, bigInteger1.byteValue());
      
      defaultCategoryDataset0.addValue((Number) bigInteger1, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)53, bigInteger1.shortValue());
      assertEquals((byte)53, bigInteger1.byteValue());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.POSITIVE_INFINITY, number1);
      assertTrue(number1.equals((Object)number0));
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) bigInteger1, (-1536.3618116508));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[7][4];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("V", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(7, numberArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds(categoryDataset0, (KeyToGroupMap) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[20][4];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, numberArray0.length);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 806.3419091443363;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {806.3419091443363}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {806.3419091443363}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {806.3419091443363}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      TimeSeries timeSeries0 = new TimeSeries(806.3419091443363);
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(",`US$31)");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      double[][] doubleArray2 = new double[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray2, doubleArray2);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, doubleArray2.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, doubleArray2.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DatasetUtilities", 91, 91);
      assertNotNull(matrixSeries0);
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(90.0, range1.getLength(), 0.01);
      assertEquals(45.0, range1.getCentralValue(), 0.01);
      assertEquals(90.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "org.jfree.data.general.DatasetUtilities");
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(range2);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, range2, false);
      assertNull(range3);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals("UTC", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(bigInteger0);
      assertNotNull(keyToGroupMap0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(3488.5563624838, (-454.9));
      assertNotNull(powerFunction2D0);
      assertEquals(3488.5563624838, powerFunction2D0.getA(), 0.01);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 1319.13, 1319.13, (-1433), bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.fireSelectionEvent();
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (-1120.0072311225));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, false);
      assertNull(range1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, doubleArray0.length);
      
      double double1 = timeTableXYDataset0.getDomainLowerBound(true);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 2612);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      int int0 = taskSeriesCollection0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1084, (-454.9));
      assertNotNull(powerFunction2D0);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1876.9), 795.9616251841769, 1084, week0);
      assertNotNull(xYSeries0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(2.0708053515327694E-43, xYSeries0.getMaxY(), 0.01);
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1876.9), xYSeries0.getMinX(), 0.01);
      assertEquals(1084, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(2.0708053515327694E-43, xYSeries0.getMaxY(), 0.01);
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1876.9), xYSeries0.getMinX(), 0.01);
      assertEquals(1084, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(2.0708053515327694E-43, xYSeries0.getMaxY(), 0.01);
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1876.9), xYSeries0.getMinX(), 0.01);
      assertEquals(1084, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0354026757663847E-43, range0.getCentralValue(), 0.01);
      assertEquals(2.0708053515327694E-43, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0708053515327694E-43, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 3808.9021752363947;
      stack0.ensureCapacity((-1793));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((-1793)));
      
      doubleArray1[1] = 3474.7541453299;
      double double0 = 1.5;
      doubleArray1[2] = 1.5;
      doubleArray1[3] = (-999.6347105);
      doubleArray1[4] = (-1885.8068);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "\"wWZjGiQz", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      String string0 = "\\1#`N~r*6fBi(dJH~>t";
      MatrixSeries matrixSeries0 = new MatrixSeries("\u0001#`N~r*6fBi(dJH~>t", 91, 91);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(45.0, range1.getCentralValue(), 0.01);
      assertEquals(90.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(90.0, range1.getLength(), 0.01);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains(short0));
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.empty());
      assertEquals("[-426]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertTrue(stack1.contains(short0));
      
      boolean boolean1 = false;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack1, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains(short0));
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.isEmpty());
      assertEquals("[-426]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertTrue(stack1.contains(short0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, 0.0, 7, (-1027.269771), 2108.28664047919);
      assertNotNull(oHLCDataItem0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Short short1 = new Short((short) (-25));
      assertNotNull(short1);
      assertEquals((short) (-25), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean1 = stack0.add(short1);
      assertNotSame(stack0, stack1);
      assertTrue(boolean1);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-25]", stack0.toString());
      assertFalse(stack0.contains(short0));
      assertTrue(stack0.contains(short1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack1, false);
      assertNotSame(stack1, stack0);
      assertNotNull(range0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertFalse(stack1.isEmpty());
      assertEquals("[-426]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack1.contains(short0));
      assertFalse(stack1.contains(short1));
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (7.0) <= upper (0.0).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[20][4];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, numberArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, (short)60);
      assertNotNull(powerFunction2D0);
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      assertEquals(60.0, powerFunction2D0.getB(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(long0);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((short) (-426)));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.contains((short) (-426)));
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals("[-426]", stack1.toString());
      assertTrue(stack1.contains((short) (-426)));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, 0.0, 7, (-1027.269771), 2108.28664047919);
      assertNotNull(oHLCDataItem0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack1, false);
      assertNotSame(stack1, stack0);
      assertNotNull(range0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals("[-426]", stack1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack1.contains((short) (-426)));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertNotSame(stack0, stack1);
      assertNotSame(stack1, stack0);
      assertNull(range1);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals("[-426]", stack1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(stack0.contains((short) (-426)));
      assertTrue(stack1.contains((short) (-426)));
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      double double0 = 43.5728;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 43.5728);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DatasetUtilities", 91, 91);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(matrixSeries0.getNotify());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(45.0, range1.getCentralValue(), 0.01);
      assertEquals(90.0, range1.getUpperBound(), 0.01);
      assertEquals(90.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "org.jfree.data.general.DatasetUtilities");
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Long long0 = new Long(1074L);
      assertNotNull(long0);
      assertEquals(1074L, (long)long0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Short short0 = new Short((short) (-426));
      assertNotNull(short0);
      assertEquals((short) (-426), (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((short) (-426)));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.contains((short) (-426)));
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.empty());
      assertEquals("[-426]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains((short) (-426)));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      SerialDate serialDate0 = SerialDate.createInstance(250);
      assertNotNull(serialDate0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      
      Date date0 = serialDate0.toDate();
      assertNotNull(date0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, 0.0, 7, (-1027.269771), 2108.28664047919);
      assertNotNull(oHLCDataItem0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(250, serialDate0.toSerial());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(9, serialDate0.getMonth());
      assertEquals(6, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack1, false);
      assertNotSame(stack1, stack0);
      assertNotNull(range0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.empty());
      assertEquals("[-426]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack1.contains((short) (-426)));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = Range.scale(range0, 73.7719);
      assertNotSame(stack1, stack0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(range1.equals((Object)range0));
      assertFalse(stack1.empty());
      assertEquals("[-426]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.027206782606109E14, range1.getLowerBound(), 0.01);
      assertEquals(1.027206782606109E14, range1.getCentralValue(), 0.01);
      assertEquals(1.027206782606109E14, range1.getUpperBound(), 0.01);
      assertTrue(stack1.contains((short) (-426)));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNotSame(stack0, stack1);
      assertNotSame(stack1, stack0);
      assertNotSame(range0, range1);
      assertNull(range2);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(range0.equals((Object)range1));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack1.empty());
      assertEquals("[-426]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(stack0.contains((short) (-426)));
      assertTrue(stack1.contains((short) (-426)));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack1, false);
      assertNotSame(stack1, stack0);
      assertNull(range3);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack1.empty());
      assertEquals("[-426]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains((short) (-426)));
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Stack<DynamicTimeSeriesCollection> stack0 = new Stack<DynamicTimeSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Panel panel0 = new Panel();
      assertNotNull(panel0);
      assertEquals(0, panel0.getHeight());
      assertEquals(0, panel0.getWidth());
      assertFalse(panel0.isFocusCycleRoot());
      assertTrue(panel0.getFocusTraversalKeysEnabled());
      assertFalse(panel0.isDoubleBuffered());
      assertEquals(0.5F, panel0.getAlignmentX(), 0.01F);
      assertFalse(panel0.isOpaque());
      assertEquals(0.5F, panel0.getAlignmentY(), 0.01F);
      assertFalse(panel0.isFocusTraversalPolicyProvider());
      assertEquals(0, panel0.getX());
      assertEquals(0, panel0.getY());
      assertFalse(panel0.isFocusTraversalPolicySet());
      assertEquals(Component.BaselineResizeBehavior.OTHER, panel0.getBaselineResizeBehavior());
      assertFalse(panel0.getIgnoreRepaint());
      
      boolean boolean0 = arrayList0.add(panel0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, panel0.getHeight());
      assertEquals(0, panel0.getWidth());
      assertFalse(panel0.isFocusCycleRoot());
      assertTrue(panel0.getFocusTraversalKeysEnabled());
      assertFalse(panel0.isDoubleBuffered());
      assertEquals(0.5F, panel0.getAlignmentX(), 0.01F);
      assertFalse(panel0.isOpaque());
      assertEquals(0.5F, panel0.getAlignmentY(), 0.01F);
      assertFalse(panel0.isFocusTraversalPolicyProvider());
      assertEquals(0, panel0.getX());
      assertEquals(0, panel0.getY());
      assertFalse(panel0.isFocusTraversalPolicySet());
      assertEquals(Component.BaselineResizeBehavior.OTHER, panel0.getBaselineResizeBehavior());
      assertFalse(panel0.getIgnoreRepaint());
      assertTrue(arrayList0.contains(panel0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.awt.Panel cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Range range2 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      int int0 = taskSeriesCollection0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      MockDate mockDate0 = new MockDate(699, 0, 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Month month0 = new Month(mockDate0, timeZone0);
      assertNotNull(month0);
      assertEquals("Tue Jan 01 00:00:00 GMT 2599", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(19849363200000L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(19849363200000L, month0.getLastMillisecond());
      assertEquals(2599, month0.getYearValue());
      assertEquals(31189L, month0.getSerialIndex());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 132, month0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals("Tue Jan 01 00:00:00 GMT 2599", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(19849363200000L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(19849363200000L, month0.getLastMillisecond());
      assertEquals(2599, month0.getYearValue());
      assertEquals(31189L, month0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(131, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertTrue(number0.equals((Object)double0));
      assertEquals("Tue Jan 01 00:00:00 GMT 2599", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(19849363200000L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(19849363200000L, month0.getLastMillisecond());
      assertEquals(2599, month0.getYearValue());
      assertEquals(31189L, month0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(131, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (double) 0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      int int0 = taskSeriesCollection0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 1084);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1084, (-454.9));
      assertNotNull(powerFunction2D0);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1876.9), 795.9616251841769, 1084, week0);
      assertNotNull(xYSeries0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1084.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1084, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2.0708053515327694E-43, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertEquals((-1876.9), xYSeries0.getMinX(), 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("You are trying to add data where the time period class is ", 30, 0);
      assertNotNull(matrixSeries0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Znj-+", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder1 = TableOrder.BY_COLUMN;
      assertSame(tableOrder1, tableOrder0);
      assertNotNull(tableOrder1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder1, 1021);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(1021, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1021, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList1, true);
      assertNull(range0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Comparable<Dialog.ModalExclusionType>[] comparableArray0 = (Comparable<Dialog.ModalExclusionType>[]) Array.newInstance(Comparable.class, 1);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(569);
      assertNotNull(spreadsheetDate0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(569, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(7, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(569, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(7, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(569, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(7, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotNull(regularTimePeriod0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(569, spreadsheetDate0.toSerial());
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(7, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281321L, regularTimePeriod0.getMiddleMillisecond());
      
      comparableArray0[0] = (Comparable<Dialog.ModalExclusionType>) regularTimePeriod0;
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) 5;
      doubleArray1[3] = (double) 7;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 3;
      doubleArray2[1] = (double) 569;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) (-1);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = (double) 3;
      doubleArray4[2] = 1.7976931348623157E308;
      doubleArray4[3] = (double) 3;
      doubleArray4[4] = (double) 2;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = 2800.9779310984;
      doubleArray4[7] = (double) 2;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 9999;
      doubleArray5[2] = 2.0;
      doubleArray5[3] = 2800.9779310984;
      doubleArray5[4] = 1.7976931348623157E308;
      doubleArray5[5] = (double) 1;
      doubleArray5[6] = (double) 5;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (double) 7;
      doubleArray6[1] = (double) 1;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (double) 3;
      doubleArray7[1] = (double) 3;
      doubleArray7[2] = (double) 2;
      doubleArray7[3] = (double) 0;
      doubleArray7[4] = (double) 9999;
      doubleArray7[5] = (double) 1;
      doubleArray7[6] = (double) 0;
      doubleArray7[7] = (double) 3;
      doubleArray7[8] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = (double) 0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (double) 0;
      doubleArray8[3] = 1.7976931348623157E308;
      doubleArray8[4] = (double) 3;
      doubleArray8[5] = (double) 2958465;
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.fireSelectionEvent();
      Number number1 = DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number2 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number2);
      assertEquals(0.0, number2);
      assertFalse(number2.equals((Object)number1));
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (-1120.0072311225));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (-1.0));
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      MockDate mockDate0 = new MockDate(365, 365, 365, 334, 334);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(false));
      
      boolean boolean0 = stack0.add((Object) arrayList0);
      assertTrue(boolean0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("[[]]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(false));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((Locale.LanguageRange) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2.0;
      doubleArray3[1] = 2.0;
      doubleArray3[2] = 2.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 2.0;
      doubleArray4[1] = 0.8;
      doubleArray4[2] = 2.0;
      doubleArray4[3] = 2.0;
      doubleArray4[4] = 2.0;
      doubleArray4[5] = 2.0;
      doubleArray4[6] = 2.0;
      doubleArray4[7] = 2.0;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      boolean boolean0 = arrayList1.add((Locale.LanguageRange) null);
      assertTrue(boolean0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger1 = BigInteger.probablePrime(1082, mockRandom0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)53, bigInteger1.byteValue());
      assertEquals((short)53, bigInteger1.shortValue());
      
      int int0 = bigInteger0.compareTo(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((-1), int0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)53, bigInteger1.byteValue());
      assertEquals((short)53, bigInteger1.shortValue());
      
      defaultCategoryDataset0.addValue((Number) bigInteger0, (Comparable) "^r", (Comparable) bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1794, "^r");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1794, simpleTimeZone0.getRawOffset());
      assertEquals("^r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=^r,offset=1794,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      
      MockDate mockDate0 = new MockDate(1082, 1, 1082);
      assertNotNull(mockDate0);
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      
      Year year0 = new Year(mockDate0, simpleTimeZone0, locale1);
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1794, simpleTimeZone0.getRawOffset());
      assertEquals("^r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=^r,offset=1794,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Mon Jan 17 00:00:00 GMT 2985", mockDate0.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals(32031763200000L, year0.getLastMillisecond());
      assertEquals(32031763200000L, year0.getFirstMillisecond());
      assertEquals(2985, year0.getYear());
      assertEquals("2985", year0.toString());
      assertEquals(2985L, year0.getSerialIndex());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      assertNotNull(treeSet0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) treeSet0);
      assertNotNull(list0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(locale0));
      
      TimeSeries timeSeries0 = new TimeSeries(year0);
      assertNotNull(timeSeries0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1794, simpleTimeZone0.getRawOffset());
      assertEquals("^r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=^r,offset=1794,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Mon Jan 17 00:00:00 GMT 2985", mockDate0.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals(32031763200000L, year0.getLastMillisecond());
      assertEquals(32031763200000L, year0.getFirstMillisecond());
      assertEquals(2985, year0.getYear());
      assertEquals("2985", year0.toString());
      assertEquals(2985L, year0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1794, simpleTimeZone0.getRawOffset());
      assertEquals("^r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=^r,offset=1794,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Mon Jan 17 00:00:00 GMT 2985", mockDate0.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals(32031763200000L, year0.getLastMillisecond());
      assertEquals(32031763200000L, year0.getFirstMillisecond());
      assertEquals(2985, year0.getYear());
      assertEquals("2985", year0.toString());
      assertEquals(2985L, year0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotSame(locale1, locale0);
      assertNull(number1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1794, simpleTimeZone0.getRawOffset());
      assertEquals("^r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=^r,offset=1794,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Mon Jan 17 00:00:00 GMT 2985", mockDate0.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals(32031763200000L, year0.getLastMillisecond());
      assertEquals(32031763200000L, year0.getFirstMillisecond());
      assertEquals(2985, year0.getYear());
      assertEquals("2985", year0.toString());
      assertEquals(2985L, year0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotSame(locale1, locale0);
      assertNull(range0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1794, simpleTimeZone0.getRawOffset());
      assertEquals("^r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=^r,offset=1794,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Mon Jan 17 00:00:00 GMT 2985", mockDate0.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals(32031763200000L, year0.getLastMillisecond());
      assertEquals(32031763200000L, year0.getFirstMillisecond());
      assertEquals(2985, year0.getYear());
      assertEquals("2985", year0.toString());
      assertEquals(2985L, year0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNotSame(locale1, locale0);
      assertNull(range1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1794, simpleTimeZone0.getRawOffset());
      assertEquals("^r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=^r,offset=1794,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Mon Jan 17 00:00:00 GMT 2985", mockDate0.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals(32031763200000L, year0.getLastMillisecond());
      assertEquals(32031763200000L, year0.getFirstMillisecond());
      assertEquals(2985, year0.getYear());
      assertEquals("2985", year0.toString());
      assertEquals(2985L, year0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      assertNotNull(treeSet0);
      
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("UAiXED", (Map<String, List<String>>) null);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Hashtable<String, List<String>> hashtable0 = new Hashtable<String, List<String>>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      List<Locale.LanguageRange> list1 = Locale.LanguageRange.mapEquivalents(list0, hashtable0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      
      List<Locale.LanguageRange> list2 = Locale.LanguageRange.mapEquivalents(list1, hashtable0);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotNull(list2);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      
      List<Locale> list3 = Locale.filter(list2, (Collection<Locale>) treeSet0);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotNull(list3);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(list3.contains(locale0));
      
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0);
      assertNotNull(timeSeries0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number1);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 6.283185307179586);
      assertNotNull(range2);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(6.283185307179586, range2.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range2.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "UAiXED", (KeyedValues) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowData' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      String string0 = "";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double double0 = 902.12;
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 902.12);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(902.12, range0.getCentralValue(), 0.01);
      assertEquals(902.12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(902.12, range0.getLowerBound(), 0.01);
      
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      assertNotNull(metalComboBoxUI0);
      
      PropertyChangeListener propertyChangeListener0 = metalComboBoxUI0.createPropertyChangeListener();
      assertNotNull(propertyChangeListener0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset1);
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      
      boolean boolean0 = categoryTableXYDataset0.hasListener(timeTableXYDataset1);
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertFalse(boolean0);
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      defaultCategoryDataset0.addValue((Number) bigInteger0, (Comparable) "^r", (Comparable) bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertNull(number1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(jDBCCategoryDataset0, 1674, 544);
      assertNotNull(slidingCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1674, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(544, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Number number2 = DatasetUtilities.findMaximumStackedRangeValue(jDBCCategoryDataset0);
      assertNull(number2);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 544, 544);
      assertNotNull(seriesChangeInfo0);
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertEquals(544, seriesChangeInfo0.getIndex1());
      assertEquals(544, seriesChangeInfo0.getIndex2());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(tableOrder0, seriesChangeInfo0);
      assertNotNull(seriesChangeEvent0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertEquals(544, seriesChangeInfo0.getIndex1());
      assertEquals(544, seriesChangeInfo0.getIndex2());
      
      timeTableXYDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertEquals(544, seriesChangeInfo0.getIndex1());
      assertEquals(544, seriesChangeInfo0.getIndex2());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range2);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      defaultCategoryDataset0.addValue((Number) bigInteger0, (Comparable) "^r", (Comparable) bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, 680.855029768);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) arrayList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(double0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(4, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) arrayList0, range1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 43.5728);
      assertNotNull(range0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(43.5728, range0.getCentralValue(), 0.01);
      assertEquals(43.5728, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(43.5728, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      assertNotNull(keyToGroupMap0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      int int0 = taskSeriesCollection0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1088, (-454.9));
      assertNotNull(powerFunction2D0);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1088.0, powerFunction2D0.getA(), 0.01);
      
      Week week0 = new Week(1088, 1088);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(57728L, week0.getSerialIndex());
      assertEquals(64, week0.getWeek());
      assertEquals(1088, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1876.5610659371137), 795.9616251841769, 1088, week0);
      assertNotNull(xYSeries0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1088.0, powerFunction2D0.getA(), 0.01);
      assertEquals(57728L, week0.getSerialIndex());
      assertEquals(64, week0.getWeek());
      assertEquals(1088, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertEquals((-1876.5610659371137), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.0487679048147771E-116, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1088, xYSeries0.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1088.0, powerFunction2D0.getA(), 0.01);
      assertEquals(57728L, week0.getSerialIndex());
      assertEquals(64, week0.getWeek());
      assertEquals(1088, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertEquals((-1876.5610659371137), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.0487679048147771E-116, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1088, xYSeries0.getItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(1088));
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-454.9), powerFunction2D0.getB(), 0.01);
      assertEquals(1088.0, powerFunction2D0.getA(), 0.01);
      assertEquals(57728L, week0.getSerialIndex());
      assertEquals(64, week0.getWeek());
      assertEquals(1088, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(795.9616251841767, xYSeries0.getMaxX(), 0.01);
      assertEquals((-1876.5610659371137), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.0487679048147771E-116, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1088, xYSeries0.getItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(5.243839524073886E-117, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0487679048147771E-116, range1.getUpperBound(), 0.01);
      assertEquals(1.0487679048147771E-116, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      String string0 = "";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = (-27);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-27));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Spliterator<DefaultHighLowDataset> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, false);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, doubleArray0.length);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertFalse(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[20][4];
      long long0 = 1L;
      Long long1 = new Long(1L);
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      short short0 = (short)60;
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, (short)60);
      assertNotNull(powerFunction2D0);
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      assertEquals(60.0, powerFunction2D0.getB(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0.5, 1319.13, 30, "");
      assertNotNull(xYSeries0);
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      assertEquals(60.0, powerFunction2D0.getB(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1319.13, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.5, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertEquals(30, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      // Undeclared exception!
//      try { 
        xYSeries0.remove((Number) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'x' argument.
//         //
//         verifyException("org.jfree.data.xy.XYDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long((-762L));
      assertNotNull(long0);
      assertEquals((-762L), (long)long0);
      
      String string0 = "org.jfree.data.DefaultKeyedValue";
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) long0;
      numberArray1[1] = (Number) long0;
      numberArray1[2] = (Number) long0;
      numberArray1[3] = (Number) long0;
      numberArray1[4] = (Number) long0;
      numberArray1[5] = (Number) long0;
      numberArray1[6] = (Number) long0;
      numberArray1[7] = (Number) long0;
      numberArray1[8] = (Number) long0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "org.jfree.data.DefaultKeyedValue", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(1, numberArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 11);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 11, Size: 9
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (double) (-31));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 43.5728);
      assertNotNull(range0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(43.5728, range0.getLowerBound(), 0.01);
      assertEquals(43.5728, range0.getCentralValue(), 0.01);
      assertEquals(43.5728, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      HashSet<TimeTableXYDataset> hashSet0 = new HashSet<TimeTableXYDataset>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(timeTableXYDataset0));
      
      boolean boolean0 = stack0.removeAll(hashSet0);
      assertFalse(boolean0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(timeTableXYDataset0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) double0, (KeyedValues) defaultKeyedValues0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-1));
      assertNotNull(categoryToPieDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) double0, (double) (-1), (-1));
      assertNotNull(defaultPieDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) 0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-2967), (-2967));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-2967), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2967), slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList1, true);
      assertNull(range1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      int int0 = taskSeriesCollection0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 1084);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.0, 1904.2908436);
      assertNotNull(powerFunction2D0);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1904.2908436, powerFunction2D0.getB(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-874.08), (-454.9), 36, week0);
      assertNotNull(xYSeries0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1904.2908436, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals((-874.08), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals((-454.9), xYSeries0.getMaxX(), 0.01);
      assertEquals(36, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 43.5728);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(43.5728, range0.getCentralValue(), 0.01);
      assertEquals(43.5728, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(43.5728, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Double double1 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range2 = new Range(43.5728, 43.5728);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(43.5728, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(43.5728, range2.getLowerBound(), 0.01);
      assertEquals(43.5728, range2.getCentralValue(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 43.5728);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotNull(range3);
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(43.5728, range3.getLowerBound(), 0.01);
      assertEquals(43.5728, range3.getCentralValue(), 0.01);
      assertEquals(43.5728, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) double1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[] numberArray0 = new Number[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray0[0] = (Number) long0;
      double[][] doubleArray0 = new double[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) long0);
      assertNotNull(pieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, doubleArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, doubleArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      assertEquals(0, doubleArray0.length);
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 90, (-2950));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-2950), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(90, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNull(range1);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) long0;
      numberArray2[1] = (Number) long0;
      numberArray2[2] = (Number) long0;
      numberArray2[3] = (Number) long0;
      numberArray2[5] = (Number) long0;
      numberArray2[6] = (Number) long0;
      numberArray2[7] = (Number) long0;
      numberArray2[8] = (Number) long0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Short short0 = new Short((short)61);
      assertNotNull(short0);
      assertEquals((short)61, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains(short0));
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.isEmpty());
      assertEquals("[61]", stack1.toString());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.contains(short0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack1, false);
      assertNotSame(stack1, stack0);
      assertNull(range0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack1.isEmpty());
      assertEquals("[61]", stack1.toString());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.contains(short0));
      
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(73.7719, 73.7719);
      assertNotNull(powerFunction2D0);
      assertEquals(73.7719, powerFunction2D0.getB(), 0.01);
      assertEquals(73.7719, powerFunction2D0.getA(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 73.7719, 3488.5563624838, (short)61, "");
      assertNotNull(xYSeries0);
      assertEquals(73.7719, powerFunction2D0.getB(), 0.01);
      assertEquals(73.7719, powerFunction2D0.getA(), 0.01);
      assertEquals(1.64285234099901E263, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(73.7719, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(61, xYSeries0.getItemCount());
      assertEquals(3488.5563624838, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4.631873994570512E139, xYSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[20][4];
      Number[] numberArray1 = new Number[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      numberArray0[1] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(long0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(20, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      assertEquals(20, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<XYDatasetTableModel> vector0 = new Vector<XYDatasetTableModel>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-1887), (-1));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-1), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1887), slidingCategoryDataset0.getFirstCategoryIndex());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNull(range1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
      assertNull(range2);
      assertEquals((-1), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1887), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, keyToGroupMap0.getGroupCount());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      int int0 = taskSeriesCollection0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 1084);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Stack<Object> stack1 = new Stack<Object>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.contains(1084));
      
      boolean boolean0 = stack0.add((Object) null);
      assertNotSame(stack0, stack1);
      assertTrue(boolean0);
      assertFalse(stack0.equals((Object)stack1));
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(1084));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNotSame(stack0, stack1);
      assertNull(range0);
      assertFalse(stack0.equals((Object)stack1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(1084));
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, 0.0);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      
      long long0 = year0.getMiddleMillisecond();
      assertEquals(1392409281320L, long0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, Double.NEGATIVE_INFINITY, 1.7976931348623157E308, (short)60, year0);
      assertNotNull(xYSeries0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(60, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      
      String string0 = "Duplicate items in 'columnKeys'.";
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset("Duplicate items in 'columnKeys'.", "", "", "");
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(Throwable e) {
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[20][4];
      Number[] numberArray1 = new Number[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      numberArray0[1] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      assertEquals(20, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(20, numberArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) long0;
      numberArray2[1] = (Number) long0;
      numberArray2[2] = (Number) long0;
      numberArray2[3] = (Number) long0;
      numberArray2[5] = (Number) long0;
      numberArray2[6] = (Number) long0;
      numberArray2[7] = (Number) long0;
      numberArray2[8] = (Number) long0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = new Short((short)61);
      assertNotNull(short0);
      assertEquals((short)61, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains(short0));
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[61]", stack1.toString());
      assertTrue(stack1.contains(short0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 2848.0;
      doubleArray1[2] = (-1001.65);
      doubleArray0[0] = doubleArray1;
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (-863));
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-863), categoryToPieDataset0.getExtractIndex());
      
      taskSeriesCollection0.addChangeListener(categoryToPieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-863), categoryToPieDataset0.getExtractIndex());
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (-1001.65);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(vectorSeriesCollection0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      taskSeriesCollection0.addChangeListener(intervalXYDelegate0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1001.65);
      doubleArray4[1] = (-1001.65);
      doubleArray4[2] = (-1001.65);
      doubleArray4[3] = (-1001.65);
      doubleArray4[4] = (-1001.65);
      doubleArray4[5] = 334.0;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) long0;
      numberArray2[1] = (Number) long0;
      numberArray2[2] = (Number) long0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("DefaultIntervalCategoryDataset.getValue(): series index out of range.", "DefaultIntervalCategoryDataset.getValue(): series index out of range.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-2030));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 0, 366);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(366, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = stack0.add((Object) timeTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimeTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[20][4];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(20, numberArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[][] doubleArray0 = new double[19][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(double0, "`*G?.qG+KRoS5Vv>", "`*G?.qG+KRoS5Vv>");
      assertNotNull(timePeriodValues0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("`*G?.qG+KRoS5Vv>", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("`*G?.qG+KRoS5Vv>", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(19, doubleArray0.length);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("`*G?.qG+KRoS5Vv>", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("`*G?.qG+KRoS5Vv>", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(19, doubleArray0.length);
      
      LinkedList<JDBCXYDataset> linkedList0 = new LinkedList<JDBCXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, false);
      assertNull(range0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("`*G?.qG+KRoS5Vv>", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("`*G?.qG+KRoS5Vv>", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertEquals(19, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(19, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, 795.9616251841769);
      assertNotNull(powerFunction2D0);
      assertEquals(795.9616251841769, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, 334, 366);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(366, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(334, slidingCategoryDataset0.getFirstCategoryIndex());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(slidingCategoryDataset0, true);
      assertNull(range1);
      assertEquals(366, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(334, slidingCategoryDataset0.getFirstCategoryIndex());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      assertNull(range2);
      assertEquals(366, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(334, slidingCategoryDataset0.getFirstCategoryIndex());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-199));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-199), categoryToPieDataset0.getExtractIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-199), categoryToPieDataset0.getExtractIndex());
      
      boolean boolean1 = defaultCategoryDataset0.hasListener(categoryToPieDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-199), categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-199));
      assertNotNull(pieDataset0);
      
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^r", "", doubleArray0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotNull(categoryDataset0);
      assertTrue(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNull(range0);
      assertTrue(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0.0);
      assertNull(range1);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0, true);
      assertNull(range2);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[4][6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 2001;
      doubleArray3[2] = (double) 2001;
      doubleArray3[3] = (double) 2001;
      doubleArray3[4] = (double) 2001;
      doubleArray1[1] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 2001;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 2001;
      doubleArray4[3] = (double) 2001;
      doubleArray1[2] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) 2001;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (double) 2001;
      doubleArray5[5] = (double) 2001;
      doubleArray5[6] = (double) 0;
      doubleArray5[7] = (double) 0;
      doubleArray1[3] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\"Hd", "\"Hd", doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(categoryDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) 2001.0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) (-199));
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-199.0), range0.getUpperBound(), 0.01);
      assertEquals((-199.0), range0.getLowerBound(), 0.01);
      assertEquals((-199.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, false);
      assertNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals("[2]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((short)2));
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Requires 'max' >= 0.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (short)2);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, 0.0, (int) (short)2);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Requires 'max' >= 0.", (KeyedValues) defaultPieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotNull(categoryDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Number[][] numberArray0 = new Number[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Null 'object' argument.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = xYSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      MockDate mockDate0 = new MockDate(365, 365, 365, 334, 334);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ".,Y");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(".,Y", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=.,Y,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      
      Year year0 = new Year(mockDate0, simpleTimeZone0, locale0);
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("Sat Jun 13 03:34:00 GMT 2296", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(".,Y", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=.,Y,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(10301744040000L, year0.getLastMillisecond());
      assertEquals("2296", year0.toString());
      assertEquals(2296, year0.getYear());
      assertEquals(10301744040000L, year0.getFirstMillisecond());
      assertEquals(2296L, year0.getSerialIndex());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      ArrayList<DefaultHighLowDataset> arrayList1 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 365, year0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals("Sat Jun 13 03:34:00 GMT 2296", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(".,Y", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=.,Y,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(10301744040000L, year0.getLastMillisecond());
      assertEquals("2296", year0.toString());
      assertEquals(2296, year0.getYear());
      assertEquals(10301744040000L, year0.getFirstMillisecond());
      assertEquals(2296L, year0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(364, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList1, range0, false);
      assertNull(range1);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals("Sat Jun 13 03:34:00 GMT 2296", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(".,Y", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=.,Y,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(10301744040000L, year0.getLastMillisecond());
      assertEquals("2296", year0.toString());
      assertEquals(2296, year0.getYear());
      assertEquals(10301744040000L, year0.getFirstMillisecond());
      assertEquals(2296L, year0.getSerialIndex());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(364, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      numberArray0[1] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Short short0 = new Short((short)61);
      assertNotNull(short0);
      assertEquals((short)61, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.contains(short0));
      
      UnaryOperator<Short> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      stack0.replaceAll(unaryOperator0);
      assertNotSame(stack0, stack1);
      assertTrue(stack0.equals((Object)stack1));
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack2 = new Stack<Short>();
      assertNotNull(stack2);
      assertTrue(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertEquals(0, stack2.size());
      assertEquals("[]", stack2.toString());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.contains(short0));
      
      boolean boolean0 = stack2.add((Short) null);
      assertNotSame(stack2, stack0);
      assertNotSame(stack2, stack1);
      assertTrue(boolean0);
      assertFalse(stack2.equals((Object)stack0));
      assertFalse(stack2.equals((Object)stack1));
      assertEquals("[null]", stack2.toString());
      assertEquals(1, stack2.size());
      assertFalse(stack2.empty());
      assertFalse(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.contains(short0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 10.0;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (double) 1L;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {10.0, 0.0, 10.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(4, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1.0, 10.0, (short)61, long0);
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {10.0, 0.0, 10.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 10.0);
      assertNotNull(range0);
      assertEquals(10.0, range0.getLowerBound(), 0.01);
      assertEquals(10.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(11.0, range0.getUpperBound(), 0.01);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = timeTableXYDataset0.equals(xIntervalSeriesCollection0);
      assertFalse(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      SynthProgressBarUI synthProgressBarUI0 = new SynthProgressBarUI();
      assertNotNull(synthProgressBarUI0);
      
      boolean boolean1 = timeTableXYDataset0.hasListener(synthProgressBarUI0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 525);
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(number0.equals((Object)double0));
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) integer0, 0.0, (-1112));
      assertNotNull(pieDataset0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Range range0 = new Range((-1112), 0.0);
      assertNotNull(range0);
      assertEquals((-556.0), range0.getCentralValue(), 0.01);
      assertEquals((-1112.0), range0.getLowerBound(), 0.01);
      assertEquals(1112.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 525;
      doubleArray1[1] = (double) (-1112);
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) (-1112);
      doubleArray4[1] = (-1114.39869276374);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (double) 525;
      doubleArray4[5] = (double) (-1112);
      doubleArray4[6] = 0.0;
      doubleArray4[7] = (double) 525;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-1114.39869276374);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 188.73;
      doubleArray6[1] = (-1728.2791168915849);
      doubleArray6[2] = (double) 525;
      doubleArray6[3] = (double) 525;
      doubleArray6[4] = 0.0;
      doubleArray6[6] = (double) 525;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (-1114.39869276374);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = (double) (-1112);
      doubleArray8[1] = (-1114.39869276374);
      doubleArray8[2] = (double) (-1112);
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      
      doubleArray9[0] = (-1728.2791168915849);
      doubleArray9[1] = (double) (-1112);
      doubleArray9[2] = (-1728.2791168915849);
      doubleArray9[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = doubleArray9;
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertEquals(300.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(150.0, range2.getCentralValue(), 0.01);
      assertEquals(300.0, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 43.5728);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(43.5728, range0.getLowerBound(), 0.01);
      assertEquals(43.5728, range0.getCentralValue(), 0.01);
      assertEquals(43.5728, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Double double1 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 121, 121);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(121, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(121, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      timeTableXYDataset0.seriesChanged((SeriesChangeEvent) null);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) long0;
      numberArray2[1] = (Number) long0;
      numberArray2[2] = (Number) long0;
      numberArray2[3] = (Number) long0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 0.0);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      assertNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 43.5728, (-526.205048), 44, long0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[2][4];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-199));
      assertNotNull(categoryToPieDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-199), categoryToPieDataset0.getExtractIndex());
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = "^r";
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add((Object) "^r");
      assertTrue(boolean0);
      assertEquals("[^r]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("^r"));
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(2001, 2001, 2001, 2, 2, 0);
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, false);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), 0.5);
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals(0.5, powerFunction2D0.getB(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1.0), 4846.0, 0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'samples' > 1
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) long0;
      numberArray2[1] = (Number) long0;
      numberArray2[2] = (Number) long0;
      numberArray2[3] = (Number) long0;
      numberArray2[4] = (Number) long0;
      numberArray2[5] = (Number) long0;
      numberArray2[6] = (Number) long0;
      numberArray2[7] = (Number) long0;
      numberArray2[8] = (Number) long0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      short short0 = (short)61;
      Short short1 = new Short((short)61);
      assertNotNull(short1);
      assertEquals((short)61, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(short1));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.contains(short1));
      
      boolean boolean0 = stack1.add(short1);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals("[61]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains(short1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack1, false);
      assertNotSame(stack1, stack0);
      assertNull(range0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals("[61]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains(short1));
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack1, true);
      assertNotSame(stack1, stack0);
      assertNull(range1);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals("[61]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains(short1));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "w1:^IY>");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add((Object) "^r");
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[^r]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("^r"));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[^r]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("^r"));
      assertFalse(stack0.contains(false));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 1084);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      JDBCXYDataset jDBCXYDataset0 = null;
//      try {
        jDBCXYDataset0 = new JDBCXYDataset("", (String) null, "U1fr\"$0rUqwkD70`=2", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double[][] doubleArray0 = new double[15][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("X{rC)BZd)", "X{rC)BZd)", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add((Short) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      Short short0 = new Short((short)25);
      assertNotNull(short0);
      assertEquals((short)25, (short)short0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(15, doubleArray0.length);
      
      Date[] dateArray0 = new Date[6];
      MockDate mockDate0 = new MockDate(1583, 1583, 1583, 1583, 1583, 1583);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((short)25, "X{rC)BZd)");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=X{rC)BZd),offset=25,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(25, simpleTimeZone0.getRawOffset());
      assertEquals("X{rC)BZd)", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      MockDate mockDate2 = new MockDate(1583, (short)25, 1583, 1583, (short)25, (short)25);
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      
      dateArray0[2] = (Date) mockDate2;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      dateArray0[3] = date0;
      MockDate mockDate3 = new MockDate(1583);
      assertNotNull(mockDate3);
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertFalse(mockDate3.equals((Object)mockDate1));
      assertFalse(mockDate3.equals((Object)mockDate0));
      
      MockDate mockDate4 = new MockDate((short)25, 1583, 8277, 2, 8271, 2);
      assertNotNull(mockDate4);
      assertFalse(mockDate4.equals((Object)mockDate0));
      assertFalse(mockDate4.equals((Object)mockDate3));
      assertFalse(mockDate4.equals((Object)mockDate2));
      assertFalse(mockDate4.equals((Object)mockDate1));
      
      dateArray0[5] = (Date) mockDate4;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 8277;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) vectorSeriesCollection0, (List) stack0, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Series index out of bounds
//         //
//         verifyException("org.jfree.data.xy.VectorSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-199));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-199), categoryToPieDataset0.getExtractIndex());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      categoryToPieDataset0.setSelectionState(defaultPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-199), categoryToPieDataset0.getExtractIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-199), categoryToPieDataset0.getExtractIndex());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = new Range((-1266.8238824778064), (-495));
      assertNotNull(range0);
      assertEquals(771.8238824778064, range0.getLength(), 0.01);
      assertEquals((-1266.8238824778064), range0.getLowerBound(), 0.01);
      assertEquals((-880.9119412389032), range0.getCentralValue(), 0.01);
      assertEquals((-495.0), range0.getUpperBound(), 0.01);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range1 = Range.expand(range0, Double.NEGATIVE_INFINITY, (-495));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(771.8238824778064, range0.getLength(), 0.01);
      assertEquals((-1266.8238824778064), range0.getLowerBound(), 0.01);
      assertEquals((-880.9119412389032), range0.getCentralValue(), 0.01);
      assertEquals((-495.0), range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
      
      ArrayList<DefaultHighLowDataset> arrayList1 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) arrayList1, range0, true);
      assertNotSame(range0, range1);
      assertNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertEquals(771.8238824778064, range0.getLength(), 0.01);
      assertEquals((-1266.8238824778064), range0.getLowerBound(), 0.01);
      assertEquals((-880.9119412389032), range0.getCentralValue(), 0.01);
      assertEquals((-495.0), range0.getUpperBound(), 0.01);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = timeTableXYDataset0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      SynthProgressBarUI synthProgressBarUI0 = new SynthProgressBarUI();
      assertNotNull(synthProgressBarUI0);
      
      boolean boolean1 = timeTableXYDataset0.hasListener(synthProgressBarUI0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 14);
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(number0.equals((Object)double0));
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) integer0, 2141.04, 1);
      assertNotNull(pieDataset0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) (-1112));
      assertNotNull(range0);
      assertEquals(300.0, range0.getLength(), 0.01);
      assertEquals((-962.0), range0.getCentralValue(), 0.01);
      assertEquals((-812.0), range0.getUpperBound(), 0.01);
      assertEquals((-1112.0), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("NW'+T?w", "Null 'rowKeys' argument.", (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^r", "^r", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1110));
      assertEquals(0.0, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1178));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1178), categoryToPieDataset0.getExtractIndex());
      assertEquals(0, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "^r", (-2497.82861681332), (-1110));
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1178), categoryToPieDataset0.getExtractIndex());
      assertEquals(0, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1178), categoryToPieDataset0.getExtractIndex());
      assertEquals(0, numberArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-490));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotNull(defaultPieDataset0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertEquals(0, numberArray0.length);
      
      defaultPieDataset0.fireSelectionEvent();
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertEquals(0, numberArray0.length);
      
      Double double1 = (Double)DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(double1);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number1);
      assertEquals(0, numberArray0.length);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "^r", (double) (-490));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset1, pieDataset0);
      assertNotNull(defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset1.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, numberArray0.length);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "^r", (double) (-1178));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, pieDataset0);
      assertNotNull(defaultPieDataset2);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1178), categoryToPieDataset0.getExtractIndex());
      assertEquals(0, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("W/y/d[}mY", "W/y/d[}mY", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-1911));
      assertNotNull(pieDataset0);
      assertEquals(0, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultWindDataset0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.ADD", seriesChangeType0.toString());
      
      int int0 = 6;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 6, 6);
      assertNotNull(seriesChangeInfo0);
      assertEquals("SeriesChangeType.ADD", seriesChangeType0.toString());
      assertEquals(6, seriesChangeInfo0.getIndex2());
      assertEquals(6, seriesChangeInfo0.getIndex1());
      
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("SeriesChangeType.ADD", seriesChangeType0.toString());
      assertEquals(6, seriesChangeInfo0.getIndex2());
      assertEquals(6, seriesChangeInfo0.getIndex1());
      
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("SeriesChangeType.ADD", seriesChangeType0.toString());
      assertEquals(6, seriesChangeInfo0.getIndex2());
      assertEquals(6, seriesChangeInfo0.getIndex1());
      
      defaultWindDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      defaultWindDataset0.setSelectionState((XYDatasetSelectionState) null);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      assertNull(range0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, false);
      assertNull(range1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-707L));
      assertNotNull(mockDate0);
      
      // Undeclared exception!
//      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier((Comparable) mockDate0, (Comparable) mockDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Row key (Wed Dec 31 23:59:59 GMT 1969) not recognised.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2255, 265);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2255, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(265, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2255, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(265, slidingGanttCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      JDBCXYDataset jDBCXYDataset1 = (JDBCXYDataset)jDBCXYDataset0.clone();
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertNotSame(jDBCXYDataset1, jDBCXYDataset0);
      assertNotNull(jDBCXYDataset1);
      assertFalse(jDBCXYDataset1.equals((Object)jDBCXYDataset0));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset1.isTimeSeries());
      assertEquals(0, jDBCXYDataset1.getSeriesCount());
      assertEquals(0, jDBCXYDataset1.getItemCount());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(jDBCXYDataset0);
      assertNotNull(seriesChangeEvent0);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-951), (-2139));
      assertNotNull(seriesChangeInfo0);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals((-2139), seriesChangeInfo0.getIndex2());
      assertEquals((-951), seriesChangeInfo0.getIndex1());
      
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals((-2139), seriesChangeInfo0.getIndex2());
      assertEquals((-951), seriesChangeInfo0.getIndex1());
      
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-1973.0113154171192));
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertNotNull(range0);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals((-1973.0113154171192), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1973.0113154171192), range0.getUpperBound(), 0.01);
      assertEquals((-1973.0113154171192), range0.getCentralValue(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) null, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(2001, 2001, 2001, 2, 2, 0);
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 43.5728);
      assertNotNull(range0);
      assertEquals(43.5728, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(43.5728, range0.getCentralValue(), 0.01);
      assertEquals(43.5728, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(43.5728, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(43.5728, range0.getCentralValue(), 0.01);
      assertEquals(43.5728, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(2001, 2001, 2001, 2, 2, 0);
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 43.5728);
      assertNotNull(range0);
      assertEquals(43.5728, range0.getLowerBound(), 0.01);
      assertEquals(43.5728, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(43.5728, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      MockDate mockDate0 = new MockDate(365, 365, 365, 334, 334);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ".,Y");
      assertNotNull(simpleTimeZone0);
      assertEquals(".,Y", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=.,Y,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Year year0 = new Year(mockDate0, simpleTimeZone0, locale0);
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Sat Jun 13 03:34:00 GMT 2296", mockDate0.toString());
      assertEquals(".,Y", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=.,Y,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("2296", year0.toString());
      assertEquals(2296, year0.getYear());
      assertEquals(2296L, year0.getSerialIndex());
      assertEquals(10301744040000L, year0.getFirstMillisecond());
      assertEquals(10301744040000L, year0.getLastMillisecond());
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      assertNotNull(treeSet0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) treeSet0);
      assertNotNull(list0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(locale0));
      
      TimeSeries timeSeries0 = new TimeSeries(year0);
      assertNotNull(timeSeries0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Sat Jun 13 03:34:00 GMT 2296", mockDate0.toString());
      assertEquals(".,Y", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=.,Y,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("2296", year0.toString());
      assertEquals(2296, year0.getYear());
      assertEquals(2296L, year0.getSerialIndex());
      assertEquals(10301744040000L, year0.getFirstMillisecond());
      assertEquals(10301744040000L, year0.getLastMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Sat Jun 13 03:34:00 GMT 2296", mockDate0.toString());
      assertEquals(".,Y", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=.,Y,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("2296", year0.toString());
      assertEquals(2296, year0.getYear());
      assertEquals(2296L, year0.getSerialIndex());
      assertEquals(10301744040000L, year0.getFirstMillisecond());
      assertEquals(10301744040000L, year0.getLastMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Sat Jun 13 03:34:00 GMT 2296", mockDate0.toString());
      assertEquals(".,Y", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=.,Y,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("2296", year0.toString());
      assertEquals(2296, year0.getYear());
      assertEquals(2296L, year0.getSerialIndex());
      assertEquals(10301744040000L, year0.getFirstMillisecond());
      assertEquals(10301744040000L, year0.getLastMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Sat Jun 13 03:34:00 GMT 2296", mockDate0.toString());
      assertEquals(".,Y", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=.,Y,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("2296", year0.toString());
      assertEquals(2296, year0.getYear());
      assertEquals(2296L, year0.getSerialIndex());
      assertEquals(10301744040000L, year0.getFirstMillisecond());
      assertEquals(10301744040000L, year0.getLastMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range2);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Sat Jun 13 03:34:00 GMT 2296", mockDate0.toString());
      assertEquals(".,Y", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=.,Y,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("2296", year0.toString());
      assertEquals(2296, year0.getYear());
      assertEquals(2296L, year0.getSerialIndex());
      assertEquals(10301744040000L, year0.getFirstMillisecond());
      assertEquals(10301744040000L, year0.getLastMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, 795.9616251841769);
      assertNotNull(powerFunction2D0);
      assertEquals(795.9616251841769, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1885.80676), 806.3419091443363, 9999, year0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(2001, 2001, 2001, 2, 2, 0);
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 43.5728);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(43.5728, range0.getLowerBound(), 0.01);
      assertEquals(43.5728, range0.getCentralValue(), 0.01);
      assertEquals(43.5728, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 512);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 512, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      List list0 = defaultKeyedValues0.getKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int0 = 45;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 45);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1L, fixedMillisecond0.getFirstMillisecond());
      
      Date date0 = fixedMillisecond0.getStart();
      assertNotNull(date0);
      assertEquals(1L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      int int0 = defaultXYZDataset0.indexOf(fixedMillisecond0);
      assertEquals((-1), int0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(1L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1L, fixedMillisecond0.getFirstMillisecond());
      
      defaultXYZDataset0.validateObject();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 223.3214341);
      assertNotNull(range1);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(223.3214341, range1.getLowerBound(), 0.01);
      assertEquals(223.3214341, range1.getUpperBound(), 0.01);
      assertEquals(223.3214341, range1.getCentralValue(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("24#<:4NQw", "2D^W\"u27W", (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) long0;
      numberArray2[1] = (Number) long0;
      numberArray2[2] = (Number) long0;
      numberArray2[3] = (Number) long0;
      numberArray2[5] = (Number) long0;
      numberArray2[6] = (Number) long0;
      numberArray2[7] = (Number) long0;
      numberArray2[8] = (Number) long0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Short short0 = new Short((short)61);
      assertNotNull(short0);
      assertEquals((short)61, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains(short0));
      
      UnaryOperator<Short> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      stack1.replaceAll(unaryOperator0);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains(short0));
      
      boolean boolean0 = stack1.add(short0);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals("[61]", stack1.toString());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.contains(short0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)61;
      doubleArray0[1] = 10.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {61.0, 10.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(2, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 10.0, (short)61, short0);
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {61.0, 10.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((Object) "^r");
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[^r]", stack0.toString());
      assertTrue(stack0.contains("^r"));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[^r]", stack0.toString());
      assertTrue(stack0.contains("^r"));
      assertFalse(stack0.contains(true));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 1084);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      JDBCXYDataset jDBCXYDataset0 = null;
//      try {
        jDBCXYDataset0 = new JDBCXYDataset("", (String) null, "U1fr\"$0rUqwkD70`=2", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1969, year0.getYear());
      assertEquals((-1L), year0.getLastMillisecond());
      assertEquals((-1L), year0.getFirstMillisecond());
      assertEquals("1969", year0.toString());
      assertEquals(1969L, year0.getSerialIndex());
      
      Year year1 = (Year)year0.next();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertFalse(year1.equals((Object)year0));
      assertEquals(1969, year0.getYear());
      assertEquals((-1L), year0.getLastMillisecond());
      assertEquals((-1L), year0.getFirstMillisecond());
      assertEquals("1969", year0.toString());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals("1970", year1.toString());
      assertEquals(1970, year1.getYear());
      assertEquals(1970L, year1.getSerialIndex());
      assertEquals((-1L), year1.getFirstMillisecond());
      assertEquals((-1L), year1.getLastMillisecond());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) year1, (-549.300266291208));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      int int0 = 1747;
      int int1 = 1742;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1742, 1747);
      assertNotNull(powerFunction2D0);
      assertEquals(1747.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1742.0, powerFunction2D0.getA(), 0.01);
      
      int int2 = (-1505);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 1742, 1747, (-1505), (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'seriesKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 795.9616251841769;
      doubleArray0[2] = 795.9616251841769;
      doubleArray0[3] = 795.9616251841769;
      doubleArray0[4] = 795.9616251841769;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {795.9616251841769, 0.0, 795.9616251841769, 795.9616251841769, 795.9616251841769}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, Double.NEGATIVE_INFINITY, (-1.0), 1723, 795.9616251841769);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("nS}`lb) Lj", "nS}`lb) Lj", (Number[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[3][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(2001, 2001, 2001, 2, 2, 0);
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      SimpleTimeZone simpleTimeZone0 = null;
//      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "#J1{m$ ", 312, (-1678), 2, 0, 335, 1057, 183, (-1678), 2001, 2, 1069);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal start month 312
//         //
//         verifyException("java.util.SimpleTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add((Object) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.gantt.TaskSeriesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      timeTableXYDataset0.addChangeListener(xYTaskDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) long0;
      numberArray2[1] = (Number) long0;
      numberArray2[2] = (Number) long0;
      numberArray2[4] = (Number) long0;
      numberArray2[5] = (Number) long0;
      numberArray2[6] = (Number) long0;
      numberArray2[7] = (Number) long0;
      numberArray2[8] = (Number) long0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      assertEquals(2, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      short short0 = (short)61;
      Short short1 = new Short((short)61);
      assertNotNull(short1);
      assertEquals((short)61, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains(short0));
      
      boolean boolean0 = stack1.add(short1);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals("[61]", stack1.toString());
      assertTrue(stack1.contains(short0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, Double.NEGATIVE_INFINITY);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "w1:^IY>");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = (Number) null;
      numberArray1[3] = (Number) null;
      numberArray1[4] = (Number) null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = null;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DatasetUtilities", "hC", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(yIntervalSeriesCollection0, stack0, false);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      String string0 = "";
      Number[] numberArray0 = new Number[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray0[0] = (Number) long0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      short short0 = (short)61;
      Short short1 = new Short((short)61);
      assertNotNull(short1);
      assertEquals((short)61, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.contains(short0));
      
      boolean boolean0 = stack1.add(short1);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(stack1.equals((Object)stack0));
      assertEquals("[61]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains(short0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack1, false);
      assertNotSame(stack1, stack0);
      assertNull(range0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("[61]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains(short0));
      
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset("org.jfree.data.xy.XYIntervalDataItem", "", "", "");
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(Throwable e) {
//      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = 0;
      int int1 = 2001;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder1 = TableOrder.BY_ROW;
      assertNotSame(tableOrder1, tableOrder0);
      assertNotNull(tableOrder1);
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      assertEquals("TableOrder.BY_ROW", tableOrder1.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder1, (-1110));
      assertNotNull(categoryToPieDataset0);
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      assertEquals("TableOrder.BY_ROW", tableOrder1.toString());
      assertEquals((-1110), categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 1600);
      assertNotNull(pieDataset0);
      
      Day day0 = Day.parseDay("");
      assertNull(day0);
      
      int int0 = (-1356);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, 0.0, (-1356));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(2001, 2001, 2001, 2, 2, 0);
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Byte byte0 = null;
      boolean boolean0 = vector0.add((Byte) null);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, vector0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index outside valid range.
//         //
//         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("{k(~S)YBe", "{k(~S)YBe", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray1.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      List list0 = defaultKeyedValues0.getKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultKeyedValues0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^r", "^r", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, numberArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Short short0 = new Short((short)61);
      assertNotNull(short0);
      assertEquals((short)61, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[61]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(short0));
      
      Stack<Object> stack1 = new Stack<Object>();
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains("^r"));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack1, true);
      assertNull(range0);
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains("^r"));
      assertEquals(0, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1770);
      assertNotNull(pieDataset0);
      assertEquals(0, numberArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = timeTableXYDataset0.equals(xIntervalSeriesCollection0);
      assertFalse(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      SynthProgressBarUI synthProgressBarUI0 = new SynthProgressBarUI();
      assertNotNull(synthProgressBarUI0);
      
      boolean boolean1 = timeTableXYDataset0.hasListener(synthProgressBarUI0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 525);
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(number0.equals((Object)double0));
      
      DatasetGroup datasetGroup0 = new DatasetGroup("xiVqk%DIyFDF");
      assertNotNull(datasetGroup0);
      assertEquals("xiVqk%DIyFDF", datasetGroup0.getID());
      
      timeTableXYDataset0.setGroup(datasetGroup0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("xiVqk%DIyFDF", datasetGroup0.getID());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) integer0, 0.0, (-1112));
      assertNotNull(pieDataset0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 188.73);
      assertNotNull(range0);
      assertEquals(338.73, range0.getCentralValue(), 0.01);
      assertEquals(488.73, range0.getUpperBound(), 0.01);
      assertEquals(188.73, range0.getLowerBound(), 0.01);
      assertEquals(300.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.chart.util.ResourceBundleWrapper", "org.jfree.chart.util.ResourceBundleWrapper", doubleArray0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotNull(categoryDataset0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(0, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNull(range2);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(0, doubleArray0.length);
      
      boolean boolean3 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^r", "^r", numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      short short0 = (short)61;
      Short short1 = new Short((short)61);
      Stack<Short> stack0 = new Stack<Short>();
      stack0.add(short1);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "w1:^IY>");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      timeTableXYDataset0.equals(xIntervalSeriesCollection0);
      SynthProgressBarUI synthProgressBarUI0 = new SynthProgressBarUI();
      timeTableXYDataset0.hasListener(synthProgressBarUI0);
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 525);
      assertEquals(0.0, double0, 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) integer0, 0.0, (-1112));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 188.73);
      assertNotNull(range0);
      assertEquals(300.0, range0.getLength(), 0.01);
      
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, false);
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 525;
      doubleArray1[1] = (double) (-1112);
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) (-1112);
      doubleArray4[1] = (-1114.39869276374);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (double) 525;
      doubleArray4[5] = (double) (-1112);
      doubleArray4[6] = 0.0;
      doubleArray4[7] = (double) 525;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-1114.39869276374);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 188.73;
      doubleArray6[1] = (-1728.2791168915849);
      doubleArray6[2] = (double) 525;
      doubleArray6[3] = (double) 525;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (double) 525;
      doubleArray6[6] = (double) 525;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (-1114.39869276374);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = (double) (-1112);
      doubleArray8[1] = (-1114.39869276374);
      doubleArray8[2] = (double) (-1112);
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      doubleArray9[0] = (-1728.2791168915849);
      doubleArray9[1] = (double) (-1112);
      doubleArray9[2] = (-1728.2791168915849);
      doubleArray9[3] = Double.NEGATIVE_INFINITY;
      doubleArray9[4] = 188.73;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'f' argument.", "a(#{4,,XiVeM)84K?", doubleArray0);
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(560.4508831084152, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = "^r";
      Number[][] numberArray0 = new Number[4][2];
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      BigInteger bigInteger0 = BigInteger.ONE;
      defaultCategoryDataset0.addValue((Number) bigInteger0, (Comparable) "^r", (Comparable) bigInteger0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      int int0 = (-1110);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-199));
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYTaskDataset0, true);
      Stack<Object> stack0 = new Stack<Object>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 1084);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 705, 705);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Vector<Byte> vector0 = new Stack<Byte>();
      DatasetUtilities.iterateToFindDomainBounds(xYTaskDataset0, vector0, true);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) 0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) vector0, true);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      
      MockDate mockDate0 = new MockDate(2001, 2001, 2001, 2, 2, 0);
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.validateObject();
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = "^r";
      Number[][] numberArray0 = new Number[4][2];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("^r", "^r", numberArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      defaultCategoryDataset0.addValue((Number) bigInteger0, (Comparable) "^r", (Comparable) bigInteger0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 806.3419;
      doubleArray0[1] = 3776.14636;
      doubleArray0[2] = 1895.2859129;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      double double0 = 2848.0;
      double double1 = 0.0;
      int int0 = (-7);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 2848.0, 0.0, (-7), "^r");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      UnaryOperator<DefaultIntervalXYDataset> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute(mockDate0);
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      xIntervalSeriesCollection0.indexOf(regularTimePeriod0);
      arrayList0.replaceAll(unaryOperator0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0, true);
      DatasetUtilities.isEmptyOrNull((XYDataset) xIntervalSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 59);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultXYZDataset0, false);
      intervalXYDelegate0.getDomainBounds(true);
      defaultXYZDataset0.addChangeListener(intervalXYDelegate0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      defaultXYZDataset0.validateObject();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 806.3419091443363, 1747, 0.0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) 8);
      assertNotNull(range0);
      assertEquals(8.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^r", "^r", numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1110));
      assertEquals(0.0, double0, 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1178));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "^r", (-2497.82861681332), (-1110));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-495));
      defaultPieDataset0.fireSelectionEvent();
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      Double double1 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(double1);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "^r", (double) (-495));
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "^r", (double) (-1178));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      defaultXYZDataset0.validateObject();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number1);
      
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 0.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^r", "^r", numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      short short0 = (short)61;
      Short short1 = new Short((short)61);
      Stack<Short> stack0 = new Stack<Short>();
      stack0.add(short1);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "w1:^IY>");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      Short short0 = new Short((short)15);
      Stack<Short> stack0 = new Stack<Short>();
      Short short1 = new Short((short) (-8));
      Short short2 = new Short((short)13);
      stack0.add(short2);
      Year year0 = new Year();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1938, 257, year0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)2);
      stack0.add(short0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Requires 'max' >= 0.");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Vector<Byte> vector0 = new Vector<Byte>();
      vector0.add((Byte) null);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYTaskDataset0, vector0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Series index out of bounds
//         //
//         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1173.6894496);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Series index out of bounds", "Series index out of bounds", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      defaultXYZDataset0.validateObject();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYZDataset0, (List) arrayList0, range0, false);
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYZDataset0, true);
      DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) Double.NEGATIVE_INFINITY, (-518.14999));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      defaultXYZDataset0.validateObject();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^u", "^u", numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1110));
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1178));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "^u", (-2497.82861681332), (-1110));
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-495));
      Double double0 = new Double(0.0);
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "^u", (double) (-495));
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^r", "^r", numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      int int0 = (-1110);
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1110));
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1178));
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "^r", (-2497.82861681332), (-1110));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1173.6894496);
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = (-1173.6894496);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1173.6894496);
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = (-1173.6894496);
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1173.6894496);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = 1338.651028991642;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray4[6] = (-1173.6894496);
      doubleArray4[7] = (-1173.6894496);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = 1338.651028991642;
      doubleArray5[3] = (-1173.6894496);
      doubleArray5[4] = 1338.651028991642;
      doubleArray5[5] = 1338.651028991642;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Series index out of bounds", "Series index out of bounds", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1338.651028991642, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Stack<Byte> stack0 = new Stack<Byte>();
      DatasetUtilities.iterateToFindDomainBounds(yIntervalSeriesCollection0, stack0, false);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(yIntervalSeriesCollection0, 806.3419);
      categoryTableXYDataset0.equals(xYBarDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) stack0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) yIntervalSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      short short0 = (short)6;
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) stack0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1173.6894496);
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1173.6894496);
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = (-1173.6894496);
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1173.6894496);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = 1338.651028991642;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray4[6] = Double.POSITIVE_INFINITY;
      doubleArray4[7] = (-1173.6894496);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = 1338.651028991642;
      doubleArray5[3] = (-1173.6894496);
      doubleArray5[4] = 1338.651028991642;
      doubleArray5[5] = 1338.651028991642;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2040.83921506537);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 597.8572611;
      doubleArray1[4] = (-2423.7103);
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-2423.7103);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-3113.092774309627);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-2423.7103);
      doubleArray2[6] = (-2040.83921506537);
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 597.8572611;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[17];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-2423.7103);
      doubleArray3[3] = 1398.46945;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (-2040.83921506537);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-2423.7103);
      doubleArray4[1] = (-2423.7103);
      doubleArray4[2] = (-2423.7103);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 1398.46945;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-2423.7103);
      doubleArray6[1] = 597.8572611;
      doubleArray6[2] = 597.8572611;
      doubleArray6[3] = (-3113.092774309627);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (-2423.7103);
      doubleArray0[5] = doubleArray5;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = (-3113.092774309627);
      doubleArray9[1] = (-2040.83921506537);
      doubleArray9[2] = 1398.46945;
      doubleArray9[3] = 597.8572611;
      doubleArray9[4] = 1398.46945;
      doubleArray9[5] = (-2040.83921506537);
      doubleArray9[6] = 597.8572611;
      doubleArray9[7] = 597.8572611;
      doubleArray9[8] = 0.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^r", "^r", numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1110));
      assertEquals(0.0, double0, 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1178));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "^r", (-2497.82861681332), (-1110));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-495));
      Double double1 = (Double)DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      Double double2 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(double2);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "^r", (double) (-495));
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) double1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      int int0 = (-1912);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (-1912));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYTaskDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Vector<Byte> vector0 = new Vector<Byte>();
      DatasetUtilities.iterateToFindDomainBounds(xYTaskDataset0, vector0, true);
      int int0 = 0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      // Undeclared exception!
//      try { 
        categoryTableXYDataset0.getEndYValue((-1110), 630);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 630, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.hasListener((EventListener) null);
      jDBCXYDataset0.addChangeListener((DatasetChangeListener) null);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("W/y/d[}mY", "W/y/d[}mY", doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-1912));
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^r", "^r", numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1110));
      assertEquals(0.0, double0, 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1178));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "^r", (-2497.82861681332), (-1110));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-495));
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number1);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "^r", (double) (-495));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      defaultCategoryDataset0.setGroup(datasetGroup0);
      Day.parseDay("");
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(yIntervalSeriesCollection0, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      boolean boolean0 = false;
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultXYZDataset0, false);
      intervalXYDelegate0.getDomainBounds(true);
      defaultXYZDataset0.addChangeListener(intervalXYDelegate0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
//      try { 
        defaultKeyedValues2DDataset0.removeColumn((-51));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2562.4777);
      doubleArray0[2] = (-443.07414816);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-150.707303377911);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1365.725706;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 2848.0, 0.0, (-2248), (-1.0));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1173.6894496);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1173.6894496);
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = (-1173.6894496);
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1173.6894496);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = 1338.651028991642;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray4[6] = Double.POSITIVE_INFINITY;
      doubleArray4[7] = (-1173.6894496);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = 1338.651028991642;
      doubleArray5[3] = (-1173.6894496);
      doubleArray5[4] = 1338.651028991642;
      doubleArray5[5] = 1338.651028991642;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Series index out of bounds", "Series index out of bounds", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 806.3419091443363;
      doubleArray0[0] = 806.3419091443363;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      int int0 = 1747;
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 806.3419091443363, 806.3419091443363, 1747, 806.3419091443363);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Long long0 = Long.getLong("Null 'seriesKey' argument.", (-1L));
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) long0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2040.83921506537);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 597.8572611;
      doubleArray1[4] = (-2423.7103);
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-2423.7103);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-3113.092774309627);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-2423.7103);
      doubleArray2[6] = (-2040.83921506537);
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 597.8572611;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-2423.7103);
      doubleArray3[3] = 1398.46945;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (-2040.83921506537);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-2423.7103);
      doubleArray4[1] = (-2423.7103);
      doubleArray4[2] = (-2423.7103);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 1398.46945;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-2423.7103);
      doubleArray6[1] = 597.8572611;
      doubleArray6[2] = 597.8572611;
      doubleArray6[3] = (-3113.092774309627);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (-2423.7103);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = (-3113.092774309627);
      doubleArray9[1] = (-2040.83921506537);
      doubleArray9[2] = 1398.46945;
      doubleArray9[3] = 597.8572611;
      doubleArray9[4] = 1398.46945;
      doubleArray9[5] = (-2040.83921506537);
      doubleArray9[6] = 597.8572611;
      doubleArray9[7] = 597.8572611;
      doubleArray9[8] = 0.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      int int0 = 0;
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      int int1 = 0;
      // Undeclared exception!
//      try { 
        defaultStatisticalCategoryDataset0.removeColumn((Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)6);
      stack0.add(short0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) stack0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index outside valid range.
//         //
//         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.POSITIVE_INFINITY);
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 4);
      int int0 = 2;
      int int1 = 0;
      int int2 = 2001;
      MockDate mockDate0 = new MockDate(2, 2, 0, 2001, 2);
      String string0 = "qVedw3]E$9";
      int int3 = 334;
      SimpleTimeZone simpleTimeZone0 = null;
//      try {
        simpleTimeZone0 = new SimpleTimeZone(2, "qVedw3]E$9", 2, 0, 0, 0, 0, 2, 2, 334, 2001, 0, (-1638));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal end day of week 334
//         //
//         verifyException("java.util.SimpleTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      MockDate mockDate0 = new MockDate(365, 365, 0, 334, 334);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ".,Y");
      Locale locale0 = Locale.JAPANESE;
      Year year0 = new Year(mockDate0, simpleTimeZone0, locale0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) treeSet0);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 9999;
      doubleArray1[3] = (double) 9999;
      doubleArray1[4] = (double) 365;
      doubleArray1[5] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) (-9999);
      doubleArray2[3] = (double) 365;
      doubleArray2[4] = (double) 334;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 365;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) (-9999);
      doubleArray4[1] = (double) 9999;
      doubleArray4[2] = (double) 9999;
      doubleArray4[3] = (double) 334;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (double) 365;
      doubleArray6[1] = (double) 334;
      doubleArray6[2] = 24.7263;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (double) 0;
      doubleArray6[5] = (double) 9999;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = (double) 0;
      doubleArray8[1] = (double) 0;
      doubleArray8[2] = (double) 9999;
      doubleArray8[3] = 1.7976931348623157E308;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
