/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:27:37 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiFunction;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("!u{Elg, ", "!u{Elg, ");
      hashMap0.put("ToKey is out of range: ", "!u{Elg, ");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("d]");
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(sortedMap0, "", (-25));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key={!u{Elg, =!u{Elg, , ToKey is out of range: =!u{Elg, } [-25], value=, parent=null, left={!u{Elg, =!u{Elg, , ToKey is out of range: =!u{Elg, } [-25], right=null, predecessor={!u{Elg, =!u{Elg, , ToKey is out of range: =!u{Elg, } [-25])", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.putIfAbsent("N^2jb0kT)", integer0);
      patriciaTrie0.put("Cannot delete root Entry!", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("Cannot delete root Entry!", 0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PatriciaTrie<Comparable<Integer>> patriciaTrie0 = new PatriciaTrie<Comparable<Integer>>();
      int int0 = patriciaTrie0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("4q7<+<=i51:@[,QKw", "wN$@b:xHbQ6>j");
      int int0 = patriciaTrie0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.decrementSize();
      int int0 = patriciaTrie1.size();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer0, (-1241));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-231));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Trie[", integer0, 0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Trie[", integer0, 2218);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("delegate", "");
      patriciaTrie0.put("l", "gfmC;=V%!'");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("l");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(2);
      patriciaTrie0.put("", integer0);
      patriciaTrie0.put("nj%'I", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("5n!.MhXzkpV&//", (Integer) null, (-1241));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(2);
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("5n!.MhXzkpV&//", (Integer) null, (-1241));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("VHQ?];", "VHQ?];", (-2333));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-3));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer0, 2);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer0, 1997);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("be}Kex=+c7.yw*9$", " is not an internal Entry!");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, String>(abstractMap_SimpleEntry1, "", 0);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>(" 9", abstractPatriciaTrie_TrieEntry0, (-2187));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-3612));
      Integer integer1 = hashMap0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer0);
      hashMap0.put("", integer1);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("82UC7k:\"66=xm\"(X", ".{", 2568);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 1072);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry("=");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-702));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1));
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-1));
      String string0 = patriciaTrie0.lastKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("oe,BBPwA T:@", "oe,BBPwA T:@");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("Do26@3Ko5CwR^>Sy'0", "oe,BBPwA T:@");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("oe,BBPwA T:@", "oe,BBPwA T:@");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", (Integer) null);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("_1nmu(|`49)Ma");
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(867);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("", 9);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.merge(" > ", " > ", biFunction0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("delegate", 1066);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry((Object) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("must have a from or to!", "");
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(2586);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 2412);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<String, Comparable<Object>> hashMap0 = new HashMap<String, Comparable<Object>>();
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>(hashMap0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", comparable0, 1);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>((String) null, comparable1, 1);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Object object0 = new Object();
      patriciaTrie0.put("RK3", object0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", (Integer) null);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("Vkey7nalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("", "");
      String string0 = patriciaTrie0.firstKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("Tk~1)Z", "Tk~1)Z");
      patriciaTrie0.putIfAbsent("", "]C]");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("must have come from somewhere!", "must have come from somewhere!");
      patriciaTrie0.put("nj%'I", "  ");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(949);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey((String) null, 949);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-3972));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.tailMap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must have a from or to!
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1171));
      patriciaTrie0.put("si ]\"", integer0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree((String) null, (-1171), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The offsets and lengths must be at Character boundaries
//         //
//         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      // Undeclared exception!
//      try { 
        patriciaTrie1.remove((Object) patriciaTrie0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("5T&;QLSLz`", integer0, 1);
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie0.mapIterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>("Entry(key= [-272], value=, parent=null, left= [-272], right=null, predecessor= [-272])", (AbstractMap.SimpleEntry<Object, Object>) null, (-272));
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-272));
      // Undeclared exception!
//      try { 
        patriciaTrie0.lastEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-547));
      patriciaTrie0.put("Cannot delete root Entry!", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("Cannot delete root Entry!");
      // Undeclared exception!
//      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      patriciaTrie1.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie1.higherEntry((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.putIfAbsent("E;9h", patriciaTrie0);
      // Undeclared exception!
//      try { 
        patriciaTrie1.getNearestEntryForKey("", 18);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.getEntry(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.get(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.followRight((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
//      try { 
        patriciaTrie1.followLeft((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.containsKey(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie0.ceilingEntry("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "", (-1882));
      // Undeclared exception!
//      try { 
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 1546);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>) null, (-368));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer((-237));
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, (-237));
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "", (-237));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=-237 [-237], value=-237, parent=-237 [-237], left=-237 [-237], right=null, predecessor=-237 [-237])", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("VHQ?];", integer0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>(abstractMap_SimpleImmutableEntry0, "VHQ?];", 0);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("Cannot delete root Entry!", "Cannot delete root Entry!");
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, 0);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.put("`p<IZH1x!>rg-x+W;az", patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry(" -> ");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = new Integer((-405));
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, (-405));
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, (Integer) null, (-405));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1.left;
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, "/=y#RHm'&E", (-320));
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Entry(key=AVD471SP]qD.P5GNK [0], value=AVD471SP]qD.P5GNK, parent=null, left=AVD471SP]qD.P5GNK [0], right=null, predecessor=AVD471SP]qD.P5GNK [0])", "Entry(key=AVD471SP]qD.P5GNK [0], value=AVD471SP]qD.P5GNK, parent=null, left=AVD471SP]qD.P5GNK [0], right=null, predecessor=AVD471SP]qD.P5GNK [0])", 2940);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("Fal#' to pUutx ", "org.apache.commons.collections4.trie.PatriciaTrie", 1);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-1));
      String string0 = "org.apache.commons.colections4.trie.analyzertringKeyAnalzer";
      patriciaTrie0.higherEntry(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("V", "[fN y8*m{");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "v");
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Set<Map.Entry<String, Comparable<String>>> set0 = (Set<Map.Entry<String, Comparable<String>>>)patriciaTrie0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("delegate", "");
      patriciaTrie0.put("", "Z ?VuO");
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Map.Entry<String, Integer> map_Entry0 = patriciaTrie0.select("");
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("", "");
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("", "&o).(#YU");
      Integer integer0 = new Integer(272);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(sortedMap0, "");
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>(integer0, abstractMap_SimpleImmutableEntry0, (-576));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(sortedMap0.isEmpty());
      assertEquals("Entry(key=272 [-576], value={=}=, parent=null, left=272 [-576], right=null, predecessor=272 [-576])", string0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("", (String) null);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(sortedMap0, "");
      Integer integer0 = new Integer(267);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>(integer0, abstractMap_SimpleImmutableEntry0, 267);
      assertTrue(sortedMap0.isEmpty());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=267 [267], value={}=, parent=null, left=267 [267], right=null, predecessor=267 [267])", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.subMap("Trie[", "The offsets and lengths must be at Character boundaries");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fromKey > toKey
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("d]");
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(sortedMap0, "", (-25));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("Entry(key={} [-25], value=, parent=null, left={} [-25], right=null, predecessor={} [-25])", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("!$l/|Ktb]c%i", "YU=k,A8Z4E&HISdt]", 160);
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=!$l/|Ktb]c%i [160], value=YU=k,A8Z4E&HISdt], parent=null, left=!$l/|Ktb]c%i [160], right=null, )", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "", (-1));
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "", (-1));
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("RootEntry(key= [-1], value=, parent=null, left=ROOT, right=ROOT, predecessor=ROOT)", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(patriciaTrie0, "");
      Integer integer0 = new Integer(267);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>(integer0, abstractMap_SimpleImmutableEntry0, 267);
      abstractPatriciaTrie_TrieEntry0.left = null;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=267 [267], value=Trie[0]={\n}\n=, parent=null, left=null, right=null, predecessor=267 [267])", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1002));
      patriciaTrie0.put("T}=.[!E5\"i'1V", integer0);
      patriciaTrie0.put("predecessor=", integer0);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, integer0, (-2928));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=Trie[2]={\n  Entry(key=T}=.[!E5\"i'1V [9], value=-1002, parent=ROOT, left=ROOT, right=predecessor= [10], predecessor=predecessor= [10])\n  Entry(key=predecessor= [10], value=-1002, parent=T}=.[!E5\"i'1V [9], left=T}=.[!E5\"i'1V [9], right=predecessor= [10], predecessor=predecessor= [10])\n}\n [-2928], value=-1002, parent=null, left=Trie[2]={\n  Entry(key=T}=.[!E5\"i'1V [9], value=-1002, parent=ROOT, left=ROOT, right=predecessor= [10], predecessor=predecessor= [10])\n  Entry(key=predecessor= [10], value=-1002, parent=T}=.[!E5\"i'1V [9], left=T}=.[!E5\"i'1V [9], right=predecessor= [10], predecessor=predecessor= [10])\n}\n [-2928], right=null, predecessor=Trie[2]={\n  Entry(key=T}=.[!E5\"i'1V [9], value=-1002, parent=ROOT, left=ROOT, right=predecessor= [10], predecessor=predecessor= [10])\n  Entry(key=predecessor= [10], value=-1002, parent=T}=.[!E5\"i'1V [9], left=T}=.[!E5\"i'1V [9], right=predecessor= [10], predecessor=predecessor= [10])\n}\n [-2928])", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer0, comparable0, (-7));
      AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>((Integer) null, (Comparable<Object>) null, (-2));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(442);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzeq.StringKeyAnalyzer", integer0);
      patriciaTrie0.put("", (Integer) null);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("Vkey7nalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("Trie[", "Trie[");
      Integer integer0 = new Integer(2674);
      patriciaTrie0.put("}\n", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("vJ7)8&U7O;q`mi");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer((-335));
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", integer0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", integer0);
      String string0 = patriciaTrie0.previousKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(2674);
      patriciaTrie0.put("}\n", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("vJ7)8&U7O;q`mi");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("W^bs~p4<j}i]8D#`\"c", "W^bs~p4<j}i]8D#`\"c");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator", (-291));
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      // Undeclared exception!
//      try { 
        patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must have come from somewhere!
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("UOZ>wEy#", integer0);
      patriciaTrie0.put("Cannot delete root Entry!", integer0);
      String string0 = patriciaTrie0.lastKey();
      assertEquals("UOZ>wEy#", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("Cannot delete root Entry!", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("Cannot delete root Entry!", 96, 96);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer(1466);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree((String) null, (-1056), 16);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer(1);
      patriciaTrie0.put(" + ", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree(" + ", 1, 10);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("", 0, 1475);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1);
      patriciaTrie0.put("", integer0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer(32811);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.put("Ym v}t+zDh7d~#*", integer0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("Tk~1)Z", 32, 32811);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("R8", integer0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree((String) null, 16, 16);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("SU&?(E", (-2949), 16);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("K");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", (Integer) null);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("invalid lookup: ", "invalid lookup: ");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("invalid lookup: ");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.putIfAbsent("", "");
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("", "");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(sortedMap0, "");
      Integer integer0 = new Integer(272);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>(integer0, abstractMap_SimpleImmutableEntry0, 272);
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertEquals("Entry(key=272 [272], value={}=, parent=null, left=272 [272], right=null, predecessor=272 [272])", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("Entry(key=AVD471SP]qD.P5GNK [0], value=AVD471SP]qD.P5GNK, parent=null, left=AVD471SP]qD.P5GNK [0], right=null, predecessor=AVD471SP]qD.P5GNK [0])");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-335));
      patriciaTrie0.put("nj%'I", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("nj%'I");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("", "");
      patriciaTrie0.put("-G5s6n'P'!%T+6Y", (Comparable<String>) null);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("");
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("%PA1ckY|X6", "%PA1ckY|X6");
      patriciaTrie0.put("}\n", "}\n");
      String string0 = patriciaTrie0.previousKey("}\n");
      assertEquals("%PA1ckY|X6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.previousKey((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      String string0 = patriciaTrie0.previousKey("${(P.Q%_0H+");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-335));
      patriciaTrie0.put("nj%'I", integer0);
      patriciaTrie0.put("", integer0);
      String string0 = patriciaTrie0.nextKey("");
      assertEquals("nj%'I", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-335));
      patriciaTrie0.put("", integer0);
      String string0 = patriciaTrie0.nextKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextKey((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.nextKey("+");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("UOZ>wEy#", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer integer0 = new Integer(16);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("0h{CM2WAn 5L%^u", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("0h{CM2WAn 5L%^u");
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet");
      patriciaTrie0.put("RootEntry(", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("`'-p1", (Comparable<String>) null, 2);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet");
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, patriciaTrie1, 1637);
      patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("mdVsp@z3A", "~5LXc?F=,Y:fdt-8");
      patriciaTrie0.put("~5LXc?F=,Y:fdt-8", "~5LXc?F=,Y:fdt-8");
      patriciaTrie0.put("org.@pachE.commons.8ollections4.trie.AbstractBitwiseTrie", "org.@pachE.commons.8ollections4.trie.AbstractBitwiseTrie");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("!e<f<F*$ f(dk(B");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      OrderedMapIterator<String, Object> orderedMapIterator0 = patriciaTrie0.mapIterator();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("]Zl3,It", patriciaTrie0, 0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Failed to put: ", orderedMapIterator0, 0);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      // Undeclared exception!
//      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", (Object) null);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , any());
      Object object0 = patriciaTrie0.merge("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie", biFunction0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "w l7/<$pemex3p9d", 1);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-2));
      patriciaTrie0.put("w l7/<$pemex3p9d", "w l7/<$pemex3p9d");
      String string0 = patriciaTrie0.remove((Object) "");
      assertEquals("w l7/<$pemex3p9d", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("", 9);
      Integer integer0 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("~k", integer0);
      Integer integer1 = patriciaTrie0.remove((Object) "R8");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Object object0 = patriciaTrie1.remove((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.remove((Object) "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Collection<Object> collection0 = patriciaTrie1.values();
      Collection<Object> collection1 = patriciaTrie1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.keySet();
      Set<String> set0 = patriciaTrie0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer((-1033));
      patriciaTrie0.put("*ahCh", integer0);
      boolean boolean0 = patriciaTrie0.containsKey("*ahCh");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.merge(" > ", " > ", biFunction0);
      String string0 = patriciaTrie0.replace("tV^=XUNL\u0003Mho>)", "tV^=XUNL\u0003Mho>)");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      boolean boolean0 = patriciaTrie0.containsKey((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      boolean boolean0 = patriciaTrie0.containsKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("delegate", "");
      patriciaTrie0.put("l", "gfmC;=V%!'");
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-335));
      patriciaTrie0.put("nj%'I", integer0);
      String string0 = patriciaTrie0.selectKey("0|tHAT-");
      assertEquals("nj%'I", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      Comparable<String> comparable0 = patriciaTrie0.selectValue("org.apache.commons.collections4.trie.PatriciaTrie");
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.merge(" > ", " > ", biFunction0);
      String string0 = patriciaTrie0.selectValue(" > ");
      assertEquals(" > ", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = patriciaTrie0.selectKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Object object0 = patriciaTrie1.get((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.putIfAbsent("E;9h", patriciaTrie0);
      Object object0 = patriciaTrie1.get("E;9h");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("%PA1ckY|X6", "%PA1ckY|X6");
      Object object0 = patriciaTrie0.put("%PA1ckY|X6", "%PA1ckY|X6");
      assertEquals("%PA1ckY|X6", object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = patriciaTrie0.put("", integer0);
      Integer integer2 = patriciaTrie0.put("", integer1);
      assertEquals(0, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.put((String) null, "=");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("", "");
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[1]={\n  RootEntry(key= [-1], value=, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.clear();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("}\n");
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.headMap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must have a from or to!
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }
}
