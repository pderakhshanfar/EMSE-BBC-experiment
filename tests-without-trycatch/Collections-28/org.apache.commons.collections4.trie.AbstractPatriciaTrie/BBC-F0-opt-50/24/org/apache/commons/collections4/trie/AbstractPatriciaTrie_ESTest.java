/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:46:27 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.trie.AbstractBitwiseTrie;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("], ", integer0, (-2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-5353));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.lastKey();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.selectKey("");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer0 = new Integer(1372);
      assertNotNull(integer0);
      assertEquals(1372, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 1060);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = abstractPatriciaTrie_TrieEntry2.getValue();
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(object0);
      assertEquals(1372, object0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(object0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 519);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", (Object) null, 519);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      String string1 = abstractPatriciaTrie_TrieEntry4.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(string1);
      assertEquals("Entry(key= [519], value=null, parent=null, left= [519], right=null, predecessor= [519])", string1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.left;
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry6);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry7 = patriciaTrie0.lastEntry();
      assertTrue(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertNotSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      
      String string2 = patriciaTrie0.put("", "org.apache.commons.collections4.trie.KeyAnalyzer");
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry8 = patriciaTrie1.followRight(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry8);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("<iQ", "v{t77:Bq");
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie2.tailMap("");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(sortedMap0);
      
      Integer integer0 = new Integer(2700);
      assertNotNull(integer0);
      assertEquals(2700, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(sortedMap0, integer0, 2700);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(string1);
      assertEquals("Entry(key={<iQ=v{t77:Bq} [2700], value=2700, parent=null, left={<iQ=v{t77:Bq} [2700], right=null, predecessor={<iQ=v{t77:Bq} [2700])", string1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie3);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie2.tailMap("");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotNull(sortedMap0);
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie3.tailMap("fromKey > toKey");
      assertTrue(sortedMap1.isEmpty());
      assertEquals(0, sortedMap1.size());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(sortedMap1.equals((Object)sortedMap0));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(sortedMap1, sortedMap0);
      assertNotNull(sortedMap1);
      
      Integer integer0 = new Integer(2700);
      assertNotNull(integer0);
      assertEquals(2700, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(sortedMap0, integer0, 2700);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(sortedMap0.equals((Object)sortedMap1));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(sortedMap0.equals((Object)sortedMap1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(sortedMap0, sortedMap1);
      assertNotNull(string0);
      assertEquals("Entry(key={} [2700], value=2700, parent=null, left={} [2700], right=null, predecessor={} [2700])", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("{-V<D~0", "{-V<D~0");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree((String) null, 0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer((-2621));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-2621), (int)integer2);
      
      Integer integer3 = patriciaTrie0.put("], ", integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNull(integer3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("keyAnalyzer");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "keyAnalyzer", (Object) "keyAnalyzer");
      assertFalse(boolean0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      assertTrue(set0.contains("], "));
      assertFalse(set0.contains("keyAnalyzer"));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      patriciaTrie0.clear();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("6E/,4q*xSL]");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.lowerEntry("], ");
      assertNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("9-FYqKyfC\"uT-oB", "9-FYqKyfC\"uT-oB");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("9-FYqKyfC\"uT-oB", "9-FYqKyfC\"uT-oB");
      assertNotNull(string1);
      assertEquals("9-FYqKyfC\"uT-oB", string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string0 = "";
      String string1 = " is not an internal Entry!";
      Object object0 = patriciaTrie1.put("p.g", (Object) null);
      assertNull(object0);
      
      Object object1 = patriciaTrie1.put("org.apache.commons.collections4.trie.KeyAnalyzer", " is not an internal Entry!");
      assertNull(object1);
      
      String string2 = patriciaTrie0.put(" is not an internal Entry!", "org.apache.commons.collections4.trie.KeyAnalyzer");
      assertNull(string2);
      
      String string3 = patriciaTrie1.previousKey("");
      assertNull(string3);
      
      int int0 = patriciaTrie1.lengthInBits("");
      assertEquals(0, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.lastEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("", 160);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.PatriciaTrie");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      Comparable<Object> comparable1 = patriciaTrie0.put("", comparable0);
      assertNull(comparable1);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.floorEntry("");
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      SortedMap<String, Comparable<Object>> sortedMap0 = patriciaTrie0.headMap("");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      Comparable<Object> comparable2 = patriciaTrie0.selectValue("z9S9~Z,>");
      assertSame(comparable2, comparable0);
      assertNotNull(comparable2);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      Comparable<Object> comparable3 = patriciaTrie1.put("", (Comparable<Object>) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertSame(comparable3, comparable2);
      assertSame(comparable3, comparable0);
      assertNotNull(comparable3);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.lowerEntry("I)j)mcDwMu)");
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      int int0 = patriciaTrie1.bitsPerElement();
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(16, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.subtree("", 767, (-237));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie2.lowerEntry("=");
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry4);
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      
      boolean boolean0 = patriciaTrie2.replace("1A3Wj6_Lt", (Object) "", (Object) "X<(ut^8-!}x&}`8N$i");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry7 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry6, "X<(ut^8-!}x&}`8N$i", 1);
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      
      String string0 = abstractPatriciaTrie_TrieEntry7.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry4);
      assertNotNull(string0);
      assertEquals("Entry(key=RootEntry(key= [-1], value=null, parent=null, left=ROOT, right=null, predecessor=ROOT) [1], value=X<(ut^8-!}x&}`8N$i, parent=null, left=RootEntry(key= [-1], value=null, parent=null, left=ROOT, right=null, predecessor=ROOT) [1], right=null, predecessor=RootEntry(key= [-1], value=null, parent=null, left=ROOT, right=null, predecessor=ROOT) [1])", string0);
      
      Object object0 = patriciaTrie2.removeEntry(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry6);
      assertNull(object0);
      
      Collection<Object> collection0 = patriciaTrie2.values();
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(collection0);
      assertFalse(collection0.contains(""));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = null;
      int int0 = 3321;
      Integer integer0 = new Integer(3321);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3321, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, (-271));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Integer integer1 = new Integer((-271));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-271), (int)integer1);
      
      Integer integer2 = patriciaTrie0.put("nHwTh5Bzok*Qb", integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNull(integer2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      abstractPatriciaTrie_TrieEntry0.left = null;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Integer integer3 = patriciaTrie0.computeIfPresent((String) null, biFunction0);
      assertNull(integer3);
      
      Integer integer4 = new Integer(1152);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(1152, (int)integer4);
      
      Integer integer5 = patriciaTrie0.put("nHwTh5Bzok*Qb", integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals((-271), (int)integer5);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      int int0 = patriciaTrie0.size();
      assertEquals(0, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, 96);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 96);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      assertNotNull(patriciaTrie1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      PatriciaTrie<String> patriciaTrie2 = null;
//      try {
        patriciaTrie2 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      Object object0 = patriciaTrie0.put("", (Object) null);
      assertNull(object0);
      
      int int0 = patriciaTrie0.size();
      assertEquals(1, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, 96);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(patriciaTrie0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 96);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      assertNotNull(patriciaTrie1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      PatriciaTrie<String> patriciaTrie2 = null;
//      try {
        patriciaTrie2 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Key cannot be null", "o({e#2?>Y)L;{", 240);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 240);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer((-1527));
      assertNotNull(integer0);
      assertEquals((-1527), (int)integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(integer1);
      
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = patriciaTrie1.put("Z@WRvxRev", integer2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(integer3);
      
      Integer integer4 = new Integer((-2896));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-2896), (int)integer4);
      
      Integer integer5 = patriciaTrie1.put("", integer4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(integer5);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.subMap("", "");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      int int0 = patriciaTrie2.size();
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertEquals(1, int0);
      
      String string0 = patriciaTrie2.nextKey("");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("0eX\rFD/:Tt", "", 1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer6 = new Integer((-1527));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertNotNull(integer6);
      assertEquals((-1527), (int)integer6);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Z@WRvxRev", integer6, (-2675));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.followRight(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("X| ;e2cno", "");
      assertNull(string0);
      
      Collection<String> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains(""));
      assertFalse(collection0.contains("X| ;e2cno"));
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree((String) null, 224, 224);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("0", comparable0, 2002);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<Comparable<Object>, Comparable<AbstractMap.SimpleEntry<String, Object>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key=0 [2002], value=null, parent=null, left=0 [2002], right=null, predecessor=0 [2002])", string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2002);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry("Cannot determine prefix outside of Character boundaries");
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("H=P: ", "H=P: ");
      assertNull(string0);
      
      String string1 = patriciaTrie0.get("H=P: ");
      assertNotNull(string1);
      assertEquals("H=P: ", string1);
      
      String string2 = patriciaTrie0.put("H=P: ", "H=P: ");
      assertNotNull(string2);
      assertEquals("H=P: ", string2);
      
      String string3 = patriciaTrie0.selectValue("H=P: ");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("H=P: ", string3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("pfJN<nt&B&TGPlAp", patriciaTrie0);
      assertNull(object0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("v;{yD14uLh@nEKHc$N^b", integer0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object1 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(object1);
      assertEquals("v;{yD14uLh@nEKHc$N^b", object1);
      
      Object object2 = patriciaTrie0.merge("v;{yD14uLh@nEKHc$N^b", "v;{yD14uLh@nEKHc$N^b", biFunction0);
      assertTrue(object2.equals((Object)object1));
      assertNotNull(object2);
      assertEquals("v;{yD14uLh@nEKHc$N^b", object2);
      
      Integer integer1 = new Integer(2);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer integer2 = new Integer((-464));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-464), (int)integer2);
      
      Object object3 = patriciaTrie0.remove((Object) "pfJN<nt&B&TGPlAp");
      assertNotNull(object3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>(comparable0, (Integer) null, (-422));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      abstractPatriciaTrie_TrieEntry0.left = null;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-422));
      assertNotNull(integer0);
      assertEquals((-422), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>(comparable1, integer0, (-422));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key=null [-422], value=null, parent=null, left=null, right=null, predecessor=null [-422])", string0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(boolean0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      String string1 = patriciaTrie0.selectValue("Entry(key=Mock for Comparable, hashCode: 1011549398 [-422], value=null, parent=null, left=null, right=null, predecessor=Mock for Comparable, hashCode: 1011549398 [-422])");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", 1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "^7%<", 459);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(string0);
      assertEquals("Entry(key=1 [1], value=, parent=null, left=null, right=1 [459], predecessor=1 [1])", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("K4", "K4");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("org.apche{Fommons.cCll$ctios4.ti$.PatriciaT6ie", 0, 32);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      String string0 = patriciaTrie0.selectValue("ivU<Zx< '~#Ib=\"*3O");
      assertNull(string0);
      
      String string1 = patriciaTrie0.computeIfAbsent("ivU<Zx< '~#Ib=\"*3O", function0);
      assertNotNull(string1);
      assertEquals("ivU<Zx< '~#Ib=\"*3O", string1);
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      String string2 = "5";
      String string3 = patriciaTrie0.nextKey("5");
      assertNull(string3);
      
      String string4 = patriciaTrie0.selectKey("2JGjBsR");
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("ivU<Zx< '~#Ib=\"*3O", string4);
      
      String string5 = patriciaTrie0.put("2JGjBsR", "ivU<Zx< '~#Ib=\"*3O");
      assertNull(string5);
      
      patriciaTrie0.clear();
      patriciaTrie0.decrementSize();
      Set<String> set1 = patriciaTrie0.keySet();
      assertFalse(set1.isEmpty());
      assertEquals((-1), set1.size());
      assertNotNull(set1);
      assertFalse(set1.contains("2JGjBsR"));
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      String string0 = patriciaTrie0.put("KkS:k", "KkS:k");
      assertNull(string0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.getNearestEntryForKey("", 938);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("v_}hJl&W.)EMNt", patriciaTrie0);
      assertNull(object0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("v;{yD14uLh@nEKHc$N^b", integer0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>((Object) null, integer0, 3586);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      
      Object object1 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(object1);
      assertEquals("v;{yD14uLh@nEKHc$N^b", object1);
      
      Object object2 = patriciaTrie0.merge("v;{yD14uLh@nEKHc$N^b", "v;{yD14uLh@nEKHc$N^b", biFunction0);
      assertTrue(object2.equals((Object)object1));
      assertNotNull(object2);
      assertEquals("v;{yD14uLh@nEKHc$N^b", object2);
      
      Integer integer1 = new Integer(9);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(9, (int)integer1);
      
      Integer integer2 = new Integer(1424);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1424, (int)integer2);
      
      Object object3 = patriciaTrie0.put("AW~%k/(JW6VCNUCKVj", integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNull(object3);
      
      Integer integer3 = new Integer((-487));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-487), (int)integer3);
      
      Object object4 = patriciaTrie0.remove((Object) "v_}hJl&W.)EMNt");
      assertNotNull(object4);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      String string1 = patriciaTrie0.put("", "");
      assertNull(string1);
      
      int int0 = (-1395);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, (-1395));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, (-1395));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = "";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      int int1 = (-1595);
      boolean boolean0 = patriciaTrie0.isBitSet("", (-1395), (-1595));
      assertFalse(boolean0);
      
      Collection<String> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains(string0));
      
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0.right;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractPatriciaTrie_TrieEntry0.key = null;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.getEntry(abstractPatriciaTrie_TrieEntry0.right);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie2);
      
      Integer integer0 = new Integer(96);
      assertNotNull(integer0);
      assertEquals(96, (int)integer0);
      
      String string0 = patriciaTrie0.put("", "]");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string0);
      
      Object object0 = patriciaTrie2.put("", integer0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("  ", "a/");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("HJD:|^Y", "HJD:|^Y");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("fromKey > toKey", "fromKey > toKey");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("F^", "F^");
      assertNull(string3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie4.floorEntry("N'yMGN-sI^)1d");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie4);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie1);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie5);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, patriciaTrie5, (-2));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie5.addEntry(abstractPatriciaTrie_TrieEntry2, 2919);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie4);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(4780);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.decrementSize();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.ceilingEntry("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.trie.AbstractBitwiseTrie";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      String string1 = patriciaTrie2.put("", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie3);
      
      String string2 = patriciaTrie3.put("", "");
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(string2);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie4);
      
      PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie5);
      
      // Undeclared exception!
//      try { 
        patriciaTrie5.subtree("", 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("KkS:k", "KkS:k");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("", "");
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree((String) null, 0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.get(patriciaTrie1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("KkS:k", "KkS:k");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("RnR]yQ\u0011<bJ)w", (String) null);
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree((String) null, 0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.get(patriciaTrie1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("KkS:k", "KkS:k");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string2 = patriciaTrie1.previousKey("org.apache.commons.collections4.trie.PatriciaTrie");
      assertNotNull(string2);
      assertEquals("KkS:k", string2);
      
      String string3 = patriciaTrie1.firstKey();
      assertNotNull(string3);
      assertEquals("KkS:k", string3);
      
      PatriciaTrie<Comparable<Integer>> patriciaTrie2 = new PatriciaTrie<Comparable<Integer>>();
      assertNotNull(patriciaTrie2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}TJl&W.)EM|t", object0);
      assertNull(object1);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("v;{yD14uLh@nEKa$N^b", integer0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object2 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(object2);
      assertEquals("v;{yD14uLh@nEKa$N^b", object2);
      
      Object object3 = patriciaTrie0.merge("v;{yD14uLh@nEKa$N^b", "v;{yD14uLh@nEKa$N^b", biFunction0);
      assertTrue(object3.equals((Object)object2));
      assertNotNull(object3);
      assertEquals("v;{yD14uLh@nEKa$N^b", object3);
      
      Integer integer1 = new Integer(2396);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2396, (int)integer1);
      
      Integer integer2 = new Integer(9);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(9, (int)integer2);
      
      Object object4 = patriciaTrie0.put("<.~)T'y2arzvr<=", integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNull(object4);
      
      Integer integer3 = new Integer((-487));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-487), (int)integer3);
      
      String string0 = patriciaTrie0.previousKey("v_}TJl&W.)EM|t");
      assertTrue(string0.equals((Object)object3));
      assertTrue(string0.equals((Object)object2));
      assertNotNull(string0);
      assertEquals("v;{yD14uLh@nEKa$N^b", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(12);
      assertNotNull(integer0);
      assertEquals(12, (int)integer0);
      
      Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer0);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = patriciaTrie0.put("v_}TJl&W.)EM|t", object1);
      assertNull(object2);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("v;{yD14uLh@nEKa$N^b", integer1, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<Integer, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Object object3 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(object3);
      assertEquals("v;{yD14uLh@nEKa$N^b", object3);
      
      Object object4 = patriciaTrie0.merge("v;{yD14uLh@nEKa$N^b", "v;{yD14uLh@nEKa$N^b", biFunction0);
      assertTrue(object4.equals((Object)object3));
      assertNotNull(object4);
      assertEquals("v;{yD14uLh@nEKa$N^b", object4);
      
      Integer integer2 = new Integer(2396);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2396, (int)integer2);
      
      Integer integer3 = new Integer(9);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(9, (int)integer3);
      
      Object object5 = patriciaTrie0.put("<.~)T'y2arzvr<=", integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNull(object5);
      
      Integer integer4 = new Integer((-487));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals((-487), (int)integer4);
      
      Object object6 = patriciaTrie0.remove((Object) "v_}TJl&W.)EM|t");
      assertSame(object6, object1);
      assertNotNull(object6);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("UK* ShJn=s#jLtOt", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("null", "null");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("zqD(I):y>[}c$", "zqD(I):y>[}c$");
      assertNull(string2);
      
      String string3 = patriciaTrie0.remove((Object) "null");
      assertNotNull(string3);
      assertEquals("null", string3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "r{fO@");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("]={\n", "]={\n");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("zqD(I):y>[}c$", "zqD(I):y>[}c$");
      assertNull(string2);
      
      String string3 = patriciaTrie0.remove((Object) "]={\n");
      assertNotNull(string3);
      assertEquals("]={\n", string3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie0.higherEntry((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}TJl&W.)EM|t", object0);
      assertNull(object1);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("v;{yD14uLh@nEKa$N^b", integer0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object2 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(object2);
      assertEquals("v;{yD14uLh@nEKa$N^b", object2);
      
      Object object3 = patriciaTrie0.merge("v;{yD14uLh@nEKa$N^b", "v;{yD14uLh@nEKa$N^b", biFunction0);
      assertTrue(object3.equals((Object)object2));
      assertNotNull(object3);
      assertEquals("v;{yD14uLh@nEKa$N^b", object3);
      
      Integer integer1 = new Integer(2396);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2396, (int)integer1);
      
      Integer integer2 = new Integer(9);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(9, (int)integer2);
      
      Object object4 = patriciaTrie0.put("<.~)T'y2arzvr<=", integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNull(object4);
      
      Integer integer3 = new Integer((-487));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-487), (int)integer3);
      
      Object object5 = patriciaTrie0.remove((Object) "v_}TJl&W.)EM|t");
      assertSame(object5, object0);
      assertNotNull(object5);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("]={\n", "]={\n");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("$t@-", "");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("zqD(I):y>[}c$", "zqD(I):y>[}c$");
      assertNull(string2);
      
      String string3 = patriciaTrie0.remove((Object) "]={\n");
      assertNotNull(string3);
      assertEquals("]={\n", string3);
      
      String string4 = patriciaTrie0.put("]={\n", "zqD(I):y>[}c$");
      assertNull(string4);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<String>>(integer0, (Comparable<String>) null, (-1411));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "KkS:k");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("KkS:k", "KkS:k");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("RnRyQ\u0011<bJ", (String) null);
      assertNull(string2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string3 = patriciaTrie1.firstKey();
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.incrementSize();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciarie$Values$ValueIterator", patriciaTrie0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<String, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}TJl&W.)EM|t", object0);
      assertNull(object1);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("v;{yD14uLh@nEKa$N^b", integer0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object2 = abstractPatriciaTrie_TrieEntry2.getKey();
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(object2);
      assertEquals("v;{yD14uLh@nEKa$N^b", object2);
      
      Object object3 = patriciaTrie0.merge("v;{yD14uLh@nEKa$N^b", "v;{yD14uLh@nEKa$N^b", biFunction0);
      assertTrue(object3.equals((Object)object2));
      assertNotNull(object3);
      assertEquals("v;{yD14uLh@nEKa$N^b", object3);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer1 = hashMap0.putIfAbsent("Z#R sns,0BwV>hox2fH", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciarie$Values$ValueIterator", integer2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(integer2.equals((Object)integer0));
      assertNull(integer3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry((String) null);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.tailMap("");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      Integer integer0 = new Integer((-177));
      assertNotNull(integer0);
      assertEquals((-177), (int)integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer((-792));
      assertNotNull(integer0);
      assertEquals((-792), (int)integer0);
      
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = patriciaTrie0.computeIfPresent("4\"H7xg6#0l", biFunction0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(integer1);
      
      Integer integer2 = new Integer(2376);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2376, (int)integer2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("4\"H7xg6#0l", integer2, 2376);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("4\"H7xg6#0l", integer0, (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(integer0.equals((Object)integer2));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.left;
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry4, (-792));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry5);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("3=Qd1]1?C7O'0v*");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      Collection<Object> collection0 = patriciaTrie1.values();
      assertNotNull(collection0);
      
      Object object1 = patriciaTrie1.put("", "");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.firstEntry();
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-8));
      assertNotNull(integer0);
      assertEquals((-8), (int)integer0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      Integer integer1 = patriciaTrie2.put("j6F;=m^rpbwW", integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer1);
      
      Integer integer2 = patriciaTrie2.put("", integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.ceilingEntry("nV+n`?I");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.modCount = 224;
      String string0 = patriciaTrie0.nextKey("^");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("&lXz-~g");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(155);
      assertNotNull(integer0);
      assertEquals(155, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 155);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(string1);
      assertEquals("Entry(key=155 [155], value=155, parent=null, left=155 [155], right=null, predecessor=155 [155])", string1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Object object0 = hashMap0.put(" is not an external Entry!", " is not an external Entry!");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object0);
      
      Object object1 = hashMap0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(object1);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      boolean boolean0 = patriciaTrie0.compareKeys("", "`W");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(4059);
      assertNotNull(integer0);
      assertEquals(4059, (int)integer0);
      
      boolean boolean1 = patriciaTrie0.remove((Object) "", (Object) integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object2 = hashMap0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(object2);
      assertEquals("", object2);
      
      patriciaTrie0.modCount = (-2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      String string0 = patriciaTrie0.previousKey("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string0);
      
      Object object3 = hashMap0.put(";BEY3r|+9uBe", (Object) null);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object4 = hashMap0.put("keyAnalyzer", (Object) null);
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object4);
      
      Object object5 = patriciaTrie0.put("", hashMap0);
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(object5);
      assertEquals("", object5);
      
      String string1 = patriciaTrie0.firstKey();
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(string1.equals((Object)object5));
      assertTrue(string1.equals((Object)object2));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = patriciaTrie1.computeIfPresent("", biFunction0);
      assertNull(object0);
      
      Collection<Object> collection0 = patriciaTrie1.values();
      assertNotNull(collection0);
      
      Object object1 = patriciaTrie1.put("", "");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object object3 = patriciaTrie1.put("", object2);
      assertNotNull(object3);
      assertEquals("", object3);
      
      Integer integer0 = new Integer((-1084));
      assertNotNull(integer0);
      assertEquals((-1084), (int)integer0);
      
      Integer integer1 = new Integer(784);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(784, (int)integer1);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer1, comparable0, 1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer2 = abstractPatriciaTrie_TrieEntry1.key;
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(784, (int)integer2);
      
      abstractPatriciaTrie_TrieEntry1.bitIndex = 0;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer2, (Integer) null, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Integer integer3 = new Integer((-1084));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1084), (int)integer3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("v;{yD14uLh@nEKa$N^b", integer3, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Object object4 = abstractPatriciaTrie_TrieEntry3.getKey();
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      assertEquals("v;{yD14uLh@nEKa$N^b", object4);
      
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      Object object5 = patriciaTrie1.merge("", "", biFunction1);
      assertNull(object5);
      
      Integer integer4 = new Integer((-718));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-718), (int)integer4);
      
      Integer integer5 = new Integer(2396);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(2396, (int)integer5);
      
      Object object6 = patriciaTrie1.put("", "");
      assertNull(object6);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciarie$Values$ValueIterator", patriciaTrie0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "org.apache.commons.collections4.trie.AbstractPatriciarie$Values$ValueIterator", 272);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}TJl&W.)EM|t", object0);
      assertNull(object1);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("v;{yD14uLh@nEKa$N^b", integer0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      Object object2 = abstractPatriciaTrie_TrieEntry4.getKey();
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(object2);
      assertEquals("v;{yD14uLh@nEKa$N^b", object2);
      
      Object object3 = patriciaTrie0.merge("v;{yD14uLh@nEKa$N^b", "v;{yD14uLh@nEKa$N^b", biFunction0);
      assertTrue(object3.equals((Object)object2));
      assertNotNull(object3);
      assertEquals("v;{yD14uLh@nEKa$N^b", object3);
      
      Integer integer1 = new Integer(2396);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2396, (int)integer1);
      
      Integer integer2 = new Integer(9);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(9, (int)integer2);
      
      Object object4 = patriciaTrie0.put("<.~)T'y2arzvr<=", integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNull(object4);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Object object0 = hashMap0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      boolean boolean0 = patriciaTrie0.compareKeys("", "`W");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(4059);
      assertNotNull(integer0);
      assertEquals(4059, (int)integer0);
      
      boolean boolean1 = patriciaTrie0.remove((Object) "", (Object) integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object1 = hashMap0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(object1);
      assertEquals("", object1);
      
      patriciaTrie0.modCount = (-2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string0 = patriciaTrie0.previousKey("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      Object object2 = hashMap0.put("keyAnalyzer", (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(object2);
      
      Object object3 = patriciaTrie0.put("", hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(object3);
      assertEquals("", object3);
      
      String string1 = patriciaTrie0.firstKey();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertTrue(string1.equals((Object)object1));
      assertTrue(string1.equals((Object)object3));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.clear();
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = patriciaTrie0.put("", "?bk &W");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("?bk &W", "org.apache.commohs.collections4.trWe.Patrici3Trie");
      assertNull(string1);
      
      int int0 = patriciaTrie0.bitIndex((String) null, "?bk &W");
      assertEquals(10, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("?bk &W");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie2);
      
      Collection<String> collection0 = patriciaTrie0.values();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotNull(collection0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>(">n!44do20TZT$\"R3", ">n!44do20TZT$\"R3", (-2));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = patriciaTrie1.isBitSet(">n!44do20TZT$\"R3", (-2), (-3));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.followRight((AbstractPatriciaTrie.TrieEntry<String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("KkS:k", "KkS:k");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("RnR]yQ\u0011<bJ)w", (String) null);
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("KkS:k");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = patriciaTrie1.computeIfPresent("", biFunction0);
      assertNull(object0);
      
      Collection<Object> collection0 = patriciaTrie1.values();
      assertNotNull(collection0);
      
      Object object1 = patriciaTrie1.put("", "");
      assertNull(object1);
      
      Collection<Object> collection1 = patriciaTrie1.values();
      assertSame(collection1, collection0);
      assertNotNull(collection1);
      assertTrue(collection1.contains(""));
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("/kB", "/kB");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object>(abstractMap_SimpleEntry1, collection1, 2457);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(collection1.contains("/kB"));
      assertTrue(collection1.contains(""));
      
      Object object2 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertSame(collection1, collection0);
      assertNotNull(object2);
      assertFalse(collection1.contains("/kB"));
      assertTrue(collection1.contains(""));
      
      Object object3 = patriciaTrie1.put("", object2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertSame(collection1, collection0);
      assertNotNull(object3);
      assertEquals("", object3);
      assertFalse(collection1.contains(""));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.firstEntry();
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-8));
      assertNotNull(integer0);
      assertEquals((-8), (int)integer0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      Integer integer1 = new Integer((-8));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-8), (int)integer1);
      
      Integer integer2 = patriciaTrie2.put("&/yR.wk6Fn-iV-b.b", integer1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(integer1.equals((Object)integer0));
      assertNull(integer2);
      
      Integer integer3 = patriciaTrie2.put("j6F;=m^rpbwW", (Integer) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.lowerEntry("");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie0);
      
      Collection<AbstractMap.SimpleImmutableEntry<String, Object>> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      Collection<AbstractMap.SimpleImmutableEntry<String, Object>> collection1 = patriciaTrie0.values();
      assertSame(collection1, collection0);
      assertNotNull(collection1);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = patriciaTrie0.put("c<^2BFn", (AbstractMap.SimpleImmutableEntry<String, Object>) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("^IV", (AbstractMap.SimpleImmutableEntry<String, Object>) null);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry(" is sotn xerpal Entry!");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, Comparable<Object>> hashMap0 = new HashMap<String, Comparable<Object>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      Comparable<Object> comparable1 = hashMap0.put("h|C9=iX", comparable0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(comparable1);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable3 = patriciaTrie1.put("", comparable2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(comparable3);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparable<Object> comparable4 = hashMap0.put((String) null, (Comparable<Object>) null);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(comparable4);
      
      Comparable<Object> comparable5 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = patriciaTrie1.size();
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, int0);
      
      Comparable<Object> comparable6 = patriciaTrie1.put("x[ma$sb(r7W%6Psz", (Comparable<Object>) null);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(comparable6);
      
      PatriciaTrie<Comparable<String>> patriciaTrie2 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = patriciaTrie0.put("", (AbstractMap.SimpleImmutableEntry<String, Object>) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("must have come from somewhere!", (AbstractMap.SimpleImmutableEntry<String, Object>) null);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, Comparable<Object>> hashMap0 = new HashMap<String, Comparable<Object>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      Comparable<Object> comparable1 = patriciaTrie1.put("", comparable0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(comparable1);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparable<Object> comparable2 = hashMap0.put((String) null, (Comparable<Object>) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(comparable2);
      
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable3).toString();
      Comparable<Object> comparable4 = patriciaTrie1.put("", comparable3);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(comparable4.equals((Object)comparable3));
      assertNotSame(comparable4, comparable3);
      assertSame(comparable4, comparable0);
      assertNotNull(comparable4);
      
      int int0 = patriciaTrie1.size();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, int0);
      
      Comparable<Object> comparable5 = patriciaTrie1.put("x[a$sb(r7W%6Psz", comparable4);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(comparable4.equals((Object)comparable3));
      assertNotSame(comparable4, comparable3);
      assertSame(comparable4, comparable0);
      assertNull(comparable5);
      
      PatriciaTrie<Comparable<String>> patriciaTrie2 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>((String) null, "", 128);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>) null);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.getNearestEntryForKey("", 1);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      Comparable<String> comparable6 = patriciaTrie2.put("", "");
      assertNull(comparable6);
      
      Collection<Comparable<String>> collection0 = patriciaTrie2.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains("x[a$sb(r7W%6Psz"));
      assertTrue(collection0.contains(""));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry5);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, Comparable<Object>> hashMap0 = new HashMap<String, Comparable<Object>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      Comparable<Object> comparable0 = patriciaTrie1.put("", (Comparable<Object>) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(comparable0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparable<Object> comparable1 = hashMap0.put((String) null, (Comparable<Object>) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(comparable1);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie2 = new PatriciaTrie<Comparable<Object>>(patriciaTrie1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      Comparable<Object> comparable2 = patriciaTrie2.put("", (Comparable<Object>) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(comparable2);
      
      int int0 = patriciaTrie2.size();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertEquals(1, int0);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie3 = new PatriciaTrie<Comparable<Object>>();
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie3);
      
      Comparable<Object> comparable3 = patriciaTrie3.put("", (Comparable<Object>) null);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(comparable3);
      
      PatriciaTrie<Comparable<String>> patriciaTrie4 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Object object0 = hashMap0.put("eLcVT", "=");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = patriciaTrie1.merge("", "yzSGQmO{wp*C2|fs", biFunction0);
      assertNotNull(string0);
      assertEquals("yzSGQmO{wp*C2|fs", string0);
      
      String string1 = patriciaTrie1.put(" y]tvhY4:GY,%l", " y]tvhY4:GY,%l");
      assertNull(string1);
      
      String string2 = patriciaTrie1.selectValue("WRrqC$<?Ru!");
      assertNotNull(string2);
      assertEquals("yzSGQmO{wp*C2|fs", string2);
      
      PatriciaTrie<Comparable<String>> patriciaTrie2 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "");
      assertNull(string0);
      
      int int0 = patriciaTrie0.bitIndex("", (String) null);
      assertEquals((-1), int0);
      
      String string1 = patriciaTrie0.put("", "");
      assertNull(string1);
      
      String string2 = patriciaTrie0.selectValue((String) null);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.incrementSize();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("", ")");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string0);
      
      String string1 = patriciaTrie0.selectValue("Key is out of range: ");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      Integer integer0 = new Integer(1051);
      assertNotNull(integer0);
      assertEquals(1051, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>(")", integer0, 1051);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry1, 1327);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie1);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("#V7T1?Jv(RE_,oT", "I7DcnY");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie1.put("I7DcnY", abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie1.selectKey("{fTJ6A:X}`L{4");
      assertNotNull(string0);
      assertEquals("I7DcnY", string0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      SortedMap<String, String> sortedMap0 = new PatriciaTrie<String>();
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("null", "null");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string1 = hashMap0.put("'tn`h(R;Q.:A+~", "'tn`h(R;Q.:A+~");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      Map.Entry<String, Comparable<String>> map_Entry0 = patriciaTrie0.select("");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(map_Entry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("Key cannot be null", "Key cannot be null", 16);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("null", "null", 16);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      
      Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry0.setValue("'tn`h(R;Q.:A+~");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(comparable0);
      assertEquals("Key cannot be null", comparable0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      String string2 = abstractPatriciaTrie_TrieEntry1.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(string2.equals((Object)comparable0));
      assertNotNull(string2);
      assertEquals("Entry(key=null [16], value=null, parent=null, left=null [16], right=null, predecessor=null [16])", string2);
      
      Comparable<String> comparable1 = abstractPatriciaTrie_TrieEntry0.setKeyValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(comparable1.equals((Object)comparable0));
      assertNotSame(comparable1, comparable0);
      assertNotNull(comparable1);
      assertEquals("'tn`h(R;Q.:A+~", comparable1);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      
      Comparable<String> comparable2 = patriciaTrie0.replace((String) null, (Comparable<String>) null);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(comparable2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("pKgskKrcT p2", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("iFcw*FE1Y9edF;", (String) null);
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("nnO?ENcbH/i0pP*/", "nnO?ENcbH/i0pP*/");
      assertNull(string3);
      
      String string4 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      assertNotNull(string4);
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", string4);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      String string0 = patriciaTrie0.put("]={\n", "]={\n");
      assertNull(string0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.tailMap("]={\n");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      String string1 = patriciaTrie0.put("Entry(", (String) null);
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("zZD(I):y>[}c$", "zZD(I):y>[}c$");
      assertNull(string2);
      
      String string3 = patriciaTrie0.remove((Object) "]={\n");
      assertNotNull(string3);
      assertEquals("]={\n", string3);
      
      String string4 = patriciaTrie0.selectValue("zZD(I):y>[}c$");
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("zZD(I):y>[}c$", string4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("]={\n", "]={\n");
      assertNull(string0);
      
      String string1 = patriciaTrie0.toString();
      assertNotNull(string1);
      assertEquals("Trie[1]={\n  Entry(key=]={\n [9], value=]={\n, parent=ROOT, left=ROOT, right=]={\n [9], predecessor=]={\n [9])\n}\n", string1);
      
      String string2 = patriciaTrie0.put("zqD(I):y>[}c$", "zqD(I):y>[}c$");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", (String) null);
      assertNull(string3);
      
      String string4 = patriciaTrie0.remove((Object) "]={\n");
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("]={\n", string4);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.put((String) null, "]={\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("]={\n", "]={\n");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("zqD(I):y>[}c$", "zqD(I):y>[}c$");
      assertNull(string1);
      
      String string2 = patriciaTrie0.remove((Object) "]={\n");
      assertNotNull(string2);
      assertEquals("]={\n", string2);
      
      String string3 = patriciaTrie0.put("<ru\"-!T;B", "]={\n");
      assertNull(string3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}TJl&W.)EM|t", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}TJl&W.)EM|t", string0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}TJl&W.)EM|t");
      assertFalse(boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      Object object2 = abstractPatriciaTrie_TrieEntry4.getKey();
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(object2.equals((Object)string0));
      assertNotNull(object2);
      assertEquals("", object2);
      
      Object object3 = patriciaTrie0.merge("v;{yD14uLh@nEKa$N^b", "", biFunction0);
      assertFalse(object3.equals((Object)string0));
      assertTrue(object3.equals((Object)object2));
      assertNotNull(object3);
      assertEquals("", object3);
      
      Integer integer1 = new Integer(2396);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2396, (int)integer1);
      
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object4 = patriciaTrie0.computeIfPresent("2Uy9>v", biFunction1);
      assertNull(object4);
      
      Integer integer2 = new Integer((-6696));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-6696), (int)integer2);
      
      Integer integer3 = new Integer((-6696));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-6696), (int)integer3);
      
      Object object5 = patriciaTrie0.remove((Object) "v_}TJl&W.)EM|t");
      assertSame(object5, object0);
      assertNotNull(object5);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      int int0 = 119;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("V:V(]", "V:V(]", 119);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("V:V(]", "org.apache.commons.collections4.trie.AbstractPatriciaTrie", 119);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = patriciaTrie1.put("Y$W/7p,D[2Lv9eU-b", integer0);
      assertNull(object0);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap("Y$W/7p,D[2Lv9eU-b");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = patriciaTrie1.computeIfPresent("", biFunction0);
      assertNull(object1);
      
      Collection<Object> collection0 = patriciaTrie1.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains("Y$W/7p,D[2Lv9eU-b"));
      assertTrue(collection0.contains(0));
      
      Object object2 = patriciaTrie1.put("", "");
      assertNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer1 = new Integer(10);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(10, (int)integer1);
      
      Integer integer2 = new Integer((-2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-2), (int)integer2);
      
      Integer integer3 = hashMap0.put("Y$W/7p,D[2Lv9eU-b", integer2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNull(integer3);
      
      Integer integer4 = hashMap0.put("", integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertNull(integer4);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie2);
      
      Integer integer5 = patriciaTrie2.put("j6F;=m^rpbwW", (Integer) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(integer5);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie3);
      
      String string0 = patriciaTrie3.selectValue("Y$W/7p,D[2Lv9eU-b");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.previousKey((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.incrementSize();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = patriciaTrie0.put("", "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      int int0 = patriciaTrie0.bitIndex("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(9, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("org.apache.commons.collections4.trie.AbstractBitwiseTrie", 22, 22);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.replaceAll(biFunction0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      
      String string0 = patriciaTrie2.put("", "org.apache.commohs.collections4.trie.PatriciaTrie");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(string0);
      
      String string1 = null;
      int int0 = patriciaTrie2.bitIndex("org.apache.commohs.collections4.trie.PatriciaTrie", (String) null);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertEquals(9, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.subtree("org.apache.commohs.collections4.trie.PatriciaTrie", 9, 0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("<.~)T'y2arzvr<=", abstractPatriciaTrie_TrieEntry0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}^MTJl&W.)E)M|t", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}^MTJl&W.)E)M|t", string0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}^MTJl&W.)E)M|t");
      assertFalse(boolean0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object2 = patriciaTrie0.computeIfPresent("<.~)T'y2arzvr<=", biFunction0);
      assertNull(object2);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Object object3 = patriciaTrie0.remove((Object) "v_}^MTJl&W.)E)M|t");
      assertSame(object3, object0);
      assertNotNull(object3);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = null;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}TJl&W.)EM|t", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}TJl&W.)EM|t", string0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}TJl&W.)EM|t");
      assertFalse(boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      Object object2 = abstractPatriciaTrie_TrieEntry4.getKey();
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(object2.equals((Object)string0));
      assertNotNull(object2);
      assertEquals("", object2);
      
      Object object3 = patriciaTrie0.merge("v;{yD14uLh@nEKa$N^b", "", biFunction0);
      assertFalse(object3.equals((Object)string0));
      assertTrue(object3.equals((Object)object2));
      assertNotNull(object3);
      assertEquals("", object3);
      
      Integer integer1 = new Integer(2396);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2396, (int)integer1);
      
      Integer integer2 = new Integer(9);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(9, (int)integer2);
      
      String string1 = patriciaTrie0.toString();
      assertFalse(string1.equals((Object)object3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object2));
      assertNotNull(string1);
      
      Object object4 = patriciaTrie0.put("<.~)T'y2arzvr<=", integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNull(object4);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(boolean1);
      
      String string2 = patriciaTrie1.nextKey("\"oHYBo");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(32768);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commohs.collections4.trie.PatriciaTrie");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(string0);
      
      int int0 = patriciaTrie1.bitIndex((String) null, "?bk &W");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(10, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("org.apache.commons.collections4.trie.PatriciaTrie");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.subtree((String) null, 968, 10);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      String string0 = hashMap1.put(" -> ", "z6");
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      String string1 = patriciaTrie1.put(" y]tvhY4:GY,%l", " y]tvhY4:GY,%l");
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(string1);
      
      String string2 = patriciaTrie1.selectValue("WRrqC$<P?Ru!");
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotNull(string2);
      assertEquals(" y]tvhY4:GY,%l", string2);
      
      int int0 = patriciaTrie1.size();
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer((-2029));
      assertNotNull(integer0);
      assertEquals((-2029), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>((Comparable<Object>) null, integer0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>((Comparable<Object>) null, integer0, 155);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.left.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key=null [155], value=-2029, parent=null, left=null [155], right=null, predecessor=null [155])", string0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(boolean0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("Entry(key=null [155], value=-2029, parent=null, left=null [155], right=null, predecessor=null [155])", integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("Entry(key=null [155], value=-2029, parent=null, left=null [155], right=null, predecessor=null [155])", abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry("Entry(key=null [155], value=-2029, parent=null, left=null [155], right=null, predecessor=null [155])");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}TJl&W.)EM|t", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}TJl&W.)EM|t", string0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}TJl&W.)EM|t");
      assertFalse(boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      Object object2 = abstractPatriciaTrie_TrieEntry4.getKey();
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(object2.equals((Object)string0));
      assertNotNull(object2);
      assertEquals("", object2);
      
      Object object3 = patriciaTrie0.merge("v;{yD14uLh@nEKa$N^b", "", biFunction0);
      assertTrue(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)string0));
      assertNotNull(object3);
      assertEquals("", object3);
      
      Integer integer1 = new Integer(2396);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2396, (int)integer1);
      
      Integer integer2 = new Integer(9);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(9, (int)integer2);
      
      Object object4 = patriciaTrie0.put("<.~)T'y2arzvr<=", integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNull(object4);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.higherEntry("<.~)T'y2arzvr<=");
      assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(boolean1);
      
      String string1 = patriciaTrie1.nextKey("\"oHYBo");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = null;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}TJl&W.)EM|t", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}TJl&W.)EM|t", string0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}TJl&W.)EM|t");
      assertFalse(boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      Object object2 = abstractPatriciaTrie_TrieEntry4.getKey();
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(object2.equals((Object)string0));
      assertNotNull(object2);
      assertEquals("", object2);
      
      Object object3 = patriciaTrie0.merge("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", "", biFunction0);
      assertTrue(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)string0));
      assertNotNull(object3);
      assertEquals("", object3);
      
      Integer integer1 = new Integer(2396);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2396, (int)integer1);
      
      Integer integer2 = new Integer(9);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(9, (int)integer2);
      
      Integer integer3 = new Integer(2);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(2, (int)integer3);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer3, "", 25);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry2, "<.~)T'y2arzvr<=", 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      
      String string1 = abstractPatriciaTrie_TrieEntry6.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object2));
      assertFalse(string1.equals((Object)object3));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(32768);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commohs.collections4.trie.PatriciaTrie");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(string0);
      
      int int0 = patriciaTrie1.bitIndex((String) null, "?bk &W");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(10, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.subtree((String) null, 968, 10);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      String string0 = patriciaTrie1.put("", "");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(string0);
      
      int int0 = patriciaTrie1.bitIndex("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(9, int0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.subtree((String) null, 9, (-976));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1536);
      assertNotNull(integer0);
      assertEquals(1536, (int)integer0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer1 = hashMap0.put("", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      Integer integer2 = new Integer((-1740));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1740), (int)integer2);
      
      Integer integer3 = patriciaTrie1.put("", integer2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1536, (int)integer3);
      
      Integer integer4 = new Integer(386);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(386, (int)integer4);
      
      Integer integer5 = patriciaTrie1.put("", integer4);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals((-1740), (int)integer5);
      
      Integer integer6 = patriciaTrie1.put("", (Integer) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(386, (int)integer6);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry((String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-449));
      assertNotNull(integer0);
      assertEquals((-449), (int)integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = patriciaTrie1.put("j6F;=m^rpbwW", integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(integer1);
      
      Integer integer2 = new Integer((-1388));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1388), (int)integer2);
      
      Integer integer3 = patriciaTrie1.put("", integer2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(integer2.equals((Object)integer0));
      assertNull(integer3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("MvnOP_80O");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      Integer integer1 = abstractMap_SimpleEntry1.setValue(integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      
      Integer integer2 = new Integer((-2));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-2), (int)integer2);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      Integer integer3 = new Integer(3759);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(3759, (int)integer3);
      
      Integer integer4 = patriciaTrie1.put("HgW&", integer3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(integer4);
      
      Integer integer5 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(integer5);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("lXXe),O(UzR\"z_d9w");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap("Y$W/7p,D[2Lv9eU-b");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = patriciaTrie1.computeIfPresent("", biFunction0);
      assertNull(object0);
      
      Collection<Object> collection0 = patriciaTrie1.values();
      assertNotNull(collection0);
      
      Object object1 = patriciaTrie1.put("", "");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      Integer integer1 = hashMap0.put("", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      Integer integer2 = patriciaTrie2.put("j6F;=m^rpbwW", (Integer) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      
      Integer integer3 = patriciaTrie2.put("", (Integer) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(integer3);
      assertEquals(10, (int)integer3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.lowerEntry("[a5*D6ou");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Object object0 = hashMap0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      boolean boolean0 = patriciaTrie0.compareKeys("", "`W");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(4059);
      assertNotNull(integer0);
      assertEquals(4059, (int)integer0);
      
      boolean boolean1 = patriciaTrie0.remove((Object) "", (Object) integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer1 = new Integer(4059);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4059, (int)integer1);
      
      Object object1 = patriciaTrie0.put("The offsets and lengths must be at Character boundaries", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(integer0.equals((Object)integer1));
      assertNull(object1);
      
      Integer integer2 = new Integer(9);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(9, (int)integer2);
      
      Object object2 = patriciaTrie0.remove((Object) "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(object2);
      assertEquals("", object2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}^MTJl&W.)E)M|t", object0);
      assertNull(object1);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}^MTJl&W.)E)M|t", string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}^MTJl&W.)E)M|t");
      assertFalse(boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1").when(biFunction0).apply(any() , any());
      Object object2 = patriciaTrie0.merge("v_}^MTJl&W.)E)M|t", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", biFunction0);
      assertFalse(object2.equals((Object)string0));
      assertNotNull(object2);
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", object2);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object3 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", integer0);
      assertNull(object3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Integer integer1 = new Integer(1844);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1844, (int)integer1);
      
      Integer integer2 = patriciaTrie2.put("v_}^MTJl&W.)E)M|t", integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNull(integer2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie3);
      
      Integer integer3 = new Integer(1844);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1844, (int)integer3);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "", 41);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Object object4 = abstractPatriciaTrie_TrieEntry1.getValue();
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(object4.equals((Object)string0));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      assertEquals("", object4);
      
      Object object5 = patriciaTrie0.remove((Object) "");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(object5);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("c! 4", "c! 4");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertTrue(set0.contains("c! 4"));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("KL?I\"7:)Y@&", "cv^?tt~qQT<lv*C<_5", (-3644));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select((String) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotNull(map_Entry0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("c! 4", "c! 4");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertTrue(set0.contains("c! 4"));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("KL?I\"7:)Y@&", "cv^?tt~qQT<lv*C<_5", (-3644));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry1.key = "c! 4";
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry1.key;
      assertNotNull(string0);
      assertEquals("c! 4", string0);
      
      boolean boolean0 = patriciaTrie0.containsKey("c! 4");
      assertTrue(boolean0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      String string1 = patriciaTrie2.put("cv^?tt~qQT<lv*C<_5", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(string1);
      
      String string2 = patriciaTrie2.selectValue((String) null);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(string2);
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", string2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("EAs3QoXd>", comparable0, 3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      Comparable<Object> comparable2 = abstractPatriciaTrie_TrieEntry0.setValue(comparable1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(comparable2.equals((Object)comparable1));
      assertNotSame(comparable2, comparable1);
      assertSame(comparable2, comparable0);
      assertNotNull(comparable2);
      
      abstractPatriciaTrie_TrieEntry0.key = "";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      abstractPatriciaTrie_TrieEntry0.key = "EAs3QoXd>";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("", comparable3, 3);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Comparable<Object>, Object>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      Comparator<Map.Entry<String, Object>> comparator2 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      assertNotNull(comparator2);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
      
      abstractPatriciaTrie_TrieEntry1.key = ">R4r6|nQHe:6!12;";
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key=EAs3QoXd> [3], value=null, parent=null, left=>R4r6|nQHe:6!12; [3], right=null, predecessor=EAs3QoXd> [3])", string0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isExternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>(abstractMap_SimpleImmutableEntry0, ">R4r6|nQHe:6!12;", 16);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie2 = new PatriciaTrie<Comparable<Object>>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie2.forEach(biConsumer0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      Collection<Comparable<Object>> collection0 = patriciaTrie2.values();
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(collection0);
      assertFalse(collection0.contains(comparable1));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("", " is not an internal Entry!");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(object0);
      
      String string0 = ":%[r7+j}:;H}K0lH0";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry(":%[r7+j}:;H}K0lH0");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(":%[r7+j}:;H}K0lH0"));
      assertTrue(set0.contains(""));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", ".+q'?2Q?m.^(tY6", 224);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string1 = abstractPatriciaTrie_TrieEntry1.key;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", string1);
      
      Integer integer0 = new Integer(3178);
      assertNotNull(integer0);
      assertEquals(3178, (int)integer0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.containsKey(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("&CWv)T):", "null");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = hashMap0.put("&CWv)T):", "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(string1);
      assertEquals("null", string1);
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("Trie[");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Object>>(hashMap0, (AbstractMap.SimpleEntry<String, Object>) null, (-2539));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string2 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Entry(key={&CWv)T):=} [-2539], value=null, parent=null, left={&CWv)T):=} [-2539], right=null, predecessor={&CWv)T):=} [-2539])", string2);
      
      String string3 = hashMap0.put("&CWv)T):", "invalid lookup: ");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Entry(key={&CWv)T):=invalid lookup: } [-2539], value=null, parent=null, left={&CWv)T):=invalid lookup: } [-2539], right=null, predecessor={&CWv)T):=invalid lookup: } [-2539])", string4);
      
      Comparable<String> comparable0 = patriciaTrie0.replace("Trie[", (Comparable<String>) "Entry(key={&CWv)T):=invalid lookup: } [-2539], value=null, parent=null, left={&CWv)T):=invalid lookup: } [-2539], right=null, predecessor={&CWv)T):=invalid lookup: } [-2539])");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(comparable0);
      
      String string5 = patriciaTrie0.lastKey();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("&CWv)T):", string5);
      
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie0.subMap("7=<I[>4f!", "7=<I[>4f!");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("H_;+uZcmz-\"", "", 2185);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      Map.Entry<String, Object> map_Entry0 = patriciaTrie2.select("");
      assertNull(map_Entry0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("KkS:k", "KkS:k");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("-A+Jm1xfBNma<CE[.", "-A+Jm1xfBNma<CE[.");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("]={\n", (String) null);
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("-A+Jm1xfBNma<CE[.");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string3 = patriciaTrie0.selectValue((String) null);
      assertNotNull(string3);
      assertEquals("-A+Jm1xfBNma<CE[.", string3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie2);
      
      patriciaTrie2.incrementSize();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      SortedMap<String, String> sortedMap0 = patriciaTrie2.prefixMap("ihA8iSIXpu-A:FX");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      int int0 = patriciaTrie2.lengthInBits("}\n");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(32, int0);
      
      patriciaTrie2.incrementSize();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.floorEntry("keyAnalyzer");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = new Integer((-2029));
      assertNotNull(integer0);
      assertEquals((-2029), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>((Comparable<Object>) null, integer0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>((Comparable<Object>) null, integer0, 155);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.left.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key=null [155], value=-2029, parent=null, left=null [155], right=null, predecessor=null [155])", string0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(boolean0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string1 = patriciaTrie0.put("Entry(key=null [155], value=-2029, parent=null, left=null [155], right=null, predecessor=null [155])", "");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitIndex("", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = patriciaTrie0.containsKey(" <tZPY+6IxA+>B9");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(1);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(" <tZPY+6IxA+>B9", integer0, (-1556));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      abstractPatriciaTrie_TrieEntry0.left = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<Object, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Comparable<Object>>("", comparable0, 1248);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry1.bitIndex = (-1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      boolean boolean2 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, String>(comparable1, "c;+A`", (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      String string0 = abstractPatriciaTrie_TrieEntry2.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(string0);
      assertEquals("RootEntry(key=null [-1], value=c;+A`, parent=null, left=ROOT, right=null, predecessor=ROOT)", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie1.selectKey((String) null);
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      Set<String> set0 = patriciaTrie2.keySet();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("RootEntry(", (Object) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie1.replace((String) null, abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      Integer integer0 = new Integer(4649);
      assertNotNull(integer0);
      assertEquals(4649, (int)integer0);
      
      Integer integer1 = hashMap1.put((String) null, integer0);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      
      String string1 = hashMap0.put((String) null, "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.subtree("s.|bL|6^#JpP:Y7", (-4478), (-4478));
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      patriciaTrie3.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie0.headMap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must have a from or to!
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(32768);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commohs.collections4.trie.PatriciaTrie");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(string0);
      
      int int0 = patriciaTrie1.bitIndex((String) null, "?bk &W");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(10, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree((String) null, 968, 10);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = patriciaTrie1.put("org.apache.commohs.collections4.trie.PatriciaTrie", (String) null);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(string1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.headMap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must have a from or to!
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(32777);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commohs.collections4.trie.PatriciaTrie");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(string0);
      
      int int0 = patriciaTrie1.bitIndex((String) null, "?bk &W");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(10, int0);
      
      boolean boolean0 = patriciaTrie1.containsKey((Object) null);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "org.apache.commons.collections4.trie.PatriciaTrie", 10);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie1, "?bk &W", 32777);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie3);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(32777);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commohs.collections4.trie.PatriciaTrie");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(string0);
      
      int int0 = patriciaTrie1.bitIndex((String) null, "?bk &W");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(10, int0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "org.apache.commons.collections4.trie.PatriciaTrie", 10);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie1, "?bk &W", 32777);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(string1);
      assertEquals("Entry(key=Trie[1]={\n  Entry(key=org.apache.commons.collections4.trie.PatriciaTrie [9], value=org.apache.commohs.collections4.trie.PatriciaTrie, parent=ROOT, left=ROOT, right=org.apache.commons.collections4.trie.PatriciaTrie [9], predecessor=org.apache.commons.collections4.trie.PatriciaTrie [9])\n}\n [32777], value=?bk &W, parent=null, left=Trie[1]={\n  Entry(key=org.apache.commons.collections4.trie.PatriciaTrie [9], value=org.apache.commohs.collections4.trie.PatriciaTrie, parent=ROOT, left=ROOT, right=org.apache.commons.collections4.trie.PatriciaTrie [9], predecessor=org.apache.commons.collections4.trie.PatriciaTrie [9])\n}\n [32777], right=null, predecessor=Trie[1]={\n  Entry(key=org.apache.commons.collections4.trie.PatriciaTrie [9], value=org.apache.commohs.collections4.trie.PatriciaTrie, parent=ROOT, left=ROOT, right=org.apache.commons.collections4.trie.PatriciaTrie [9], predecessor=org.apache.commons.collections4.trie.PatriciaTrie [9])\n}\n [32777])", string1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("c! 4", "c! 4");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertTrue(set0.contains("c! 4"));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("KL?I\"7:)Y@&", "cv^?tt~qQT<lv*C<_5", (-3644));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string0 = abstractPatriciaTrie_TrieEntry1.key;
      assertNotNull(string0);
      assertEquals("KL?I\"7:)Y@&", string0);
      
      boolean boolean0 = patriciaTrie0.containsKey("KL?I\"7:)Y@&");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(896);
      assertNotNull(integer0);
      assertEquals(896, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "c! 4", (-1227));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, String>("H_;+uZcmz-\"", (String) null, (-2));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, String>(set0, "", (-1227));
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(set0.contains("cv^?tt~qQT<lv*C<_5"));
      assertTrue(set0.contains("c! 4"));
      
      String string1 = abstractPatriciaTrie_TrieEntry4.toString();
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(string1);
      assertEquals("Entry(key=[c! 4] [-1227], value=, parent=null, left=[c! 4] [-1227], right=null, predecessor=[c! 4] [-1227])", string1);
      assertFalse(set0.contains(string1));
      assertTrue(set0.contains("c! 4"));
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("<.~)T'y2arzvr<=", abstractPatriciaTrie_TrieEntry0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}TJl&W.)EM|t", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}TJl&W.)EM|t", string0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}TJl&W.)EM|t");
      assertFalse(boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      Object object2 = abstractPatriciaTrie_TrieEntry5.getKey();
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(object2.equals((Object)string0));
      assertNotNull(object2);
      assertEquals("", object2);
      
      Object object3 = patriciaTrie0.merge("v;{yD14uLh@nEKa$N^b", "", biFunction0);
      assertFalse(object3.equals((Object)string0));
      assertTrue(object3.equals((Object)object2));
      assertNotNull(object3);
      assertEquals("", object3);
      
      Integer integer1 = new Integer(2396);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2396, (int)integer1);
      
      Integer integer2 = new Integer(9);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(9, (int)integer2);
      
      Object object4 = patriciaTrie0.put("<.~)T'y2arzvr<=", integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNull(object4);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = patriciaTrie3.lowerEntry("");
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(abstractPatriciaTrie_TrieEntry6);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(boolean1);
      
      String string1 = patriciaTrie1.nextKey("\"oHYBo");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("YG!", "YG!");
      assertNull(object0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      String string0 = "[{]R\"tx%ZM~JB|z&";
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)patriciaTrie0.entrySet();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      Object object1 = patriciaTrie0.replace("[{]R\"tx%ZM~JB|z&", (Object) "[{]R\"tx%ZM~JB|z&");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("[{]R\"tx%ZM~JB|z&", patriciaTrie0, 16);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object2 = patriciaTrie0.put("apTMSH)_gC9,#5x", (Object) null);
      assertNull(object2);
      
      Object object3 = patriciaTrie0.getOrDefault("[{]R\"tx%ZM~JB|z&", "[{]R\"tx%ZM~JB|z&");
      assertTrue(object3.equals((Object)string0));
      assertNotNull(object3);
      assertEquals("[{]R\"tx%ZM~JB|z&", object3);
      
      Object object4 = patriciaTrie0.put("[{]R\"tx%ZM~JB|z&", ")gaeI'M8< ");
      assertNull(object4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, 16);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.ceilingEntry("XN'");
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      Object object5 = patriciaTrie0.put(")gaeI'M8< ", ")gaeI'M8< ");
      assertNull(object5);
      
      String string1 = patriciaTrie0.lastKey();
      assertFalse(string1.equals((Object)object3));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(")gaeI'M8< ", string1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.higherEntry("cVLDhp00Ta");
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      Object object6 = patriciaTrie0.put(")gaeI'M8< ", ",yg#qe0a");
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)string0));
      assertNotNull(object6);
      assertEquals(")gaeI'M8< ", object6);
      
      int int1 = patriciaTrie0.bitsPerElement();
      assertTrue(int1 == int0);
      assertEquals(16, int1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.previousKey(string0);
      String string2 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet";
      String string3 = "";
      patriciaTrie2.put(string2, string3);
      Object object7 = null;
      patriciaTrie2.remove(object7);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put(">CfiG.<", "KkS:k");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("KkS:k", "KkS:k");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("RnRyQ\u0011<bJ", (String) null);
      assertNull(string2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string3 = patriciaTrie1.firstKey();
      assertNotNull(string3);
      assertEquals(">CfiG.<", string3);
      
      Integer integer0 = new Integer(70);
      assertNotNull(integer0);
      assertEquals(70, (int)integer0);
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((String) null, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Object>>("RnRyQ\u0011<bJ", abstractMap_SimpleEntry0, 70);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie2);
      
      patriciaTrie2.incrementSize();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie3);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie3.prefixMap("ihA8iSIXpu-A:FX");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.floorEntry((String) null);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("-'[)%W}^", "The offsets and lengths must be at Character boundaries", (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry1, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      String string0 = "key=";
      String string1 = "";
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      int int0 = 723;
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.getNearestEntryForKey("key=", 723);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparable<Object> comparable0 = patriciaTrie0.put("key=", (Comparable<Object>) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(comparable0);
      
      Comparable<Object> comparable1 = patriciaTrie1.put("key=", (Comparable<Object>) null);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(comparable1);
      
      int int1 = 112;
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.getNearestEntryForKey("RootEntry(", 112);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      String string2 = "]={\n";
      Comparable<Object> comparable2 = patriciaTrie1.put("]={\n", (Comparable<Object>) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(comparable2);
      
      int int2 = 1;
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.get(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("|Pppt#C9l)#|,pT' 0-");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie0.incrementSize();
      int int0 = patriciaTrie0.bitIndex("", "yYrQ`N(#+!~");
      assertEquals(9, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("]6,{*E/O#", 0, 0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("  ");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      Integer integer0 = new Integer(62);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(62, (int)integer0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("Es)P=Yp%cW%]tAD8q", integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleEntry1);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>(comparable0, abstractMap_SimpleImmutableEntry0, 1915);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      String string1 = abstractPatriciaTrie_TrieEntry3.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(string1);
      assertEquals("Entry(key=null [1915], value=Es)P=Yp%cW%]tAD8q=62, parent=null, left=null [1915], right=null, predecessor=null [1915])", string1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("  ", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry((String) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("iu@k=}*~vPMFM\"~faV>");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "iu@k=}*~vPMFM\"~faV>", 3888);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("iu@k=}*~vPMFM\"~faV>");
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(boolean0);
      
      patriciaTrie0.clear();
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      String string0 = abstractPatriciaTrie_TrieEntry1.setKeyValue(integer0, "");
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(string0);
      assertEquals("iu@k=}*~vPMFM\"~faV>", string0);
      
      String string1 = abstractPatriciaTrie_TrieEntry1.setValue((String) null);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Integer integer1 = new Integer((-446));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-446), (int)integer1);
      
      Object object0 = patriciaTrie0.put("ROOT", integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNull(object0);
      
      abstractPatriciaTrie_TrieEntry1.bitIndex = 3888;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Comparator<Map.Entry<String, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Integer integer2 = (Integer)abstractPatriciaTrie_TrieEntry1.key;
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      Object object1 = patriciaTrie0.put("iu@k=}*~vPMFM\"~faV>", integer2);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(integer2.equals((Object)integer1));
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("iu@k=}*~vPMFM\"~faV>");
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.tailMap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must have a from or to!
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = null;
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = patriciaTrie1.selectKey((String) null);
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      Set<String> set0 = patriciaTrie2.keySet();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Integer integer0 = new Integer(4649);
      assertNotNull(integer0);
      assertEquals(4649, (int)integer0);
      
      Integer integer1 = hashMap1.put((String) null, integer0);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(integer1);
      
      int int0 = (-4478);
      PatriciaTrie<Integer> patriciaTrie3 = null;
//      try {
        patriciaTrie3 = new PatriciaTrie<Integer>(hashMap1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie2);
      
      String string0 = "";
      boolean boolean0 = patriciaTrie2.compareKeys("", "");
      assertTrue(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie2.decrementSize();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie3 = null;
//      try {
        patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>(patriciaTrie2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("<.~)T'y2arzvr<=", abstractPatriciaTrie_TrieEntry0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}^MTJl&W.)E)M|t", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}^MTJl&W.)E)M|t", string0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}^MTJl&W.)E)M|t");
      assertFalse(boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object2 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) null);
      assertNull(object2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", (Object) null, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      boolean boolean1 = AbstractBitwiseTrie.compare(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(boolean1 == boolean0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertFalse(boolean1);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie4);
      
      String string1 = patriciaTrie4.nextKey("<.~)T'y2arzvr<=");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie4, patriciaTrie0);
      assertNotSame(patriciaTrie4, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie4);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("<.~)T'y2arzvr<=", abstractPatriciaTrie_TrieEntry0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}^MTJl&W.)E)M|t", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}^MTJl&W.)E)M|t", string0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}^MTJl&W.)E)M|t");
      assertFalse(boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, "<.~)T'y2arzvr<=", 0);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = abstractPatriciaTrie_TrieEntry5.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry7 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v_}^MTJl&W.)E)M|t", "<.~)T'y2arzvr<=", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry6));
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry8 = patriciaTrie1.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry8);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.subMap("", "dB\"AU!}SvHYL?s:");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Integer integer0 = new Integer((-2005));
      assertNotNull(integer0);
      assertEquals((-2005), (int)integer0);
      
      Integer integer1 = hashMap0.put("6X}(.", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.forEach(biConsumer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = patriciaTrie1.merge("keyAnalyzer", integer0, biFunction0);
      assertNotNull(object0);
      assertEquals((-2005), object0);
      
      Integer integer2 = patriciaTrie0.selectValue("");
      assertNull(integer2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("6X}(.", (Integer) null, (-2005));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      String string0 = patriciaTrie2.put("Z5~ln<'{kUjz)1@WzU", "");
      assertNull(string0);
      
      String string1 = patriciaTrie2.selectValue("6X}(.");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("];!e#ez oRwBtRW5i", "*ZZwT+YT ", (-949));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "];!e#ez oRwBtRW5i", 0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("*ZZwT+YT ", " is not an external Entry!");
      assertNull(string0);
      
      String string1 = patriciaTrie1.selectValue((String) null);
      assertNotNull(string1);
      assertEquals(" is not an external Entry!", string1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.lengthInBits("");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = hashMap0.put("?bk &W", object0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("?bk &W", "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("J11)sLIAcJaI", "J11)sLIAcJaI", (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(1444);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1444, (int)integer0);
      
      Integer integer1 = patriciaTrie1.put("J11)sLIAcJaI", integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.lastEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.subMap("J11)sLIAcJaI", "J11)sLIAcJaI");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.incrementSize();
      String string0 = "";
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      int int0 = 492;
      Integer integer0 = new Integer(492);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(492, (int)integer0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.containsKey(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = patriciaTrie0.put("<.~)T'y2arzvr<=", abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("<.~)T'y2arzvr<=", abstractPatriciaTrie_TrieEntry0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = patriciaTrie0.put("v_}^MTJl&W.)E)M|t", object1);
      assertNull(object2);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}^MTJl&W.)E)M|t", string0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}^MTJl&W.)E)M|t");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(280);
      assertNotNull(integer0);
      assertEquals(280, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Object object3 = patriciaTrie0.remove((Object) null);
      assertNull(object3);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-2005));
      assertNotNull(integer0);
      assertEquals((-2005), (int)integer0);
      
      Integer integer1 = hashMap0.put("6X}(.", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = patriciaTrie1.merge("keyAnalyzer", integer0, biFunction0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(object0);
      assertEquals((-2005), object0);
      
      Integer integer2 = new Integer(2251);
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2251, (int)integer2);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = patriciaTrie1.put("6X}(.", object1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object2);
      
      patriciaTrie1.modCount = 478;
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "6X}(.", 1256);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = AbstractBitwiseTrie.compare(biFunction0, "keyAnalyzer");
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.nextKey((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("?bk &W", "org.apache.commohs.collections4.trie.PatriciaTrie");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(string0);
      
      String string1 = patriciaTrie1.put("org.apache.commons.collection4.trie.Patriciarie", "org.apache.commohs.collections4.trie.PatriciaTrie");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(string1);
      
      int int0 = patriciaTrie1.bitIndex((String) null, "?bk &W");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(10, int0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "org.apache.commons.collection4.trie.Patriciarie", 10);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie1, "?bk &W", 32777);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string2 = abstractPatriciaTrie_TrieEntry1.toString();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("|Pppt#C9l)#|,pT' 0-");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie0.incrementSize();
      int int0 = patriciaTrie0.bitIndex("ihA8iSIXpu-A:FX", "|Pppt#C9l)#|,pT' 0-");
      assertEquals(11, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("]6,{*E/O#", 0, 0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("ihA8iSIXpu-A:FX");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(32768);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie1);
      
      String string0 = "org.apache.commons.collections4.trie.PatriciaTrie";
      String string1 = "org.apache.commohs.collections4.trie.PatriciaTrie";
      String string2 = patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commohs.collections4.trie.PatriciaTrie");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(string2);
      
      int int0 = patriciaTrie1.bitIndex((String) null, "?bk &W");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(10, int0);
      
      String string3 = "DYw";
      // Undeclared exception!
//      try { 
        patriciaTrie1.subtree("DYw", 968, 10);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "|Pppt#C9l)#|,pT' 0-";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("|Pppt#C9l)#|,pT' 0-");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie0.incrementSize();
      int int0 = patriciaTrie0.bitIndex("|Pppt#C9l)#|,pT' 0-", "|Pppt#C9l)#|,pT' 0-");
      assertEquals((-2), int0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("c! 4", "c! 4");
      assertNull(object0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertTrue(set0.contains("c! 4"));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("KL?I\"7:)Y@&", "cv^?tt~qQT<lv*C<_5", (-3644));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.key;
      assertNotNull(string0);
      assertEquals("KL?I\"7:)Y@&", string0);
      
      boolean boolean0 = patriciaTrie0.containsKey("KL?I\"7:)Y@&");
      assertFalse(boolean0);
      
      Object object1 = patriciaTrie0.put("PFe%qN*y*7q>0T &", "PFe%qN*y*7q>0T &");
      assertNull(object1);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains("c! 4"));
      assertFalse(collection0.contains((-3644)));
      
      Object object2 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      assertNull(object2);
      
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Object>>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      Integer integer0 = new Integer((-3644));
      assertNotNull(integer0);
      assertEquals((-3644), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>((Object) null, integer0, 1444);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie2);
      
      String string1 = patriciaTrie0.firstKey();
      assertFalse(string1.equals((Object)string0));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotNull(string1);
      assertEquals("PFe%qN*y*7q>0T &", string1);
      
      boolean boolean2 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = patriciaTrie1.selectValue("6/");
      assertNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      String string0 = patriciaTrie2.put(" is not an external Entry!", "6/");
      assertNull(string0);
      
      String string1 = patriciaTrie2.selectValue("}\n");
      assertNotNull(string1);
      assertEquals("6/", string1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "c! 4";
      Object object0 = patriciaTrie0.put("c! 4", "c! 4");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertTrue(set0.contains("c! 4"));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("KL?I\"7:)Y@&", "cv^?tt~qQT<lv*C<_5", (-3644));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string1 = abstractPatriciaTrie_TrieEntry1.key;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("KL?I\"7:)Y@&", string1);
      
      boolean boolean0 = patriciaTrie0.containsKey("KL?I\"7:)Y@&");
      assertFalse(boolean0);
      
      Object object1 = patriciaTrie0.put("PFe%qN*y*7q>0T &", "PFe%qN*y*7q>0T &");
      assertNull(object1);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains("cv^?tt~qQT<lv*C<_5"));
      assertTrue(collection0.contains("c! 4"));
      
      Object object2 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      assertNull(object2);
      
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(patriciaTrie1);
      
      String string2 = patriciaTrie1.selectKey((String) null);
      assertNull(string2);
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertFalse(set1.isEmpty());
      assertEquals(3, set1.size());
      assertSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.contains("cv^?tt~qQT<lv*C<_5"));
      assertTrue(set1.contains("c! 4"));
      
      boolean boolean1 = patriciaTrie1.compareKeys("WM)5Q_2%gGMG6.", (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.higherEntry("Ir&qX;EG1'[W");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      patriciaTrie1.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie1.mapIterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("];!e#ez oRwBtRW5i", "*ZZwT+YT ", (-949));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("\n", "];!e#ez oRwBtRW5i");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      String string1 = "parent=";
      int int0 = patriciaTrie0.bitIndex("parent=", "yYrQ`N(#+!~");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(12, int0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("", (-4), (-2582));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("X", integer0, (-2029));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(string0);
      assertEquals("Entry(key=X [-2029], value=1, parent=null, left=X [-2029], right=null, predecessor=X [-2029])", string0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.getEntry("Entry(key=X [-2029], value=1, parent=null, left=X [-2029], right=null, predecessor=X [-2029])");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("X", abstractPatriciaTrie_TrieEntry0, 1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = patriciaTrie4.lastEntry();
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie1);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie3.subMap("Entry(key=X [-2029], value=1, parent=null, left=X [-2029], right=null, predecessor=X [-2029])", "Entry(key=X [-2029], value=1, parent=null, left=X [-2029], right=null, predecessor=X [-2029])");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "|Pppt#C9l)#|,pT' 0-";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("|Pppt#C9l)#|,pT' 0-");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie0.incrementSize();
      int int0 = patriciaTrie0.bitIndex("|Pppt#C9l)#|,pT' 0-", "|Pppt#C9l)#|,pT' 0-");
      assertEquals((-2), int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("", 0, (-899));
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap((String) null);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(1620);
      assertNotNull(integer0);
      assertEquals(1620, (int)integer0);
      
      Integer integer1 = patriciaTrie1.put("", integer0);
      assertNull(integer1);
      
      int int0 = 2496;
      Integer integer2 = new Integer(2496);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2496, (int)integer2);
      
      Integer integer3 = new Integer((-1678));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals((-1678), (int)integer3);
      
      Integer integer4 = patriciaTrie1.put("D:]VLyxyjKUPm55]UEG", integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertNull(integer4);
      
      Integer integer5 = patriciaTrie1.put("D:]VLyxyjKUPm55]UEG", integer2);
      assertFalse(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals((-1678), (int)integer5);
      
      Integer integer6 = new Integer((-286));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertNotNull(integer6);
      assertEquals((-286), (int)integer6);
      
      Integer integer7 = patriciaTrie1.put("D:]VLyxyjKUPm55]UEG", integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      assertEquals(2496, (int)integer7);
      
      Integer integer8 = new Integer((-286));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)int0));
      assertNotNull(integer8);
      assertEquals((-286), (int)integer8);
      
      String string0 = patriciaTrie1.nextKey("");
      assertNotNull(string0);
      assertEquals("D:]VLyxyjKUPm55]UEG", string0);
      
      Integer integer9 = patriciaTrie1.put("", integer8);
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer3));
      assertNotNull(integer9);
      assertEquals(1620, (int)integer9);
      
      Integer integer10 = new Integer((-1));
      assertFalse(integer10.equals((Object)integer5));
      assertFalse(integer10.equals((Object)integer0));
      assertFalse(integer10.equals((Object)integer6));
      assertFalse(integer10.equals((Object)integer2));
      assertFalse(integer10.equals((Object)int0));
      assertFalse(integer10.equals((Object)integer8));
      assertFalse(integer10.equals((Object)integer3));
      assertFalse(integer10.equals((Object)integer9));
      assertFalse(integer10.equals((Object)integer7));
      assertNotNull(integer10);
      assertEquals((-1), (int)integer10);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.put((String) null, integer10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("<.~)T'y2arzvr<=", abstractPatriciaTrie_TrieEntry0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}^MTJl&W.)E)M|t", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}^MTJl&W.)E)M|t", string0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}^MTJl&W.)E)M|t");
      assertFalse(boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1").when(biFunction0).apply(any() , any());
      Object object2 = patriciaTrie0.merge("v_}^MTJl&W.)E)M|t", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", biFunction0);
      assertFalse(object2.equals((Object)string0));
      assertNotNull(object2);
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", object2);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object3 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", integer0);
      assertNull(object3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = patriciaTrie3.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry4.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertFalse(boolean1);
      
      String string1 = patriciaTrie0.nextKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object2));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotNull(string1);
      assertEquals("v_}^MTJl&W.)E)M|t", string1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciarie$Values$ValueIterator", patriciaTrie0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains("org.apache.commons.collections4.trie.AbstractPatriciarie$Values$ValueIterator"));
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Object object1 = patriciaTrie0.put("<.~)T'y2arzvr<=", integer0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.firstEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = new Integer((-8));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-8), (int)integer1);
      
      Integer integer2 = patriciaTrie1.put("$-_UHAM4|RC<.9>c@", integer1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(integer1.equals((Object)integer0));
      assertNull(integer2);
      
      Integer integer3 = new Integer((-8));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-8), (int)integer3);
      
      Integer integer4 = patriciaTrie1.put("<.~)T'y2arzvr<=", integer3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNull(integer4);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.lowerEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}^MTJl&W.)E)M|t", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object2 = patriciaTrie0.merge("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer0, biFunction0);
      assertNotNull(object2);
      assertEquals(16, object2);
      
      String string1 = patriciaTrie0.lastKey();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("v_}^MTJl&W.)E)M|t", string1);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}^MTJl&W.)E)M|t");
      assertFalse(boolean0);
      
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1").when(biFunction1).apply(any() , any());
      Object object3 = patriciaTrie0.merge("v_}^MTJl&W.)E)M|t", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", biFunction1);
      assertFalse(object3.equals((Object)string0));
      assertFalse(object3.equals((Object)string1));
      assertNotNull(object3);
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", object3);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)object2));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = null;
//      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>((Map.Entry<? extends String, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("<.~)T'y2arzvr<=", abstractPatriciaTrie_TrieEntry0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}^MTJl&W.)E)M|t", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}^MTJl&W.)E)M|t", string0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}^MTJl&W.)E)M|t");
      assertFalse(boolean0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1").when(biFunction0).apply(any() , any());
      Object object2 = patriciaTrie0.merge("v_}^MTJl&W.)E)M|t", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", biFunction0);
      assertFalse(object2.equals((Object)string0));
      assertNotNull(object2);
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", object2);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object3 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", integer0);
      assertNull(object3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie3.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertFalse(boolean1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, String>("v_}^MTJl&W.)E)M|t", "v_}^MTJl&W.)E)M|t", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = abstractPatriciaTrie_TrieEntry5.parent;
      assertNull(abstractPatriciaTrie_TrieEntry6);
      
      boolean boolean2 = abstractPatriciaTrie_TrieEntry0.right.isExternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertSame(abstractPatriciaTrie_TrieEntry0.right, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry0.right, abstractPatriciaTrie_TrieEntry2);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("KkS:k", "KkS:k");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("RnR]yQ\u0011<bJ)w", "parent=");
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string2 = patriciaTrie1.firstKey();
      assertNotNull(string2);
      assertEquals("KkS:k", string2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("H&RAH", patriciaTrie0, 2391);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.replaceAll(biFunction0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("", object0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "H", (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntry(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie2.subMap((String) null, "]={\n");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("|Pppt#C9l)#|,pT' 0-");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie0.incrementSize();
      int int0 = patriciaTrie0.bitIndex("", "yYrQ`N(#+!~");
      assertEquals(9, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("]6,{*E/O#", 0, 0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("  ");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = patriciaTrie1.selectValue("6/");
      assertNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      String string0 = patriciaTrie2.put(" is not an external Entry!", "6/");
      assertNull(string0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = hashMap0.replace("keyAnalyzer", (String) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.merge("Key cannot be null", "keyAnalyzer", biFunction0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(string1);
      assertEquals("keyAnalyzer", string1);
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyString() , any());
      String string2 = hashMap0.compute("", biFunction1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      String string3 = hashMap0.put("", "");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string3);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("|Pppt#C9l)#|,pT' 0-");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie0.incrementSize();
      int int0 = patriciaTrie0.bitIndex("", "yYrQ`N(#+!~");
      assertEquals(9, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("]6,{*E/O#", 0, 9);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("  ");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.subMap("c+aHH#{'9$mGj9", ",Zf#!'ZJL*EUf^9?CX");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fromKey > toKey
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.lengthInBits("");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = hashMap0.put("?bk &W", object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("?bk &W", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("J11)sLIAcJaI", "J11)sLIAcJaI", (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.subMap("J11)sLIAcJaI", "J11)sLIAcJaI");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer0, integer0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer1 = new Integer(32768);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(32768, (int)integer1);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Object>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Integer integer2 = abstractPatriciaTrie_TrieEntry0.setKeyValue(integer0, integer1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Object>>> comparator1 = Map.Entry.comparingByKey();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(boolean0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("X", integer0, (-2029));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(string0);
      assertEquals("Entry(key=X [-2029], value=1, parent=null, left=X [-2029], right=null, predecessor=X [-2029])", string0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.lowerEntry((String) null);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-3239));
      assertNotNull(integer0);
      assertEquals((-3239), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>(":[4/@} aO|s@g1$Ka~", integer0, (-2029));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Object object0 = hashMap0.put("G=G1Z#E}FLa3'W\u0007~e", "G=G1Z#E}FLa3'W\u0007~e");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      boolean boolean0 = patriciaTrie0.compareKeys("", "`W");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(4059);
      assertNotNull(integer0);
      assertEquals(4059, (int)integer0);
      
      boolean boolean1 = patriciaTrie0.remove((Object) "G=G1Z#E}FLa3'W\u0007~e", (Object) "G=G1Z#E}FLa3'W\u0007~e");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer integer1 = new Integer(4059);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4059, (int)integer1);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, Integer>(integer0, integer1, 4059);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object1 = abstractPatriciaTrie_TrieEntry0.getValue();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object1.equals((Object)integer0));
      assertNotNull(object1);
      assertEquals(4059, object1);
      
      Object object2 = hashMap0.put("6T a.)V&},$]73Qq9", object1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(integer0.equals((Object)object1));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object1.equals((Object)integer0));
      assertNull(object2);
      
      String string0 = patriciaTrie0.previousKey("s_,{ua");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Integer integer2 = new Integer(3798);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3798, (int)integer2);
      
      Integer integer3 = hashMap1.putIfAbsent("", integer2);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer0));
      assertNull(integer3);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap1);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.ceilingEntry("Cannot determine prefix outside of Character boundaries");
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("keyAnalyzer", "", 4644);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      abstractPatriciaTrie_TrieEntry0.key = "keyAnalyzer";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.put("", "Yt 1#wz&RM*,");
      assertNull(object0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie3);
      
      Integer integer1 = new Integer(1844);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1844, (int)integer1);
      
      Integer integer2 = patriciaTrie0.put("", integer0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(integer0.equals((Object)integer1));
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNull(integer2);
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("q)0JWq9|WN@2.Bt93", integer0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie2.nextKey("");
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("<.~)T'y2arzvr<=", abstractPatriciaTrie_TrieEntry0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("v_}^MTJl&W.)E)M|t", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("v_}^MTJl&W.)E)M|t", string0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}^MTJl&W.)E)M|t");
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.subtree("", 2, 896);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      String string1 = patriciaTrie1.put("v_}^MTJl&W.)E)M|t", "v_}^MTJl&W.)E)M|t");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string1);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie1.prefixMap("DYw");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, String>("PYe<%vqVY>@+c7", "rF-Tl|=X_jN", 583);
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-2005));
      assertNotNull(integer0);
      assertEquals((-2005), (int)integer0);
      
      Integer integer1 = hashMap0.put("6X}(.", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.lowerEntry("must have a from or to!");
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("6X}(.", patriciaTrie2, 32);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie4);
      
      PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>(patriciaTrie4);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      assertNotNull(patriciaTrie5);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("$UM<`<dh", "6X}(.", (-4478));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.parent;
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<String> patriciaTrie6 = new PatriciaTrie<String>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie4));
      assertNotNull(patriciaTrie6);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie6.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie4));
      assertNotSame(patriciaTrie6, patriciaTrie4);
      assertNotSame(patriciaTrie6, patriciaTrie5);
      assertNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "5z}cvm}%`=_Hu|R)3", (-1520));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.get((Object) null);
      assertNull(object0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.entrySet();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", patriciaTrie0, 1738);
      String string0 = abstractPatriciaTrie_TrieEntry0.key;
      patriciaTrie0.put("", "");
      Integer integer0 = new Integer(1738);
      patriciaTrie0.firstKey();
      patriciaTrie0.replace("", (Object) integer0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree((String) null, (-1872), (-3671));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PatriciaTrie<Comparable<Integer>> patriciaTrie0 = new PatriciaTrie<Comparable<Integer>>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.toString();
      patriciaTrie1.put("&v", "&v");
      String string0 = "wFYsN`p/40[@9+";
      patriciaTrie1.remove((Object) "wFYsN`p/40[@9+");
      patriciaTrie1.values();
      // Undeclared exception!
//      try { 
        patriciaTrie1.subtree("&v", 657, 657);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("<.~)T'y2arzvr<=", abstractPatriciaTrie_TrieEntry0, 0);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      Object object0 = new Object();
      patriciaTrie0.put("v_}^MTJl&W.)E)M|t", object0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.lastKey();
      patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (Object) "v_}^MTJl&W.)E)M|t");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      patriciaTrie0.merge("v_}^MTJl&W.)E)M|t", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", biFunction0);
      Integer integer0 = new Integer(0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", integer0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie3.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      abstractPatriciaTrie_TrieEntry3.isEmpty();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("v_}^MTJl&W.)E)M|t", "v_}^MTJl&W.)E)M|t", 0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.parent;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = patriciaTrie4.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNull(abstractPatriciaTrie_TrieEntry6);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(204);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer2 = new Integer(0);
      hashMap0.put("];!e#ez oRwBtRW5i", integer2);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer3 = new Integer((-3260));
      patriciaTrie0.put("j6F;=m^rpbwW", integer3);
      patriciaTrie0.put("];!e#ez oRwBtRW5i", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("@F");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Object object0 = new Object();
      patriciaTrie0.put("`27*hQ,kEs>p7d!#{J", object0);
      patriciaTrie0.keySet();
      patriciaTrie0.put(":x7z^K]:oCiX D6|;", "`27*hQ,kEs>p7d!#{J");
      patriciaTrie0.lowerEntry((String) null);
      patriciaTrie0.put("`27*hQ,kEs>p7d!#{J", "`27*hQ,kEs>p7d!#{J");
      patriciaTrie0.headMap("");
      patriciaTrie0.put("", "");
      patriciaTrie0.getOrDefault("+>}N,A*y%\"E ./", "+>}N,A*y%\"E ./");
      patriciaTrie0.clear();
      patriciaTrie0.clear();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(":x7z^K]:oCiX D6|;", (String) null, (-3260));
      Integer integer0 = new Integer(1724);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "=", 1724);
      abstractPatriciaTrie_TrieEntry1.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>(":x7z^K]:oCiX D6|;", (Object) null, 1724);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      patriciaTrie0.values();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 4023);
      abstractPatriciaTrie_TrieEntry0.parent = null;
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.getKey();
      patriciaTrie1.getEntry("");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("value=", (Object) null, (-1256));
      abstractPatriciaTrie_TrieEntry1.predecessor = null;
      // Undeclared exception!
//      try { 
        patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must have come from somewhere!
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", patriciaTrie0, 2);
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("<.~)T'y2arzvr<=", abstractPatriciaTrie_TrieEntry0, 0);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      PatriciaTrie<String> patriciaTrie1 = null;
//      try {
        patriciaTrie1 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer0, (-1));
      Map.Entry.comparingByValue();
      Integer integer1 = new Integer(1922);
      Integer integer2 = new Integer((-2899));
      abstractPatriciaTrie_TrieEntry0.setKeyValue(integer1, integer2);
      Integer integer3 = new Integer((-1));
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry0.value = integer3;
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("N?[,|anl ", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "N?[,|anl ", (-1));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "N?[,|anl ", (-1));
      abstractPatriciaTrie_TrieEntry2.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry1.bitIndex = 0;
      abstractPatriciaTrie_TrieEntry2.toString();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.predecessor;
      patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry3);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      patriciaTrie1.mapIterator();
      // Undeclared exception!
//      try { 
        patriciaTrie1.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Integer integer0 = new Integer((-895));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "/9s1`^6cgK}]", (-895));
      Integer integer1 = new Integer((-895));
      abstractPatriciaTrie_TrieEntry0.key = integer1;
      Integer integer2 = new Integer((-1874));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "/9s1`^6cgK}]", 1);
      abstractPatriciaTrie_TrieEntry1.setValue("/9s1`^6cgK}]");
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer2, "", (-1874));
      Integer integer3 = new Integer((-1874));
      abstractPatriciaTrie_TrieEntry2.setKeyValue(integer3, "]={\n");
      Integer integer4 = new Integer((-1874));
      Integer integer5 = new Integer((-895));
      abstractPatriciaTrie_TrieEntry2.key = integer5;
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry2.key = integer4;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Integer, Integer>>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Integer, Integer>>) comparator1);
      abstractPatriciaTrie_TrieEntry2.value = "";
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0.right;
      abstractPatriciaTrie_TrieEntry1.setValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
      abstractPatriciaTrie_TrieEntry2.toString();
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry0.isEmpty();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", abstractPatriciaTrie_TrieEntry2.key, (-895));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.floorEntry("|Pppt#C9l)#|,pT' 0-");
      patriciaTrie0.incrementSize();
      patriciaTrie0.bitIndex("", "yYrQ`N(#+!~");
      patriciaTrie0.subtree("]6,{*E/O#", 0, 0);
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("  ");
      // Undeclared exception!
//      try { 
        patriciaTrie0.getEntry(sortedMap0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.getNearestEntryForKey(" + ", 0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>(" + ", "", 61);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-541));
      Integer integer1 = new Integer((-24));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer1, "@\".", (-24));
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.get(patriciaTrie1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(2279);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key= [1], value=2279, parent=null, left= [1], right=null, )", string0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      abstractPatriciaTrie_TrieEntry0.setValue(integer0);
      patriciaTrie0.lowerEntry("");
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Integer integer0 = new Integer(1443);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 1443);
      abstractPatriciaTrie_TrieEntry0.value = integer0;
      abstractPatriciaTrie_TrieEntry0.setKeyValue((String) null, integer0);
      Map.Entry.comparingByKey();
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.firstEntry();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Integer integer1 = new Integer(1443);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer1, 1443);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, integer1, 1443);
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(32768);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commohs.collections4.trie.PatriciaTrie");
      patriciaTrie0.subtree("org.apache.commons.collections4.trie.PatriciaTrie", 197, 197);
      String string0 = patriciaTrie0.put("org.apache.commohs.collections4.trie.PatriciaTrie", "#");
      assertNull(string0);
      
      patriciaTrie0.bitIndex((String) null, "?bk &W");
      String string1 = patriciaTrie0.selectValue((String) null);
      assertEquals("#", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>(32768);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commohs.collections4.trie.PatriciaTrie");
      patriciaTrie1.bitIndex((String) null, "?bk &W");
      patriciaTrie1.subtree((String) null, 968, 10);
      patriciaTrie1.put("org.apache.commohs.collections4.trie.PatriciaTrie", (String) null);
      patriciaTrie1.prefixMap("org.apache.commons.collections4.trie.PatriciaTrie");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commohs.collections4.trie.PatriciaTrie", "org.apache.commohs.collections4.trie.PatriciaTrie", 10);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Object object0 = new Object();
      patriciaTrie0.put("`27*hQ,kEs>p7d!#{J", object0);
      patriciaTrie0.keySet();
      patriciaTrie0.put(":x7z^K]:oCiX D6|;", "`27*hQ,kEs>p7d!#{J");
      patriciaTrie0.lowerEntry((String) null);
      patriciaTrie0.put("`27*hQ,kEs>p7d!#{J", "`27*hQ,kEs>p7d!#{J");
      patriciaTrie0.headMap("");
      patriciaTrie0.put("", "");
      patriciaTrie0.getOrDefault("+>}N,A*y%\"E ./", "+>}N,A*y%\"E ./");
      patriciaTrie0.clear();
      patriciaTrie0.clear();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.mapIterator();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("z~", "2WwQc Ts&{Zp@", 1);
      abstractPatriciaTrie_TrieEntry0.setValue("=");
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      Integer integer0 = new Integer((-1199));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("z~", integer0, (-1199));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
      // Undeclared exception!
//      try { 
        patriciaTrie3.addEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (-1199));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.ceilingEntry("");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(1275);
      patriciaTrie0.put("H", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("H", "H", 0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer((-2005));
      hashMap0.put("6X}(.", integer0);
      patriciaTrie0.subtree("6X}(.", (-4478), (-4478));
      patriciaTrie0.decrementSize();
      String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      patriciaTrie0.put("f:s<s+#`A", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap("f:s<s+#`A");
      assertFalse(sortedMap0.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      patriciaTrie4.headMap("f:s<s+#`A");
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.incrementSize();
      patriciaTrie0.put("]6,{*E/O#", "");
      String string0 = "";
      patriciaTrie0.bitIndex("", "yYrQ`N(#+!~");
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("]6,{*E/O#", 0, 9);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The offsets and lengths must be at Character boundaries
//         //
//         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.entrySet();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      hashMap0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.computeIfPresent("], ", biFunction1);
      hashMap0.replaceAll(biFunction0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie1.put("5I>", (Integer) null);
      patriciaTrie1.entrySet();
      patriciaTrie0.subtree("C%T6<@mL$5;Dc", 16, 0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.get(patriciaTrie1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "";
      String string1 = "?1`wMhscAJnl6";
      String string2 = "]={\n";
      String string3 = null;
      patriciaTrie0.put("", "VeoTt[R41");
      // Undeclared exception!
//      try { 
        patriciaTrie0.put((String) null, "q`..=N?0I\"Ts]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.put((String) null, integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      // Undeclared exception!
//      try { 
        patriciaTrie1.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.incrementSize();
      patriciaTrie0.put("<('mBFLp4MN40Dv\"", "t \"deRbM");
      patriciaTrie0.floorEntry("The offsets and lengths must be at Character boundaries");
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Integer integer0 = new Integer((-245));
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("zN`LCuW@Ls]t", integer0, (-245));
      Integer integer1 = new Integer(2418);
      abstractPatriciaTrie_TrieEntry0.value = integer1;
      Integer integer2 = new Integer((-245));
      Integer integer3 = abstractPatriciaTrie_TrieEntry0.setKeyValue(integer0, integer2);
      abstractPatriciaTrie_TrieEntry0.setKeyValue("zN`LCuW@Ls]t", integer0);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer3, (-574));
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer4 = new Integer((-245));
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer3, integer4, 2418);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      Integer integer5 = new Integer(602);
      abstractPatriciaTrie_TrieEntry0.setValue(integer5);
      Integer integer6 = abstractPatriciaTrie_TrieEntry2.value;
      patriciaTrie0.put("zN`LCuW@Ls]t", integer6);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, abstractPatriciaTrie_TrieEntry2, 1256);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1.predecessor);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.put("ief0\"o>3vAgBLRB1", (Integer) null);
      String string0 = patriciaTrie1.nextKey("#.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 0);
      abstractPatriciaTrie_TrieEntry0.setValue("");
      abstractPatriciaTrie_TrieEntry0.setValue("");
      abstractPatriciaTrie_TrieEntry0.setKeyValue("", "");
      abstractPatriciaTrie_TrieEntry0.setKeyValue("}\n", "~pGqjxJ2hNr;vc");
      abstractPatriciaTrie_TrieEntry0.key = "";
      Map.Entry.comparingByKey();
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("j=", "j=");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "j=", 0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.getNearestEntryForKey("j=", 0);
      patriciaTrie0.lastKey();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.getNearestEntryForKey("", 0);
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("j46kjNy6~|GzWjs", object0, 0);
      abstractPatriciaTrie_TrieEntry3.bitIndex = 0;
      Object object1 = abstractPatriciaTrie_TrieEntry3.value;
      patriciaTrie1.replace(",W{jg5#l.Hg[V'", object1);
      patriciaTrie1.keySet();
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry3);
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 0);
      abstractPatriciaTrie_TrieEntry4.isEmpty();
      patriciaTrie1.size();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.clear();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextKey((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.incrementSize();
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("]6,{*E/O#", "]6,{*E/O#", 0);
      Integer integer1 = new Integer(666);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer1, "%e[2GP", (-24));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, (String) null, (-3260));
      abstractPatriciaTrie_TrieEntry2.toString();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap", 0);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        patriciaTrie4.remove(object0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>(32777);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commohs.collections4.trie.PatriciaTrie");
      patriciaTrie1.bitIndex((String) null, "?bk &W");
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "org.apache.commons.collections4.trie.PatriciaTrie", 10);
      patriciaTrie1.prefixMap((String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("org.apache.commohs.collections4.trie.PatriciaTrie");
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("&t6=", "");
      hashMap0.put("S1Uc+aE~>N", "S1Uc+aE~>N");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.isBitSet("wLP=LB?k&~(-j<#N", (-1311), (-1311));
      patriciaTrie0.put("wLP=LB?k&~(-j<#N", (Object) null);
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("");
      assertEquals(3, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.lengthInBits("");
      Object object0 = new Object();
      hashMap0.put("?bk &W", object0);
      patriciaTrie0.put("?bk &W", "");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("J11)sLIAcJaI", "J11)sLIAcJaI", (-1));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.lastEntry();
      patriciaTrie1.remove((Object) null);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      String string0 = patriciaTrie2.selectValue("}\n");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("X", integer0, (-2029));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertEquals("Entry(key=X [-2029], value=1, parent=null, left=X [-2029], right=null, predecessor=X [-2029])", string0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie2.lowerEntry((String) null);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      patriciaTrie1.remove((Object) "fromKey > toKey");
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Integer integer0 = new Integer(3665);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, ".*aD", 3665);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "c! 4";
      patriciaTrie0.put("c! 4", "c! 4");
      patriciaTrie0.lowerEntry((String) null);
      patriciaTrie0.keySet();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("KL?I\"7:)Y@&", "cv^?tt~qQT<lv*C<_5", (-3644));
      String string1 = abstractPatriciaTrie_TrieEntry0.key;
      patriciaTrie0.containsKey("KL?I\"7:)Y@&");
      String string2 = "org.apache.commons.collections4.trie.PatriciaTrie";
      patriciaTrie0.put("PFe%qN*y*7q>0T &", "PFe%qN*y*7q>0T &");
      patriciaTrie0.values();
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      patriciaTrie0.comparator();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      patriciaTrie0.keySet();
      patriciaTrie1.compareKeys("WM)5Q_2%gGMG6.", (String) null);
      patriciaTrie1.higherEntry("Ir&qX;EG1'[W");
      patriciaTrie1.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie1.mapIterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = patriciaTrie0.nextKey("H&RAH");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-541));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer0, (-294));
      abstractPatriciaTrie_TrieEntry0.bitIndex = (-541);
      Integer integer1 = new Integer((-294));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer1, 124);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      patriciaTrie0.ceilingEntry("=");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie1.entrySet();
      patriciaTrie1.put("invalid lookup: ", "");
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, set0, (-541));
      boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
      assertEquals(1, set0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Integer integer0 = new Integer(1075);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 1075);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.isBitSet("nA$L,naFK>/y7*", 0, 39);
      Integer integer1 = new Integer((-2735));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("keyAnalyzer", integer1, 2);
      // Undeclared exception!
//      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "a1bb1&";
      Integer integer0 = new Integer((-1303));
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 0);
      Integer integer1 = new Integer((-1303));
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer1, (-1303));
      Integer integer2 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer2, integer0, (-447));
      Integer integer3 = abstractPatriciaTrie_TrieEntry2.key;
      patriciaTrie0.put("a1bb1&", integer3);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      Integer integer4 = null;
      // Undeclared exception!
//      try { 
        Map.Entry.comparingByValue((Comparator<? super Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("N_+AJUetPjl*", "N_+AJUetPjl*", 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 0);
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      // Undeclared exception!
//      try { 
        patriciaTrie1.remove((Object) abstractPatriciaTrie_TrieEntry2);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
