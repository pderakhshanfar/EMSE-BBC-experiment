/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:47:37 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("Y-_;=+5tLZR%hH", "Y-_;=+5tLZR%hH");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("org.apache.commons.collections4.tnie.AbstractPatriciaTriz$KeySet", "org.apache.commons.collections4.tnie.AbstractPatriciaTriz$KeySet");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      String string2 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertEquals("Y-_;=+5tLZR%hH", string2);
      assertNotNull(string2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      String string3 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(string3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("org.apache.commons.collections4.tnie.AbstractPatriciaTriz$KeySet", "org.apache.commons.collections4.trie.KeyAnalyzer");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.tnie.AbstractPatriciaTriz$KeySet");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      String string1 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertEquals("org.apache.commons.collections4.trie.KeyAnalyzer", string1);
      assertNotNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("A", "A");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("`cJ", "`cJ");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("].m%a{pXj(Y%V~VW", "].m%a{pXj(Y%V~VW");
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("A");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string3 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertEquals("A", string3);
      assertNotNull(string3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Map.Entry<String, Integer> map_Entry0 = patriciaTrie0.select("  ");
      assertNull(map_Entry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", (Integer) null, 833);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 192);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.lowerEntry("  ");
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      Integer integer0 = new Integer(833);
      assertEquals(833, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.replace("  ", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(833);
      assertEquals(833, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("  ", integer2);
      assertNull(integer3);
      assertTrue(integer2.equals((Object)integer0));
      
      boolean boolean0 = patriciaTrie0.isBitSet("Failed to put: ", 2211, 2211);
      assertFalse(boolean0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      patriciaTrie1.incrementSize();
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.firstEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("5z.}sMW*tFh\u0004ay");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.tailMap("5z.}sMW*tFh\u0004ay");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, String> sortedMap1 = patriciaTrie0.subMap("WT92", (String) null);
      assertNotNull(sortedMap1);
      assertNotSame(sortedMap1, sortedMap0);
      assertTrue(sortedMap1.equals((Object)sortedMap0));
      assertTrue(sortedMap1.isEmpty());
      assertEquals(0, sortedMap1.size());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, 1650);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry3, 2300);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.subtree("", 1650, (-2));
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.lastEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertTrue(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertTrue(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "The offsets and lengths must be at Character boundaries";
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      Comparable<Object> comparable1 = patriciaTrie0.put(" + ", comparable0);
      assertNull(comparable1);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("The offsets and lengths must be at Character boundaries", 944);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-4));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      BiFunction<String, Object, Comparable<Object>> biFunction0 = (BiFunction<String, Object, Comparable<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable2 = patriciaTrie0.computeIfPresent("!qtJ3iBT8}uH_3C7}Yp", biFunction0);
      assertNull(comparable2);
      
      Comparable<Object> comparable3 = patriciaTrie0.put("The offsets and lengths must be at Character boundaries", (Comparable<Object>) null);
      assertNull(comparable3);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>(patriciaTrie0);
      String string1 = patriciaTrie1.firstKey();
      patriciaTrie1.put(string1, comparable3);
      int int0 = patriciaTrie1.lengthInBits(string0);
      patriciaTrie1.remove((Object) string0);
      PatriciaTrie<Comparable<Object>> patriciaTrie2 = new PatriciaTrie<Comparable<Object>>(patriciaTrie1);
      patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = null;
      patriciaTrie3.addEntry(abstractPatriciaTrie_TrieEntry2, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("wghU&rr", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("", (String) null);
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("parent=");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string2 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(string2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", object0, (-2));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Integer integer0 = new Integer((-2));
      assertEquals((-2), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer0, (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertNotNull(string0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Comparable<Integer>> patriciaTrie0 = new PatriciaTrie<Comparable<Integer>>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("]={\n");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      String string0 = patriciaTrie0.put("]={\n", "~WN')AJgL<B\"9b:Zw5");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, sortedMap0, 2242);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=null [2242], value={]={\n=~WN')AJgL<B\"9b:Zw5}, parent=null, left=null [2242], right=null, predecessor=null [2242])", string1);
      assertNotNull(string1);
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", patriciaTrie0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap [2], value=Trie[0]={\n}\n, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap [2], right=null, predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap [2])", string0);
      assertNotNull(string0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("[|", "[|");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("[J{", "[J{");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("304</H<9");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("H&zl&", "H&zl&");
      assertNull(string0);
      
      String string1 = patriciaTrie1.get("H&zl&");
      assertEquals("H&zl&", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie1.putIfAbsent("V4:hZ)V~0]jtQ|p.", "");
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("304</H<9");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 304);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "org.apache.commons.collections4.trie.AbstractBitwiseTrie", (-473));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = patriciaTrie0.put(" CA?+YI3hv3:", integer0);
      assertNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.previousKey("Trie[0]={\n}\n");
      assertNull(string1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(set1.contains(string0));
      assertTrue(set1.contains(" CA?+YI3hv3:"));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      
      patriciaTrie1.decrementSize();
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.mapIterator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("2p`4,>t+B%.", "2p`4,>t+B%.");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("2p`4,>t+B%.", 16, 16);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertNotNull(set0);
      assertTrue(set0.contains("2p`4,>t+B%."));
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(set0, "6r[LS].(i", 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(set0.contains("6r[LS].(i"));
      assertTrue(set0.contains("2p`4,>t+B%."));
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=[2p`4,>t+B%.] [1], value=6r[LS].(i, parent=null, left=[2p`4,>t+B%.] [1], right=null, predecessor=[2p`4,>t+B%.] [1])", string1);
      assertNotNull(string1);
      assertFalse(set0.contains("6r[LS].(i"));
      assertTrue(set0.contains("2p`4,>t+B%."));
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, (-19));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 1337);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.floorEntry(" > ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.modCount = 1322;
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "", 540);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "", 540);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Comparable<String> comparable0 = patriciaTrie1.put("", "");
      assertNull(comparable0);
      
      String string0 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key= [540], value=, parent=null, left= [540], right=null, predecessor= [540])", string0);
      assertNotNull(string0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Comparable<String> comparable1 = patriciaTrie1.put("", (Comparable<String>) null);
      assertEquals("", comparable1);
      assertNotNull(comparable1);
      
      Comparable<String> comparable2 = patriciaTrie1.put("", "");
      assertNull(comparable2);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "", (-3846));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry2;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = "";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
      
      Comparator<Map.Entry<Comparable<Object>, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry3);
      assertNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Comparator<Map.Entry<Integer, Comparable<Object>>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.subtree("", (-3846), (-3846));
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry6 = patriciaTrie3.lowerEntry("Z\"'tu~[K8rK}%");
      assertNull(abstractPatriciaTrie_TrieEntry6);
      
      patriciaTrie3.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie3.nextEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("]={\n");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, sortedMap0, 2242);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=null [2242], value={}, parent=null, left=null [2242], right=null, predecessor=null [2242])", string0);
      assertNotNull(string0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Oy\"<eK. 3Bz(C%P$9T{", integer0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer1, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("Y'EWq.Z6Oo,AIeE", "Y'EWq.Z6Oo,AIeE");
      assertNull(string0);
      
      int int0 = 488;
      // Undeclared exception!
//      try { 
        patriciaTrie1.getNearestEntryForKey("", 488);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = patriciaTrie1.put("pGdI'bf&#uxjh/u!dV", (Integer) null);
      assertNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie2.subMap(">]9 M<ET6V=", (String) null);
      assertNotNull(sortedMap0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, ">]9 M<ET6V=", (-831));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key={} [-831], value=>]9 M<ET6V=, parent=null, left={} [-831], right=null, predecessor={} [-831])", string0);
      assertNotNull(string0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Comparable<Integer>> patriciaTrie3 = new PatriciaTrie<Comparable<Integer>>();
      assertNotNull(patriciaTrie3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", object0, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Integer integer0 = new Integer(113);
      assertEquals(113, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = abstractPatriciaTrie_TrieEntry0.setValue((Object) null);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer0, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(integer1.equals((Object)integer0));
      
      Comparator<Map.Entry<String, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Object object2 = abstractMap_SimpleEntry0.setValue(object0);
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", object2);
      assertNotNull(object2);
      assertSame(object0, object1);
      assertFalse(integer1.equals((Object)integer0));
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = 1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry [1], value=null, parent=null, left=null, right=113 [1], predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry [1])", string0);
      assertNotNull(string0);
      assertSame(object0, object1);
      assertFalse(string0.equals((Object)object2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("9 ?vK @=8gG", "9 ?vK @=8gG");
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Comparable<Object>, Comparable<Object>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      String string0 = abstractMap_SimpleEntry0.setValue("9 ?vK @=8gG");
      assertEquals("9 ?vK @=8gG", string0);
      assertNotNull(string0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object>(abstractMap_SimpleEntry0, integer0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = abstractMap_SimpleEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.parent = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string1 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=9 ?vK @=8gG=9 ?vK @=8gG [0], value=0, parent=null, left=null, right=null, predecessor=9 ?vK @=8gG=9 ?vK @=8gG [0])", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string2 = "hmQ3*g";
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("9 ?vK @=8gG");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>(comparable0, integer0, 4576);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>(comparable1, integer0, 4576);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1.left;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 10);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 1337);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("R*(;p/3&xUx$Zs1(M2");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("|", "|");
      assertNull(string0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.subMap("aPhrf]DHhkXJ&&_v@", "zi(W@Q");
      assertNotNull(sortedMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, "The offsets and lengths must be at Character boundaries", (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string1 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("RootEntry(key={} [-1], value=The offsets and lengths must be at Character boundaries, parent=null, left=ROOT, right=null, predecessor=ROOT)", string1);
      assertNotNull(string1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      PatriciaTrie<Comparable<Integer>> patriciaTrie2 = new PatriciaTrie<Comparable<Integer>>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.lowerEntry(" [");
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put(">]9 <f+E\u0006V=", integer0);
      assertNull(integer1);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap((String) null, ">]9 M<ET6V=");
      assertNotNull(sortedMap0);
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>(">]9 <f+E\u0006V=", integer0, (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, (Object) null, 3485);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key={>]9 <f+E\u0006V==-1} [3485], value=null, parent=null, left={>]9 <f+E\u0006V==-1} [3485], right=null, predecessor={>]9 <f+E\u0006V==-1} [3485])", string0);
      assertNotNull(string0);
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry(">]9 M<ET6V=");
      assertNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put(">]9 <f+E\u0006V=", integer0);
      assertNull(integer1);
      
      Integer integer2 = patriciaTrie0.put("c", integer0);
      assertNull(integer2);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap((String) null, ">]9 M<ET6V=");
      assertNotNull(sortedMap0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, sortedMap0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key={>]9 <f+E\u0006V==2} [2], value={>]9 <f+E\u0006V==2}, parent=null, left={>]9 <f+E\u0006V==2} [2], right=null, predecessor={>]9 <f+E\u0006V==2} [2])", string0);
      assertNotNull(string0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      assertNotNull(patriciaTrie1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      String string1 = patriciaTrie1.put("c", "Entry(key={>]9 <f+E\u0006V==2} [2], value={>]9 <f+E\u0006V==2}, parent=null, left={>]9 <f+E\u0006V==2} [2], right=null, predecessor={>]9 <f+E\u0006V==2} [2])");
      assertNull(string1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("y]d* BDh{L2,Hl @_");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put(";/Xsv!Uz)l", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("left=", "left=", 304);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "Trie[", (-2074));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      patriciaTrie0.decrementSize();
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = "";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.key = "pS\"f^By)&zq~ ";
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("b(D/zo", "b(D/zo");
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("]B");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.incrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie0.ceilingEntry("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1283);
      assertEquals(1283, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = patriciaTrie0.put("\n", integer0);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("\n", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet", 1630);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Integer integer1 = new Integer((-2));
      assertEquals((-2), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object1 = abstractPatriciaTrie_TrieEntry0.setKeyValue("[JwIp|", integer1);
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet", object1);
      assertNotNull(object1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("\n");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("[JwIp|");
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      patriciaTrie0.replaceAll(biFunction0);
      Integer integer2 = new Integer((-2));
      assertEquals((-2), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals(integer2);
      assertFalse(boolean1);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Object object2 = patriciaTrie0.put("[JwIp|", abstractPatriciaTrie_TrieEntry1);
      assertNull(object2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
      
      Object object3 = abstractPatriciaTrie_TrieEntry0.setValue((Object) null);
      assertEquals((-2), object3);
      assertNotNull(object3);
      assertFalse(object3.equals((Object)integer0));
      assertTrue(object3.equals((Object)integer2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparator<Map.Entry<Comparable<Object>, String>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Object object4 = patriciaTrie0.put("", "[JwIp|");
      assertNull(object4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, String>(comparable0, "]={\n", 1283);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry4.toString();
      assertEquals("Entry(key=null [1283], value=]={\n, parent=null, left=null [1283], right=null, predecessor=null [1283])", string0);
      assertNotNull(string0);
      assertFalse(string0.equals((Object)object1));
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap hashMap1 = (HashMap)hashMap0.clone();
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.subtree("]={\n", 1, 1);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(integer0, patriciaTrie0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>((String) null, abstractMap_SimpleEntry0, (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Set<Map.Entry<String, AbstractMap.SimpleEntry<Object, Object>>> set0 = (Set<Map.Entry<String, AbstractMap.SimpleEntry<Object, Object>>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, Object>> comparator1 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      assertNotNull(comparator1);
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, String>, Object>, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
      assertNotNull(comparator2);
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = 4776;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, 4776);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertFalse(boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>((String) null, ";u4Z6PS,!");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, String>>("", abstractMap_SimpleImmutableEntry0, 590);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, String>> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.right;
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.previousEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, String>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      Comparable<Object> comparable1 = patriciaTrie1.put("eM", comparable0);
      assertNull(comparable1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable3 = patriciaTrie1.getOrDefault((Object) null, comparable2);
      assertNotNull(comparable3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(comparable3, comparable0);
      assertSame(comparable3, comparable2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(comparable3.equals((Object)comparable0));
      
      patriciaTrie0.modCount = (-100);
      Comparable<Object> comparable4 = patriciaTrie0.put("z0$Dq`^rF$w:&EHW~", (Comparable<Object>) null);
      assertNull(comparable4);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Collection<Comparable<Object>> collection0 = patriciaTrie1.values();
      assertNotNull(collection0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(collection0.contains(comparable3));
      assertTrue(collection0.contains(comparable0));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lastEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Integer integer0 = new Integer((-2589));
      assertEquals((-2589), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(collection0, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(collection0.contains(comparable3));
      assertTrue(collection0.contains(comparable0));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(collection0.contains(comparable3));
      assertTrue(collection0.contains(comparable0));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(collection0.contains(comparable3));
      assertTrue(collection0.contains(comparable0));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>("z0$Dq`^rF$w:&EHW~", abstractMap_SimpleEntry0, (-2589));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(collection0.contains(comparable3));
      assertTrue(collection0.contains(comparable0));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      String string0 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=z0$Dq`^rF$w:&EHW~ [-2589], value=[null]=-2589, parent=null, left=z0$Dq`^rF$w:&EHW~ [-2589], right=null, predecessor=z0$Dq`^rF$w:&EHW~ [-2589])", string0);
      assertNotNull(string0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(collection0.contains(comparable3));
      assertTrue(collection0.contains(comparable0));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string1 = patriciaTrie0.put("b(D/zo", "b(D/zo");
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("i}w79Nu3o", 0, 4060);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("V~OM8B@k)qc}+)C/8", "V~OM8B@k)qc}+)C/8");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("", "");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 2403);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 888);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = "";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      String string2 = abstractPatriciaTrie_TrieEntry1.setKeyValue((String) null, "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      String string3 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key= [2403], value=, parent=null [888], left= [2403], right=null [888], predecessor= [2403])", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      String string4 = patriciaTrie0.put("", "");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      
      patriciaTrie0.modCount = 1976;
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      String string5 = patriciaTrie0.put(" is not an external Entry!", " is not an external Entry!");
      assertNull(string5);
      
      boolean boolean0 = patriciaTrie0.isBitSet(" is not an external Entry!", (-482), (-482));
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.containsKey(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<Comparable<Integer>> patriciaTrie0 = new PatriciaTrie<Comparable<Integer>>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1072);
      assertEquals(1072, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = patriciaTrie0.compareKeys("_", "");
      assertFalse(boolean0);
      
      Comparable<Integer> comparable0 = patriciaTrie0.put("%}Lz{@1", integer0);
      assertNull(comparable0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Comparable<Integer> comparable1 = patriciaTrie0.merge("", integer0, biFunction0);
      assertEquals(1072, comparable1);
      assertNotNull(comparable1);
      assertSame(integer0, comparable1);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("lt?|");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Object) null, (Object) null);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, String>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1, (-887));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      boolean boolean0 = patriciaTrie0.remove((Object) "j#_.o'-X%y:", (Object) object0);
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select("j#_.o'-X%y:");
      assertNull(map_Entry0);
      
      Object object1 = patriciaTrie0.put("j#_.o'-X%y:", "j#_.o'-X%y:");
      assertNull(object1);
      
      boolean boolean1 = patriciaTrie0.containsKey("j#_.o'-X%y:");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertTrue(set0.contains("j#_.o'-X%y:"));
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      patriciaTrie0.incrementSize();
      Set<Map.Entry<String, Object>> set1 = (Set<Map.Entry<String, Object>>)patriciaTrie0.entrySet();
      assertNotNull(set1);
      assertEquals(2, set1.size());
      assertFalse(set1.isEmpty());
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("j#_.o'-X%y:");
      assertNotNull(sortedMap0);
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie0.prefixMap("j#_.o'-X%y:");
      assertNotNull(sortedMap1);
      assertTrue(sortedMap1.equals((Object)sortedMap0));
      assertFalse(sortedMap1.isEmpty());
      assertEquals(1, sortedMap1.size());
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      Object object2 = patriciaTrie0.put("", "");
      assertNull(object2);
      
      int int1 = patriciaTrie0.lengthInBits("}!$");
      assertEquals(48, int1);
      assertFalse(int1 == int0);
      
      Integer integer1 = new Integer((-2652));
      assertEquals((-2652), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.get(integer1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("O", "q$LRVJ0");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      String string1 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", "I5`<m!05%2:}8mGkng");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("I5`<m!05%2:}8mGkng", "q$LRVJ0");
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.put("q$LRVJ0", abstractPatriciaTrie_TrieEntry0);
      assertNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      int int0 = patriciaTrie0.lengthInBits("OGFYE*>X%L,^?sI&");
      assertEquals(256, int0);
      
      String string3 = patriciaTrie1.firstKey();
      assertEquals("q$LRVJ0", string3);
      assertNotNull(string3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("q$LRVJ0");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>("", (String) null, 112);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertTrue(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("e/'tyDc", object0);
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("", " > ");
      assertNull(object2);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      Object object3 = patriciaTrie0.put("\n", "\n");
      assertNull(object3);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("T1yFBSZS3H!;`G5!eRv");
      assertNotNull(sortedMap0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(2, sortedMap0.size());
      
      Object object4 = patriciaTrie0.getOrDefault("x<hP7d:E4!PuJi)", "x<hP7d:E4!PuJi)");
      assertEquals("x<hP7d:E4!PuJi)", object4);
      assertNotNull(object4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("x<hP7d:E4!PuJi)", 112, 112);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(112);
      assertEquals(112, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      String string0 = patriciaTrie1.put("R^[(n3~ 8zv", "\n");
      assertNull(string0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.subtree((String) null, 112, 304);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<Comparable<Integer>> patriciaTrie0 = new PatriciaTrie<Comparable<Integer>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.putIfAbsent("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", "");
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string1 = patriciaTrie2.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet");
      assertNull(string1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string2 = patriciaTrie2.putIfAbsent("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", " [");
      assertNull(string2);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string3 = patriciaTrie1.put("jz{fx,'D", (String) null);
      assertNull(string3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry0, 1815);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "\\%?z";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("%?z", "%?z", (-2));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 2951);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      Object object0 = patriciaTrie0.put("%?z", "%?z");
      assertEquals("%?z", object0);
      assertNotNull(object0);
      assertFalse(object0.equals((Object)string0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("%?z");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      String string1 = patriciaTrie0.previousKey("%?z");
      assertEquals("%?z", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string0));
      
      Object object1 = patriciaTrie0.get("t");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("t", patriciaTrie0, 348);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      String string2 = "1rJXp;M?rbkVlb;4ZH";
      Object object2 = abstractPatriciaTrie_TrieEntry4.setValue((Object) null);
      assertNotNull(object2);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Object object3 = abstractPatriciaTrie_TrieEntry4.setKeyValue("t", "1rJXp;M?rbkVlb;4ZH");
      assertNull(object3);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry4.equals(integer0);
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      Integer integer1 = new Integer(348);
      assertEquals(348, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry4.equals(integer1);
      assertFalse(boolean1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      Object object4 = abstractPatriciaTrie_TrieEntry4.setKeyValue("1rJXp;M?rbkVlb;4ZH", (Object) null);
      assertEquals("1rJXp;M?rbkVlb;4ZH", object4);
      assertNotNull(object4);
      assertFalse(object4.equals((Object)string1));
      assertTrue(object4.equals((Object)string2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)string0));
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry4);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      // Undeclared exception!
//      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry4, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie1.higherEntry("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("keyAnalyzer", "");
      assertNull(object0);
      
      int int0 = patriciaTrie0.bitIndex("", "");
      assertEquals((-1), int0);
      
      Object object1 = patriciaTrie0.put("H]", "H]");
      assertNull(object1);
      
      String string0 = patriciaTrie0.lastKey();
      assertEquals("keyAnalyzer", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie0.put("g74PXI2_", "org.apache.commons.collections4.trie.PatriciaTrie");
      assertNull(string2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("=", (-340), 9);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("U~e{w[Qc\"?&l", "U~e{w[Qc\"?&l");
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.replace("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", (Object) null);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put(":7KWgavg^%(M`", "dP");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put(":7KWgavg^%(M`", "/6amE?McRPt'");
      assertEquals("dP", string1);
      assertNotNull(string1);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("/6amE?McRPt'");
      assertNotNull(map_Entry0);
      
      String string2 = patriciaTrie0.compute("dP", biFunction0);
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("eAyt|=,Y*%\"|?$fik");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("/6amE?McRPt'", integer0, 329);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.tailMap(":7KWgavg^%(M`");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.parent;
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      assertNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.toString();
      assertEquals("Trie[1]={\n  RootEntry(key= [-1], value=, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n", string1);
      assertNotNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string2 = patriciaTrie0.replace("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie4);
      
      // Undeclared exception!
//      try { 
        patriciaTrie4.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie1.firstKey();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.previousKey("");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put(".fWM`X1+zKiUB", "");
      assertNull(string2);
      
      String string3 = patriciaTrie0.selectKey((String) null);
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.previousKey("");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("b(D/zo", "b(D/zo");
      assertNull(string2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.replace((String) null, (Object) "");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("]mdaR<aq(\"6~I@O");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      String string3 = patriciaTrie1.lastKey();
      assertEquals("b(D/zo", string3);
      assertNotNull(string3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("Trie[");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("");
      assertNull(map_Entry0);
      
      String string0 = patriciaTrie0.put("b(Dzo", "b(Dzo");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("", "");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("-Yy'f`+kfi,@W#9e");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(2554);
      assertEquals(2554, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.followRight((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie0.previousKey("");
      assertNull(string2);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertTrue(set0.contains(string1));
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      String string3 = patriciaTrie0.put("", "");
      assertNull(string3);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree((String) null, 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      SortedMap<String, String> sortedMap0 = patriciaTrie1.prefixMap((String) null);
      assertNotNull(sortedMap0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("right=", (Object) null, 676);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=right= [676], value=null, parent=null, left=right= [676], right=null, )", string0);
      assertNotNull(string0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("r8(", "R");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("  ", (String) null);
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("A", "=6Un");
      assertNull(string3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("DE)rCXbep{0!", 0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      Collection<Integer> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", (Integer) null, (-2543));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Integer integer0 = new Integer(312);
      assertEquals(312, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = (-1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 290);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "R";
      patriciaTrie0.modCount = 0;
      String string1 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string1);
      
      String string2 = patriciaTrie0.putIfAbsent("r8(", "R");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("  ", "hT^0H@");
      assertNull(string3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("R", (Object) null, (-956));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.subtree("  ", 0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.ceilingEntry("R");
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains("R"));
      assertTrue(set0.contains("  "));
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = patriciaTrie2.put("  ", (AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      patriciaTrie2.clear();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry6 = patriciaTrie2.lowerEntry("(Iv(x)L0]3L");
      assertNull(abstractPatriciaTrie_TrieEntry6);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.modCount = 0;
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("r8(", "R");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("  ", "hT^0H@");
      assertNull(string2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("R", (Object) null, (-956));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, "hT^0H@", (-365));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry2);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.subtree("  ", 0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.ceilingEntry("R");
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains("R"));
      assertTrue(set0.contains("r8("));
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry5));
      assertFalse(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = patriciaTrie2.put("  ", (AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      patriciaTrie2.clear();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry7 = patriciaTrie2.lowerEntry("(Iv(x)L0]3L");
      assertNull(abstractPatriciaTrie_TrieEntry7);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("\n", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("\n", 0, 16);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string0 = "vJQ";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("vJQ", "vJQ", (-2));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (-3903));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "\n";
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("!+ErEce* Mi%/a&s(");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = patriciaTrie0.put("\n", "\n");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.getOrDefault("x<hP7d:E4!PuJi)", "x<hP7d:E4!PuJi)");
      assertEquals("x<hP7d:E4!PuJi)", object1);
      assertNotNull(object1);
      assertFalse(object1.equals((Object)string0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("x<hP7d:E4!PuJi)", 112, 112);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer0 = new Integer(112);
      assertEquals(112, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string1 = "";
      String string2 = "UAKzb}&i";
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<Object, String> function1 = null;
      // Undeclared exception!
//      try { 
        function0.andThen((Function<? super String, ? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = null;
      String string1 = patriciaTrie0.selectValue("Trie[");
      assertNull(string1);
      
      int int0 = (-583);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", (-583));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("-w^;K.E'LM&NY9", "Nk_", (-2599));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.subtree("Nk_", (-2), (-1143));
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertFalse(set0.contains("Nk_"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(set0, "-w^;K.E'LM&NY9", 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(set0.contains("Nk_"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry3.toString();
      assertEquals("Entry(key=[] [2], value=-w^;K.E'LM&NY9, parent=null, left=[] [2], right=null, predecessor=[] [2])", string0);
      assertNotNull(string0);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertFalse(set0.contains("Nk_"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      Integer integer0 = new Integer((-1143));
      assertEquals((-1143), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      Object object0 = abstractPatriciaTrie_TrieEntry4.getValue();
      assertNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, abstractPatriciaTrie_TrieEntry4, (-2));
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
      assertFalse(boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertFalse(set0.contains("Nk_"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      // Undeclared exception!
//      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry3, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(400);
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 400);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("0i#=", "a", 1686);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Object object0 = abstractPatriciaTrie_TrieEntry1.getKey();
      assertEquals("0i#=", object0);
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("0i#=");
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer1, 12);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      Comparator<Map.Entry<Comparable<Object>, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, (Object) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("|%0;v", abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)integer1));
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=400 [400], value=400, parent=null, left=2 [12], right=null, predecessor=400 [400])", string0);
      assertNotNull(string0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(string0.equals((Object)object0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Integer integer2 = new Integer(1723);
      assertEquals(1723, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer2, (-1725));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry3;
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry3.key = integer2;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      Integer integer3 = new Integer(400);
      assertEquals(400, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      
      Integer integer4 = abstractPatriciaTrie_TrieEntry0.setKeyValue(integer3, integer3);
      assertEquals(400, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertFalse(boolean1);
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie1.subMap("Entry(key=400 [400], value=400, parent=null, left=2 [12], right=null, predecessor=400 [400])", "Entry(key=400 [400], value=400, parent=null, left=2 [12], right=null, predecessor=400 [400])");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.getNearestEntryForKey("WyG", (-766));
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.lastEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      
      int int0 = patriciaTrie1.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("1U", integer0, (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, Object>> comparator1 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      assertNotNull(comparator1);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("RootEntry(key=1U [-1], value=1, parent=null, left=ROOT, right=null, predecessor=ROOT)", string0);
      assertNotNull(string0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparator<Map.Entry<Object, String>> comparator2 = Map.Entry.comparingByValue();
      assertNotNull(comparator2);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, String>(abstractMap_SimpleEntry0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator", 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry1.key;
      assertNotNull(abstractMap_SimpleEntry1);
      assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
      
      Object object0 = patriciaTrie0.put("RootEntry(key=1U [-1], value=1, parent=null, left=ROOT, right=null, predecessor=ROOT)", abstractMap_SimpleEntry1);
      assertNull(object0);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Object object1 = patriciaTrie0.put("parent=", (Object) null);
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("RootEntry(key=1U [-1], value=1, parent=null, left=ROOT, right=null, predecessor=ROOT)", "1U");
      assertNotNull(object2);
      
      Object object3 = patriciaTrie0.put("1U", integer0);
      assertNull(object3);
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertSame(set1, set0);
      assertTrue(set1.contains(string0));
      assertFalse(set1.contains("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"));
      assertFalse(set1.isEmpty());
      assertEquals(3, set1.size());
      
      Object object4 = patriciaTrie0.put("RootEntry(key=1U [-1], value=1, parent=null, left=ROOT, right=null, predecessor=ROOT)", "1U");
      assertEquals("1U", object4);
      assertNotNull(object4);
      assertFalse(object4.equals((Object)string0));
      
      String string1 = patriciaTrie0.nextKey("RootEntry(key=1U [-1], value=1, parent=null, left=ROOT, right=null, predecessor=ROOT)");
      assertEquals("parent=", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)object4));
      assertFalse(string1.equals((Object)string0));
      
      Set<Map.Entry<String, Object>> set2 = (Set<Map.Entry<String, Object>>)patriciaTrie0.entrySet();
      assertNotNull(set2);
      assertEquals(3, set2.size());
      assertFalse(set2.isEmpty());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string2 = patriciaTrie1.put("predecessor=", "RootEntry(key=1U [-1], value=1, parent=null, left=ROOT, right=null, predecessor=ROOT)");
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("parent=", "parent=", 224);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry2);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      // Undeclared exception!
//      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry2, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertEquals((-1), set0.size());
      assertFalse(set0.isEmpty());
      
      Object object0 = patriciaTrie0.put("(&T`Wt],1`;", set0);
      assertNull(object0);
      assertTrue(set0.contains("(&T`Wt],1`;"));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = "O!;>E4R";
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertSame(set1, set0);
      assertTrue(set1.contains("(&T`Wt],1`;"));
      assertFalse(set1.contains(""));
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      boolean boolean0 = patriciaTrie0.isBitSet("O!;>E4R", (-2), (-2));
      assertFalse(boolean0);
      
      Object object1 = patriciaTrie0.put("O!;>E4R", "O!;>E4R");
      assertNull(object1);
      
      String string1 = patriciaTrie0.previousKey("O!;>E4R");
      assertEquals("(&T`Wt],1`;", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Object object2 = patriciaTrie0.put("(&T`Wt],1`;", (Object) null);
      assertNotNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("\n", "O!;>E4R", (-1430));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      Set<Map.Entry<String, String>> set2 = (Set<Map.Entry<String, String>>)patriciaTrie1.entrySet();
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "}/_Gpj\"3[n", (-1470));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Integer integer0 = new Integer(802);
      assertEquals(802, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("yJGtY89)_h*w", "{U21'");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object>(abstractMap_SimpleEntry0, "yJGtY89)_h*w", (-2372));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Object object0 = abstractPatriciaTrie_TrieEntry1.getKey();
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("}/_Gpj\"3[n");
      assertNull(map_Entry0);
      
      Integer integer1 = new Integer(802);
      assertEquals(802, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      String string0 = patriciaTrie0.put("{U21'", "}H`{zhLz;wjJPB@=?\"=");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("Nk_");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("e/'tyDc", object0);
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("", "e/'tyDc");
      assertNull(object2);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      Object object3 = patriciaTrie0.put("\n", "\n");
      assertNull(object3);
      
      Object object4 = patriciaTrie0.getOrDefault("x<hP7d:E4!PuJi)", "x<hP7d:E4!PuJi)");
      assertEquals("x<hP7d:E4!PuJi)", object4);
      assertNotNull(object4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("x<hP7d:E4!PuJi)", 112, 112);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(112);
      assertEquals(112, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.subtree((String) null, 112, 304);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("\n");
      assertNotNull(sortedMap0);
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie0);
      
      Collection<Comparable<String>> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      Collection<Comparable<String>> collection1 = patriciaTrie0.values();
      assertNotNull(collection1);
      assertSame(collection1, collection0);
      
      Comparable<String> comparable0 = patriciaTrie0.put("", "");
      assertNull(comparable0);
      
      int int0 = (-2);
      Integer integer0 = new Integer((-2));
      assertEquals((-2), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.containsKey(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>>("", abstractMap_SimpleEntry1, 297);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Collection<AbstractMap.SimpleEntry<String, Object>> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains(abstractMap_SimpleEntry1));
      
      Collection<AbstractMap.SimpleEntry<String, Object>> collection1 = patriciaTrie0.values();
      assertNotNull(collection1);
      assertSame(collection1, collection0);
      assertFalse(collection1.contains(abstractMap_SimpleEntry1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", (Object) null, 64);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry3.bitIndex = 64;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry3.toString();
      assertEquals("Entry(key= [64], value=null, parent=null, left= [64], right=null, predecessor= [64])", string0);
      assertNotNull(string0);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.lowerEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry4);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put(" CA?+YI3hv3:", integer0);
      assertNull(integer2);
      assertTrue(integer0.equals((Object)integer1));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.lastKey();
      assertEquals(" CA?+YI3hv3:", string1);
      assertNotNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
      assertNull(string2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("Trie[0]={\n}\n");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Set<String> set1 = patriciaTrie1.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(set1.contains("Trie[0]={\n}\n"));
      assertTrue(set1.contains(" CA?+YI3hv3:"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(orderedMapIterator0.hasNext());
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      String string3 = patriciaTrie4.selectKey("");
      assertNull(string3);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      
      PatriciaTrie<Comparable<String>> patriciaTrie5 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie5);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put(" CA?+YI3hv3:", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer3 = patriciaTrie0.put("Trie[0]={\n}\n", integer0);
      assertNull(integer3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Integer integer4 = patriciaTrie1.put(" CA?+YI3hv3:", integer1);
      assertEquals((-1), (int)integer4);
      assertNotNull(integer4);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer4.equals((Object)integer0));
      
      String string1 = patriciaTrie1.previousKey("Trie[0]={\n}\n");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(set1.contains(" CA?+YI3hv3:"));
      assertFalse(set1.contains(""));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(2, set1.size());
      assertFalse(set1.isEmpty());
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(orderedMapIterator0.hasNext());
      
      Integer integer5 = new Integer((-1));
      assertEquals((-1), (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      
      Integer integer6 = new Integer(0);
      assertEquals(0, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string2 = patriciaTrie3.selectKey("");
      assertEquals(" CA?+YI3hv3:", string2);
      assertNotNull(string2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Comparable<String>> patriciaTrie4 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(860);
      assertEquals(860, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("}\n", integer0);
      assertNull(integer1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.subtree("", 2236, (-2));
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry("}\n");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, patriciaTrie0, (-2));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry3.toString();
      assertEquals("Entry(key=null [-2], value=Trie[1]={\n  Entry(key=}\n [9], value=860, parent=ROOT, left=ROOT, right=}\n [9], predecessor=}\n [9])\n}\n, parent=null, left=null [-2], right=null, predecessor=null [-2])", string0);
      assertNotNull(string0);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry3, (Object) null, (-220));
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
      assertFalse(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      // Undeclared exception!
//      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry3, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("e/'tyDc", object0);
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("", " > ");
      assertNull(object2);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      Object object3 = patriciaTrie0.put("\n", "\n");
      assertNull(object3);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("T1yFBSZS3H!;`G5!eRv");
      assertNotNull(sortedMap0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(2, sortedMap0.size());
      
      Object object4 = patriciaTrie0.getOrDefault("x<hP7d:E4!PuJi)", "x<hP7d:E4!PuJi)");
      assertEquals("x<hP7d:E4!PuJi)", object4);
      assertNotNull(object4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("x<hP7d:E4!PuJi)", 112, 112);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(112);
      assertEquals(112, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "value=", (-191));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=112 [-191], value=value=, parent=null, left=112 [-191], right=null, predecessor=112 [-191])", string0);
      assertNotNull(string0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(string0.equals((Object)object4));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , anyInt());
      Integer integer1 = patriciaTrie1.compute("T1yFBSZS3H!;`G5!eRv", biFunction0);
      assertNull(integer1);
      
      Comparator<? super String> comparator0 = patriciaTrie1.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("e/'tyDc", object0);
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("", " > ");
      assertNull(object2);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      Object object3 = patriciaTrie0.put("\n", "\n");
      assertNull(object3);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("T1yFBSZS3H!;`G5!eRv");
      assertNotNull(sortedMap0);
      assertEquals(2, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      
      Object object4 = patriciaTrie0.getOrDefault("x<hP7d:E4!PuJi)", "x<hP7d:E4!PuJi)");
      assertEquals("x<hP7d:E4!PuJi)", object4);
      assertNotNull(object4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("x<hP7d:E4!PuJi)", 112, 112);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(112);
      assertEquals(112, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.subtree((String) null, 112, 304);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put(" CA?+YI3hv3:", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.previousKey("Trie[0]={\n}\n");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("Trie[0]={\n}\n");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(set1.contains("Trie[0]={\n}\n"));
      assertTrue(set1.contains(" CA?+YI3hv3:"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string2 = patriciaTrie3.nextKey("Trie[0]={\n}\n");
      assertNull(string2);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string3 = patriciaTrie2.put(" CA?+YI3hv3:", "<\"bljJPcWt<~$Y");
      assertNull(string3);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      
      String string4 = patriciaTrie3.put("<\"bljJPcWt<~$Y", "Trie[0]={\n}\n");
      assertNull(string4);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Integer integer3 = new Integer(32768);
      assertEquals(32768, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      String string5 = patriciaTrie2.put("Trie[", "lU@E`B]");
      assertNull(string5);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie3.ceilingEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put(" CA?+YI3hv3:", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.previousKey("Trie[0]={\n}\n");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer3 = patriciaTrie1.put("x", (Integer) null);
      assertNull(integer3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(set1.contains(" CA?+YI3hv3:"));
      assertFalse(set1.contains("Trie[0]={\n}\n"));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(orderedMapIterator0.hasNext());
      
      Integer integer4 = new Integer((-1));
      assertEquals((-1), (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      
      Integer integer5 = new Integer(0);
      assertEquals(0, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.lowerEntry("x");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      String string2 = patriciaTrie3.selectKey("");
      assertEquals(" CA?+YI3hv3:", string2);
      assertNotNull(string2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie4.higherEntry("cd!3'^o~");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("KF>%0smyF[\u0005\"l", "KF>%0smyF[\u0005\"l", 2403);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = (Object) "KF>%0smyF[\u0005\"l";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=KF>%0smyF[\u0005\"l [2403], value=KF>%0smyF[\u0005\"l, parent=null, left=KF>%0smyF[\u0005\"l [2403], right=null, predecessor=KF>%0smyF[\u0005\"l [2403])", string0);
      assertNotNull(string0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("yE/7<&H_cb");
      assertFalse(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string1 = patriciaTrie0.put("U]83H", "Z<O@");
      assertNull(string1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("Entry(key=KF>%0smyF[\u0005\"l [2403], value=KF>%0smyF[\u0005\"l, parent=null, left=KF>%0smyF[\u0005\"l [2403], right=null, predecessor=KF>%0smyF[\u0005\"l [2403])");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.subtree((String) null, 30, 2403);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The offsets and lengths must be at Character boundaries
//         //
//         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("4QwYV/Uv", "4QwYV/Uv");
      assertNull(string0);
      
      int int0 = patriciaTrie0.lengthInBits("2>^'Pa?g]qk\"8");
      assertEquals(208, int0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      String string1 = function0.apply("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertTrue(set0.contains("4QwYV/Uv"));
      assertFalse(set0.contains(string1));
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      String string2 = patriciaTrie0.computeIfAbsent("FromKey is out of range: ", function0);
      assertEquals("FromKey is out of range: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = patriciaTrie0.put("", "");
      assertNull(string3);
      
      String string4 = patriciaTrie0.put("}\n", "");
      assertNull(string4);
      
      Collection<String> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains(string1));
      assertFalse(collection0.contains("2>^'Pa?g]qk\"8"));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("]={\n");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string5 = patriciaTrie0.toString();
      assertEquals("Trie[4]={\n  RootEntry(key= [-1], value=, parent=null, left=FromKey is out of range:  [9], right=null, predecessor=4QwYV/Uv [10])\n  Entry(key=4QwYV/Uv [10], value=4QwYV/Uv, parent=FromKey is out of range:  [9], left=ROOT, right=4QwYV/Uv [10], predecessor=4QwYV/Uv [10])\n  Entry(key=FromKey is out of range:  [9], value=FromKey is out of range: , parent=ROOT, left=4QwYV/Uv [10], right=}\n [10], predecessor=}\n [10])\n  Entry(key=}\n [10], value=, parent=FromKey is out of range:  [9], left=FromKey is out of range:  [9], right=}\n [10], predecessor=}\n [10])\n}\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = patriciaTrie0.nextKey("FromKey is out of range: ");
      assertEquals("}\n", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = patriciaTrie0.replace("4QwYV/Uv", "4QwYV/Uv");
      assertEquals("4QwYV/Uv", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = patriciaTrie0.put("]={\n", (String) null);
      assertNull(string8);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.put((String) null, "}\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("4QwYV/Uv", "4QwYV/Uv");
      assertNull(string0);
      
      int int0 = patriciaTrie0.lengthInBits("2>^'Pa?g]qk\"8");
      assertEquals(208, int0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      String string1 = function0.apply("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertTrue(set0.contains("4QwYV/Uv"));
      assertFalse(set0.contains("2>^'Pa?g]qk\"8"));
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      String string2 = patriciaTrie0.computeIfAbsent("FromKey is out of range: ", function0);
      assertEquals("FromKey is out of range: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = patriciaTrie0.put("", "");
      assertNull(string3);
      
      String string4 = patriciaTrie0.put("}\n", "");
      assertNull(string4);
      
      Collection<String> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains("2>^'Pa?g]qk\"8"));
      assertTrue(collection0.contains(string2));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string5 = patriciaTrie0.toString();
      assertEquals("Trie[4]={\n  RootEntry(key= [-1], value=, parent=null, left=FromKey is out of range:  [9], right=null, predecessor=4QwYV/Uv [10])\n  Entry(key=4QwYV/Uv [10], value=4QwYV/Uv, parent=FromKey is out of range:  [9], left=ROOT, right=4QwYV/Uv [10], predecessor=4QwYV/Uv [10])\n  Entry(key=FromKey is out of range:  [9], value=FromKey is out of range: , parent=ROOT, left=4QwYV/Uv [10], right=}\n [10], predecessor=}\n [10])\n  Entry(key=}\n [10], value=, parent=FromKey is out of range:  [9], left=FromKey is out of range:  [9], right=}\n [10], predecessor=}\n [10])\n}\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = patriciaTrie0.nextKey("");
      assertEquals("4QwYV/Uv", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = patriciaTrie0.replace("", "4QwYV/Uv");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = patriciaTrie0.put("]={\n", (String) null);
      assertNull(string8);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.put((String) null, "}\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(12);
      assertEquals(12, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.firstKey();
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean0 = hashMap0.replace("S`SrE jXsSi5u~Y4{:", "S`SrE jXsSi5u~Y4{:", "");
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = hashMap0.put("", "parent=");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string2 = null;
      Map.Entry<String, Integer> map_Entry0 = patriciaTrie1.select((String) null);
      assertNotNull(map_Entry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string3 = patriciaTrie2.putIfAbsent("]", "org.apache.commons.collections4.trie.AbstractPatriciaTrie");
      assertNull(string3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie3 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie3);
      
      Comparable<Object> comparable0 = patriciaTrie3.get("");
      assertNull(comparable0);
      
      String string4 = patriciaTrie0.previousKey("");
      assertNull(string4);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      
      // Undeclared exception!
//      try { 
        patriciaTrie4.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Object object0 = patriciaTrie0.putIfAbsent("", (Object) null);
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("", "");
      assertNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      String string0 = patriciaTrie0.previousKey("  ");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.key = "The offsets and lengths must be at Character boundaries";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.key = "F:D^8ia#z7l6sx8Lg`";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("F:D^8ia#z7l6sx8Lg`");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      boolean boolean1 = hashMap0.remove((Object) abstractPatriciaTrie_TrieEntry0, object2);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(16, 16);
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      String string1 = hashMap1.put("F:D^8ia#z7l6sx8Lg`", "F:D^8ia#z7l6sx8Lg`");
      assertNull(string1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.subtree("D9zs=v", 32768, 1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>(".T2Ua}d<:&ry@fLq1", (String) null, (-2819));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      boolean boolean0 = patriciaTrie2.replace(".T2Ua}d<:&ry@fLq1", ".T2Ua}d<:&ry@fLq1", "2b ETY,Y9nq");
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("r", ".T2Ua}d<:&ry@fLq1", (-2819));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.previousEntry(abstractPatriciaTrie_TrieEntry2);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, abstractPatriciaTrie_TrieEntry0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string0 = patriciaTrie1.previousKey("");
      assertNull(string0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.previousKey((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap("_1?,D%.NrL&TsN/FP", "_1?,D%.NrL&TsN/FP");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = patriciaTrie0.remove((Object) "value=", (Object) "value=");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-1863));
      assertEquals((-1863), (int)integer0);
      assertNotNull(integer0);
      
      patriciaTrie0.forEach(biConsumer0);
      Integer integer1 = new Integer((-1863));
      assertEquals((-1863), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer3 = new Integer((-3));
      assertEquals((-3), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer3);
      assertEquals((-1863), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("_1?,D%.NrL&TsN/FP", (-1863));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(boolean1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(boolean1 == boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer5 = patriciaTrie0.put("bS&HlH]m4ZWm7xeut", (Integer) null);
      assertNull(integer5);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Integer integer6 = new Integer((-1863));
      assertEquals((-1863), (int)integer6);
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<String>>(integer6, "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", (-3));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Integer integer7 = new Integer((-1863));
      assertEquals((-1863), (int)integer7);
      assertNotNull(integer7);
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer6));
      
      Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry1.setKeyValue(integer7, "value=");
      assertEquals("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", comparable0);
      assertNotNull(comparable0);
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer6));
      assertTrue(integer6.equals((Object)integer7));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Comparable<String> comparable1 = abstractPatriciaTrie_TrieEntry1.value;
      assertEquals("value=", comparable1);
      assertNotNull(comparable1);
      assertNotSame(comparable1, comparable0);
      assertFalse(comparable1.equals((Object)comparable0));
      
      Object object0 = patriciaTrie2.remove((Object) comparable1);
      assertNull(object0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(comparable1, comparable0);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(comparable1.equals((Object)comparable0));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer6.equals((Object)integer7));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("_1?,D%.NrL&TsN/FP", "<*+m}9");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Integer>(abstractMap_SimpleImmutableEntry0, integer3, (-3));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)integer7));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = abstractPatriciaTrie_TrieEntry2.key;
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      
      Object object1 = new Object();
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put(" CA?+YI3hv3:", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.previousKey("Trie[0]={\n}\n");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(set1.contains("Trie[0]={\n}\n"));
      assertTrue(set1.contains(" CA?+YI3hv3:"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string2 = patriciaTrie3.selectKey("");
      assertEquals(" CA?+YI3hv3:", string2);
      assertNotNull(string2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(string2.equals((Object)string0));
      
      PatriciaTrie<Comparable<String>> patriciaTrie4 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie4);
      
      int int0 = patriciaTrie4.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put(" CA?+YI3hv3:", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.previousKey("Trie[0]={\n}\n");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(set1.contains(" CA?+YI3hv3:"));
      assertFalse(set1.contains(""));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(orderedMapIterator0.hasNext());
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      String string2 = patriciaTrie2.selectKey("");
      assertNull(string2);
      
      PatriciaTrie<Comparable<String>> patriciaTrie3 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie3);
      
      int int0 = patriciaTrie3.size();
      assertEquals(0, int0);
      
      PatriciaTrie<Comparable<Integer>> patriciaTrie4 = new PatriciaTrie<Comparable<Integer>>();
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>((String) null, integer0, (-2));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie4.nextEntry(abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "Trie[";
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Object object0 = patriciaTrie0.putIfAbsent("", (Object) null);
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("N,O02 QFeA%e", "N,O02 QFeA%e");
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("Trie[", "Trie[");
      assertNull(object2);
      
      int int0 = 0;
      String string1 = patriciaTrie0.previousKey("  ");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = "The offsets and lengths must be at Character boundaries";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = "F:D^8ia#z7l6sx8Lg`";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string2 = "f-bG[#%k{psv8";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("F:D^8ia#z7l6sx8Lg`");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(integer0, abstractMap_SimpleEntry0, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry2.value;
      assertNotNull(abstractMap_SimpleEntry1);
      assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.remove((Object) abstractMap_SimpleEntry1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie0.put("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("(=l");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("r8(", 1081, 1108);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(patriciaTrie1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("r8(", "R");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "r8(", 1412);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry((String) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Integer integer0 = new Integer(1412);
      assertEquals(1412, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      assertTrue(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean1 = hashMap0.remove((Object) "r8(", (Object) "r8(");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("t`^gdKIL/b1$*");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie4.subtree("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", 2, 2);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie0);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      HashMap hashMap1 = (HashMap)hashMap0.clone();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1, (-687));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractMap.SimpleImmutableEntry abstractMap_SimpleImmutableEntry2 = (AbstractMap.SimpleImmutableEntry)abstractPatriciaTrie_TrieEntry0.getValue();
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      boolean boolean0 = hashMap0.replace("", (Object) abstractMap_SimpleImmutableEntry2, (Object) abstractPatriciaTrie_TrieEntry0);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Object object0 = patriciaTrie0.put("g.S<Xp-B*?uf0:zcL&%", "");
      assertNull(object0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Comparator<Map.Entry<Integer, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      OrderedMapIterator<String, Object> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Object object1 = patriciaTrie0.put("", hashMap1);
      assertNull(object1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = (String)hashMap0.merge("5X:I)p oen", "5X:I)p oen", biFunction0);
      assertEquals("5X:I)p oen", string0);
      assertNotNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction1).apply(any() , any());
      patriciaTrie0.replaceAll(biFunction1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = 1739;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(abstractMap_SimpleImmutableEntry2, integer0, (-687));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      abstractPatriciaTrie_TrieEntry2.bitIndex = 2095;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      abstractPatriciaTrie_TrieEntry2.value = integer0;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, String>>> comparator2 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, String>>) comparator1);
      assertNotNull(comparator2);
      
      String string1 = abstractPatriciaTrie_TrieEntry2.toString();
      assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractBitwiseTrie=org.apache.commons.collections4.trie.AbstractBitwiseTrie [2095], value=0, parent=null, left=org.apache.commons.collections4.trie.AbstractBitwiseTrie=org.apache.commons.collections4.trie.AbstractBitwiseTrie [2095], right=null, predecessor=org.apache.commons.collections4.trie.AbstractBitwiseTrie=org.apache.commons.collections4.trie.AbstractBitwiseTrie [2095])", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isExternalNode();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put(" CA?+YI3hv3:", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.previousKey("Trie[0]={\n}\n");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry(" CA?+YI3hv3:");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(set1.contains("Trie[0]={\n}\n"));
      assertTrue(set1.contains(" CA?+YI3hv3:"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string2 = patriciaTrie3.selectKey("");
      assertEquals(" CA?+YI3hv3:", string2);
      assertNotNull(string2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(string2.equals((Object)string0));
      
      PatriciaTrie<Comparable<String>> patriciaTrie4 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("r8(", "R");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("  ", "hT^0H@");
      assertNull(string2);
      
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "hT^0H@", (-1662));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string3 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=76 [-1662], value=hT^0H@, parent=null, left=76 [-1662], right=null, predecessor=76 [-1662])", string3);
      assertNotNull(string3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("hT^0H@", (String) null, 76);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "", (-60));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      String string4 = abstractPatriciaTrie_TrieEntry2.setValue("I@");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Comparable<Integer>>, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      String string5 = abstractPatriciaTrie_TrieEntry2.toString();
      assertEquals("Entry(key=null [-60], value=I@, parent=null, left=null [-60], right=null, predecessor=null [-60])", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      String string6 = abstractPatriciaTrie_TrieEntry2.toString();
      assertEquals("Entry(key=null [-60], value=I@, parent=null, left=null [-60], right=null, predecessor=null [-60])", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isEmpty();
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      String string0 = function0.apply("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string1 = patriciaTrie0.computeIfAbsent("FromKey is out of range: ", function0);
      assertEquals("FromKey is out of range: ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = patriciaTrie0.put("", "");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("}\n", "");
      assertNull(string3);
      
      Collection<String> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains("FromKey is out of range: "));
      assertFalse(collection0.contains("}\n"));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("]={\n");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string4 = patriciaTrie0.toString();
      assertEquals("Trie[3]={\n  RootEntry(key= [-1], value=, parent=null, left=FromKey is out of range:  [9], right=null, predecessor=FromKey is out of range:  [9])\n  Entry(key=FromKey is out of range:  [9], value=FromKey is out of range: , parent=ROOT, left=ROOT, right=}\n [10], predecessor=}\n [10])\n  Entry(key=}\n [10], value=, parent=FromKey is out of range:  [9], left=FromKey is out of range:  [9], right=}\n [10], predecessor=}\n [10])\n}\n", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = patriciaTrie0.nextKey("FromKey is out of range: ");
      assertEquals("}\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = patriciaTrie0.put("]={\n", (String) null);
      assertNull(string6);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Integer integer0 = new Integer(32768);
      assertEquals(32768, (int)integer0);
      assertNotNull(integer0);
      
      String string7 = patriciaTrie0.put("Rs;j_", "alQeIr1wF");
      assertNull(string7);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("r8(", "R");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("  ", "hT^0H@");
      assertNull(string2);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(biFunction0).apply(any() , anyString());
      patriciaTrie0.replaceAll(biFunction0);
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "hT^0H@", (-1662));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string3 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=76 [-1662], value=hT^0H@, parent=null, left=76 [-1662], right=null, predecessor=76 [-1662])", string3);
      assertNotNull(string3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      String string4 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "R");
      assertNull(string4);
      
      String string5 = patriciaTrie1.nextKey("Cannot determine prefix outside of Character boundaries");
      assertNull(string5);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("]<04,<GmQy$)1vS9-b");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("r8(", 2272, 1588);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.lengthInBits("");
      assertEquals(0, int0);
      
      String string0 = patriciaTrie0.putIfAbsent("Ct1Vfb,e$l}kYdzZgy", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("_x:vPr*o", "Ct1Vfb,e$l}kYdzZgy");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("_x:vPr*o", "");
      assertEquals("Ct1Vfb,e$l}kYdzZgy", string2);
      assertNotNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("hT^0H@");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("Ct1Vfb,e$l}kYdzZgy", (-1774), 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "R";
      String string1 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertTrue(set0.contains(""));
      assertFalse(set0.contains(string0));
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.put((String) null, (AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("r8(", "R");
      assertNull(string1);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , any());
      String string2 = patriciaTrie0.compute("  ", biFunction0);
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("Z/", "");
      assertNull(string3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 1514, 32768);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Yv", "{2. N", 32768);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-815));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = patriciaTrie0.putIfAbsent("", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      String string2 = patriciaTrie1.compute("", biFunction0);
      assertNull(string2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      patriciaTrie1.decrementSize();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer((-1721));
      assertEquals((-1721), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      String string0 = function0.apply("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string1 = patriciaTrie0.computeIfAbsent("FromKey is out of range: ", function0);
      assertEquals("FromKey is out of range: ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = patriciaTrie0.put("", "");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("}\n", "");
      assertNull(string3);
      
      Collection<String> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains("}\n"));
      assertTrue(collection0.contains(string0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("]={\n");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string4 = patriciaTrie0.toString();
      assertEquals("Trie[3]={\n  RootEntry(key= [-1], value=, parent=null, left=FromKey is out of range:  [9], right=null, predecessor=FromKey is out of range:  [9])\n  Entry(key=FromKey is out of range:  [9], value=FromKey is out of range: , parent=ROOT, left=ROOT, right=}\n [10], predecessor=}\n [10])\n  Entry(key=}\n [10], value=, parent=FromKey is out of range:  [9], left=FromKey is out of range:  [9], right=}\n [10], predecessor=}\n [10])\n}\n", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = patriciaTrie0.nextKey("FromKey is out of range: ");
      assertEquals("}\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = patriciaTrie0.put("]={\n", (String) null);
      assertNull(string6);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.ceilingEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      String string7 = patriciaTrie2.removeEntry(abstractPatriciaTrie_TrieEntry2);
      assertEquals("", string7);
      assertNotNull(string7);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.subtree("", 304, (-282));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(860);
      assertEquals(860, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      int int0 = (-2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.subtree("", 2236, (-2));
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = null;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = null;
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie2.put("", (AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      patriciaTrie2.clear();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("KF>%0smyF[\u0005\"l", "KF>%0smyF[\u0005\"l", 2403);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = (Object) "KF>%0smyF[\u0005\"l";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=KF>%0smyF[\u0005\"l [2403], value=KF>%0smyF[\u0005\"l, parent=null, left=KF>%0smyF[\u0005\"l [2403], right=null, predecessor=KF>%0smyF[\u0005\"l [2403])", string0);
      assertNotNull(string0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("yE/7<&H_cb");
      assertFalse(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Integer integer0 = new Integer(1155);
      assertEquals(1155, (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.put("Entry(key=KF>%0smyF[\u0005\"l [2403], value=KF>%0smyF[\u0005\"l, parent=null, left=KF>%0smyF[\u0005\"l [2403], right=null, predecessor=KF>%0smyF[\u0005\"l [2403])", "UHu!c#");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string2 = patriciaTrie1.put("A", "");
      assertNull(string2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.subtree((String) null, 2403, (-1397));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("b|MEDx$R?Z[Wa3", integer0);
      assertNull(integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = hashMap0.put("b|MEDx$R?Z[Wa3", integer0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Integer integer4 = hashMap0.put("b|MEDx$R?Z[Wa3", integer2);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Integer integer5 = new Integer((-2055));
      assertEquals((-2055), (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      
      Integer integer6 = hashMap0.put("b|MEDx$R?Z[Wa3", integer5);
      assertEquals(0, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("b|MEDx$R?Z[Wa3", integer5, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Object object0 = patriciaTrie0.put("|]vjrk*#FDHO=HMQ", ")j8=0!e.;_m(jXtS");
      assertNull(object0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      boolean boolean0 = patriciaTrie0.replace("b|MEDx$R?Z[Wa3", (Object) "b|MEDx$R?Z[Wa3", (Object) ")j8=0!e.;_m(jXtS");
      assertFalse(boolean0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      Object object1 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertEquals("b|MEDx$R?Z[Wa3", object1);
      assertNotNull(object1);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = 1249;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Object object2 = patriciaTrie0.put("b|MEDx$R?Z[Wa3", "b|MEDx$R?Z[Wa3");
      assertEquals((-2055), object2);
      assertNotNull(object2);
      assertFalse(object2.equals((Object)integer4));
      assertFalse(object2.equals((Object)integer6));
      assertFalse(object2.equals((Object)integer2));
      assertFalse(object2.equals((Object)integer3));
      assertFalse(object2.equals((Object)integer0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("|]vjrk*#FDHO=HMQ", integer3, 1249);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(integer0.equals((Object)object2));
      assertTrue(integer0.equals((Object)integer6));
      assertFalse(integer0.equals((Object)integer5));
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)object2));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer5));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lastEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains(")j8=0!e.;_m(jXtS"));
      assertFalse(collection0.contains(1249));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      patriciaTrie2.decrementSize();
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put(" CA?+YI3hv3:", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.previousKey("Trie[0]={\n}\n");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(set1.contains(string0));
      assertTrue(set1.contains(" CA?+YI3hv3:"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      String string2 = patriciaTrie2.put("Trie[0]={\n}\n", "");
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, (-2563));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 1641);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Object, String>(set0, "", (-2191));
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      String string3 = abstractPatriciaTrie_TrieEntry5.setValue("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Comparable<Integer>>, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      String string4 = abstractPatriciaTrie_TrieEntry5.toString();
      assertEquals("Entry(key=[Entry(key= CA?+YI3hv3: [10], value=-1, parent=ROOT, left=ROOT, right= CA?+YI3hv3: [10], predecessor= CA?+YI3hv3: [10])] [-2191], value=, parent=null, left=[Entry(key= CA?+YI3hv3: [10], value=-1, parent=ROOT, left=ROOT, right= CA?+YI3hv3: [10], predecessor= CA?+YI3hv3: [10])] [-2191], right=null, predecessor=[Entry(key= CA?+YI3hv3: [10], value=-1, parent=ROOT, left=ROOT, right= CA?+YI3hv3: [10], predecessor= CA?+YI3hv3: [10])] [-2191])", string4);
      assertNotNull(string4);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      String string5 = abstractPatriciaTrie_TrieEntry5.toString();
      assertEquals("Entry(key=[Entry(key= CA?+YI3hv3: [10], value=-1, parent=ROOT, left=ROOT, right= CA?+YI3hv3: [10], predecessor= CA?+YI3hv3: [10])] [-2191], value=, parent=null, left=[Entry(key= CA?+YI3hv3: [10], value=-1, parent=ROOT, left=ROOT, right= CA?+YI3hv3: [10], predecessor= CA?+YI3hv3: [10])] [-2191], right=null, predecessor=[Entry(key= CA?+YI3hv3: [10], value=-1, parent=ROOT, left=ROOT, right= CA?+YI3hv3: [10], predecessor= CA?+YI3hv3: [10])] [-2191])", string5);
      assertNotNull(string5);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isEmpty();
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>((String) null, (AbstractMap.SimpleEntry<Integer, Object>) null, 2771);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      //  // Unstable assertion: assertNotNull(patriciaTrie0);
      
      Integer integer0 = patriciaTrie0.put("_1?,D%.NrL&TsN/FP", (Integer) null);
      //  // Unstable assertion: assertNull(integer0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap("_1?,D%.NrL&TsN/FP", "_1?,D%.NrL&TsN/FP");
      //  // Unstable assertion: assertNotNull(sortedMap0);
      //  // Unstable assertion: assertTrue(sortedMap0.isEmpty());
      //  // Unstable assertion: assertEquals(0, sortedMap0.size());
      
      boolean boolean0 = patriciaTrie0.remove((Object) "value=", (Object) "value=");
      //  // Unstable assertion: assertFalse(boolean0);
      
      Integer integer1 = patriciaTrie0.put("value=", (Integer) null);
      //  // Unstable assertion: assertNull(integer1);
      
      Integer integer2 = new Integer((-1863));
      //  // Unstable assertion: assertEquals((-1863), (int)integer2);
      //  // Unstable assertion: assertNotNull(integer2);
      
      Integer integer3 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer2);
      //  // Unstable assertion: assertNull(integer3);
      
      Integer integer4 = new Integer((-3));
      //  // Unstable assertion: assertEquals((-3), (int)integer4);
      //  // Unstable assertion: assertNotNull(integer4);
      //  // Unstable assertion: assertFalse(integer4.equals((Object)integer2));
      
      Integer integer5 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer4);
      //  // Unstable assertion: assertEquals((-1863), (int)integer5);
      //  // Unstable assertion: assertNotNull(integer5);
      //  // Unstable assertion: assertFalse(integer4.equals((Object)integer2));
      //  // Unstable assertion: assertFalse(integer5.equals((Object)integer4));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("_1?,D%.NrL&TsN/FP", (-1863));
      //  // Unstable assertion: assertNotNull(abstractPatriciaTrie_TrieEntry0);
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      //  // Unstable assertion: assertNotNull(patriciaTrie1);
      //  // Unstable assertion: assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertNotSame(patriciaTrie0, patriciaTrie1);
      //  // Unstable assertion: assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      //  // Unstable assertion: assertNotNull(patriciaTrie2);
      //  // Unstable assertion: assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      //  // Unstable assertion: assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer6 = patriciaTrie0.put("bS&HlH]m4ZWm7xeut", (Integer) null);
      //  // Unstable assertion: assertNull(integer6);
      //  // Unstable assertion: assertNotSame(patriciaTrie0, patriciaTrie1);
      //  // Unstable assertion: assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Integer integer7 = new Integer((-1863));
      //  // Unstable assertion: assertEquals((-1863), (int)integer7);
      //  // Unstable assertion: assertNotNull(integer7);
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer5));
      //  // Unstable assertion: assertFalse(integer7.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<String>>(integer7, "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", (-3));
      //  // Unstable assertion: assertNotNull(abstractPatriciaTrie_TrieEntry1);
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer5));
      //  // Unstable assertion: assertFalse(integer7.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer2));
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Integer integer8 = new Integer((-1863));
      //  // Unstable assertion: assertEquals((-1863), (int)integer8);
      //  // Unstable assertion: assertNotNull(integer8);
      //  // Unstable assertion: assertTrue(integer8.equals((Object)integer2));
      //  // Unstable assertion: assertTrue(integer8.equals((Object)integer7));
      //  // Unstable assertion: assertTrue(integer8.equals((Object)integer5));
      //  // Unstable assertion: assertFalse(integer8.equals((Object)integer4));
      
      Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry1.setKeyValue(integer8, "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      //  // Unstable assertion: assertEquals("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", comparable0);
      //  // Unstable assertion: assertNotNull(comparable0);
      //  // Unstable assertion: assertTrue(integer8.equals((Object)integer2));
      //  // Unstable assertion: assertTrue(integer8.equals((Object)integer7));
      //  // Unstable assertion: assertTrue(integer8.equals((Object)integer5));
      //  // Unstable assertion: assertFalse(integer8.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer5));
      //  // Unstable assertion: assertFalse(integer7.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer2));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer8));
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Comparable<String> comparable1 = abstractPatriciaTrie_TrieEntry1.value;
      //  // Unstable assertion: assertEquals("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", comparable1);
      //  // Unstable assertion: assertNotNull(comparable1);
      //  // Unstable assertion: assertNotSame(comparable1, comparable0);
      //  // Unstable assertion: assertTrue(comparable1.equals((Object)comparable0));
      
      Object object0 = patriciaTrie2.remove((Object) comparable1);
      //  // Unstable assertion: assertEquals((-3), object0);
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertNotSame(patriciaTrie0, patriciaTrie1);
      //  // Unstable assertion: assertNotSame(comparable1, comparable0);
      //  // Unstable assertion: assertNotSame(patriciaTrie1, patriciaTrie0);
      //  // Unstable assertion: assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      //  // Unstable assertion: assertTrue(comparable1.equals((Object)comparable0));
      //  // Unstable assertion: assertFalse(object0.equals((Object)integer2));
      //  // Unstable assertion: assertFalse(object0.equals((Object)integer8));
      //  // Unstable assertion: assertFalse(object0.equals((Object)integer5));
      //  // Unstable assertion: assertFalse(object0.equals((Object)integer7));
      //  // Unstable assertion: assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer5));
      //  // Unstable assertion: assertFalse(integer7.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer2));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer8));
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("_1?,D%.NrL&TsN/FP", "<*+m}9");
      //  // Unstable assertion: assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Integer>(abstractMap_SimpleImmutableEntry0, integer4, (-3));
      //  // Unstable assertion: assertNotNull(abstractPatriciaTrie_TrieEntry2);
      //  // Unstable assertion: assertFalse(integer4.equals((Object)integer7));
      //  // Unstable assertion: assertFalse(integer4.equals((Object)integer8));
      //  // Unstable assertion: assertFalse(integer4.equals((Object)integer2));
      //  // Unstable assertion: assertFalse(integer4.equals((Object)integer5));
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = abstractPatriciaTrie_TrieEntry2.key;
      //  // Unstable assertion: assertNotNull(abstractMap_SimpleImmutableEntry1);
      //  // Unstable assertion: assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.get(abstractMap_SimpleImmutableEntry1);
//       //  fail("Expecting exception: ClassCastException");
       // Unstable assertion
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.put("", "))S_ilqj");
      assertNull(string0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string1 = patriciaTrie0.putIfAbsent("`cJ", "");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("B(1&]]wtT", "gC");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("gC", "gC");
      assertNull(string1);
      
      String string2 = patriciaTrie0.putIfAbsent("org.apache.commons.collections4.tnie.AbstractPatriciaTriz$KeySet", "org.apache.commons.collections4.tnie.AbstractPatriciaTriz$KeySet");
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string3 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertEquals("gC", string3);
      assertNotNull(string3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("=", "=", 2295);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Integer integer0 = new Integer(2295);
      assertEquals(2295, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(integer0);
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", "", (-404));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry1.equals(abstractPatriciaTrie_TrieEntry0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-340));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      Object object0 = patriciaTrie0.put("", "");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.floorEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      Object object1 = patriciaTrie0.remove((Object) "gQ2]?P");
      assertNull(object1);
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie0.prefixMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap");
      assertNotNull(sortedMap1);
      assertFalse(sortedMap1.equals((Object)sortedMap0));
      assertEquals(0, sortedMap1.size());
      assertTrue(sortedMap1.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = new Integer((-404));
      assertEquals((-404), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = patriciaTrie1.put("5Uq,", integer1);
      assertNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      String string0 = patriciaTrie1.lastKey();
      assertEquals("5Uq,", string0);
      assertNotNull(string0);
      
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, (Object) null);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, Object>>(integer1, abstractMap_SimpleEntry0, (-340));
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      boolean boolean2 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
      assertFalse(boolean2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("r8(", "R");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("  ", "hT^0H@");
      assertNull(string2);
      
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "hT^0H@", (-1662));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      String string3 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=76 [-1662], value=hT^0H@, parent=null, left=76 [-1662], right=null, predecessor=76 [-1662])", string3);
      assertNotNull(string3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      String string4 = patriciaTrie1.nextKey("Cannot determine prefix outside of Character boundaries");
      assertNull(string4);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("]<04,<GmQy$)1vS9-b");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("r8(", 2272, 1588);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      //  // Unstable assertion: assertNotNull(patriciaTrie0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap("_1?,D%.NrL&TsN/FP", "_1?,D%.NrL&TsN/FP");
      //  // Unstable assertion: assertNotNull(sortedMap0);
      //  // Unstable assertion: assertEquals(0, sortedMap0.size());
      //  // Unstable assertion: assertTrue(sortedMap0.isEmpty());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = patriciaTrie0.remove((Object) "value=", (Object) "value=");
      //  // Unstable assertion: assertFalse(boolean0);
      
      Integer integer0 = patriciaTrie0.put("value=", (Integer) null);
      //  // Unstable assertion: assertNull(integer0);
      
      patriciaTrie0.forEach(biConsumer0);
      Integer integer1 = new Integer((-1863));
      //  // Unstable assertion: assertEquals((-1863), (int)integer1);
      //  // Unstable assertion: assertNotNull(integer1);
      
      Integer integer2 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer1);
      //  // Unstable assertion: assertNull(integer2);
      
      Integer integer3 = new Integer((-3));
      //  // Unstable assertion: assertEquals((-3), (int)integer3);
      //  // Unstable assertion: assertNotNull(integer3);
      //  // Unstable assertion: assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer3);
      //  // Unstable assertion: assertEquals((-1863), (int)integer4);
      //  // Unstable assertion: assertNotNull(integer4);
      //  // Unstable assertion: assertFalse(integer3.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(integer4.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("_1?,D%.NrL&TsN/FP", (-1863));
      //  // Unstable assertion: assertNotNull(abstractPatriciaTrie_TrieEntry0);
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      //  // Unstable assertion: assertNotNull(patriciaTrie1);
      //  // Unstable assertion: assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertNotSame(patriciaTrie0, patriciaTrie1);
      //  // Unstable assertion: assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      //  // Unstable assertion: assertNotNull(patriciaTrie2);
      //  // Unstable assertion: assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      //  // Unstable assertion: assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer5 = patriciaTrie0.put("bS&HlH]m4ZWm7xeut", (Integer) null);
      //  // Unstable assertion: assertNull(integer5);
      //  // Unstable assertion: assertNotSame(patriciaTrie0, patriciaTrie1);
      //  // Unstable assertion: assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Integer integer6 = new Integer((-1863));
      //  // Unstable assertion: assertEquals((-1863), (int)integer6);
      //  // Unstable assertion: assertNotNull(integer6);
      //  // Unstable assertion: assertFalse(integer6.equals((Object)integer3));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<String>>(integer6, "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", (-3));
      //  // Unstable assertion: assertNotNull(abstractPatriciaTrie_TrieEntry1);
      //  // Unstable assertion: assertFalse(integer6.equals((Object)integer3));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Integer integer7 = new Integer((-1863));
      //  // Unstable assertion: assertEquals((-1863), (int)integer7);
      //  // Unstable assertion: assertNotNull(integer7);
      //  // Unstable assertion: assertFalse(integer7.equals((Object)integer3));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer1));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer6));
      
      Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry1.setKeyValue(integer7, "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      //  // Unstable assertion: assertEquals("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", comparable0);
      //  // Unstable assertion: assertNotNull(comparable0);
      //  // Unstable assertion: assertFalse(integer7.equals((Object)integer3));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer1));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer6));
      //  // Unstable assertion: assertFalse(integer6.equals((Object)integer3));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer7));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Comparable<String> comparable1 = abstractPatriciaTrie_TrieEntry1.value;
      //  // Unstable assertion: assertEquals("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", comparable1);
      //  // Unstable assertion: assertNotNull(comparable1);
      //  // Unstable assertion: assertNotSame(comparable1, comparable0);
      //  // Unstable assertion: assertTrue(comparable1.equals((Object)comparable0));
      
      Object object0 = patriciaTrie2.remove((Object) comparable1);
      //  // Unstable assertion: assertEquals((-3), object0);
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertNotSame(patriciaTrie0, patriciaTrie1);
      //  // Unstable assertion: assertNotSame(comparable1, comparable0);
      //  // Unstable assertion: assertNotSame(patriciaTrie1, patriciaTrie0);
      //  // Unstable assertion: assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      //  // Unstable assertion: assertTrue(comparable1.equals((Object)comparable0));
      //  // Unstable assertion: assertFalse(object0.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(object0.equals((Object)integer4));
      //  // Unstable assertion: assertFalse(object0.equals((Object)integer7));
      //  // Unstable assertion: assertFalse(object0.equals((Object)integer6));
      //  // Unstable assertion: assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      //  // Unstable assertion: assertFalse(integer6.equals((Object)integer3));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer7));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("_1?,D%.NrL&TsN/FP", "<*+m}9");
      //  // Unstable assertion: assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Integer>(abstractMap_SimpleImmutableEntry0, integer3, (-3));
      //  // Unstable assertion: assertNotNull(abstractPatriciaTrie_TrieEntry2);
      //  // Unstable assertion: assertFalse(integer3.equals((Object)integer6));
      //  // Unstable assertion: assertFalse(integer3.equals((Object)integer7));
      //  // Unstable assertion: assertFalse(integer3.equals((Object)integer4));
      //  // Unstable assertion: assertFalse(integer3.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = abstractPatriciaTrie_TrieEntry2.key;
      //  // Unstable assertion: assertNotNull(abstractMap_SimpleImmutableEntry1);
      //  // Unstable assertion: assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.get(abstractMap_SimpleImmutableEntry1);
//       //  fail("Expecting exception: ClassCastException");
       // Unstable assertion
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
      assertNull(string0);
      
      String string1 = patriciaTrie0.previousKey("");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("Mc2d%dm8", "");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("Vmhi)K1M", (String) null);
      assertNull(string3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Object object1 = patriciaTrie1.remove((Object) "");
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", object1);
      assertNotNull(object1);
      
      Object object2 = patriciaTrie1.replace("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", (Object) "");
      assertNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("b(D/zo");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      //  // Unstable assertion: assertNotNull(patriciaTrie0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap("_1?,D%.NrL&TsN/FP", "_1?,D%.NrL&TsN/FP");
      //  // Unstable assertion: assertNotNull(sortedMap0);
      //  // Unstable assertion: assertEquals(0, sortedMap0.size());
      //  // Unstable assertion: assertTrue(sortedMap0.isEmpty());
      
      boolean boolean0 = patriciaTrie0.remove((Object) "value=", (Object) "value=");
      //  // Unstable assertion: assertFalse(boolean0);
      
      Integer integer0 = patriciaTrie0.put("value=", (Integer) null);
      //  // Unstable assertion: assertNull(integer0);
      
      Integer integer1 = new Integer((-1863));
      //  // Unstable assertion: assertEquals((-1863), (int)integer1);
      //  // Unstable assertion: assertNotNull(integer1);
      
      Integer integer2 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer1);
      //  // Unstable assertion: assertNull(integer2);
      
      Integer integer3 = new Integer((-3));
      //  // Unstable assertion: assertEquals((-3), (int)integer3);
      //  // Unstable assertion: assertNotNull(integer3);
      //  // Unstable assertion: assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer3);
      //  // Unstable assertion: assertEquals((-1863), (int)integer4);
      //  // Unstable assertion: assertNotNull(integer4);
      //  // Unstable assertion: assertFalse(integer3.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(integer4.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("_1?,D%.NrL&TsN/FP", (-1863));
      //  // Unstable assertion: assertNotNull(abstractPatriciaTrie_TrieEntry0);
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      //  // Unstable assertion: assertNotNull(patriciaTrie1);
      //  // Unstable assertion: assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertNotSame(patriciaTrie0, patriciaTrie1);
      //  // Unstable assertion: assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      //  // Unstable assertion: assertNotNull(patriciaTrie2);
      //  // Unstable assertion: assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      //  // Unstable assertion: assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer5 = patriciaTrie0.put("bS&HlH]m4ZWm7xeut", (Integer) null);
      //  // Unstable assertion: assertNull(integer5);
      //  // Unstable assertion: assertNotSame(patriciaTrie0, patriciaTrie1);
      //  // Unstable assertion: assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Integer integer6 = new Integer((-1863));
      //  // Unstable assertion: assertEquals((-1863), (int)integer6);
      //  // Unstable assertion: assertNotNull(integer6);
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(integer6.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<String>>(integer6, "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", (-3));
      //  // Unstable assertion: assertNotNull(abstractPatriciaTrie_TrieEntry1);
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(integer6.equals((Object)integer3));
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Integer integer7 = new Integer((-1863));
      //  // Unstable assertion: assertEquals((-1863), (int)integer7);
      //  // Unstable assertion: assertNotNull(integer7);
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer6));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer1));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer4));
      //  // Unstable assertion: assertFalse(integer7.equals((Object)integer3));
      
      Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry1.setKeyValue(integer7, "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      //  // Unstable assertion: assertEquals("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", comparable0);
      //  // Unstable assertion: assertNotNull(comparable0);
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(integer6.equals((Object)integer3));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer7));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer6));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer1));
      //  // Unstable assertion: assertTrue(integer7.equals((Object)integer4));
      //  // Unstable assertion: assertFalse(integer7.equals((Object)integer3));
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Comparable<String> comparable1 = abstractPatriciaTrie_TrieEntry1.value;
      //  // Unstable assertion: assertEquals("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", comparable1);
      //  // Unstable assertion: assertNotNull(comparable1);
      //  // Unstable assertion: assertNotSame(comparable1, comparable0);
      //  // Unstable assertion: assertTrue(comparable1.equals((Object)comparable0));
      
      Object object0 = patriciaTrie2.remove((Object) comparable1);
      //  // Unstable assertion: assertEquals((-3), object0);
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertNotSame(patriciaTrie0, patriciaTrie1);
      //  // Unstable assertion: assertNotSame(comparable1, comparable0);
      //  // Unstable assertion: assertNotSame(patriciaTrie1, patriciaTrie0);
      //  // Unstable assertion: assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      //  // Unstable assertion: assertTrue(comparable1.equals((Object)comparable0));
      //  // Unstable assertion: assertFalse(object0.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(object0.equals((Object)integer6));
      //  // Unstable assertion: assertFalse(object0.equals((Object)integer7));
      //  // Unstable assertion: assertFalse(object0.equals((Object)integer4));
      //  // Unstable assertion: assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(integer6.equals((Object)integer3));
      //  // Unstable assertion: assertTrue(integer6.equals((Object)integer7));
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("_1?,D%.NrL&TsN/FP", "<*+m}9");
      //  // Unstable assertion: assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Integer>(abstractMap_SimpleImmutableEntry0, integer3, (-3));
      //  // Unstable assertion: assertNotNull(abstractPatriciaTrie_TrieEntry2);
      //  // Unstable assertion: assertFalse(integer3.equals((Object)integer1));
      //  // Unstable assertion: assertFalse(integer3.equals((Object)integer6));
      //  // Unstable assertion: assertFalse(integer3.equals((Object)integer7));
      //  // Unstable assertion: assertFalse(integer3.equals((Object)integer4));
      //  // Unstable assertion: assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      //  // Unstable assertion: assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = abstractPatriciaTrie_TrieEntry2.key;
      //  // Unstable assertion: assertNotNull(abstractMap_SimpleImmutableEntry1);
      //  // Unstable assertion: assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.get(abstractMap_SimpleImmutableEntry1);
//       //  fail("Expecting exception: ClassCastException");
       // Unstable assertion
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = patriciaTrie1.remove((Object) ":");
      assertNull(integer0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer1 = patriciaTrie1.selectValue("keyAnalyzer");
      assertNull(integer1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("=6Un");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertTrue(set0.contains(""));
      assertFalse(set0.contains("=6Un"));
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie1);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = patriciaTrie1.put("  ", (AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      patriciaTrie1.clear();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.lowerEntry("(Iv(x)L0]3L");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("-w^;K.E'LM&NY9", "Nk_", (-2599));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("M.1$", "-w^;K.E'LM&NY9", (-2599));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      int int0 = patriciaTrie0.lengthInBits("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertEquals(1072, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("M.1$", "Nk_", (-2599));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("must have a from or to!", "-w^;K.E'LM&NY9", (-2372));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      Object object0 = abstractPatriciaTrie_TrieEntry3.getKey();
      assertEquals("must have a from or to!", object0);
      assertNotNull(object0);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("must have a from or to!");
      assertFalse(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      
      String string0 = patriciaTrie0.put("-w^;K.E'LM&NY9", (String) null);
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry4);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", (String) null, (-2372));
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry7 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry1, "-w^;K.E'LM&NY9", (-1701));
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      
      Integer integer0 = new Integer((-2599));
      assertEquals((-2599), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry8 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("-w^;K.E'LM&NY9", "Failed to put: ", 112);
      assertNotNull(abstractPatriciaTrie_TrieEntry8);
      assertFalse(abstractPatriciaTrie_TrieEntry8.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry8.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry8.isInternalNode());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry8.isExternalNode();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry8.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry8.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry8.isInternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = patriciaTrie1.selectValue((String) null);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<Object>> abstractPatriciaTrie_TrieEntry9 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<Object>>((Comparable<Object>) null, (Comparable<Object>) null, 80);
      assertNotNull(abstractPatriciaTrie_TrieEntry9);
      assertFalse(abstractPatriciaTrie_TrieEntry9.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry9.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry9.isExternalNode());
      
      boolean boolean2 = abstractPatriciaTrie_TrieEntry9.isExternalNode();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(abstractPatriciaTrie_TrieEntry9.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry9.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry9.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie0);
      
      Collection<Comparable<Object>> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      String string0 = " KZ`q92>]<dKKZwS";
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      Comparable<Object> comparable1 = patriciaTrie0.put(" KZ`q92>]<dKKZwS", comparable0);
      assertNull(comparable1);
      
      OrderedMapIterator<String, Comparable<Object>> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(orderedMapIterator0.hasNext());
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("(Y\"F,#W3eAyX4_pe9", 762);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.put((String) null, (Comparable<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "R";
      String string1 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string1);
      
      String string2 = patriciaTrie0.putIfAbsent("r8(", "R");
      assertNull(string2);
      
      String string3 = "  ";
      String string4 = patriciaTrie0.put("  ", "hT^0H@");
      assertNull(string4);
      
      String string5 = patriciaTrie0.put("A", "=6Un");
      assertNull(string5);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("=6Un");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("  ", 0, (-956));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("-w^;K.E'LM&NY9", "Nk_", (-2599));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("M.1$", "-w^;K.E'LM&NY9", (-2599));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      int int0 = patriciaTrie0.lengthInBits("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertEquals(1072, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("M.1$", "Nk_", (-2599));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("must have a from or to!", "-w^;K.E'LM&NY9", (-2372));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      Object object0 = abstractPatriciaTrie_TrieEntry3.getKey();
      assertEquals("must have a from or to!", object0);
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("must have a from or to!");
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      
      String string0 = patriciaTrie0.put("-w^;K.E'LM&NY9", (String) null);
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry4);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      
      Map.Entry<String, String> map_Entry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", (String) null, (-2372));
      assertNotNull(map_Entry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry1, "-w^;K.E'LM&NY9", (-1701));
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      
      String string1 = abstractPatriciaTrie_TrieEntry6.setValue("a[+_!_");
      assertEquals("-w^;K.E'LM&NY9", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)object0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Comparable<Integer>>, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      String string2 = abstractPatriciaTrie_TrieEntry6.toString();
      assertEquals("Entry(key=Entry(key=M.1$ [-2599], value=-w^;K.E'LM&NY9, parent=-w^;K.E'LM&NY9 [-2599], left=M.1$ [-2599], right=null, predecessor=M.1$ [-2599]) [-1701], value=a[+_!_, parent=null, left=Entry(key=M.1$ [-2599], value=-w^;K.E'LM&NY9, parent=-w^;K.E'LM&NY9 [-2599], left=M.1$ [-2599], right=null, predecessor=M.1$ [-2599]) [-1701], right=null, predecessor=Entry(key=M.1$ [-2599], value=-w^;K.E'LM&NY9, parent=-w^;K.E'LM&NY9 [-2599], left=M.1$ [-2599], right=null, predecessor=M.1$ [-2599]) [-1701])", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      
      String string3 = abstractPatriciaTrie_TrieEntry6.toString();
      assertEquals("Entry(key=Entry(key=M.1$ [-2599], value=-w^;K.E'LM&NY9, parent=-w^;K.E'LM&NY9 [-2599], left=M.1$ [-2599], right=null, predecessor=M.1$ [-2599]) [-1701], value=a[+_!_, parent=null, left=Entry(key=M.1$ [-2599], value=-w^;K.E'LM&NY9, parent=-w^;K.E'LM&NY9 [-2599], left=M.1$ [-2599], right=null, predecessor=M.1$ [-2599]) [-1701], right=null, predecessor=Entry(key=M.1$ [-2599], value=-w^;K.E'LM&NY9, parent=-w^;K.E'LM&NY9 [-2599], left=M.1$ [-2599], right=null, predecessor=M.1$ [-2599]) [-1701])", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)object0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry7 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry7);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put(" CA?+YI3hv3:", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.previousKey("Trie[0]={\n}\n");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(set1.contains(""));
      assertTrue(set1.contains(" CA?+YI3hv3:"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      boolean boolean0 = patriciaTrie1.containsKey("");
      assertFalse(boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie3);
      
      Integer integer5 = new Integer((-1728));
      assertEquals((-1728), (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer5, (String) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      
      Integer integer6 = new Integer(1637);
      assertEquals(1637, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("Failed to put: ", "Trie[0]={\n}\n", (-1606));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isExternalNode();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Integer integer7 = patriciaTrie0.selectValue((String) null);
      assertEquals((-1), (int)integer7);
      assertNotNull(integer7);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("KF>%0smyF[\u0005\"l", "KF>%0smyF[\u0005\"l", 2403);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = (Object) "KF>%0smyF[\u0005\"l";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Integer integer0 = new Integer(2403);
      assertEquals(2403, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0.key, integer0, (-3357));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=KF>%0smyF[\u0005\"l [2403], value=KF>%0smyF[\u0005\"l, parent=null, left=KF>%0smyF[\u0005\"l [2403], right=KF>%0smyF[\u0005\"l [-3357], predecessor=KF>%0smyF[\u0005\"l [2403])", string0);
      assertNotNull(string0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("yE/7<&H_cb");
      assertFalse(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("yE/7<&H_cb", "yE/7<&H_cb", 2403);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry0.right;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.value = (Object) "yE/7<&H_cb";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("  ", "hT^0H@");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("=6Un");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains("=6Un"));
      assertTrue(set0.contains("  "));
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie1);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = patriciaTrie1.put("  ", (AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      patriciaTrie1.clear();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.lowerEntry("(Iv(x)L0]3L");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(860);
      assertEquals(860, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("}\n", integer0);
      assertNull(integer1);
      
      int int0 = 0;
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      int int1 = (-2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.subtree("", 2236, (-2));
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = patriciaTrie2.put("}\n", (AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      patriciaTrie2.clear();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(860);
      assertEquals(860, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("}\n", integer0);
      assertNull(integer1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      int int0 = (-2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.subtree("", 2236, (-2));
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains("}\n"));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = null;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = null;
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie2.put("}\n", (AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      patriciaTrie2.clear();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.replaceAll(biFunction0);
      String string1 = patriciaTrie0.putIfAbsent("P^^~>].x", "P^^~>].x");
      assertNull(string1);
      
      String string2 = "r8\\(";
      String string3 = patriciaTrie0.putIfAbsent("r8(", "");
      assertNull(string3);
      
      String string4 = "  ";
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextKey((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = patriciaTrie0.put(" CA?+YI3hv3:", integer0);
      assertNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.previousKey("Trie[0]={\n}\n");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(set1.contains(string0));
      assertTrue(set1.contains(" CA?+YI3hv3:"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(orderedMapIterator0.hasNext());
      
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      boolean boolean0 = patriciaTrie1.containsKey("");
      assertFalse(boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie3);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextKey((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = patriciaTrie0.put(",w'", integer0);
      assertNull(integer1);
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie0.previousKey(",w'");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set1 = patriciaTrie1.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(set1.contains(string0));
      assertTrue(set1.contains(",w'"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(orderedMapIterator0.hasNext());
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      boolean boolean0 = patriciaTrie0.containsKey((Object) null);
      assertFalse(boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie3);
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer3, ">1Z >,i");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer((-1728));
      assertEquals((-1728), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("(bIIbOLk", "(bIIbOLk");
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("(bIIbOLk", 0, (-956));
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.ceilingEntry("K");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertNotNull(set0);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(set0.contains("K"));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("K", "hT^0H@", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = patriciaTrie2.put("", (AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      patriciaTrie2.clear();
      patriciaTrie2.incrementSize();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.lowerEntry("jUd#S!4['pyE}n2C");
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("-w^;K.E'LM&NY9", "Nk_", (-2599));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("M.1$", "-w^;K.E'LM&NY9", (-2599));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      int int0 = patriciaTrie0.lengthInBits("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertEquals(1072, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("M.1$", "Nk_", (-2599));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("must have a from or to!", "-w^;K.E'LM&NY9", (-2372));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      Object object0 = abstractPatriciaTrie_TrieEntry3.getKey();
      assertEquals("must have a from or to!", object0);
      assertNotNull(object0);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("must have a from or to!");
      assertFalse(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      
      String string0 = patriciaTrie0.put("-w^;K.E'LM&NY9", (String) null);
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry4);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertNotNull(map_Entry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "-w^;K.E'LM&NY9", (-1701));
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
      
      String string1 = abstractPatriciaTrie_TrieEntry6.setValue("a[+_!_");
      assertEquals("-w^;K.E'LM&NY9", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)object0));
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Comparable<Integer>>, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      String string2 = abstractPatriciaTrie_TrieEntry6.toString();
      assertEquals("Entry(key=null [-1701], value=a[+_!_, parent=null, left=null [-1701], right=null, predecessor=null [-1701])", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
      
      String string3 = abstractPatriciaTrie_TrieEntry6.toString();
      assertEquals("Entry(key=null [-1701], value=a[+_!_, parent=null, left=null [-1701], right=null, predecessor=null [-1701])", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry7 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry7);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.previousKey(",w'");
      assertNull(string0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      boolean boolean0 = patriciaTrie0.containsKey((Object) null);
      assertFalse(boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie3);
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer1, ">1Z >,i");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1728));
      assertEquals((-1728), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = patriciaTrie0.containsKey("|~9;3>");
      assertFalse(boolean0);
      
      patriciaTrie0.forEach(biConsumer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry(">");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(272);
      assertEquals(272, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = hashMap0.remove((Object) integer0, (Object) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("#vskIT_:>ld}bR", "~Y-@.&apqxyw:9Sv");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.put((String) null, ">");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      SortedMap<String, String> sortedMap0 = patriciaTrie2.headMap("}\n");
      assertNotNull(sortedMap0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      Comparator<? super String> comparator0 = patriciaTrie2.comparator();
      assertNotNull(comparator0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = patriciaTrie0.put(",w'", integer0);
      assertNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.previousKey(",w'");
      assertNull(string0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set1 = patriciaTrie1.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(set1.contains(",w'"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, (Integer) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      
      // Undeclared exception!
//      try { 
        abstractMap_SimpleImmutableEntry0.setValue(integer2);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      String string0 = function0.apply("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string1 = patriciaTrie0.computeIfAbsent("FromKey is out of range: ", function0);
      assertEquals("FromKey is out of range: ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = patriciaTrie0.put("", "");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("FromKey is out of range: ", "");
      assertEquals("FromKey is out of range: ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      Collection<String> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains(string1));
      assertTrue(collection0.contains(string0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("]={\n");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string4 = patriciaTrie0.toString();
      assertEquals("Trie[2]={\n  RootEntry(key= [-1], value=, parent=null, left=FromKey is out of range:  [9], right=null, predecessor=FromKey is out of range:  [9])\n  Entry(key=FromKey is out of range:  [9], value=, parent=ROOT, left=ROOT, right=FromKey is out of range:  [9], predecessor=FromKey is out of range:  [9])\n}\n", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = patriciaTrie0.nextKey("FromKey is out of range: ");
      assertNull(string5);
      
      String string6 = patriciaTrie0.put("]={\n", (String) null);
      assertNull(string6);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Integer integer0 = new Integer(32768);
      assertEquals(32768, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>(function0, "", 562);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, abstractPatriciaTrie_TrieEntry2);
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("r8(", "R");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("  ", "hT^0H@");
      assertNull(string2);
      
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "hT^0H@", (-1662));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      String string3 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=76 [-1662], value=hT^0H@, parent=null, left=76 [-1662], right=null, predecessor=76 [-1662])", string3);
      assertNotNull(string3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      String string4 = patriciaTrie1.nextKey("Cannot determine prefix outside of Character boundaries");
      assertNull(string4);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("Entry(key=76 [-1662], value=hT^0H@, parent=null, left=76 [-1662], right=null, predecessor=76 [-1662])", "(=uv+6bD+*+Gb1KC", 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isEmpty();
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.putIfAbsent("r8(", "R");
      assertNull(string1);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      String string2 = patriciaTrie0.compute("  ", biFunction0);
      assertNull(string2);
      
      patriciaTrie0.decrementSize();
      Integer integer0 = new Integer((-1721));
      assertEquals((-1721), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("r8(");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = patriciaTrie1.putIfAbsent("NnJ[", "Z]gSa6vO0Bk*=y[7HF");
      assertNull(string0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = patriciaTrie1.putIfAbsent("jL]K((Q_ P", "\"`si)");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string2 = patriciaTrie1.put("R", "hT^0H@");
      assertNull(string2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string3 = patriciaTrie0.put("Z]gSa6vO0Bk*=y[7HF", "");
      assertNull(string3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry(">FPtE)D>{0=T|");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "Trie[";
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("Trie[", "Trie[");
      assertNull(object1);
      
      int int0 = 0;
      String string1 = patriciaTrie0.previousKey("  ");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = "The offsets and lengths must be at Character boundaries";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = "F:D^8ia#z7l6sx8Lg`";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string2 = "f-bG[#%k{psv8";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("F:D^8ia#z7l6sx8Lg`");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(integer0, abstractMap_SimpleEntry0, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry2.value;
      assertNotNull(abstractMap_SimpleEntry1);
      assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.remove((Object) abstractMap_SimpleEntry1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("(bIIbOLk", "(bIIbOLk");
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("(bIIbOLk", 0, (-956));
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.ceilingEntry("K");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertNotNull(set0);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(set0.contains("(bIIbOLk"));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("K", "hT^0H@", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = patriciaTrie2.put("", (AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      patriciaTrie2.clear();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.lowerEntry("jUd#S!4['pyE}n2C");
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "R";
      String string1 = patriciaTrie0.putIfAbsent("", "");
      assertNull(string1);
      
      String string2 = patriciaTrie0.putIfAbsent("r8(", "R");
      assertNull(string2);
      
      String string3 = "  ";
      String string4 = patriciaTrie0.put("  ", "hT^0H@");
      assertNull(string4);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("=6Un");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("  ", 0, (-956));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put(" CA?+YI3hv3:", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.previousKey("Trie[0]={\n}\n");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(set1.contains(" CA?+YI3hv3:"));
      assertFalse(set1.contains(string0));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      String string2 = patriciaTrie2.put("=6Un", "");
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.ceilingEntry("=6Un");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie3.subtree((String) null, (-547), (-2240));
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer((-1289));
      assertEquals((-1289), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("R", integer0);
      assertNull(integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Object object0 = patriciaTrie0.put(",;tE", ",;tE");
      assertNull(object0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = patriciaTrie0.replace("}\n", (Object) null, object1);
      assertFalse(boolean0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<String>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, Object>("", "}\n", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Object object2 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertEquals("", object2);
      assertNotNull(object2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Collection<Object> collection0 = patriciaTrie1.values();
      assertNotNull(collection0);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(collection0.contains("}\n"));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = null;
//      try {
        patriciaTrie3 = new PatriciaTrie<Integer>((Map<? extends String, ? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("Uo");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      Object object0 = patriciaTrie0.put("}\n", "}\n");
      assertNull(object0);
      
      String string0 = "s:p]&u))O>=iA-LK";
      String string1 = "^m;V,fi{pZQe[}S!M_,";
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = patriciaTrie0.put("s:p]&u))O>=iA-LK", (Object) null);
      assertNull(object1);
      
      Object object2 = patriciaTrie0.compute("^m;V,fi{pZQe[}S!M_,", biFunction0);
      assertNull(object2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("b|MEDx$R?Z[Wa3", integer0);
      assertNull(integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = hashMap0.put("b|MEDx$R?Z[Wa3", integer0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Integer integer4 = hashMap0.put("b|MEDx$R?Z[Wa3", integer2);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Integer integer5 = new Integer((-2055));
      assertEquals((-2055), (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      
      Integer integer6 = hashMap0.put("b|MEDx$R?Z[Wa3", integer5);
      assertEquals(0, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer3));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer5, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Object object0 = patriciaTrie0.put("|]vjrk*#FDHO=HMQ", ")j8=0!e.;_m(jXtS");
      assertNull(object0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      boolean boolean0 = patriciaTrie0.replace("", (Object) "", (Object) ")j8=0!e.;_m(jXtS");
      assertFalse(boolean0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      int int0 = patriciaTrie0.lengthInBits("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertEquals(1008, int0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string0 = patriciaTrie0.firstKey();
      assertEquals("b|MEDx$R?Z[Wa3", string0);
      assertNotNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(boolean1);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("}\n", "", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Object object1 = abstractPatriciaTrie_TrieEntry1.getValue();
      assertEquals("", object1);
      assertNotNull(object1);
      assertFalse(object1.equals((Object)string0));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      boolean boolean2 = hashMap1.remove((Object) "", (Object) "b|MEDx$R?Z[Wa3");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      String string1 = hashMap1.put("]", ";GuMz1L[$");
      assertNull(string1);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      String string2 = hashMap1.put("|]vjrk*#FDHO=HMQ", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertNull(string2);
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      assertNotNull(patriciaTrie1);
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      SortedMap<String, String> sortedMap0 = patriciaTrie1.headMap("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertNotNull(sortedMap0);
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      Comparator<? super String> comparator0 = patriciaTrie1.comparator();
      assertNotNull(comparator0);
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      assertNotNull(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Set<Map.Entry<String, String>> set1 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      assertNotNull(set1);
      assertSame(set1, set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string1 = patriciaTrie2.previousKey("invalid lookup: ");
      assertNull(string1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 1878;
      Integer integer0 = new Integer(1878);
      assertEquals(1878, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0, 1878);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.key = abstractMap_SimpleImmutableEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=1878=org.apache.commons.collections4.trie.AbstractBitwiseTrie [1878], value=1878=org.apache.commons.collections4.trie.AbstractBitwiseTrie, parent=null, left=1878=org.apache.commons.collections4.trie.AbstractBitwiseTrie [1878], right=null, predecessor=1878=org.apache.commons.collections4.trie.AbstractBitwiseTrie [1878])", string0);
      assertNotNull(string0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>(abstractPatriciaTrie_TrieEntry0.key, abstractMap_SimpleImmutableEntry0, 1878);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(boolean0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "", 1878);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      // Undeclared exception!
//      try { 
        abstractPatriciaTrie_TrieEntry0.key.setValue("5F56}CsQ`bXch");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1702);
      assertEquals(1702, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "");
      assertNotNull(abstractMap_SimpleEntry0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = new Integer(1702);
      assertEquals(1702, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, String>(integer1, "");
      assertNotNull(abstractMap_SimpleEntry1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry2 = patriciaTrie1.put("", abstractMap_SimpleEntry1);
      assertNull(abstractMap_SimpleEntry2);
      assertNotSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.higherEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Comparable<String>> patriciaTrie3 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie3);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = " <1^ZMS>6A88B";
      String string1 = patriciaTrie0.put(" <1^ZMS>6A88B", " <1^ZMS>6A88B");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string2 = "";
      // Undeclared exception!
//      try { 
        patriciaTrie0.subMap(" <1^ZMS>6A88B", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fromKey > toKey
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      String string1 = "";
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.previousKey("");
      patriciaTrie0.put("b(D/zo", "b(D/zo");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie1.replace((String) null, (Object) "");
      patriciaTrie1.lengthInBits("2!=");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("Trie[");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("&WLa1\"p", patriciaTrie0, (-1028));
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      patriciaTrie0.toString();
      patriciaTrie0.put(",w'", integer0);
      patriciaTrie0.entrySet();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      String string0 = patriciaTrie0.previousKey(",w'");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertTrue(set0.contains(",w'"));
      assertEquals(1, set0.size());
      
      patriciaTrie1.mapIterator();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie0.containsKey((Object) null);
      Map.Entry.comparingByValue();
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer2, "> >6i");
      Object object0 = new Object();
      Object object1 = new Object();
      patriciaTrie0.remove((Object) "Trie[0]={\n}\n");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("Trie[0]={\n}\n", ",w'", 0);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isExternalNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "Trie[";
      patriciaTrie0.keySet();
      patriciaTrie0.put("N,O02 QFeA%e", "N,O02 QFeA%e");
      patriciaTrie0.put("Trie[", "Trie[");
      int int0 = 0;
      patriciaTrie0.previousKey("  ");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 0);
      abstractPatriciaTrie_TrieEntry0.key = "The offsets and lengths must be at Character boundaries";
      abstractPatriciaTrie_TrieEntry0.key = "F:D^8ia#z7l6sx8Lg`";
      String string1 = "f-bG[#%k{psv8";
      patriciaTrie0.floorEntry("F:D^8ia#z7l6sx8Lg`");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(integer0, abstractMap_SimpleEntry0, 1);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry1.value;
      // Undeclared exception!
//      try { 
        patriciaTrie3.remove((Object) abstractMap_SimpleEntry1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.remove((Object) null);
      patriciaTrie0.putIfAbsent("r8(", "R");
      patriciaTrie0.put("  ", "hT^0H@");
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      patriciaTrie0.put("A", "=6Un");
      patriciaTrie0.ceilingEntry("=6Un");
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("  ", 0, (-898));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("0;&??Ot", "");
      patriciaTrie0.put("  ", "R");
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.putIfAbsent("r8(", "R");
      patriciaTrie0.put("r8(", "R");
      patriciaTrie0.put("  ", "hT^0H@");
      patriciaTrie0.put("A", "=6Un");
      patriciaTrie0.ceilingEntry("=6Un");
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("  ", 0, (-956));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.bitsPerElement();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Integer integer0 = new Integer(16);
      patriciaTrie0.put(":", integer0);
      patriciaTrie0.put(":", integer0);
      patriciaTrie0.replaceAll(biFunction0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie1.remove((Object) "");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", ":", 16);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
//      try { 
        patriciaTrie2.removeEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      int int0 = 0;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("key=", "key=", 0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("'K?H", "'K?H", 0);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry2);
      // Undeclared exception!
//      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0.right, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, patriciaTrie0, 0);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertTrue(boolean0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("]={\n", (Integer) null, 1788);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
      patriciaTrie2.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(9);
      patriciaTrie0.putIfAbsent("?ck[%S^", integer0);
      Integer integer1 = new Integer(1072);
      patriciaTrie0.higherEntry("?ck[%S^");
      patriciaTrie0.put("?ck[%S^", integer1);
      patriciaTrie0.incrementSize();
      Integer integer2 = new Integer(1072);
      patriciaTrie0.put("?ck[%S^", integer2);
      patriciaTrie0.firstEntry();
      // Undeclared exception!
//      try { 
        patriciaTrie0.tailMap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must have a from or to!
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.mapIterator();
      patriciaTrie0.put("m6R]^!F>IF7}", "null");
      String string0 = "9U5a'c|?^MaV;y)='Ct";
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet", "9U5a'c|?^MaV;y)='Ct");
      String string1 = null;
      // Undeclared exception!
//      try { 
        patriciaTrie0.tailMap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must have a from or to!
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.putIfAbsent("r8(", "R");
      patriciaTrie0.put("  ", "hT^0H@");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "UBBLByC!{sQ");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put((String) null, "r8(");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.headMap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must have a from or to!
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = null;
      int int0 = 32768;
      Integer integer0 = new Integer(32768);
      String string1 = "";
      patriciaTrie0.put("", integer0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.putIfAbsent((String) null, integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "R");
      // Undeclared exception!
//      try { 
        patriciaTrie0.putIfAbsent((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("KF>%0smyF[\u0005\"l", "KF>%0smyF[\u0005\"l", 2403);
      abstractPatriciaTrie_TrieEntry0.key = (Object) "KF>%0smyF[\u0005\"l";
      abstractPatriciaTrie_TrieEntry0.toString();
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.equals("yE/7<&H_cb");
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("yE/7<&H_cb", "yE/7<&H_cb", 2403);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.value = (Object) "yE/7<&H_cb";
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = patriciaTrie0.containsKey("|~9;3>");
      assertFalse(boolean0);
      
      patriciaTrie0.forEach(biConsumer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry(">");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put(">", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator");
      SortedMap<String, String> sortedMap0 = patriciaTrie1.tailMap(">");
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.putIfAbsent("r8]8", "R");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.tailMap("RootEntry(");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("  ", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", (-3616));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      patriciaTrie2.previousEntry(abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.put("", (String) null);
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      patriciaTrie3.lowerEntry("");
      patriciaTrie3.comparator();
      patriciaTrie3.selectKey("");
      PatriciaTrie<Comparable<String>> patriciaTrie4 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie4.size();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie3.higherEntry("  ");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      String string0 = null;
      // Undeclared exception!
//      try { 
        patriciaTrie1.put((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("J%");
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "");
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, (Object) null, 2978);
      abstractPatriciaTrie_TrieEntry0.toString();
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.equals(patriciaTrie0);
      patriciaTrie0.select("");
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", "", 709);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("Entry(key=null [2978], value=null, parent=null, left=null [2978], right=null, predecessor=null [2978])", "keyAnalyzer", 406);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.right;
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.putIfAbsent("r8(", "R");
      patriciaTrie0.put("  ", (String) null);
      patriciaTrie0.put("O0iOdtV6", "O0iOdtV6");
      String string0 = patriciaTrie0.put("A", "=6Un");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("=6Un");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, (-1589));
      Integer integer0 = new Integer((-1589));
      Integer integer1 = new Integer((-1589));
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer1, (-1589));
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertTrue(boolean0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.mapIterator();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", (Integer) null, 206);
      String string0 = abstractPatriciaTrie_TrieEntry2.toString();
      assertEquals("Entry(key= [206], value=null, parent=null, left= [206], right=null, predecessor= [206])", string0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      Object object0 = new Object();
      Object object1 = new Object();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(object0, object1, 0);
      abstractPatriciaTrie_TrieEntry3.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("VbCv95", orderedMapIterator0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("VbCv95", orderedMapIterator0, 2);
      abstractPatriciaTrie_TrieEntry0.bitIndex = (-3559);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      abstractPatriciaTrie_TrieEntry0.value = (Object) "VbCv95";
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("VbCv95", "rzQ+!i1", 2);
      abstractPatriciaTrie_TrieEntry2.bitIndex = 2;
      Integer integer0 = new Integer((-62));
      patriciaTrie1.put("Kxq5", integer0);
      patriciaTrie0.values();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.parent;
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Function<String, String> function0 = Function.identity();
      function0.apply("");
      patriciaTrie0.keySet();
      patriciaTrie0.computeIfAbsent("FromKey is out of range: ", function0);
      patriciaTrie0.put("", "");
      patriciaTrie0.put("}\n", "");
      patriciaTrie0.values();
      patriciaTrie0.getEntry("]={\n");
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[3]={\n  RootEntry(key= [-1], value=, parent=null, left=FromKey is out of range:  [9], right=null, predecessor=FromKey is out of range:  [9])\n  Entry(key=FromKey is out of range:  [9], value=FromKey is out of range: , parent=ROOT, left=ROOT, right=}\n [10], predecessor=}\n [10])\n  Entry(key=}\n [10], value=, parent=FromKey is out of range:  [9], left=FromKey is out of range:  [9], right=}\n [10], predecessor=}\n [10])\n}\n", string0);
      
      String string1 = patriciaTrie0.nextKey("FromKey is out of range: ");
      assertNotNull(string1);
      
      patriciaTrie0.put("]={\n", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      Integer integer0 = new Integer(32768);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(function0, "", 562);
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, abstractPatriciaTrie_TrieEntry1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.putIfAbsent("r8(", "R");
      patriciaTrie0.put("  ", "hT^0H@");
      patriciaTrie0.put("A", "=6Un");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("=6Un");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.get(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      // Undeclared exception!
//      try { 
        patriciaTrie1.getEntry(patriciaTrie0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      patriciaTrie0.compute("predecessor=", biFunction0);
      patriciaTrie0.decrementSize();
      Integer integer0 = new Integer((-1721));
      // Undeclared exception!
//      try { 
        patriciaTrie0.getEntry(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie1.keySet();
      patriciaTrie1.mapIterator();
      Integer integer0 = new Integer((-924));
      Integer integer1 = new Integer((-924));
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("R", "M", 0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("^{/!31b/( 4EV>^<14~", (String) null, (-2563));
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie1.nextKey("");
      patriciaTrie2.ceilingEntry("");
      // Undeclared exception!
//      try { 
        patriciaTrie2.subtree("", 0, (-2563));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      patriciaTrie0.put(",w'", integer0);
      patriciaTrie0.entrySet();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie0.previousKey(",w'");
      patriciaTrie1.keySet();
      patriciaTrie1.mapIterator();
      Integer integer1 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, (Integer) null);
      // Undeclared exception!
//      try { 
        abstractMap_SimpleImmutableEntry0.setValue(integer1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.putIfAbsent("r8(", "R");
      String string0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", "");
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.ceilingEntry("");
      patriciaTrie0.subtree("a/%q/4^JM^=.#n", 64, 64);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.modCount = 968;
      patriciaTrie0.subMap("e~pYMuz!PH+(Rw", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
      patriciaTrie0.subtree((String) null, 968, 1211);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      String string0 = "/";
      Integer integer0 = new Integer((-3770));
      int int0 = 2495;
      Integer integer1 = new Integer(0);
      // Undeclared exception!
//      try { 
        patriciaTrie1.get(integer1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.keySet();
      patriciaTrie0.put("N,O02 QFeA%e", "N,O02 QFeA%e");
      patriciaTrie0.put("Trie[", "Trie[");
      String string0 = "";
      int int0 = 0;
      patriciaTrie0.previousKey("  ");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 0);
      abstractPatriciaTrie_TrieEntry0.key = "The offsets and lengths must be at Character boundaries";
      abstractPatriciaTrie_TrieEntry0.key = "F:D^8ia#z7l6sx8Lg`";
      patriciaTrie0.floorEntry("F:D^8ia#z7l6sx8Lg`");
      abstractPatriciaTrie_TrieEntry0.setKeyValue("", (Object) null);
      patriciaTrie0.put("f-bG[#%k{psv8", (Object) null);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.clear();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      int int1 = 0;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>(".PgB|`", "F:D^8ia#z7l6sx8Lg`", 0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
      // Undeclared exception!
//      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "R";
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.putIfAbsent("r8(", "R");
      String string1 = "  ";
      patriciaTrie0.put("  ", "hT^0H@");
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("  ", 0, (-956));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Integer integer0 = new Integer(1648);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("9=Ii[", integer0);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<String, Integer>>(integer0, abstractMap_SimpleImmutableEntry0, (-448));
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      patriciaTrie0.put(",w'", integer0);
      patriciaTrie0.entrySet();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie0.previousKey(",w'");
      Set<String> set0 = patriciaTrie1.keySet();
      patriciaTrie1.mapIterator();
      Integer integer1 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, (Integer) null);
      // Undeclared exception!
//      try { 
        patriciaTrie0.containsKey(set0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("b|MEDx$R?Z[Wa3", integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = hashMap0.put("b|MEDx$R?Z[Wa3", integer0);
      hashMap0.put("b|MEDx$R?Z[Wa3", integer1);
      Integer integer3 = new Integer((-2004));
      hashMap0.put("b|MEDx$R?Z[Wa3", integer3);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer3, 0);
      patriciaTrie0.put("|]vjrk*#FDHO=HMQ", ")j8=0!e.;_m(jXtS");
      patriciaTrie0.replace("", (Object) "", (Object) ")j8=0!e.;_m(jXtS");
      Map.Entry.comparingByKey();
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry0.getKey();
      abstractPatriciaTrie_TrieEntry0.bitIndex = 1249;
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("|]vjrk*#FDHO=HMQ", integer2, 1249);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      patriciaTrie0.lastEntry();
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.values();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie2.decrementSize();
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "fromKey > toKey";
      int int0 = 2084;
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("fromKey > toKey", "fromKey > toKey", 2084);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      Integer integer0 = new Integer(2084);
      abstractPatriciaTrie_TrieEntry0.equals("fromKey > toKey");
      int int1 = 3970;
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("fromKey > toKey", integer0, 3970);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
      abstractPatriciaTrie_TrieEntry1.setValue("fromKey > toKey");
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator2);
      abstractPatriciaTrie_TrieEntry1.bitIndex = 3970;
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Integer integer1 = new Integer(2084);
      // Undeclared exception!
//      try { 
        patriciaTrie0.containsKey(integer1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "-ib8JNdZ ";
      patriciaTrie0.floorEntry("-ib8JNdZ ");
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      int int0 = (-586);
      Integer integer0 = new Integer((-586));
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, integer0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("-ib8JNdZ ", abstractMap_SimpleEntry0, (-586));
      abstractPatriciaTrie_TrieEntry0.bitIndex = (-586);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie1.subMap("-ib8JNdZ ", "-ib8JNdZ ");
      // Undeclared exception!
//      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("IEBv_bqyPXqG", "IEBv_bqyPXqG", (-1379));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry1);
      Object object0 = new Object();
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet", object0);
      patriciaTrie1.containsKey("7fP.Q5QD gB^if2");
      // Undeclared exception!
//      try { 
        patriciaTrie1.subMap("]={\n", "7fP.Q5QD gB^if2");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fromKey > toKey
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("J=)Z#6t0Ci2", "J=)Z#6t0Ci2");
      Map.Entry.comparingByValue();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object>(abstractMap_SimpleEntry1, abstractMap_SimpleEntry1, (-3));
      abstractPatriciaTrie_TrieEntry0.bitIndex = 1387;
      Object object0 = new Object();
      abstractPatriciaTrie_TrieEntry0.equals(object0);
      abstractPatriciaTrie_TrieEntry0.toString();
      Integer integer0 = new Integer(2749);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Integer>((AbstractMap.SimpleEntry<Object, Object>) null, integer0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = null;
//      try {
        patriciaTrie0 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>(patriciaTrie0);
      Map.Entry<String, AbstractMap.SimpleImmutableEntry<String, Object>> map_Entry0 = patriciaTrie1.select((String) null);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNull(map_Entry0);
      
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1346);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer1, (-1));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("RootEntry(key=1 [-1], value=1346, parent=null, left=ROOT, right=null, predecessor=ROOT)", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("HE?0'_");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }
}
