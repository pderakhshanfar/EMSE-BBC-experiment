/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:27:52 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("org.]pache.commons.collections4.trie.AbstractBitwiseTrie", "org.]pache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("", "a`A\"kU6*ao|UafS%.i");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("a`A\"kU6*ao|UafS%.i");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-829));
      assertEquals((-829), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("org.apache.commons.cllections4.tri.AbstractBitwiserie", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Integer integer2 = new Integer((-829));
      assertEquals((-829), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("", integer0);
      assertNull(integer3);
      assertTrue(integer0.equals((Object)integer2));
      
      Integer integer4 = patriciaTrie0.put("y9vu6Wzu", (Integer) null);
      assertNull(integer4);
      
      Integer integer5 = new Integer((-1907));
      assertEquals((-1907), (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      
      Integer integer6 = patriciaTrie0.put("y9vu6Wzu", integer5);
      assertNull(integer6);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("y9vu6Wzu");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      
      Integer integer7 = new Integer((-1907));
      assertEquals((-1907), (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer5));
      
      Integer integer8 = patriciaTrie0.put("Trie[", integer7);
      assertNull(integer8);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer5));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("e,:u#");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("e,:u#", "e,:u#", 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Integer integer0 = new Integer((-2048));
      assertEquals((-2048), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("e+", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(2328);
      assertEquals(2328, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Integer integer3 = patriciaTrie0.merge("e+", integer0, biFunction0);
      assertNull(integer3);
      assertFalse(integer0.equals((Object)integer2));
      
      Integer integer4 = patriciaTrie0.put("Key cannot be null", integer2);
      assertNull(integer4);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer5 = patriciaTrie0.put("e+", integer2);
      assertNull(integer5);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer6 = new Integer(16);
      assertEquals(16, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      
      BiFunction<Object, Integer, Integer> biFunction1 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer7 = patriciaTrie0.merge("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer6, biFunction1);
      assertEquals(16, (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      
      Integer integer8 = patriciaTrie0.put("", (Integer) null);
      assertNull(integer8);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("e+");
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry0));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie1.select("FromKey is out of range: ");
      assertNull(map_Entry0);
      
      String string0 = patriciaTrie1.remove((Object) "e+");
      assertNull(string0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Function<Object, Object> function0 = Function.identity();
      assertNotNull(function0);
      
      String string0 = "'22qf+&oad{[)VVJYy";
      Object object0 = patriciaTrie0.put("'22qf+&oad{[)VVJYy", "'22qf+&oad{[)VVJYy");
      assertNull(object0);
      
      Function<Object, Object> function1 = function0.andThen((Function<? super Object, ?>) function0);
      assertNotNull(function1);
      assertFalse(function1.equals((Object)function0));
      
      Function<Object, Object> function2 = Function.identity();
      assertSame(function2, function0);
      assertNotNull(function2);
      assertFalse(function2.equals((Object)function1));
      
      Function<String, Object> function3 = function1.compose((Function<? super String, ?>) function0);
      assertSame(function0, function2);
      assertNotNull(function3);
      assertFalse(function0.equals((Object)function1));
      assertFalse(function1.equals((Object)function0));
      assertFalse(function1.equals((Object)function2));
      
      Function<String, Object> function4 = function1.compose((Function<? super String, ?>) function0);
      assertSame(function0, function2);
      assertNotSame(function4, function3);
      assertNotNull(function4);
      assertFalse(function0.equals((Object)function1));
      assertFalse(function1.equals((Object)function0));
      assertFalse(function1.equals((Object)function2));
      assertFalse(function4.equals((Object)function3));
      
      Function<Object, Object> function5 = function1.compose((Function<? super Object, ?>) function1);
      assertSame(function0, function2);
      assertNotNull(function5);
      assertFalse(function0.equals((Object)function1));
      assertFalse(function1.equals((Object)function0));
      assertFalse(function1.equals((Object)function2));
      assertFalse(function5.equals((Object)function1));
      assertFalse(function5.equals((Object)function2));
      assertFalse(function5.equals((Object)function0));
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertTrue(set0.contains(string0));
      
      Object object1 = patriciaTrie0.put("'22qf+&oad{[)VVJYy", "'22qf+&oad{[)VVJYy");
      assertEquals("'22qf+&oad{[)VVJYy", object1);
      assertNotNull(object1);
      assertTrue(object1.equals((Object)string0));
      
      Object object2 = patriciaTrie0.computeIfAbsent("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", function5);
      assertSame(function0, function2);
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", object2);
      assertNotNull(object2);
      assertFalse(function0.equals((Object)function1));
      assertFalse(function0.equals((Object)function5));
      assertFalse(function1.equals((Object)function0));
      assertFalse(function1.equals((Object)function2));
      assertFalse(function1.equals((Object)function5));
      assertFalse(function5.equals((Object)function1));
      assertFalse(function5.equals((Object)function2));
      assertFalse(function5.equals((Object)function0));
      assertFalse(object2.equals((Object)string0));
      assertFalse(object2.equals((Object)object1));
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains("'22qf+&oad{[)VVJYy"));
      
      Object object3 = patriciaTrie0.put("'22qf+&oad{[)VVJYy", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      assertEquals("'22qf+&oad{[)VVJYy", object3);
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertTrue(object3.equals((Object)string0));
      assertTrue(object3.equals((Object)object1));
      
      Object object4 = function1.apply((Object) null);
      assertSame(function0, function2);
      assertNull(object4);
      assertFalse(function0.equals((Object)function1));
      assertFalse(function0.equals((Object)function5));
      assertFalse(function1.equals((Object)function0));
      assertFalse(function1.equals((Object)function2));
      assertFalse(function1.equals((Object)function5));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("'22qf+&oad{[)VVJYy");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Object object5 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", object5);
      assertNotNull(object5);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)string0));
      assertTrue(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = "org.apache.commons.collections4.trie.PatriciaTrie";
      // Undeclared exception!
//      try { 
        patriciaTrie1.getOrDefault(function4, "org.apache.commons.collections4.trie.PatriciaTrie");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-380));
      assertEquals((-380), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("mC{3", integer0);
      assertNull(integer1);
      
      Integer integer2 = patriciaTrie0.put("R:z&s(LZb", integer0);
      assertNull(integer2);
      
      Integer integer3 = new Integer((-12));
      assertEquals((-12), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = patriciaTrie0.put("e;9hHifH", integer3);
      assertNull(integer4);
      assertFalse(integer3.equals((Object)integer0));
      
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(anyString() , any());
      Integer integer5 = patriciaTrie0.computeIfPresent("mC{3", biFunction0);
      assertNull(integer5);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "";
      Object object0 = hashMap0.replace("", (Object) null);
      assertNull(object0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object object1 = hashMap0.put("", (Object) null);
      assertNull(object1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      patriciaTrie0.decrementSize();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.selectKey("Trie[");
      assertNull(string0);
      
      Integer integer0 = new Integer((-380));
      assertEquals((-380), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("mC{3", integer0);
      assertNull(integer1);
      
      Integer integer2 = patriciaTrie0.put("Rh|&=.(L_", integer0);
      assertNull(integer2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("mC{3");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.higherEntry("/=");
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.nextKey("lTN#@eC-$-e)e");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.replaceAll(biFunction0);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      
      patriciaTrie2.decrementSize();
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", (-305));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Object>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      String string1 = abstractPatriciaTrie_TrieEntry0.setKeyValue("lTN#@eC-$-e)e", "");
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", string1);
      assertNotNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "lTN#@eC-$-e)e", (-305));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      
      String string2 = patriciaTrie2.put("([I0.4-", "");
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(string2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
      
      String string3 = patriciaTrie2.put("", "mh#8sY[");
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(string3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.followRight(abstractPatriciaTrie_TrieEntry2);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1693);
      assertEquals(1693, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*S/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.put("", integer0);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("&w");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1244);
      assertEquals(1244, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*S/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      Object object0 = patriciaTrie1.put("", integer0);
      assertNull(object0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("*S/iKa9(hNSUz>;A", "", (-25));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.lowerEntry("&w");
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(12);
      assertEquals(12, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 16);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Integer integer1 = new Integer(16);
      assertEquals(16, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("t38_zu", integer1, 12);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(integer1.equals((Object)integer0));
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 12);
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(integer0.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = abstractPatriciaTrie_TrieEntry5.right;
      assertNull(abstractPatriciaTrie_TrieEntry6);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry7 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      assertNull(abstractPatriciaTrie_TrieEntry7);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put(":+5", ":+5");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = patriciaTrie0.put(",icww|v d:&/*)Oi", (String) null);
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      hashMap0.putAll(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      String string2 = patriciaTrie0.putIfAbsent("", "must have a from or to!");
      assertNull(string2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("wJhSY;b|u:5mI=X%YU", "", (-2787));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(":+5");
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string3 = abstractPatriciaTrie_TrieEntry0.setValue("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      String string4 = hashMap0.put("", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertNull(string4);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      
      String string5 = patriciaTrie0.lastKey();
      assertEquals(":+5", string5);
      assertNotNull(string5);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertFalse(string5.equals((Object)string3));
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.floorEntry(":+5");
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.lastEntry();
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("g;29N3?O_-D^?", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("8jtq/71G 6IsoLR2");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Integer integer2 = patriciaTrie0.put("g;29N3?O_-D^?", (Integer) null);
      assertEquals(48, (int)integer2);
      assertNotNull(integer2);
      
      String string0 = patriciaTrie0.previousKey("8jtq/71G 6IsoLR2");
      assertNull(string0);
      
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap("8jtq/71G 6IsoLR2", "g;29N3?O_-D^?");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("g;29N3?O_-D^?", patriciaTrie1, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.predecessor = null;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.left = null;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.value = (Object) sortedMap0;
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, 1427);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      String string1 = patriciaTrie1.lastKey();
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = patriciaTrie1.put("", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(32768);
      assertEquals(32768, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie1.put("mC{3", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("Sr%&0YJ\"PBx<rf6");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.followRight(abstractPatriciaTrie_TrieEntry0);
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = patriciaTrie0.put("g z{v$1k", (Integer) null);
      assertNull(integer0);
      
      Integer integer1 = new Integer((-2));
      assertEquals((-2), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = patriciaTrie0.put("UuXj*ILQyDIWmn`.j", integer1);
      assertNull(integer2);
      
      Integer integer3 = new Integer((-2));
      assertEquals((-2), (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      
      Integer integer4 = patriciaTrie0.put("[=", integer1);
      assertNull(integer4);
      assertTrue(integer1.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry(")13NiG*YHNR&x=>R7n2>");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer5 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals((-2), (int)integer5);
      assertNotNull(integer5);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer5.equals((Object)integer3));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = patriciaTrie0.merge("^yXBRII.g7", "", biFunction0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry((Object) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = patriciaTrie0.lastKey();
      assertEquals("^yXBRII.g7", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object object0 = hashMap0.put("sRv", "sRv");
      assertNull(object0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = patriciaTrie0.get("sRv");
      assertEquals("sRv", object1);
      assertNotNull(object1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Object object2 = patriciaTrie0.computeIfPresent("sRv", biFunction0);
      assertNull(object2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Object object3 = hashMap0.put("sRv", (Object) null);
      assertEquals("sRv", object3);
      assertNotNull(object3);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string0 = patriciaTrie0.selectKey("v+");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      assertNotNull(patriciaTrie1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie0.put("null", "null");
      assertNull(string0);
      
      patriciaTrie0.incrementSize();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.getEntry("null");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.put((String) null, "null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.selectKey("");
      assertNull(string0);
      
      Object object0 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", (Object) null);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("The offsets and lengths must be at Character boundaries");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("null", "0O&qN'R<uAsC<M/");
      assertNull(string0);
      
      patriciaTrie0.incrementSize();
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Integer integer0 = new Integer(400);
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(541);
      assertEquals(541, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, integer1, (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(integer1.equals((Object)integer0));
      
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      String string1 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("RootEntry(key=null [-1], value=541, parent=null, left=ROOT, right=null, )", string1);
      assertNotNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(integer1.equals((Object)integer0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("org.apache.commons.collections4.trie.KeyAnalyzer", 541, 400);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-2));
      assertEquals((-2), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("UuXj*ILQyDIWmn`.j", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer((-2));
      assertEquals((-2), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("[=", integer0);
      assertNull(integer3);
      assertTrue(integer0.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry(")13NiG*YH&x=>R7n2>");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      patriciaTrie1.clear();
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer4 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals((-2), (int)integer4);
      assertNotNull(integer4);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer4.equals((Object)integer2));
      
      int int0 = patriciaTrie1.size();
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals((-1), int0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, abstractPatriciaTrie_TrieEntry0, 1502);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Object object0 = abstractPatriciaTrie_TrieEntry1.getKey();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(object0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Integer integer5 = patriciaTrie0.remove((Object) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(integer5);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "\\uLQWp7WB'Rj8";
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(288);
      assertEquals(288, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("h");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      int int0 = 1078;
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("h", integer2, 1078);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1331);
      assertEquals(1331, (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = patriciaTrie1.put("dmzPLG{7", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer((-4189));
      assertEquals((-4189), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie1.put("[=", (Integer) null);
      assertNull(integer3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("[=");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      patriciaTrie2.clear();
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer4 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertEquals(1331, (int)integer4);
      assertNotNull(integer4);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(integer4.equals((Object)integer2));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(504);
      assertEquals(504, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>(":V*?K|Pxzu_d", (Integer) null, 504);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Cannot determine prefix outside of Character boundaries", integer0, 824);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(570);
      assertEquals(570, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.put("A2c=Cp*jb9\"pvmeQm", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer((-1421));
      assertEquals((-1421), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(16);
      assertEquals(16, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer4 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", integer3);
      assertNull(integer4);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry((String) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      patriciaTrie2.clear();
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer5 = patriciaTrie2.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertEquals(570, (int)integer5);
      assertNotNull(integer5);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-2));
      assertEquals((-2), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2));
      assertEquals((-2), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put("UuXj*ILQyDIWmn`.j", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("*/iKa9(hNSUz>;A", (Integer) null, (-2));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Integer integer3 = patriciaTrie0.put("]~JI", integer1);
      assertNull(integer3);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer4 = patriciaTrie0.put("", integer1);
      assertNull(integer4);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.higherEntry(")13NiG*YH&x=>R7n2>");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.previousKey("\"q");
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      patriciaTrie1.clear();
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer5 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals((-2), (int)integer5);
      assertNotNull(integer5);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer5.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry(")13NiG*YH&x=>R7n2>");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("ToKey is out of range: ", "ToKey is out of range: ");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("tR':d(pd", "fbQ[6\"={");
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.lowerEntry("invalid lookup: ");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(hashMap0);
      assertNotNull(patriciaTrie3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie4.floorEntry("ToKey is out of range: ");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Integer integer2 = patriciaTrie0.put("*/iKa9(hNSUz>;A", (Integer) null);
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry(")13NiG*YH&x=>R7n2>");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      patriciaTrie0.clear();
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      
      Integer integer3 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNull(integer3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      patriciaTrie0.incrementSize();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-568));
      assertEquals((-568), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-568));
      assertEquals((-568), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer2 = new Integer((-568));
      assertEquals((-568), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      Integer integer3 = patriciaTrie2.put("UuXj*ILQDIWmn`.j", integer2);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(integer3);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("*/iKa9(hNSUz>;A", integer1, (-1791));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer4 = new Integer(568);
      assertEquals(568, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      
      Integer integer5 = new Integer((-568));
      assertEquals((-568), (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer2));
      
      Integer integer6 = patriciaTrie2.put("]~JI", integer5);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(integer6);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.higherEntry("4EKbJLHc)_");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      patriciaTrie2.clear();
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      
      Integer integer7 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertEquals((-568), (int)integer7);
      assertNotNull(integer7);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("v_nbAP$#SRyvs}", "v_nbAP$#SRyvs}");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      String string1 = patriciaTrie1.put("v_nbAP$#SRyvs}", "Jw$Qwl#");
      assertEquals("v_nbAP$#SRyvs}", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie1.put("t%&{5vZ#N", "v_nbAP$#SRyvs}");
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.subtree("|CxmO&Yj.6T2qN", 0, 0);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.replace("=", "=");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("hfo1", "=");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string2 = patriciaTrie0.put("hfo1", "Fpr${I3RxLl?1");
      assertEquals("=", string2);
      assertNotNull(string2);
      
      String string3 = patriciaTrie0.firstKey();
      assertEquals("hfo1", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = patriciaTrie0.replace("hfo1", "tdS)F>,H0>V,?");
      assertEquals("Fpr${I3RxLl?1", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = patriciaTrie0.get((Object) null);
      assertNull(string5);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.higherEntry("5A!Fu,v ");
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.lowerEntry("$gF");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.getNearestEntryForKey("b%I(|hR*9IL5,", (-2));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      assertNotNull(patriciaTrie2);
      
      Integer integer0 = new Integer((-2));
      assertEquals((-2), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.remove((Object) integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      Collection<Object> collection1 = patriciaTrie0.values();
      assertSame(collection1, collection0);
      assertNotNull(collection1);
      
      Integer integer0 = new Integer((-2612));
      assertEquals((-2612), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("|l0", integer0, (-2612));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("ToKey is out of range: ").when(biFunction0).apply(anyString() , any());
      String string0 = patriciaTrie0.compute("T:|0UEi*7xTIv", biFunction0);
      assertEquals("ToKey is out of range: ", string0);
      assertNotNull(string0);
      
      String string1 = patriciaTrie0.put("ToKey is out of range: ", "ToKey is out of range: ");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put(", ", "ToKey is out of range: ");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("m+Mz'u", "fbQ[6\"={");
      assertNull(string3);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<String, String> function2 = function0.compose((Function<? super String, ? extends String>) function1);
      assertNotNull(function2);
      assertFalse(function2.equals((Object)function0));
      
      Function<String, String> function3 = function0.andThen((Function<? super String, ? extends String>) function2);
      assertNotNull(function3);
      assertFalse(function0.equals((Object)function2));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function3.equals((Object)function2));
      assertFalse(function3.equals((Object)function0));
      
      String string4 = patriciaTrie1.computeIfAbsent((String) null, function3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string4);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(function0.equals((Object)function3));
      assertFalse(function0.equals((Object)function2));
      assertFalse(function2.equals((Object)function3));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function3.equals((Object)function2));
      assertFalse(function3.equals((Object)function0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-2));
      assertEquals((-2), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("UuXj*ILQyDIWmn`.j", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer((-2));
      assertEquals((-2), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("`n0Q%OzVfO", integer0);
      assertNull(integer3);
      assertTrue(integer0.equals((Object)integer2));
      
      Integer integer4 = patriciaTrie0.put("[=", integer0);
      assertNull(integer4);
      assertTrue(integer0.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry(")13\\NiG*H&xR7n2>");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(16);
      assertEquals(16, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, "", 16);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(integer1.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie2);
      
      Set<String> set0 = patriciaTrie2.keySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(""));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", abstractPatriciaTrie_TrieEntry0, 96);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(integer1.equals((Object)integer0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.addEntry(abstractPatriciaTrie_TrieEntry1, 2064);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("null", "null");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("null", (String) null);
      assertEquals("null", string1);
      assertNotNull(string1);
      
      patriciaTrie0.incrementSize();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("Trie[");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "MfPM", 3259);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.followRight((AbstractPatriciaTrie.TrieEntry<String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.incrementSize();
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Integer integer0 = new Integer(1581);
      assertEquals(1581, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 541);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.incrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie0.higherEntry("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-2));
      assertEquals((-2), (int)integer0);
      assertNotNull(integer0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.tailMap("M2-An");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      Integer integer1 = new Integer((-2));
      assertEquals((-2), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put("UuXj*ILQyDIWmn`.j", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("*/iKa9(hNSUz>;A", (Integer) null, (-2));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = patriciaTrie0.put("]~JI", integer1);
      assertNull(integer4);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.higherEntry(")13NiG*YH&x=>R7n2>");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer5 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals((-2), (int)integer5);
      assertNotNull(integer5);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.higherEntry("M2-An");
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(2465);
      assertEquals(2465, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("M2-An", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("*/iKa9(hNSUz>;A", integer0, 2465);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Integer integer2 = new Integer(2465);
      assertEquals(2465, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("keyAnalyzer", integer2);
      assertNull(integer3);
      assertTrue(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry(",:61Z#7 ");
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry((String) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      // Undeclared exception!
//      try { 
        patriciaTrie0.ceilingEntry("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("null", (String) null);
      assertNull(string0);
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("^!!");
      assertNotNull(map_Entry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.floorEntry("*/iKa9(hNSUz>;A");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie2.selectValue("Entry(");
      assertNull(string0);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotNull(orderedMapIterator0);
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer(519);
      assertEquals(519, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, (-1162));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(integer0.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, (Integer) null, 519);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      
      Integer integer3 = new Integer(1);
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer integer5 = abstractPatriciaTrie_TrieEntry1.setKeyValue((String) null, integer4);
      assertEquals(4033, (int)integer5);
      assertNotNull(integer5);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie4.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-634));
      assertEquals((-634), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*S/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.put("", (Object) null);
      assertNull(object0);
      
      String string0 = patriciaTrie1.nextKey("");
      assertEquals("*S/iKa9(hNSUz>;A", string0);
      assertNotNull(string0);
      
      String string1 = patriciaTrie1.nextKey("gGyPitYBV.y/-B#pXa");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("&w");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("", 1008);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Integer integer0 = new Integer(2134);
      assertEquals(2134, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("h", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      String string0 = patriciaTrie0.nextKey("");
      assertEquals("h", string0);
      assertNotNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer4 = patriciaTrie0.computeIfPresent("keyAnalyzer", biFunction0);
      assertNull(integer4);
      
      Integer integer5 = new Integer(1);
      assertEquals(1, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      
      Object object0 = patriciaTrie1.put("", integer0);
      assertNull(object0);
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.lowerEntry("&w");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      int int0 = 135;
      Integer integer0 = new Integer(135);
      assertEquals(135, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer2 = new Integer(135);
      assertEquals(135, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      
      boolean boolean0 = patriciaTrie0.isBitSet("", 1170, (-2130));
      assertFalse(boolean0);
      
      Integer integer3 = patriciaTrie0.put("", integer2);
      assertEquals(135, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("V1*L#-\"");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      String string0 = "zH9qXx-{*M";
      Object object0 = patriciaTrie1.put("zH9qXx-{*M", "zH9qXx-{*M");
      assertNull(object0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      String string1 = "~9X3LT^o#W|c";
      Object object1 = patriciaTrie1.put("~9X3LT^o#W|c", abstractPatriciaTrie_TrieEntry1);
      assertNull(object1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Object object2 = patriciaTrie1.computeIfPresent("", biFunction0);
      assertNull(object2);
      
      patriciaTrie0.decrementSize();
      Object object3 = patriciaTrie1.put("must have a from or to!", integer3);
      assertNull(object3);
      assertTrue(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.subtree("", 1593, (-1190));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNull(string0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("");
      assertNotNull(sortedMap0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      
      int int0 = patriciaTrie0.bitIndex("Pe,L_|G8(&Q*6wey+-A", "Pe,L_|G8(&Q*6wey+-A");
      assertEquals((-2), int0);
      
      String string1 = patriciaTrie0.nextKey("Pe,L_|G8(&Q*6wey+-A");
      assertNull(string1);
      
      SortedMap<String, String> sortedMap1 = patriciaTrie0.headMap("L;Z");
      assertNotNull(sortedMap1);
      assertTrue(sortedMap1.isEmpty());
      assertEquals(0, sortedMap1.size());
      assertFalse(sortedMap1.equals((Object)sortedMap0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("FH'$Bov8hZHt-Bf,");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string2 = patriciaTrie0.selectValue("Trie[");
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", string2);
      assertNotNull(string2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Integer integer0 = new Integer((-2));
      assertEquals((-2), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("iuv/H!", integer0, (-2));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = abstractPatriciaTrie_TrieEntry1.setKeyValue("Trie[", integer1);
      assertEquals((-2), (int)integer2);
      assertNotNull(integer2);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntry(abstractPatriciaTrie_TrieEntry2);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.subtree("Pe,L_|G8(&Q*6wey+-A", 336, 0);
      assertNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Integer integer2 = patriciaTrie0.putIfAbsent("Qc)5,", integer0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(integer2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer3 = new Integer(4033);
      assertEquals(4033, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      
      Object object0 = patriciaTrie2.put("", integer3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(object0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer3.equals((Object)integer0));
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = patriciaTrie0.computeIfPresent("*/iKa9(hNSUz>;A", biFunction0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(integer4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.lowerEntry("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = " > ";
      String string1 = patriciaTrie0.put(" > ", "");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("keyAnalyzer", (String) null);
      assertNull(string2);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      String string3 = patriciaTrie0.put(" > ", "Failed to put: ");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "";
      String string5 = patriciaTrie0.nextKey("K7Y%34[ t~z\"");
      assertNull(string5);
      
      String string6 = patriciaTrie0.remove((Object) "");
      assertNull(string6);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      String string7 = "";
      Integer integer0 = null;
      // Undeclared exception!
//      try { 
        patriciaTrie1.put((String) null, (Integer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("", 1008);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Integer integer0 = new Integer(2134);
      assertEquals(2134, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("h", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("k)z\"oYv*Gwt81", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      String string0 = patriciaTrie0.nextKey("k)z\"oYv*Gwt81");
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer4 = patriciaTrie0.computeIfPresent("keyAnalyzer", biFunction0);
      assertNull(integer4);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.containsKey(abstractPatriciaTrie_TrieEntry0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("", 1008);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Integer integer0 = new Integer(2134);
      assertEquals(2134, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("h", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("k)z\"oYv*Gwt81", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      String string0 = patriciaTrie0.nextKey("k)z\"oYv*Gwt81");
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      String string1 = patriciaTrie2.put("k)z\"oYv*Gwt81", "v");
      assertNull(string1);
      
      String string2 = patriciaTrie2.put("k)z\"oYv*Gwt81", "h");
      assertEquals("v", string2);
      assertNotNull(string2);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer(4033);
      assertEquals(4033, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.floorEntry("*/iKa9(hNSUz>;A");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("null", (String) null);
      assertNull(string0);
      
      Integer integer0 = new Integer(336);
      assertEquals(336, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 1581);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Integer integer1 = new Integer(1581);
      assertEquals(1581, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, (Integer) null, 554);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(integer1.equals((Object)integer0));
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=1581 [554], value=null, parent=null, left=1581 [554], right=null, predecessor=1581 [554])", string1);
      assertNotNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.subtree("Entry(key=1581 [554], value=null, parent=null, left=1581 [554], right=null, predecessor=1581 [554])", 336, 16);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1553);
      assertEquals(1553, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(2441);
      assertEquals(2441, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("M2-An", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("*/iKa9(hNSUz>;A");
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      
      Integer integer4 = new Integer(1);
      assertEquals(1, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      
      Integer integer5 = new Integer(4033);
      assertEquals(4033, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      
      Integer integer6 = new Integer(1);
      assertEquals(1, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      
      Integer integer7 = new Integer(1553);
      assertEquals(1553, (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer0));
      
      boolean boolean0 = patriciaTrie0.replace("keyAnalyzer", integer6, integer7);
      assertFalse(boolean0);
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer7));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer0));
      
      Integer integer8 = patriciaTrie0.put("keyAnalyzer", integer5);
      assertNull(integer8);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer7));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer4));
      
      Integer integer9 = patriciaTrie0.put("keyAnalyzer", integer5);
      assertEquals(4033, (int)integer9);
      assertNotNull(integer9);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer7));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer6));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.previousKey("keyAnalyzer");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("M2-An", string0);
      assertNotNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      patriciaTrie1.incrementSize();
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("U.H{RZ!booV2$q!yT`M", "fromKey > toKey");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("U.H{RZ!booV2$q!yT`M");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.subtree("}\n", 144, (-1));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie2.entrySet();
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.getNearestEntryForKey("dL)GNT", 2884);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer((-1137));
      assertEquals((-1137), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1137));
      assertEquals((-1137), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(224);
      assertEquals(224, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie5 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertNotNull(patriciaTrie5);
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer0, integer3);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie5.put("", abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      OrderedMapIterator<String, AbstractMap.SimpleImmutableEntry<Object, Object>> orderedMapIterator0 = patriciaTrie5.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie5.ceilingEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      PatriciaTrie<Object> patriciaTrie6 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie6);
      
      int int0 = patriciaTrie6.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer(4033);
      assertEquals(4033, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Object object0 = patriciaTrie2.put("", integer2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(object0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.lowerEntry("&w");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("", "bq5d907lUnYV'");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("bq5d907lUnYV'");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, 12);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.subtree("bq5d907lUnYV'", 144, (-4323));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("", "*/iKa9(hNSUz>;A");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      String string1 = patriciaTrie1.put("lk8tsV]=o/mlM\"", " [");
      assertNull(string1);
      
      Integer integer1 = new Integer(32768);
      assertEquals(32768, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      String string2 = patriciaTrie1.put("Pd>4:FRJn.4", "");
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, (-2823));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(integer0.equals((Object)integer1));
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.subtree("9Ao3>N b9Z5n=*", 9, 9);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The offsets and lengths must be at Character boundaries
//         //
//         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("5}!I?O7N~rG2WyTPq\"", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("left=");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.subtree("\"$WiI1z>!", 144, 0);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(2441);
      assertEquals(2441, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("M2-An", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Integer integer2 = patriciaTrie0.put("", (Integer) null);
      assertNull(integer2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("*/iKa9(hNSUz>;A");
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      
      Integer integer3 = new Integer(1);
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(4033);
      assertEquals(4033, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      Integer integer5 = patriciaTrie0.put("keyAnalyzer", integer4);
      assertNull(integer5);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry(",:61Z#7 ");
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      
      boolean boolean0 = patriciaTrie0.containsKey("Key is out of range: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      Integer integer0 = new Integer(32768);
      assertEquals(32768, (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = patriciaTrie1.put("", integer0);
      assertNull(integer1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      
      int int0 = patriciaTrie3.bitsPerElement();
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertEquals(16, int0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Integer integer2 = patriciaTrie1.computeIfPresent("", biFunction0);
      assertNull(integer2);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("");
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie4));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer(4033);
      assertEquals(4033, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Object object0 = patriciaTrie2.put("", integer2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(object0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.lowerEntry("&w");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      String string1 = patriciaTrie3.put("N}hE8", "&w");
      assertNull(string1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.getNearestEntryForKey("", 4033);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("ToKey is out of range: ", "ToKey is out of range: ");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("m+Mz'u", "");
      assertNull(string1);
      
      String string2 = patriciaTrie0.previousKey("m+Mz'u");
      assertEquals("ToKey is out of range: ", string2);
      assertNotNull(string2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string3 = patriciaTrie1.lastKey();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("m+Mz'u", string3);
      assertNotNull(string3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = patriciaTrie1.put("m+Mz'u", "m+Mz'u");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("+17]~,c", "',}Z]K9_KX[!1FW");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = hashMap0.put("+17]~,c", "");
      assertEquals("',}Z]K9_KX[!1FW", string1);
      assertNotNull(string1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string2 = hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", (String) null);
      assertNull(string2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.forEach(biConsumer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      patriciaTrie0.forEach(biConsumer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      Integer integer0 = new Integer(1120);
      assertEquals(1120, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = patriciaTrie0.put("',}Z]K9_KX[!1FW", integer0);
      assertNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string3 = patriciaTrie0.lastKey();
      assertEquals("+17]~,c", string3);
      assertNotNull(string3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(string3.equals((Object)string1));
      
      int int0 = 1536;
      // Undeclared exception!
//      try { 
        patriciaTrie0.getNearestEntryForKey("", 1536);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-2716));
      assertEquals((-2716), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2716));
      assertEquals((-2716), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer1, 1142);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      Comparator<Map.Entry<Integer, Integer>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Lw:5", integer1, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(integer1.equals((Object)integer0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie3.prefixMap("Lw:5");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie1.prefixMap("keyAnalyzer");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      String string0 = patriciaTrie1.put("keyAnalyzer", "keyAnalyzer");
      assertNull(string0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Integer integer0 = new Integer((-2071));
      assertEquals((-2071), (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(2441);
      assertEquals(2441, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("M2-An", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("*/iKa9(hNSUz>;A");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(4033);
      assertEquals(4033, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer4 = patriciaTrie0.put("keyAnalyzer", integer3);
      assertNull(integer4);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry(",:61Z#7 ");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Integer integer5 = new Integer(535);
      assertEquals(535, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      
      boolean boolean0 = patriciaTrie1.containsKey("Key is out of range: ");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(boolean0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie2.entrySet();
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.getNearestEntryForKey("BLP9NT", 2884);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie2.prefixMap("");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(2884);
      assertEquals(2884, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1591);
      assertEquals(1591, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer1, "BLP9NT", 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(integer1.equals((Object)integer0));
      
      Object object0 = abstractPatriciaTrie_TrieEntry1.getKey();
      assertEquals(1591, object0);
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, object0, 32768);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Integer integer2 = new Integer((-3461));
      assertEquals((-3461), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer2, 621);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.left;
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = patriciaTrie3.nextEntryImpl(abstractPatriciaTrie_TrieEntry3, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry5);
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry0.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-2716));
      assertEquals((-2716), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2716));
      assertEquals((-2716), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer1, 1142);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Lw:5", integer1, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      Integer integer1 = patriciaTrie4.put("  ", integer0);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNull(integer1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie5);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      
      String string0 = patriciaTrie4.toString();
      assertNotSame(patriciaTrie2, patriciaTrie5);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie5);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertEquals("Trie[1]={\n  Entry(key=   [10], value=1, parent=ROOT, left=ROOT, right=   [10], predecessor=   [10])\n}\n", string0);
      assertNotNull(string0);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie3.subMap("", (String) null);
      assertNotSame(patriciaTrie2, patriciaTrie5);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer((-3132));
      assertEquals((-3132), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer4 = patriciaTrie2.put("T;I8`", integer3);
      assertNotSame(patriciaTrie2, patriciaTrie5);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNull(integer4);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.previousKey((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("null", (String) null);
      assertNull(string0);
      
      Integer integer0 = new Integer(336);
      assertEquals(336, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 1598);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Integer integer1 = new Integer(1598);
      assertEquals(1598, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, (Integer) null, 16);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(integer1.equals((Object)integer0));
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=1598 [16], value=null, parent=null, left=1598 [16], right=null, predecessor=1598 [16])", string1);
      assertNotNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.subtree((String) null, (-4160), 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie1);
      
      Comparator<? super String> comparator1 = patriciaTrie1.comparator();
      assertNotNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "null";
      String string1 = patriciaTrie0.put("null", (String) null);
      assertNull(string1);
      
      int int0 = 336;
      Integer integer0 = new Integer(336);
      assertEquals(336, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 1;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      int int2 = patriciaTrie2.lengthInBits("w~K0U$ts");
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertEquals(128, int2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = (-1779);
      int int4 = 13;
      // Undeclared exception!
//      try { 
        patriciaTrie2.tailMap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must have a from or to!
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.toString();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("Trie[1]={\n  Entry(key=*/iKa9(hNSUz>;A [10], value=4033, parent=ROOT, left=ROOT, right=*/iKa9(hNSUz>;A [10], predecessor=*/iKa9(hNSUz>;A [10])\n}\n", string0);
      assertNotNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.lowerEntry("*/iKa9(hNSUz>;A");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.toString();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("Trie[1]={\n  Entry(key=*/iKa9(hNSUz>;A [10], value=4033, parent=ROOT, left=ROOT, right=*/iKa9(hNSUz>;A [10], predecessor=*/iKa9(hNSUz>;A [10])\n}\n", string0);
      assertNotNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = patriciaTrie1.put("PBm^", (Integer) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(integer2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.lowerEntry("&w");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string0 = patriciaTrie3.put("!$=Ap7F@%[!44i~", "M(~esSPd(hV");
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(string0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      boolean boolean0 = patriciaTrie3.isBitSet((String) null, 2, (-976));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertFalse(boolean0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      
      String string1 = patriciaTrie4.put("M(~esSPd(hV", "");
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNull(string1);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
      
      int int0 = patriciaTrie2.lengthInBits("");
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertEquals(0, int0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      
      String string2 = patriciaTrie4.put("", (String) null);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNull(string2);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie4.higherEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, (-976));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, (-3656));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(integer0.equals((Object)int0));
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie5);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      
      PatriciaTrie<String> patriciaTrie6 = new PatriciaTrie<String>(patriciaTrie5);
      assertNotNull(patriciaTrie6);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie4));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie6.subtree("", 0, (-976));
      assertNotSame(patriciaTrie5, patriciaTrie3);
      assertNotSame(patriciaTrie5, patriciaTrie6);
      assertNotSame(patriciaTrie5, patriciaTrie2);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNotSame(patriciaTrie6, patriciaTrie3);
      assertNotSame(patriciaTrie6, patriciaTrie5);
      assertNotSame(patriciaTrie6, patriciaTrie2);
      assertNotSame(patriciaTrie6, patriciaTrie4);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie6));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie4));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(3091);
      assertEquals(3091, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer0, 3091);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.getValue();
      assertEquals(3091, object0);
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Object object1 = patriciaTrie0.put("", object0);
      assertNull(object1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.lastEntry();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie2.prefixMap("");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      String string0 = patriciaTrie3.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(32768);
      assertEquals(32768, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Integer integer1 = new Integer((-955));
      assertEquals((-955), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=32768 [2], value=32768, parent=null, left=32768 [2], right=null, predecessor=32768 [2])", string1);
      assertNotNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie3.subtree("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", 144, 4033);
      assertNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      String string0 = patriciaTrie4.put("!$=Ap7F@%[!44i~", "M(~esS~d(hV");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(string0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>(patriciaTrie3);
      assertNotNull(patriciaTrie5);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      
      String string1 = patriciaTrie5.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap", "M(~esS~d(hV");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertNotSame(patriciaTrie5, patriciaTrie3);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNull(string1);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      
      String string2 = patriciaTrie4.put("", "m3Z)X [i!c)");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertNotSame(patriciaTrie4, patriciaTrie5);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(string2);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie4.select("M(~esS~d(hV");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertNotSame(patriciaTrie4, patriciaTrie5);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotNull(map_Entry0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.replaceAll(biFunction0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      int int0 = patriciaTrie0.lengthInBits("47_=nOVs\"1");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertEquals(160, int0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>("j dmV6#I#DMv)", "/n+7Q*", 16);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, abstractPatriciaTrie_TrieEntry1);
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(patriciaTrie2);
      
      Set<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>> set0 = (Set<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>>)patriciaTrie2.entrySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("null", (String) null);
      assertNull(string0);
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("^!!");
      assertNotNull(map_Entry0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string1 = patriciaTrie1.lastKey();
      assertEquals("null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("null", (String) null);
      assertNull(string0);
      
      Integer integer0 = new Integer(336);
      assertEquals(336, (int)integer0);
      assertNotNull(integer0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      int int0 = patriciaTrie2.lengthInBits("w~K0U$ts");
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertEquals(128, int0);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer1 = new Integer(13);
      assertEquals(13, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer1, ">HMcrMb7 Fv", 13);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", (Object) null, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Object object0 = abstractPatriciaTrie_TrieEntry1.getKey();
      assertEquals("", object0);
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.getEntry("");
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer2 = new Integer((-1779));
      assertEquals((-1779), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(13);
      assertEquals(13, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      
      Integer integer4 = new Integer(160);
      assertEquals(160, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Integer integer5 = new Integer(0);
      assertEquals(0, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer integer6 = patriciaTrie3.put("null", integer5);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNull(integer6);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie2);
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      int int1 = patriciaTrie4.bitsPerElement();
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      Integer integer7 = patriciaTrie3.computeIfPresent("null", biFunction0);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNull(integer7);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie5);
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie5.lowerEntry("org.apache.commons.collections4otrie.AbstractPatriciaTrie");
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1664);
      assertEquals(1664, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("/};ULkhv'RVj", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Integer integer2 = new Integer(4033);
      assertEquals(4033, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", integer2, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("/};ULkhv'RVj", (Object) null, (-262));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isEmpty();
      assertFalse(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(integer2.equals((Object)integer0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string0 = patriciaTrie1.selectKey("7n0Rw5OP[Z&!sEaH ?");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNull(string0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>>((String) null, (AbstractMap.SimpleEntry<String, Integer>) null, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isEmpty();
      assertTrue(boolean1);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(boolean1 == boolean0);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie3.higherEntry("<$N?(sd");
      assertNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("null", (String) null);
      assertNull(string0);
      
      Integer integer0 = new Integer(336);
      assertEquals(336, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 1581);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Integer integer1 = new Integer(1581);
      assertEquals(1581, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, (Integer) null, 16);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(integer1.equals((Object)integer0));
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=1581 [16], value=null, parent=null, left=1581 [16], right=null, predecessor=1581 [16])", string1);
      assertNotNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.subtree((String) null, (-4160), 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer((-1037));
      assertEquals((-1037), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Integer integer1 = patriciaTrie2.put("", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", (Integer) null, 2704);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Integer integer2 = new Integer(812);
      assertEquals(812, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer2, 812);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry2.equals(patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
      
      int int0 = patriciaTrie2.lengthInBits("");
      assertEquals(0, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.getEntry((Object) null);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      Integer integer3 = new Integer(10);
      assertEquals(10, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer4 = patriciaTrie2.put("", integer3);
      assertEquals((-1037), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      
      Integer integer5 = patriciaTrie2.put("", (Integer) null);
      assertEquals(10, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer6 = patriciaTrie3.computeIfPresent("", biFunction0);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(integer6);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie4.lowerEntry("Y,d5;oJjB");
      assertNotSame(patriciaTrie4, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry6);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      String string0 = patriciaTrie4.put("!$=Ap7F@%[!44i~", "M(esSPd(hV");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(string0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      String string1 = patriciaTrie4.put("", "");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(string1);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      String string2 = patriciaTrie4.put("", "");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie3.select("!$=Ap7F@%[!44i~");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNull(map_Entry0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("null", "7/|H");
      assertNull(string0);
      
      String string1 = patriciaTrie1.put("null", "");
      assertEquals("7/|H", string1);
      assertNotNull(string1);
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie1.select("]={\n");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.higherEntry("&|]ne-^u");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie1.remove((Object) "&|]ne-^u");
      assertNull(string0);
      
      int int0 = (-2969);
      String string1 = patriciaTrie2.previousKey("2Q\"H");
      assertNull(string1);
      
      Integer integer0 = new Integer((-2969));
      assertEquals((-2969), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(hashMap0);
      assertNotNull(patriciaTrie3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      int int1 = patriciaTrie0.lengthInBits("@Q5");
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertEquals(48, int1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.getEntry(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      boolean boolean0 = patriciaTrie0.compareKeys("", "");
      assertTrue(boolean0);
      
      String string1 = patriciaTrie0.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator");
      assertNull(string1);
      
      String string2 = patriciaTrie0.remove((Object) "");
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = patriciaTrie0.put("", ",)8a ");
      assertNull(string3);
      
      String string4 = patriciaTrie0.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator");
      assertEquals(",)8a ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = patriciaTrie0.put("", "=");
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.subMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator", ",)8a ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fromKey > toKey
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("Qe3~$pV`J4E", "Qe3~$pV`J4E");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.remove((Object) "Cannot determine prefix outside of Character boundaries");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("k2Q\"vc");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.nextKey("h*oy_;J+]Dw@>B,?U");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.previousKey("*/iKa9(hNSUz>;A");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer(4033);
      assertEquals(4033, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Object object0 = patriciaTrie2.put("", integer2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(object0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.lowerEntry("&w");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Object object1 = patriciaTrie2.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(4033, object1);
      assertNotNull(object1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(object1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1664);
      assertEquals(1664, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("/};ULkhv'RVj", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Integer integer2 = new Integer(4033);
      assertEquals(4033, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer4 = new Integer(4033);
      assertEquals(4033, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer integer5 = patriciaTrie0.getOrDefault("/};ULkhv'RVj", integer4);
      assertEquals(1664, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer6 = new Integer(1);
      assertEquals(1, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      
      boolean boolean0 = patriciaTrie0.containsKey("*/iKa9(hNSUz>;A");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(boolean0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", "", (-434));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertEquals("", object0);
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Object object1 = patriciaTrie0.remove((Object) "");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie0.previousKey("25Oi");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("25Oi", "25Oi", (-2969));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=25Oi [-2969], value=25Oi, parent=null, left=25Oi [-2969], right=null, predecessor=25Oi [-2969])", string1);
      assertNotNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.key = "25Oi";
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      assertNotNull(patriciaTrie2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int0 = patriciaTrie2.lengthInBits("Entry(key=25Oi [-2969], value=25Oi, parent=null, left=25Oi [-2969], right=null, predecessor=25Oi [-2969])");
      assertEquals(1680, int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>("", "25Oi", (-1779));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      Object object0 = abstractPatriciaTrie_TrieEntry2.getKey();
      assertEquals("", object0);
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(object0.equals((Object)string1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.getEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(160);
      assertEquals(160, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie2.put("", integer2);
      assertNull(integer3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      int int1 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Integer integer4 = patriciaTrie2.computeIfPresent("", biFunction0);
      assertNull(integer4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.lowerEntry("org.apache.commons.collections4otrie.AbstractPatriciaTrie");
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie3));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = patriciaTrie0.subMap("Nl_HCX=", "Nl_HCX=");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      String string0 = patriciaTrie0.nextKey("predecessor=");
      assertNull(string0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      String string0 = patriciaTrie4.put("!$=Ap7F@%[!44i~", "M(~esSPd(hV");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(string0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry((String) null);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(192);
      assertEquals(192, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.put("] aW:yD+.s", integer0);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(integer1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>(sortedMap0);
      assertNotNull(patriciaTrie5);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer((-989));
      assertEquals((-989), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      boolean boolean0 = patriciaTrie5.containsKey("g{+:W&0(.");
      assertNotSame(patriciaTrie0, patriciaTrie5);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie5);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie5, patriciaTrie1);
      assertNotSame(patriciaTrie5, patriciaTrie2);
      assertNotSame(patriciaTrie5, patriciaTrie0);
      assertFalse(boolean0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      boolean boolean0 = patriciaTrie0.containsKey(" [");
      assertFalse(boolean0);
      
      boolean boolean1 = patriciaTrie0.remove((Object) " [", (Object) " [");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.toString();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("Trie[1]={\n  Entry(key=*/iKa9(hNSUz>;A [10], value=4033, parent=ROOT, left=ROOT, right=*/iKa9(hNSUz>;A [10], predecessor=*/iKa9(hNSUz>;A [10])\n}\n", string0);
      assertNotNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.lowerEntry("&w");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      patriciaTrie3.clear();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie3.subtree("keyAnalyzer", (-4160), 4033);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer((-3));
      assertEquals((-3), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-3));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(";_K ");
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(boolean1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(boolean1 == boolean0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      patriciaTrie0.clear();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.ceilingEntry("nii[tasF[}");
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string0 = patriciaTrie2.nextKey("86k!v");
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Set<String> set0 = patriciaTrie2.keySet();
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(";_K "));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer1 = new Integer((-937));
      assertEquals((-937), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = patriciaTrie1.merge("Eg`|b%Svi4h", integer1, biFunction0);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertEquals((-937), (int)integer2);
      assertNotNull(integer2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      Integer integer3 = patriciaTrie2.compute("_0u\"", biFunction1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(integer3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      String string1 = patriciaTrie3.putIfAbsent("", "som");
      assertNull(string1);
      
      String string2 = patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", (String) null);
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie3.getNearestEntryForKey("keyAnalyzer", (-3));
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains(""));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.higherEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      int int0 = patriciaTrie2.bitsPerElement();
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertEquals(16, int0);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.computeIfPresent("", (BiFunction<? super String, ? super Integer, ? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("^wyGB3x", (-1623));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("*/iKa9(hNSUz>;A", "keyAnalyzer");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      String string1 = patriciaTrie1.put("F(bdr", ")");
      assertNull(string1);
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie1.select((String) null);
      assertNotNull(map_Entry0);
      
      boolean boolean0 = patriciaTrie0.containsKey("keyAnalyzer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.floorEntry("EBboM");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      Object object0 = patriciaTrie3.put("\n", "EBboM");
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertNull(object0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.toString();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("Trie[1]={\n  Entry(key=*/iKa9(hNSUz>;A [10], value=4033, parent=ROOT, left=ROOT, right=*/iKa9(hNSUz>;A [10], predecessor=*/iKa9(hNSUz>;A [10])\n}\n", string0);
      assertNotNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.lowerEntry("&w");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("null", (String) null);
      assertNull(string0);
      
      Integer integer0 = new Integer(336);
      assertEquals(336, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 1581);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Integer integer1 = new Integer(1581);
      assertEquals(1581, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("null", (Integer) null, (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.nextEntryImpl(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = "";
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Integer integer0 = new Integer(1369);
      assertEquals(1369, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie2.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer((-2));
      assertEquals((-2), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie2.put(" is not an internal Entry!", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string1 = patriciaTrie2.toString();
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertEquals("Trie[2]={\n  Entry(key= is not an internal Entry! [10], value=-2, parent=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet [9], left=ROOT, right= is not an internal Entry! [10], predecessor= is not an internal Entry! [10])\n  Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet [9], value=1369, parent=ROOT, left= is not an internal Entry! [10], right=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet [9], predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet [9])\n}\n", string1);
      assertNotNull(string1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.subMap("Trie[2]={\n  Entry(key= is not an internal Entry! [10], value=-2, parent=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet [9], left=ROOT, right= is not an internal Entry! [10], predecessor= is not an internal Entry! [10])\n  Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet [9], value=1369, parent=ROOT, left= is not an internal Entry! [10], right=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet [9], predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet [9])\n}\n", "=");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fromKey > toKey
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      Integer integer0 = new Integer(32768);
      assertEquals(32768, (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = patriciaTrie1.put("", integer0);
      assertNull(integer1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      
      int int0 = patriciaTrie3.bitsPerElement();
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertEquals(16, int0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.floorEntry("");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie0.previousKey("25Oi");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("25Oi", "25Oi", (-2969));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=25Oi [-2969], value=25Oi, parent=null, left=25Oi [-2969], right=null, predecessor=25Oi [-2969])", string1);
      assertNotNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.key = "25Oi";
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie2.put("", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie2.put("is", integer2);
      assertNull(integer3);
      assertTrue(integer2.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer4 = patriciaTrie4.computeIfPresent("$", biFunction0);
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(integer4);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.firstEntry();
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      
      PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>(patriciaTrie4);
      assertNotNull(patriciaTrie5);
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie4.mapIterator();
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie2, patriciaTrie5);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie5);
      assertNotNull(orderedMapIterator0);
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.previousEntry(abstractPatriciaTrie_TrieEntry2);
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie2, patriciaTrie5);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie4.floorEntry("=!");
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie2, patriciaTrie5);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie5);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Object> patriciaTrie6 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie6);
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie0));
      
      Object object0 = patriciaTrie6.put("25Oi", (Object) null);
      assertNotSame(patriciaTrie6, patriciaTrie0);
      assertNull(object0);
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      Integer integer0 = new Integer((-1668));
      assertEquals((-1668), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Integer integer1 = new Integer((-1668));
      assertEquals((-1668), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-458));
      assertEquals((-458), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer2, (-3656));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("RootEntry(key=-1668 [-1], value=-1668, parent=null, left=ROOT, right=null, predecessor=ROOT)", string0);
      assertNotNull(string0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.forEach((BiConsumer<? super String, ? super String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("null", (String) null);
      assertNull(string0);
      
      Integer integer0 = new Integer(336);
      assertEquals(336, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Integer integer1 = new Integer(12);
      assertEquals(12, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-2178));
      assertEquals((-2178), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("wEtrY", integer2, 623);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      String string1 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=null [0], value=336, parent=null, left=null [0], right=null, predecessor=null [0])", string1);
      assertNotNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      Integer integer3 = new Integer(336);
      assertEquals(336, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = abstractPatriciaTrie_TrieEntry2.setValue(integer3);
      assertEquals((-2178), (int)integer4);
      assertNotNull(integer4);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(integer0.equals((Object)integer4));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.getNearestEntryForKey((String) null, 12);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry2));
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie3);
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, (String) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer4));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)integer4));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>>("", abstractMap_SimpleEntry0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(integer0.equals((Object)integer4));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry6 = abstractPatriciaTrie_TrieEntry5.right;
      assertNull(abstractPatriciaTrie_TrieEntry6);
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.addEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>>) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = patriciaTrie0.lengthInBits("`GqKa_ ");
      assertEquals(112, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.getEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer1 = patriciaTrie0.put("`GqKa_ ", integer0);
      assertNull(integer1);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer2 = patriciaTrie0.put("", (Integer) null);
      assertNull(integer2);
      
      String string0 = "Y,d5;oJjB";
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer3 = patriciaTrie0.computeIfPresent("`=J$EarRg", biFunction0);
      assertNull(integer3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(orderedMapIterator0);
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      boolean boolean0 = patriciaTrie0.containsKey("*/iKa9(hNSUz>;A");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(boolean0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("y\"", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.get("DNlN$MtOvF:R&d");
      assertNull(object0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = patriciaTrie2.computeIfPresent((String) null, biFunction0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(object1);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Object object2 = hashMap0.put("", patriciaTrie0);
      assertNull(object2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string0 = patriciaTrie2.selectKey("");
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(string0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("6kT<e'21*+h5", integer0);
      assertNull(integer1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.headMap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must have a from or to!
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string0 = patriciaTrie3.put("BR", "BR");
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(string0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Integer integer0 = new Integer(336);
      assertEquals(336, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(336);
      assertEquals(336, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer1, 1581);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Integer integer2 = new Integer(32768);
      assertEquals(32768, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(1);
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(16);
      assertEquals(16, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer3, integer4, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=1 [1], value=16, parent=null, left=1 [1], right=null, predecessor=1 [1])", string1);
      assertNotNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.subtree("j#.Z>2vcyTt/+*", 336, (-3461));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie2.prefixMap("");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      String string0 = patriciaTrie3.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer((-955));
      assertEquals((-955), (int)integer0);
      assertNotNull(integer0);
      
      String string1 = patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "1Rp)");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, 32768);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie3.subtree("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", 144, 4033);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer integer0 = new Integer((-1526));
      assertEquals((-1526), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("dh*DG0e:2cF@NL!", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator1);
      assertNotNull(comparator2);
      
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, String>>(integer0, abstractMap_SimpleEntry1, (-1526));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      boolean boolean1 = patriciaTrie0.isBitSet("es;cLGR [b+AM", (-1526), (-1526));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(boolean1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(boolean1 == boolean0);
      
      String string0 = patriciaTrie1.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", ";)iZBk\"3$?gIwsew");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      int int0 = patriciaTrie1.lengthInBits(";)iZBk\"3$?gIwsew");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(256, int0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.higherEntry("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, (-3656));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(integer0.equals((Object)int0));
      
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      Comparator<Map.Entry<Integer, Integer>> comparator3 = Map.Entry.comparingByValue();
      assertNotNull(comparator3);
      
      abstractPatriciaTrie_TrieEntry2.value = integer0;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      String string1 = abstractPatriciaTrie_TrieEntry2.toString();
      assertEquals("Entry(key=-1526 [0], value=-1526, parent=null, left=-1526 [0], right=-1526 [-3656], predecessor=-1526 [0])", string1);
      assertNotNull(string1);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.subtree("dh*DG0e:2cF@NL!", (-1), (-3656));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer0 = new Integer(1161);
      assertEquals(1161, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("  ", integer0);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(integer1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        patriciaTrie0.subtree("G?-iFp^QREcg$", (-1), (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The offsets and lengths must be at Character boundaries
//         //
//         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.put("U?]", "\n");
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.selectKey((String) null);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("U?]", string1);
      assertNotNull(string1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string2 = patriciaTrie1.put("", "");
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("");
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(32768);
      assertEquals(32768, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(32768);
      assertEquals(32768, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(32768);
      assertEquals(32768, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer2, 32768);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.subtree("  ", 32768, 3083);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      String string0 = patriciaTrie4.put("!$=Ap7F@%[!44i~", "M(~esSPd(hV");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(string0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      boolean boolean0 = patriciaTrie4.isBitSet("es;cLGR [b+AM", 2, 32768);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertFalse(boolean0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie5);
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      
      String string1 = patriciaTrie5.put("es;cLGR [b+AM", "");
      assertNotSame(patriciaTrie5, patriciaTrie3);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNull(string1);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      
      int int0 = patriciaTrie3.lengthInBits("");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertEquals(0, int0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie5));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie5.higherEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNotSame(patriciaTrie5, patriciaTrie3);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, 32768);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, (-3656));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(integer0.equals((Object)int0));
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      String string2 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=null [32768], value=null, parent=null, left=null [32768], right=null, predecessor=null [32768])", string2);
      assertNotNull(string2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie4.subtree((String) null, 0, 144);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertNotSame(patriciaTrie4, patriciaTrie5);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, Object> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      int int0 = patriciaTrie0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("y\"", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("y\"", integer0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(patriciaTrie0);
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      String string0 = "gwP.[Uy8Q";
      int int0 = patriciaTrie0.lengthInBits("gwP.[Uy8Q");
      assertEquals(144, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.getEntry("gwP.[Uy8Q");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      Integer integer2 = patriciaTrie0.put("`=J$EarRg", integer0);
      assertNull(integer2);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer3 = patriciaTrie0.put("`=J$EarRg", (Integer) null);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      
      String string1 = "Y,d5;oJjB";
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer4 = patriciaTrie0.computeIfPresent("Y,d5;oJjB", biFunction0);
      assertNull(integer4);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.firstEntry();
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry1));
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(orderedMapIterator0.hasNext());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      assertNotNull(patriciaTrie0);
      
      boolean boolean0 = patriciaTrie0.isBitSet("", 0, 0);
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("5Q(_y~hM^|<U;", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer((-2659));
      assertEquals((-2659), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("5Q(_y~hM^|<U;", integer0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Integer integer1 = new Integer((-2565));
      assertEquals((-2565), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, (String) null, (-2659));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = abstractPatriciaTrie_TrieEntry2.key;
      assertEquals((-2565), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = hashMap0.getOrDefault(integer2, integer0);
      assertEquals((-2659), (int)integer3);
      assertNotNull(integer3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.parent;
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      assertNull(abstractPatriciaTrie_TrieEntry4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      Integer integer2 = patriciaTrie0.remove((Object) null);
      assertNull(integer2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.toString();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("Trie[1]={\n  Entry(key=*/iKa9(hNSUz>;A [10], value=4033, parent=ROOT, left=ROOT, right=*/iKa9(hNSUz>;A [10], predecessor=*/iKa9(hNSUz>;A [10])\n}\n", string0);
      assertNotNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.lowerEntry("*/iKa9(hNSUz>;A");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      Integer integer3 = new Integer(32768);
      assertEquals(32768, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = patriciaTrie1.put("R!", (Integer) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(integer4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer5 = new Integer(4033);
      assertEquals(4033, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.containsKey(integer3);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = "";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.remove((Object) patriciaTrie0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.previousKey(" -> ");
      assertNull(string0);
      
      Object object0 = patriciaTrie1.put("", (Object) null);
      assertNull(object0);
      
      Object object1 = patriciaTrie1.put(" -> ", " -> ");
      assertNull(object1);
      
      String string1 = patriciaTrie0.put(" -> ", " -> ");
      assertNull(string1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.nextKey((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.nextKey("predecessor=");
      assertNull(string0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer integer0 = new Integer((-1974));
      assertEquals((-1974), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>((String) null, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      assertNotNull(comparator1);
      
      Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
      assertNotNull(comparator2);
      
      Integer integer1 = abstractMap_SimpleEntry0.setValue(integer0);
      assertEquals((-1974), (int)integer1);
      assertNotNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>>("org.apache.commons.collections4.trie.KeyAnalyzer", abstractMap_SimpleEntry0, (-1974));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.nextKey("GU%uLJK9T_}yg*S|a");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = patriciaTrie0.previousKey(" is not an external Entry!");
      assertNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object object0 = hashMap0.put((String) null, patriciaTrie0);
      assertNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Integer integer0 = new Integer((-1299));
      assertEquals((-1299), (int)integer0);
      assertNotNull(integer0);
      
      Object object2 = hashMap0.put(" is not an external Entry!", integer0);
      assertNull(object2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      Object object3 = patriciaTrie0.put("C$yLjjiV~7gE", object1);
      assertNull(object3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      Object object4 = hashMap0.put(" is not an external Entry!", (Object) null);
      assertEquals((-1299), object4);
      assertNotNull(object4);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      patriciaTrie0.modCount = (-1299);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      Integer integer1 = new Integer(1425);
      assertEquals(1425, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object4));
      
      Object object5 = hashMap0.put(" is not an external Entry!", integer1);
      assertNull(object5);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object4));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("Q8-#,wUr26R$");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      Object object6 = hashMap0.put("Q8-#,wUr26R$", (Object) null);
      assertNull(object6);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      
      Integer integer2 = new Integer(2123);
      assertEquals(2123, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object4));
      assertFalse(integer2.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer2, " is not an external Entry!", (-1299));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object4));
      assertFalse(integer2.equals((Object)integer1));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object4));
      assertFalse(integer2.equals((Object)integer1));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("Q8-#,wUr26R$", " is not an external Entry!", (-19));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer integer0 = new Integer(981);
      assertEquals(981, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 981);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("_R<L*a'$+VH", "keyAnalyzer", (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      patriciaTrie0.replaceAll(biFunction0);
      Integer integer2 = patriciaTrie0.put("oo", (Integer) null);
      assertNull(integer2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      int int0 = patriciaTrie1.size();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(2, int0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer((-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer4 = new Integer(4033);
      assertEquals(4033, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      
      boolean boolean0 = patriciaTrie1.containsKey((Object) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(boolean0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer5 = new Integer((-1629));
      assertEquals((-1629), (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer5, "*/iKa9(hNSUz>;A", (-3));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      
      String string0 = abstractPatriciaTrie_TrieEntry2.toString();
      assertEquals("Entry(key=-1629 [-3], value=*/iKa9(hNSUz>;A, parent=null, left=-1629 [-3], right=null, predecessor=-1629 [-3])", string0);
      assertNotNull(string0);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = patriciaTrie1.put("!$=Ap7F@%[!44i~", "*/iKa9(hNSUz>;A");
      assertNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean0 = patriciaTrie1.isBitSet("U", (-2), (-2));
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string1 = patriciaTrie1.put("J!vv4[", (String) null);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNull(string1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      int int0 = patriciaTrie1.lengthInBits("es;cLGR [b+AM");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertEquals(208, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.higherEntry((String) null);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, 304);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      String string2 = patriciaTrie3.put("rQi#[TH6S,7/Y1Yj", "U");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNull(string2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      
      Integer integer0 = new Integer(208);
      assertEquals(208, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie2.select("!$=Ap7F@%[!44i~");
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNull(map_Entry0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie4.getEntry((Object) null);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = patriciaTrie4.put("  ", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("b^@$9gZw8JQ7");
      assertNull(map_Entry0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      boolean boolean0 = patriciaTrie1.containsKey((Object) null);
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("b^@$9gZw8JQ7", patriciaTrie0, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<Object, Object>>, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("b^@$9gZw8JQ7", "", 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "+J* 7JSHoqiPJO6TG", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Integer>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      String string0 = abstractPatriciaTrie_TrieEntry4.toString();
      assertEquals("Entry(key=2 [0], value=+J* 7JSHoqiPJO6TG, parent=null, left=2 [0], right=null, predecessor=2 [0])", string0);
      assertNotNull(string0);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = hashMap0.put("Entry(key=2 [0], value=+J* 7JSHoqiPJO6TG, parent=null, left=2 [0], right=null, predecessor=2 [0])", integer1);
      assertNull(integer2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(integer1.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      assertNotNull(patriciaTrie2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = patriciaTrie2.firstKey();
      assertEquals("Entry(key=2 [0], value=+J* 7JSHoqiPJO6TG, parent=null, left=2 [0], right=null, predecessor=2 [0])", string1);
      assertNotNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 2855);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "v/Dww$O3lnZ";
      Integer integer0 = new Integer((-83));
      assertEquals((-83), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("", integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.put((String) null, abstractMap_SimpleEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      // Undeclared exception!
//      try { 
        patriciaTrie0.put((String) null, set0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Key cannot be null
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1664);
      assertEquals(1664, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("/};ULkhv'RVj", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Integer integer2 = new Integer(4033);
      assertEquals(4033, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer4 = new Integer(1);
      assertEquals(1, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      
      boolean boolean0 = patriciaTrie0.containsKey("*/iKa9(hNSUz>;A");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(boolean0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(32768);
      assertEquals(32768, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = patriciaTrie0.put("wbAkCRrzo*W0", integer0);
      assertNull(object0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains(32768));
      assertFalse(collection0.contains("wbAkCRrzo*W0"));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("u", "u");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.ceilingEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertSame(set1, set0);
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("  ", patriciaTrie1, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.nextKey("predecessor=");
      assertNull(string0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("predecessor=", (String) null, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3));
      assertEquals((-3), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, integer1, (-1024));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = abstractPatriciaTrie_TrieEntry2.key;
      assertNull(integer2);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, (Object) null, (-1024));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, patriciaTrie1, 3278);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      
      Object object0 = abstractPatriciaTrie_TrieEntry4.setValue(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      
      String string1 = abstractPatriciaTrie_TrieEntry4.toString();
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertEquals("Entry(key=0 [3278], value=Entry(key=predecessor= [0], value=null, parent=ROOT, left=predecessor= [0], right=ROOT, predecessor=predecessor= [0]), parent=null, left=0 [3278], right=null, predecessor=0 [3278])", string1);
      assertNotNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      boolean boolean0 = patriciaTrie0.compareKeys("ToKey is out of range: ", "g^yxB%6#DO");
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("g^yxB%6#DO"));
      
      boolean boolean1 = patriciaTrie1.replace("ToKey is out of range: ", "<7&!I,3B'G9ip[.]a", "\n");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      patriciaTrie1.decrementSize();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      String string1 = patriciaTrie0.selectKey("");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put(";;#?EGDfy(}~2'z", ";;#?EGDfy(}~2'z");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("9Y", "T?him(");
      assertNull(string3);
      
      boolean boolean0 = patriciaTrie0.compareKeys("pXr%rf5r;", "pXr%rf5r;");
      assertTrue(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, patriciaTrie0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      int int0 = (-75);
      abstractPatriciaTrie_TrieEntry0.left = null;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertFalse(boolean1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, (Object) null, (-75));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.key = (Object) "";
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.parent = null;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      String string4 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=null [0], value=Trie[2]={\n  Entry(key=9Y [14], value=T?him(, parent=;;#?EGDfy(}~2'z [10], left=9Y [14], right=;;#?EGDfy(}~2'z [10], predecessor=9Y [14])\n  Entry(key=;;#?EGDfy(}~2'z [10], value=;;#?EGDfy(}~2'z, parent=ROOT, left=ROOT, right=9Y [14], predecessor=9Y [14])\n}\n, parent=null, left=null, right=null, predecessor=null [0])", string4);
      assertNotNull(string4);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean2 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(boolean2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      PatriciaTrie<Integer> patriciaTrie1 = null;
//      try {
        patriciaTrie1 = new PatriciaTrie<Integer>((Map<? extends String, ? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      int int0 = patriciaTrie0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
//      try { 
        patriciaTrie4.containsKey(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(3278);
      assertEquals(3278, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 3278);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 3278);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry0, "", (-3));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = 0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key== [0], value=, parent=null, left== [0], right=null, predecessor== [0])", string0);
      assertNotNull(string0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = "";
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      String string1 = abstractMap_SimpleEntry0.setValue("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Comparator<Map.Entry<String, String>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      Integer integer0 = new Integer((-187));
      assertEquals((-187), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, patriciaTrie1, 32768);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Object object0 = abstractPatriciaTrie_TrieEntry1.getKey();
      assertEquals((-187), object0);
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Integer integer1 = new Integer((-3666));
      assertEquals((-3666), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie1.remove((Object) object0, (Object) integer1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      String string0 = patriciaTrie4.put("!$=Ap7F@%[!44i~", "M(~esSPd(hV");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(string0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      boolean boolean0 = patriciaTrie4.isBitSet("es;cLGR [b+AM", 2, 32768);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertFalse(boolean0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie5);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie3));
      
      String string1 = patriciaTrie5.put("es;cLGR [b+AM", "");
      assertNotSame(patriciaTrie5, patriciaTrie3);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNull(string1);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      
      int int0 = patriciaTrie3.lengthInBits("");
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertEquals(0, int0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie5.higherEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNotSame(patriciaTrie5, patriciaTrie3);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, 32768);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      String string2 = patriciaTrie5.put("LQ;Nr|vr", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNotSame(patriciaTrie5, patriciaTrie3);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNull(string2);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie5.select((String) null);
      assertNotSame(patriciaTrie5, patriciaTrie3);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNotNull(map_Entry0);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      
      PatriciaTrie<Object> patriciaTrie6 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie6);
      
      // Undeclared exception!
//      try { 
        patriciaTrie6.getEntry(map_Entry0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "y\"";
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("y\"", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("y\"", integer0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(patriciaTrie0);
      assertFalse(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      String string1 = "gwP[Uy8";
      int int0 = patriciaTrie0.lengthInBits("gwP[Uy8");
      assertEquals(112, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.getEntry("gwP[Uy8");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      Integer integer2 = patriciaTrie0.put("`=J$EarRg", integer0);
      assertNull(integer2);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer3 = patriciaTrie0.put("`=J$EarRg", (Integer) null);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
//      try { 
        patriciaTrie2.subMap("G,fb9|<0", "=");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // fromKey > toKey
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(4033);
      assertEquals(4033, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.toString();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("Trie[1]={\n  Entry(key=*/iKa9(hNSUz>;A [10], value=4033, parent=ROOT, left=ROOT, right=*/iKa9(hNSUz>;A [10], predecessor=*/iKa9(hNSUz>;A [10])\n}\n", string0);
      assertNotNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.subMap("*/iKa9(hNSUz>;A", "=");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer(32768);
      assertEquals(32768, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie1.put("R!", (Integer) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(integer3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.previousKey("*/iKa9(hNSUz>;A");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      patriciaTrie2.incrementSize();
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1664);
      patriciaTrie0.put("/};ULkhv'RVj", integer0);
      String string0 = patriciaTrie0.selectKey("/};ULkhv'RVj");
      assertNotNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("keyAnalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Integer integer1 = new Integer(4033);
      patriciaTrie0.put("*/iKa9(hNSUz>;A", integer1);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer(1);
      boolean boolean0 = patriciaTrie0.containsKey("*/iKa9(hNSUz>;A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("sRv", "sRv");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.get("org.apache.commons.collections4.trie.KeyAnalyzer");
      patriciaTrie0.computeIfPresent("org.apache.commons.collections4.trie.KeyAnalyzer", biFunction0);
      hashMap0.put("", (Object) null);
      String string0 = patriciaTrie0.selectKey("v+");
      assertEquals("sRv", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = patriciaTrie0.get((Object) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-111));
      // Undeclared exception!
//      try { 
        patriciaTrie0.get(integer0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.subtree("G?-iFp^QREcg$", 2569, 2569);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie1.prefixMap("");
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      patriciaTrie4.isBitSet("es;cLGR [b+AM", 2, 32768);
      PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>();
      patriciaTrie5.put("es;cLGR [b+AM", "");
      patriciaTrie3.lengthInBits("");
      patriciaTrie5.higherEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, 32768);
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, (-3656));
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie4.subtree((String) null, 0, 144);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 664);
      abstractPatriciaTrie_TrieEntry0.bitIndex = 896;
      Integer integer1 = new Integer(896);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer1, 896);
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
      Integer integer2 = abstractPatriciaTrie_TrieEntry0.setValue(integer0);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.getNearestEntryForKey("", 2);
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer2, (String) null);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>>("Trie[", abstractMap_SimpleEntry0, (-1));
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.right;
      // Undeclared exception!
//      try { 
        patriciaTrie1.addEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>>) null, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.lowerEntry("keyAnalyzer");
      Integer integer0 = new Integer(4033);
      patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie1.toString();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      patriciaTrie3.put("keyAnalyzer", "*/iKa9(hNSUz>;A");
      patriciaTrie3.ceilingEntry("keyAnalyzer");
      Map.Entry<String, String> map_Entry0 = patriciaTrie3.select("}.s");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer(2);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(".iI", integer0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByValue();
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>((Object) null, abstractMap_SimpleImmutableEntry0, 2);
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("aj|K.");
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.put("EMJ8FwPaeM5(/{", "EMJ8FwPaeM5(/{");
      patriciaTrie1.entrySet();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = null;
      // Undeclared exception!
//      try { 
        patriciaTrie2.removeEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.lowerEntry("keyAnalyzer");
      Integer integer0 = new Integer(4033);
      patriciaTrie0.put("*/iKa9(hNSUz>;A", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer1 = new Integer(4033);
      Integer integer2 = new Integer(4033);
      patriciaTrie0.put("", integer2);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      patriciaTrie2.put("Trie[", integer1);
      patriciaTrie2.firstKey();
      patriciaTrie2.ceilingEntry("keyAnalyzer");
      patriciaTrie2.previousKey("");
      patriciaTrie2.incrementSize();
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie3.getNearestEntryForKey("keyAnalyzer", (-2387));
      patriciaTrie3.ceilingEntry("}\n");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.previousKey("");
      Integer integer0 = new Integer((-1136));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Trie[", integer0, 562);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      // Undeclared exception!
//      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 2260;
      Integer integer0 = new Integer(2260);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 0);
      Integer integer1 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, abstractPatriciaTrie_TrieEntry0, 1421);
      abstractPatriciaTrie_TrieEntry1.setValue("Trie[");
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.left = null;
      abstractPatriciaTrie_TrieEntry1.left = null;
      abstractPatriciaTrie_TrieEntry0.parent = null;
      abstractPatriciaTrie_TrieEntry0.bitIndex = (-2716);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      abstractPatriciaTrie_TrieEntry0.right.isInternalNode();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
//      try { 
        patriciaTrie0.lastKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", "", 2);
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("", integer1);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(integer0, abstractMap_SimpleEntry0, 1503);
      Object object0 = abstractPatriciaTrie_TrieEntry1.getKey();
      abstractPatriciaTrie_TrieEntry0.setValue(object0);
      abstractPatriciaTrie_TrieEntry0.key = (Object) "";
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer1, 2);
      abstractPatriciaTrie_TrieEntry0.setValue(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer(108);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer2, 428);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      Integer integer3 = new Integer(2350);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("JH>$~CgxHeg`", integer3, 2);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
      abstractPatriciaTrie_TrieEntry2.isExternalNode();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      patriciaTrie0.ceilingEntry("The offsets and lengths must be at Character boundaries");
      SortedMap<String, AbstractMap.SimpleEntry<Object, String>> sortedMap0 = patriciaTrie0.headMap("JH>$~CgxHeg`");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.higherEntry("");
      String string0 = "k\\I&Zd$ ";
      patriciaTrie0.select("kI&Zd$ ");
      patriciaTrie0.put("", "F^.-a>");
      patriciaTrie0.nextKey("F^.-a>");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.lengthInBits("2;V ^z/wWNL~<f");
      int int0 = 1136;
      patriciaTrie1.put("", "F^.-a>");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 1136);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
//      try { 
        patriciaTrie1.followLeft((AbstractPatriciaTrie.TrieEntry<String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("|%kB9H", "|%kB9H");
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("");
      patriciaTrie0.entrySet();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", patriciaTrie0, 1);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry1);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      String string0 = "^o'YY#X!AR&p5";
      Integer integer0 = new Integer(0);
      String string1 = "The offsets and lengths must be at Character boundaries";
      Object object0 = new Object();
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", object0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("^o'YY#X!AR&p5", integer0, 1);
      Integer integer1 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("The offsets and lengths must be at Character boundaries", integer1, 730);
      abstractPatriciaTrie_TrieEntry3.bitIndex = 0;
      abstractPatriciaTrie_TrieEntry2.left = abstractPatriciaTrie_TrieEntry3;
      Integer integer2 = new Integer(0);
      abstractPatriciaTrie_TrieEntry2.value = integer2;
      abstractPatriciaTrie_TrieEntry2.equals(sortedMap0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry2.right;
      // Undeclared exception!
//      try { 
        patriciaTrie1.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "", 32768);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      SortedMap<String, String> sortedMap0 = patriciaTrie1.headMap("k\">XCz^H");
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "fromKey > toKey";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("fromKey > toKey", "fromKey > toKey", 0);
      int int0 = (-3438);
      abstractPatriciaTrie_TrieEntry0.bitIndex = (-3438);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      // Undeclared exception!
//      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>(" -> ", " -> ", 32768);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "], ", 32768);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.key = " -> ";
      abstractPatriciaTrie_TrieEntry0.equals(" -> ");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>(" -> ", " -> ", 32768);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry0.isEmpty();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      // Undeclared exception!
//      try { 
        patriciaTrie0.firstKey();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "  ";
      String string1 = "D`Y%.3";
      String string2 = "";
      patriciaTrie0.put("  ", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("  ", "D`Y%.3", 3064);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
//      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("The offsets and lengths must be at Character boundaries", "u<|Wft4^R");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, String>>(patriciaTrie0, abstractMap_SimpleEntry0, 0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry0.value;
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry1, "u<|Wft4^R");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", abstractMap_SimpleEntry2);
      patriciaTrie0.decrementSize();
  }
}
