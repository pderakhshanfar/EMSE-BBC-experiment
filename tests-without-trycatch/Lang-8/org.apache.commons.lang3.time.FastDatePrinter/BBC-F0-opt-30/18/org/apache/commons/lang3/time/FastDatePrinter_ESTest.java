/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:06:33 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.FieldPosition;
import java.text.Format;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDatePrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDatePrinter_ESTest extends FastDatePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag("");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
//      try { 
        FastDatePrinter.getTimeZoneDisplay(timeZone0, true, Integer.MIN_VALUE, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal style: -2147483648
//         //
//         verifyException("java.util.TimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(8, 8);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT+08:08", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("* 9w*K:`z|Z M%^", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("GMT+08:08", timeZone0.getID());
      assertEquals(34, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("* 9w*K:`z|Z M%^", fastDatePrinter0.getPattern());
      
      String string0 = fastDatePrinter0.format(0L);
      assertNotNull(string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("* 91*8:`GMT+08:08|+0808 1%^", string0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("GMT+08:08", timeZone0.getID());
      assertEquals(34, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("* 9w*K:`z|Z M%^", fastDatePrinter0.getPattern());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("@ HHMy", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("@ HHMy", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "@ HHMy");
      assertNotNull(stringBuffer0);
      assertEquals(6, stringBuffer0.length());
      assertEquals("@ HHMy", stringBuffer0.toString());
      
      MockDate mockDate0 = new MockDate(3, 0, 424, 659, 1392, 100);
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("@ HHMy", fastDatePrinter0.getPattern());
      assertEquals(15, stringBuffer0.length());
      assertEquals("@ HHMy@ 1031904", stringBuffer0.toString());
      assertEquals("Sun Mar 27 10:13:40 GMT 1904", mockDate0.toString());
      assertEquals(15, stringBuffer1.length());
      assertEquals("@ HHMy@ 1031904", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2122), 98, 116, 110, 48, 988);
      assertNotNull(mockGregorianCalendar0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M", fastDatePrinter0.getPattern());
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2122,MONTH=98,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=116,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=110,HOUR_OF_DAY=110,MINUTE=48,SECOND=988,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(101);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format(date0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2122,MONTH=98,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=116,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=110,HOUR_OF_DAY=110,MINUTE=48,SECOND=988,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M", fastDatePrinter0.getPattern());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals("10", stringBuffer0.toString());
      assertEquals(2, stringBuffer1.length());
      assertEquals("10", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$s_");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("$s_", "$s_", ".zFkG");
      assertNotNull(locale0);
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("$s_", locale0.getLanguage());
      assertEquals("$s__$S__.zFkG", locale0.toString());
      assertEquals("$s_", locale0.getISO3Language());
      assertEquals("$S_", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("$s_ ($S_,.zFkG)", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("$s_", locale0.getLanguage());
      assertEquals("$s__$S__.zFkG", locale0.toString());
      assertEquals("$s_", locale0.getISO3Language());
      assertEquals("$S_", locale0.getCountry());
      assertEquals(30, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("$s_ ($S_,.zFkG)", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((long) (-601), stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("$s_", locale0.getLanguage());
      assertEquals("$s__$S__.zFkG", locale0.toString());
      assertEquals("$s_", locale0.getISO3Language());
      assertEquals("$S_", locale0.getCountry());
      assertEquals(30, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("$s_ ($S_,.zFkG)", fastDatePrinter0.getPattern());
      assertEquals(22, stringBuffer0.length());
      assertEquals("$59_ ($399_,.GMT523AD)", stringBuffer0.toString());
      assertEquals("$59_ ($399_,.GMT523AD)", stringBuffer1.toString());
      assertEquals(22, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("=/w", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("=/w", fastDatePrinter0.getPattern());
      
      MockDate mockDate0 = new MockDate((-1922), (-1294), 2);
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("=/w", fastDatePrinter0.getPattern());
      assertEquals("Sun Mar 02 00:00:00 GMT 131", mockDate0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals("=/10", stringBuffer0.toString());
      assertEquals(4, stringBuffer1.length());
      assertEquals("=/10", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1800, "");
      assertNotNull(simpleTimeZone0);
      assertEquals(1800, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1800,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1800, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1800,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      String string0 = fastDatePrinter0.toString();
      assertNotNull(string0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("FastDatePrinter[,zh_CN,]", string0);
      assertEquals(1800, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1800,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("", "", ".zFkG");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(".zFkG", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(".zFkG", fastDatePrinter0.getPattern());
      
      int[] intArray0 = new int[4];
      String string0 = fastDatePrinter0.parseToken(".zFkG", intArray0);
      assertNotNull(string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals("'.", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(".zFkG", fastDatePrinter0.getPattern());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      
      String string0 = FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
      assertNotNull(string0);
      assertEquals("\uADF8\uB9AC\uB2C8\uCE58 \uD45C\uC900\uC2DC", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertNull(timeZone0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "zsHmm");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=zsHmm,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("zsHmm", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("zsHmm", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("java.util.SimpleTimeZone[id=zsHmm,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("zsHmm", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(19, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("zsHmm", fastDatePrinter0.getPattern());
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
      assertNotNull(timeZone0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("java.util.SimpleTimeZone[id=zsHmm,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("zsHmm", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(19, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("zsHmm", fastDatePrinter0.getPattern());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("zsHmm", timeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=zsHmm,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals(0, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1806), ".zFkG", (-1806), 0, 3, 0, 0, 0, (-1806), 2, 2);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=.zFkG,offset=-1806,dstSavings=2,useDaylight=false,startYear=0,startMode=0,startMonth=-1806,startDay=0,startDayOfWeek=3,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=-1806,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1806), simpleTimeZone0.getRawOffset());
      assertEquals(".zFkG", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Z", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("java.util.SimpleTimeZone[id=.zFkG,offset=-1806,dstSavings=2,useDaylight=false,startYear=0,startMode=0,startMonth=-1806,startDay=0,startDayOfWeek=3,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=-1806,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1806), simpleTimeZone0.getRawOffset());
      assertEquals(".zFkG", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Z", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
      assertNotNull(timeZone0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("java.util.SimpleTimeZone[id=.zFkG,offset=-1806,dstSavings=2,useDaylight=false,startYear=0,startMode=0,startMonth=-1806,startDay=0,startDayOfWeek=3,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=-1806,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1806), simpleTimeZone0.getRawOffset());
      assertEquals(".zFkG", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Z", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals((-1806), timeZone0.getRawOffset());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=.zFkG,offset=-1806,dstSavings=2,useDaylight=false,startYear=0,startMode=0,startMonth=-1806,startDay=0,startDayOfWeek=3,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=-1806,endTime=2,endTimeMode=0]", timeZone0.toString());
      assertEquals(".zFkG", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "*] |*K:`z|Z(2 M,E", 3, 1, 2, 3, 2, 3, 3, 0, 1);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=*] |*K:`z|Z(2 M,E,offset=3,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=3,startDay=1,startDayOfWeek=2,startTime=3,startTimeMode=0,endMode=2,endMonth=2,endDay=3,endDayOfWeek=3,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(3, simpleTimeZone0.getRawOffset());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertEquals("*] |*K:`z|Z(2 M,E", simpleTimeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("*] |*K:`z|Z(2 M,E", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("java.util.SimpleTimeZone[id=*] |*K:`z|Z(2 M,E,offset=3,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=3,startDay=1,startDayOfWeek=2,startTime=3,startTimeMode=0,endMode=2,endMonth=2,endDay=3,endDayOfWeek=3,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(3, simpleTimeZone0.getRawOffset());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertEquals("*] |*K:`z|Z(2 M,E", simpleTimeZone0.getID());
      assertEquals("*] |*K:`z|Z(2 M,E", fastDatePrinter0.getPattern());
      assertEquals(35, fastDatePrinter0.getMaxLengthEstimate());
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
      assertNotNull(timeZone0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("java.util.SimpleTimeZone[id=*] |*K:`z|Z(2 M,E,offset=3,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=3,startDay=1,startDayOfWeek=2,startTime=3,startTimeMode=0,endMode=2,endMonth=2,endDay=3,endDayOfWeek=3,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(3, simpleTimeZone0.getRawOffset());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertEquals("*] |*K:`z|Z(2 M,E", simpleTimeZone0.getID());
      assertEquals("*] |*K:`z|Z(2 M,E", fastDatePrinter0.getPattern());
      assertEquals(35, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(3, timeZone0.getRawOffset());
      assertEquals(1, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=*] |*K:`z|Z(2 M,E,offset=3,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=3,startDay=1,startDayOfWeek=2,startTime=3,startTimeMode=0,endMode=2,endMonth=2,endDay=3,endDayOfWeek=3,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertTrue(timeZone0.useDaylightTime());
      assertEquals("*] |*K:`z|Z(2 M,E", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      String string0 = fastDatePrinter0.getPattern();
      assertNotNull(string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      int int0 = fastDatePrinter0.getMaxLengthEstimate();
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(0, int0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      MockDate mockDate0 = new MockDate(2307, 87, 2307, (-1310), 75, 2597);
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
      assertNull(stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("Tue May 30 11:58:17 GMT 4220", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1800, "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1800,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1800, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1800,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1800, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      MockDate mockDate0 = new MockDate((-3485L));
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1800,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1800, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Wed Dec 31 23:59:56 GMT 1969", mockDate0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      String string0 = fastDatePrinter0.format(date0);
      assertNotNull(string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")?'RqQU0(F.S$98G s");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(65, 90, 13, 2254, 1524, 1524);
      assertNotNull(mockGregorianCalendar0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
      assertNull(stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=65,MONTH=90,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2254,HOUR_OF_DAY=2254,MINUTE=1524,SECOND=1524,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 106, 2);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=106,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertNotNull(string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 1445, 2597, 0, 3);
      assertNotNull(mockGregorianCalendar0);
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
      assertNull(stringBuffer0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1445,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2597,HOUR_OF_DAY=2597,MINUTE=0,SECOND=3,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
      assertNull(stringBuffer0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1800, "");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1800, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1800,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1800, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1800,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format(3546L, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1800, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1800,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      String string0 = fastDatePrinter0.format((-449L));
      assertNotNull(string0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1445, (-2056), (-337), 0, 0, 1445);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
      assertNull(stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1445,MONTH=-2056,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-337,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1445,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 106, 2);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=106,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      int[] intArray0 = new int[7];
      // Undeclared exception!
//      try { 
        fastDatePrinter0.parseToken("", intArray0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(":6]~.da7", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(":6]~.da7", fastDatePrinter0.getPattern());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.parseToken(":6]~.14PM7", (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(39, "<';&FaG7G");
      assertNotNull(simpleTimeZone0);
      assertEquals("<';&FaG7G", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=<';&FaG7G,offset=39,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(39, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("ym", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("<';&FaG7G", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=<';&FaG7G,offset=39,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(39, simpleTimeZone0.getRawOffset());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("ym", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
//      try { 
        fastDatePrinter0.parseToken("ym", intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      
      // Undeclared exception!
//      try { 
        FastDatePrinter.getTimeZoneDisplay((TimeZone) null, false, 3, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("", "", ".zFkG");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      // Undeclared exception!
//      try { 
        FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 2, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal style: 2
//         //
//         verifyException("java.util.TimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("", "", ".zFkG");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(".zFkG", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(".zFkG", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(".zFkG", fastDatePrinter0.getPattern());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Date) null, stringBuffer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M", fastDatePrinter0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2012), 2);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=-2012,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format(date0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2122), 65, (-2122), 65, 2254, (-2122));
      assertNotNull(mockGregorianCalendar0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("d", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("d", fastDatePrinter0.getPattern());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("", "", ".zFkG");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(".zFkG", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals(".zFkG", fastDatePrinter0.getPattern());
      assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Calendar) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Z", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("Z", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 0, 1265, 3, 102, 2417);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1265,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=102,SECOND=2417,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DAY_OF_MONTH
//         //
//         verifyException("java.util.GregorianCalendar", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("/=hkk");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("/=hkk", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("/=hkk", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 120, 97, 334, 1, (-661));
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2,MONTH=120,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=97,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=334,HOUR_OF_DAY=334,MINUTE=1,SECOND=-661,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      assertNotNull(fieldPosition0);
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MONTH
//         //
//         verifyException("java.util.GregorianCalendar", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("M", fastDatePrinter0.getPattern());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      
      StringBuffer stringBuffer0 = new StringBuffer(7);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((long) 1, stringBuffer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format(1962L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("M", fastDatePrinter0.getPattern());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.equals(fastDatePrinter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("#Z", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("#Z", fastDatePrinter0.getPattern());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-1335), 0, (-1809), (-2122), (-1809));
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("ym", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("ym", fastDatePrinter0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 4, (-2156));
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=4,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2156,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(mockGregorianCalendar0.isLenient());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "ym");
      assertNotNull(stringBuffer0);
      assertEquals("ym", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // YEAR
//         //
//         verifyException("java.util.GregorianCalendar", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1285), "");
      assertNotNull(simpleTimeZone0);
      assertEquals((-1285), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-1285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$s_");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("$s_", "$s_", "@ 00110065");
      assertNotNull(locale0);
      assertEquals("$s_", locale0.getISO3Language());
      assertEquals("$s__$S__@ 00110065", locale0.toString());
      assertEquals("@ 00110065", locale0.getVariant());
      assertEquals("$S_", locale0.getCountry());
      assertEquals("$s_", locale0.getLanguage());
      
      String string0 = locale0.getDisplayName();
      assertNotNull(string0);
      assertEquals("$s_ ($S_,@ 00110065)", string0);
      assertEquals("$s_", locale0.getISO3Language());
      assertEquals("$s__$S__@ 00110065", locale0.toString());
      assertEquals("@ 00110065", locale0.getVariant());
      assertEquals("$S_", locale0.getCountry());
      assertEquals("$s_", locale0.getLanguage());
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertNotSame(timeZone1, timeZone0);
      assertNotNull(timeZone1);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertEquals("GMT", timeZone1.getID());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("zWWW", timeZone1, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertEquals("$s_", locale0.getISO3Language());
      assertEquals("$s__$S__@ 00110065", locale0.toString());
      assertEquals("@ 00110065", locale0.getVariant());
      assertEquals("$S_", locale0.getCountry());
      assertEquals("$s_", locale0.getLanguage());
      assertEquals("GMT", timeZone1.getID());
      assertEquals("zWWW", fastDatePrinter0.getPattern());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      
      String string1 = timeZone1.getDisplayName();
      assertNotSame(timeZone1, timeZone0);
      assertNotNull(string1);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Greenwich Mean Time", string1);
      assertEquals("GMT", timeZone1.getID());
      
      String string2 = fastDatePrinter0.format((-1L));
      assertNotSame(timeZone1, timeZone0);
      assertNotNull(string2);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("GMT005", string2);
      assertEquals("$s_", locale0.getISO3Language());
      assertEquals("$s__$S__@ 00110065", locale0.toString());
      assertEquals("@ 00110065", locale0.getVariant());
      assertEquals("$S_", locale0.getCountry());
      assertEquals("$s_", locale0.getLanguage());
      assertEquals("GMT", timeZone1.getID());
      assertEquals("zWWW", fastDatePrinter0.getPattern());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(" yy:m", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(" yy:m", fastDatePrinter0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer(" yy:m");
      assertNotNull(stringBuffer0);
      assertEquals(5, stringBuffer0.length());
      assertEquals(" yy:m", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(" yy:m", fastDatePrinter0.getPattern());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(" yy:m 14:21", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
      assertEquals(" yy:m 14:21", stringBuffer1.toString());
      assertEquals(11, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1806), ".zFkG", (-1806), 0, 3, 0, 0, 0, (-1806), 2, 2);
      assertNotNull(simpleTimeZone0);
      assertEquals((-1806), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=.zFkG,offset=-1806,dstSavings=2,useDaylight=false,startYear=0,startMode=0,startMonth=-1806,startDay=0,startDayOfWeek=3,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=-1806,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(".zFkG", simpleTimeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Z", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals((-1806), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=.zFkG,offset=-1806,dstSavings=2,useDaylight=false,startYear=0,startMode=0,startMonth=-1806,startDay=0,startDayOfWeek=3,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=-1806,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(".zFkG", simpleTimeZone0.getID());
      assertEquals("Z", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      
      String string0 = fastDatePrinter0.format((long) 0);
      assertNotNull(string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("-0000", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals((-1806), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=.zFkG,offset=-1806,dstSavings=2,useDaylight=false,startYear=0,startMode=0,startMonth=-1806,startDay=0,startDayOfWeek=3,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=-1806,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(".zFkG", simpleTimeZone0.getID());
      assertEquals("Z", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "*] |*K:`z|Z(2 M,E", 3, 1, 2, 3, 2, 3, 3, 0, 1);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=*] |*K:`z|Z(2 M,E,offset=3,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=3,startDay=1,startDayOfWeek=2,startTime=3,startTimeMode=0,endMode=2,endMonth=2,endDay=3,endDayOfWeek=3,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertEquals("*] |*K:`z|Z(2 M,E", simpleTimeZone0.getID());
      assertEquals(3, simpleTimeZone0.getRawOffset());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("*] |*K:`z|Z(2 M,E", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("java.util.SimpleTimeZone[id=*] |*K:`z|Z(2 M,E,offset=3,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=3,startDay=1,startDayOfWeek=2,startTime=3,startTimeMode=0,endMode=2,endMonth=2,endDay=3,endDayOfWeek=3,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertEquals("*] |*K:`z|Z(2 M,E", simpleTimeZone0.getID());
      assertEquals(3, simpleTimeZone0.getRawOffset());
      assertEquals(35, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("*] |*K:`z|Z(2 M,E", fastDatePrinter0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("java.util.SimpleTimeZone[id=*] |*K:`z|Z(2 M,E,offset=3,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=3,startDay=1,startDayOfWeek=2,startTime=3,startTimeMode=0,endMode=2,endMonth=2,endDay=3,endDayOfWeek=3,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertEquals("*] |*K:`z|Z(2 M,E", simpleTimeZone0.getID());
      assertEquals(3, simpleTimeZone0.getRawOffset());
      assertEquals(35, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("*] |*K:`z|Z(2 M,E", fastDatePrinter0.getPattern());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("*] |*8:`GMT+00:00|+0000(2 2,Fri", stringBuffer0.toString());
      assertEquals(31, stringBuffer0.length());
      assertEquals(31, stringBuffer1.length());
      assertEquals("*] |*8:`GMT+00:00|+0000(2 2,Fri", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "*] |*K:`z|Z(2 M,E", 3, 1, 2, 3, 2, 3, 3, 0, 114);
      assertNotNull(simpleTimeZone0);
      assertEquals("*] |*K:`z|Z(2 M,E", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=*] |*K:`z|Z(2 M,E,offset=3,dstSavings=114,useDaylight=true,startYear=0,startMode=2,startMonth=3,startDay=1,startDayOfWeek=2,startTime=3,startTimeMode=0,endMode=2,endMonth=2,endDay=3,endDayOfWeek=3,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(114, simpleTimeZone0.getDSTSavings());
      assertEquals(3, simpleTimeZone0.getRawOffset());
      assertTrue(simpleTimeZone0.useDaylightTime());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("*] |*K:`z|Z(2 M,E", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("*] |*K:`z|Z(2 M,E", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=*] |*K:`z|Z(2 M,E,offset=3,dstSavings=114,useDaylight=true,startYear=0,startMode=2,startMonth=3,startDay=1,startDayOfWeek=2,startTime=3,startTimeMode=0,endMode=2,endMonth=2,endDay=3,endDayOfWeek=3,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(114, simpleTimeZone0.getDSTSavings());
      assertEquals(3, simpleTimeZone0.getRawOffset());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(35, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("*] |*K:`z|Z(2 M,E", fastDatePrinter0.getPattern());
      
      String string0 = fastDatePrinter0.format(1002L);
      assertNotNull(string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("*] |*0:`GMT+00:00|+0000(2 1,Thu", string0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("*] |*K:`z|Z(2 M,E", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=*] |*K:`z|Z(2 M,E,offset=3,dstSavings=114,useDaylight=true,startYear=0,startMode=2,startMonth=3,startDay=1,startDayOfWeek=2,startTime=3,startTimeMode=0,endMode=2,endMonth=2,endDay=3,endDayOfWeek=3,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(114, simpleTimeZone0.getDSTSavings());
      assertEquals(3, simpleTimeZone0.getRawOffset());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(35, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("*] |*K:`z|Z(2 M,E", fastDatePrinter0.getPattern());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("aWSS)s", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("aWSS)s", fastDatePrinter0.getPattern());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-6105), "org.apache.commons.lang3.time.FastDatePrinter$TextField");
      assertNotNull(simpleTimeZone0);
      assertEquals((-6105), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDatePrinter$TextField,offset=-6105,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("org.apache.commons.lang3.time.FastDatePrinter$TextField", simpleTimeZone0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer("aWSS)s");
      assertNotNull(stringBuffer0);
      assertEquals("aWSS)s", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("aWSS)s", fastDatePrinter0.getPattern());
      assertEquals((-6105), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDatePrinter$TextField,offset=-6105,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("org.apache.commons.lang3.time.FastDatePrinter$TextField", simpleTimeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDatePrinter$TextField,offset=-6105,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=15,MILLISECOND=215,ZONE_OFFSET=-6105,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("aWSS)s\uC624\uD6C43215)15", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertEquals(15, stringBuffer1.length());
      assertEquals("aWSS)s\uC624\uD6C43215)15", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(" ym", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(" ym", fastDatePrinter0.getPattern());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(100, 2, 100, 613, 1871, 110);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ym");
      assertNotNull(stringBuffer0);
      assertEquals(3, stringBuffer0.length());
      assertEquals(" ym", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(" ym", fastDatePrinter0.getPattern());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58995575230000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=186,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=12,SECOND=50,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(" ym 010012", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals(10, stringBuffer1.length());
      assertEquals(" ym 010012", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("ym", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ym", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1000, 3, 0, 1, 1, 2);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertNotNull(string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("10001", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ym", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-30602012338000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1000,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=91,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("@ HHMy", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("@ HHMy", fastDatePrinter0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, (-794), 1, 0, 2, 73);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertNotNull(string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("@ 00110065", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("@ HHMy", fastDatePrinter0.getPattern());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-64160726207000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=65,MONTH=10,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=306,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=3,SECOND=13,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("$s_ ($S_,$)", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("$s_ ($S_,$)", fastDatePrinter0.getPattern());
      assertEquals(17, fastDatePrinter0.getMaxLengthEstimate());
      
      String string0 = fastDatePrinter0.format((long) 100);
      assertNotNull(string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("$0_ ($100_,$)", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("$s_ ($S_,$)", fastDatePrinter0.getPattern());
      assertEquals(17, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale1 = Locale.GERMAN;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("", timeZone0, locale1);
      assertNotNull(fastDatePrinter1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      
      boolean boolean0 = fastDatePrinter1.equals(fastDatePrinter0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertFalse(boolean0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1997), "");
      assertNotNull(simpleTimeZone0);
      assertEquals((-1997), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-1997,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals((-1997), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-1997,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals((-1997), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-1997,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(" ym", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(" ym", fastDatePrinter0.getPattern());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter1);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(" ym", fastDatePrinter0.getPattern());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fastDatePrinter0.equals(object0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertFalse(boolean0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertTrue(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null, 1);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(1, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Object) null, (StringBuffer) null, fieldPosition0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unknown class: <null>
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null, 118);
      assertNotNull(fieldPosition0);
      assertEquals(118, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals("java.text.FieldPosition[field=118,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      Long long0 = new Long(31);
      assertNotNull(long0);
      assertEquals(31L, (long)long0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Object) long0, (StringBuffer) null, fieldPosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(" ym", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(" ym", fastDatePrinter0.getPattern());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 10);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(10, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Object) stringBuffer0, (StringBuffer) null, fieldPosition0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unknown class: java.lang.StringBuffer
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("", "", ".zFkG");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(".zFkG", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(".zFkG", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(".zFkG", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      MockDate mockDate0 = new MockDate((-1), 99, (-1), 1563, 1, 651);
      assertNotNull(mockDate0);
      
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null, 90);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(90, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=90,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(".zFkG", fastDatePrinter0.getPattern());
      assertEquals(8, stringBuffer0.length());
      assertEquals(".GMT13AD", stringBuffer0.toString());
      assertEquals("Mon Jun 03 03:11:51 GMT 1907", mockDate0.toString());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(90, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=90,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(8, stringBuffer1.length());
      assertEquals(".GMT13AD", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("/=hkk");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("/=hkk", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("/=hkk", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals((-1), fieldPosition0.getField());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("/=hkk", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("/=820", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals((-1), fieldPosition0.getField());
      assertEquals("/=820", stringBuffer1.toString());
      assertEquals(5, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")?'RqQU0(F.S$98G s");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale(")?'RqQU0(F.S$98G s", ")?'RqQU0(F.S$98G s");
      assertNotNull(locale0);
      assertEquals(")?'rqqu0(f.s$98g s_)?'RQQU0(F.S$98G S", locale0.toString());
      assertEquals(")?'rqqu0(f.s$98g s", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(")?'RQQU0(F.S$98G S", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter(")?'rqqu0(f.s$98g s ()?'RQQU0(F.S$98G S)", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: R
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$s_");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("$s_", "$s_", ".zFkG");
      assertNotNull(locale0);
      assertEquals("$S_", locale0.getCountry());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("$s__$S__.zFkG", locale0.toString());
      assertEquals("$s_", locale0.getISO3Language());
      assertEquals("$s_", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'$0_ ($79_,.", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("$S_", locale0.getCountry());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("$s__$S__.zFkG", locale0.toString());
      assertEquals("$s_", locale0.getISO3Language());
      assertEquals("$s_", locale0.getLanguage());
      assertEquals("'$0_ ($79_,.", fastDatePrinter0.getPattern());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("'", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FieldPosition fieldPosition0 = new FieldPosition(2);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(2, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals("java.text.FieldPosition[field=2,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("'", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(2, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals("java.text.FieldPosition[field=2,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("No");
      assertNotNull(locale0);
      assertEquals("no", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("nor", locale0.getISO3Language());
      assertEquals("no", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("''Mv", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: v
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("ZZ%", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ZZ%", fastDatePrinter0.getPattern());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertNotNull(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      String string0 = fastDatePrinter0.format(calendar0);
      assertNotNull(string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("+00:00%", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ZZ%", fastDatePrinter0.getPattern());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("ym");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("*-ax9tFj", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: x
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("MM&v1[.", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: v
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("u7ZWRB2~", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: u
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("t<");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("t<", "t<", ".zFkG");
      assertNotNull(locale0);
      assertEquals("t<_T<_.zFkG", locale0.toString());
      assertEquals("T<", locale0.getCountry());
      assertEquals("t<", locale0.getLanguage());
      assertEquals(".zFkG", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("t< (T<,.zFkG)", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: t
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("srF}^sZ9-&j", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: r
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("yDH$q~S,", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: q
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("p,Ig#BSVvr5Lbp<^", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: p
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1667), ".zFkG");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=.zFkG,offset=-1667,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1667), simpleTimeZone0.getRawOffset());
      assertEquals(".zFkG", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: o
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("lnlfAyS", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: l
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(110, "e$M,Le*G?+M*Wk");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=e$M,Le*G?+M*Wk,offset=110,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(110, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("e$M,Le*G?+M*Wk", simpleTimeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("j5", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: j
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("Mi01!nlqlaM2/q*x", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: i
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("WgGd", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: g
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter(",#S[8f8NbRf'Z.Bw($E", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: f
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("$kk.ev+!Q2r", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: e
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(85, "x% ePvwR,v.):");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=x% ePvwR,v.):,offset=85,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(85, simpleTimeZone0.getRawOffset());
      assertEquals("x% ePvwR,v.):", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("79c*e-33}$GF/!<G", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: c
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("b", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: b
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("Yw.", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: Y
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("X)?N85(_I", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: X
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1122), " ym");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id= ym,offset=-1122,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(" ym", simpleTimeZone0.getID());
      assertEquals((-1122), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("H?21:9V4q@Vj", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: V
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("w, wUA?3Jv2VZd,", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: U
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(138, "*zWWW");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(138, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=*zWWW,offset=138,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("*zWWW", simpleTimeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("*GMT+00:00003", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: T
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("Qi?+O@4=kNHtX,;=", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: Q
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter(",94K$PSx51FJ@9:+", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: P
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("%N!OO1K[4m!.pdB%H}", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: N
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("LglS|mVk", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: L
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("J-x$r\u0005EQ}#:", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: J
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("Illegal pattern component: ", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: I
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("English (Canada)", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: n
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("D0OG<exFTC)gFuDM", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: O
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("CC", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: CC
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("FhB?bM", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: B
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("7A3=7\"", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: A
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("MM&3=", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("MM&3=", fastDatePrinter0.getPattern());
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertNotNull(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("MM&3=", fastDatePrinter0.getPattern());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(5, stringBuffer0.length());
      assertEquals("02&3=", stringBuffer0.toString());
      assertEquals(5, stringBuffer1.length());
      assertEquals("02&3=", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(" yy:m", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals(" yy:m", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      
      StringBuffer stringBuffer0 = new StringBuffer(" yy:m");
      assertNotNull(stringBuffer0);
      assertEquals(" yy:m", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals(" yy:m", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(" yy:m 69:59", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(" yy:m 69:59", stringBuffer1.toString());
      assertEquals(11, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("MMM", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("MMM", fastDatePrinter0.getPattern());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
      
      String string0 = fastDatePrinter0.format((-794L));
      assertNotNull(string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("Dez", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("MMM", fastDatePrinter0.getPattern());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("", "", ".zFkG");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(".zFkG", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(".zFkG", fastDatePrinter0.getPattern());
      
      String string0 = fastDatePrinter0.getPattern();
      assertNotNull(string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(".zFkG", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".zFkG", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(".zFkG", fastDatePrinter0.getPattern());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("/=hkk");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("/=hkk", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("/=hkk", fastDatePrinter0.getPattern());
      
      MockDate mockDate0 = new MockDate((-189), 1, (-189));
      assertNotNull(mockDate0);
      
      String string0 = fastDatePrinter0.format((Date) mockDate0);
      assertNotNull(string0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("/=1224", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("/=hkk", fastDatePrinter0.getPattern());
      assertEquals("Sat Jul 26 00:00:00 GMT 1710", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("", "", ".zFkG");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(".zFkG", timeZone0, locale0);
      fastDatePrinter0.hashCode();
      assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("MMM", timeZone0, locale0);
      fastDatePrinter0.getLocale();
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M", (TimeZone) null, locale0);
      // Undeclared exception!
//      try { 
        fastDatePrinter0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("", "", ".zFkG");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(".zFkG", timeZone0, locale0);
      int int0 = fastDatePrinter0.getMaxLengthEstimate();
      assertEquals(14, int0);
  }
}
