/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 03:48:38 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.FieldPosition;
import java.text.Format;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDatePrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDatePrinter_ESTest extends FastDatePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "vId#Ps'OG0s-j\"hL", 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Z", simpleTimeZone0, locale0);
      fastDatePrinter0.format((-1481L));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4675, "F@(@yE6',[ah6");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("F@(@yE6',[ah6", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-661), (-4003), (-1257), 0, (-1373), (-661));
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("GM'f0y-ajLaX?j[suf\"", timeZone0, locale0);
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      mockDate0.setTime((-1461));
      fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("aK", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2487, 3, 104, 3, 456, 0);
      fastDatePrinter0.format((Object) mockGregorianCalendar0, stringBuffer0, (FieldPosition) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("5&.'&K*", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("JYov");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(",", timeZone0, locale0);
      fastDatePrinter0.toString();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("@", timeZone0, locale0);
      int[] intArray0 = new int[6];
      fastDatePrinter0.parseToken("@", intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'", (TimeZone) null, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "0F%}5z^k$-,L_j9#u]");
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2201), "B");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2441), "");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getPattern();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockDate mockDate0 = new MockDate((-1618), 15, (-1618), 1, 2, 1);
      fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 3, 3, 3, 1919, 2);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 3, 3, 3, 1919, 2);
      fastDatePrinter0.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(15, (-769), 2, 0, 282);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.format(calendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("'");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 9, 78, 82, 0, 105);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      FieldPosition fieldPosition0 = new FieldPosition(13);
      fastDatePrinter0.format((Object) calendar0, (StringBuffer) null, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      FieldPosition fieldPosition0 = new FieldPosition(2560);
      fastDatePrinter0.format((Object) calendar0, stringBuffer0, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDatePrinter$PaddedNumberField");
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.format((long) (-410), (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z[", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer("z[");
      fastDatePrinter0.format(1L, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.format((-651L));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer(108);
      fastDatePrinter0.applyRules(calendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("$k", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance();
      fastDatePrinter0.applyRules(calendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      int[] intArray0 = new int[7];
      // Undeclared exception!
//      try { 
        fastDatePrinter0.parseToken("", intArray0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-70), "");
      Locale locale0 = Locale.GERMAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("!m", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDatePrinter0.parseToken("!m", (int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("aK", timeZone0, locale0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
//      try { 
        fastDatePrinter0.parseToken("", intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
//      try { 
        FastDatePrinter.getTimeZoneDisplay((TimeZone) null, false, 1, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
//      try { 
        FastDatePrinter.getTimeZoneDisplay(timeZone0, true, (-65), locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal style: -65
//         //
//         verifyException("java.util.TimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer("S2VH9DB");
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Date) null, stringBuffer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Calendar", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("F@(@yE*6,[ah6");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("F@(@yE*6,[ah6", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Date) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Calendar", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("aK", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4639, "@(@yE*6,[h6");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("@(@yE*6,[h6", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1150, (-1618), (-3997), 5, 1, Integer.MIN_VALUE);
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MONTH
//         //
//         verifyException("java.util.GregorianCalendar", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("m'", timeZone0, locale0);
      Long long0 = new Long(1038L);
      FieldPosition fieldPosition0 = new FieldPosition(3664);
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Object) long0, (StringBuffer) null, fieldPosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((long) 0, stringBuffer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format(0L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'", (TimeZone) null, locale0);
      // Undeclared exception!
//      try { 
        fastDatePrinter0.equals(fastDatePrinter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("aK", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
//      try { 
        fastDatePrinter0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("5D!!2foQga", timeZone0, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("=Woi*p(Yl,n9>U s9N", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: o
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDatePrinter0.format((long) 3, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("F@(@yE*6,[nah6");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("mW", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer("F@(@yE*6,[nah6");
      fastDatePrinter0.format(calendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("F@998(E6,{Z?h>", timeZone0, locale0);
      fastDatePrinter0.format((-775L));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "vId#Ps'OG0s-j\"hL", 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z&S", simpleTimeZone0, locale0);
      fastDatePrinter0.format((long) 2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = new Locale("(=@y0]E>8hh6");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "(=@y0]E>8hh6", 2, 2, 2, 2, 2, 2, 2, 2);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z&S", simpleTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4644, "F@(@yE6',[ah6");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("F@(@yE6',[ah6", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(95, 84, (-633), 95, 3, 1640);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("F@(@yE*6,[ah6", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 2, 2, 2, 2);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = new Locale("m");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("m", timeZone0, locale1);
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("m", timeZone0, locale0);
      fastDatePrinter0.equals(fastDatePrinter1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4639, "@(@yE*6,[h6");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("@(@yE*6,[h6", timeZone0, locale0);
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("@(@yE*6,[h6", simpleTimeZone0, locale0);
      fastDatePrinter0.equals(fastDatePrinter1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("m", timeZone0, locale0);
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.equals(fastDatePrinter1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("aK", timeZone0, locale0);
      fastDatePrinter0.equals(locale0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("m", timeZone0, locale0);
      fastDatePrinter0.equals(fastDatePrinter0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition((-84));
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Object) null, stringBuffer0, fieldPosition0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unknown class: <null>
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("org.apache.commonsnlang3.time.FastDatePrinter$TimeZoneNameRule");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("SW", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commonsnlang3.time.FastDatePrinter$TimeZoneNameRule");
      FieldPosition fieldPosition0 = new FieldPosition(2907);
      fastDatePrinter0.format((Object) calendar0, stringBuffer0, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("aK", timeZone0, locale0);
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDatePrinter0.format((Object) mockDate0, stringBuffer0, (FieldPosition) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("m", "F@(@yE*6,[ah6", "m");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~hk'+8'", timeZone0, locale0);
      Object object0 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "F@(@yE*6,[ah6");
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format(object0, stringBuffer0, (FieldPosition) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unknown class: java.lang.Object
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("y#ZZ0`", (TimeZone) null, locale0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("yy/h`~xJ~Vc0bE}|:");
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("yy/h`~xJ~Vc0bE}|:", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: x
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1116), "B");
      Locale locale0 = new Locale("Ph&4}trv;npz(Ci");
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("vW", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: v
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("9+u_i%", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: u
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-639));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("FastDatePrinter[", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: t
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("rd/BZBa%|Zj]O5\":\"[", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: r
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("\"qa x/HoUNmft5aP", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: q
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("psGV4O<f#@[]#OnzxE", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: p
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "G',lz xc,7v4!q{");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("G',lz xc,7v4!q{", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Calendar) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("nN3DGpEKxg0)bp;9", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: n
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1116), ",");
      Locale locale0 = new Locale("Ph&4}trv;npz(Ci");
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("%M*![W8hlVBUwhEi<h", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: l
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("?=zk8G_kjlBJ|o?G9qi", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: j
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("iiOAW=L3^X", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: ii
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-639));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("@g,Rn(/Sie-&|", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: g
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("MMS!|fl1GBZ8(ezs^1", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: f
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField");
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField");
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("\"e_aJZ", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: e
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "zcxKps6.");
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("zcxKps6.", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: c
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("92''(bgFax79_C' ", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: b
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2124, "Illegal pattern component: ");
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("Y=opYf_I\"6", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: Y
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("X73SsOHbwxa59oaH", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: X
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("V", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: V
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("$K*F1%UP(?", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: U
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("/]KT", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: T
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("DRr`n?1(wQZ", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: R
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("MQO'Z", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: Q
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("B");
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("{FsEPCYMK3k", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: P
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-639));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("S+W<hS<OUb?E:dBl", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: O
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("FastDatePrinter[");
      Locale locale0 = new Locale("\u0000Ntd<Hu2>ImdFTQ", ">SS,8^u}My~R");
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("\u0000Ntd<Hu2>ImdFTQ", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: N
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]");
      Locale locale0 = Locale.ENGLISH;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("Lq &6", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: L
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("4$0s{\"SS!Jos~2;TUL[", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: J
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = new Locale("|0SdaZI>Z7sY2i");
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("|0SdaZI>Z7sY2i", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: I
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z<m#8sw\"hHH", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("GM'f0y-ajLaX?j[suf\"", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 2, 0, 39, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      fastDatePrinter0.format(date0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3U)?vyn@zJQhWOR<7");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("CuEziC1VtT]", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: C
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField");
      Locale locale0 = Locale.GERMANY;
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("B", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: B
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2201), "yk4<@1dAFXRT5B\"");
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("yk4<@1dAFXRT5B\"", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: A
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1250), (-4003), (-4003), 1658, (-235), 1658);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z 0>4%yydw;", timeZone0, locale0);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")~!DDkmm%2m", timeZone0, locale0);
      fastDatePrinter0.format((-2813L));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("8Mm2Ds|1,5", "8Mm2Ds|1,5");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("8Mm2Ds|1,5", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 3, 925, 2, 1526);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "(=@y0]E>8hh6", 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("(=@y0]E>8hh6", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("F@(@yE*6,[ah6", timeZone0, locale0);
      fastDatePrinter0.getPattern();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("$k", timeZone0, locale0);
      Long long0 = new Long(3);
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("F@998(E6,{Z?h>", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      fastDatePrinter0.format(date0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("aK", timeZone0, locale0);
      fastDatePrinter0.getLocale();
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("x}3@[f");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'", (TimeZone) null, locale0);
      // Undeclared exception!
//      try { 
        fastDatePrinter0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("F@(@yE*6,[ah6");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("F@(@yE*6,[ah6", timeZone0, locale0);
      int int0 = fastDatePrinter0.getMaxLengthEstimate();
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "vId#Ps'OG0s-j\"hL", 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z&S", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(109, 12, 12, 3, 12);
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("GMT+00:00&0", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "(=@y0]E>8hh6", 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("(=@y0]E>8hh6", simpleTimeZone0, locale0);
      String string0 = fastDatePrinter0.format((-1023L));
      assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("(=@19690]Mi>8116", string0);
  }
}
