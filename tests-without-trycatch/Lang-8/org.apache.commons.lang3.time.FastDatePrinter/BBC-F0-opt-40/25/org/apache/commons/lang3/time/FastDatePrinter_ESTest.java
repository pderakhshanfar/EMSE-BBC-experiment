/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 09:15:39 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.text.FieldPosition;
import java.text.Format;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDatePrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDatePrinter_ESTest extends FastDatePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "6", 1, 1, 1, 96, 1, 1, 1, 1);
      assertEquals("java.util.SimpleTimeZone[id=6,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=96,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals("6", simpleTimeZone0.getID());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Z", simpleTimeZone0, locale0);
      assertEquals("java.util.SimpleTimeZone[id=6,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=96,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals("6", simpleTimeZone0.getID());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Z", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format((-1459L));
      assertEquals("java.util.SimpleTimeZone[id=6,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=96,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals("6", simpleTimeZone0.getID());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Z", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(string0);
      assertEquals("+0100", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("y");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("y", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("y", fastDatePrinter0.getPattern());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter0);
      
      MockDate mockDate0 = new MockDate((-559), (-3957), (-3957));
      assertNotNull(mockDate0);
      
      String string0 = fastDatePrinter0.format((Date) mockDate0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("y", fastDatePrinter0.getPattern());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Thu May 30 00:00:00 GMT 1000", mockDate0.toString());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(string0);
      assertEquals("1000", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}y ?");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}y ?", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}y ?", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, (-4820), 1931, 1);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}y ?", fastDatePrinter0.getPattern());
      assertEquals("}0013 ?", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62542673940000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=13,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=9,DAY_OF_YEAR=40,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(7, stringBuffer1.length());
      assertEquals("}0013 ?", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format((long) (-1580));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(string0);
      assertEquals("12", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(99, "#kP,ftV(:");
      assertEquals(99, simpleTimeZone0.getRawOffset());
      assertEquals("#kP,ftV(:", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=#kP,ftV(:,offset=99,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("6GF3S", simpleTimeZone0, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(99, simpleTimeZone0.getRawOffset());
      assertEquals("#kP,ftV(:", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=#kP,ftV(:,offset=99,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("6GF3S", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format(1L);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(99, simpleTimeZone0.getRawOffset());
      assertEquals("#kP,ftV(:", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=#kP,ftV(:,offset=99,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("6GF3S", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(string0);
      assertEquals("6\u897F\u66A613100", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(5, "};19wwcd^u>^ri/_J +");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("};19wwcd^u>^ri/_J +", simpleTimeZone0.getID());
      assertEquals(5, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=};19wwcd^u>^ri/_J +,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}SdZ_s'", simpleTimeZone0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("};19wwcd^u>^ri/_J +", simpleTimeZone0.getID());
      assertEquals(5, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=};19wwcd^u>^ri/_J +,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(19, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}SdZ_s'", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format((long) 5);
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("};19wwcd^u>^ri/_J +", simpleTimeZone0.getID());
      assertEquals(5, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=};19wwcd^u>^ri/_J +,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(19, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}SdZ_s'", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(string0);
      assertEquals("}101+0000_0", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("6GF3S", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("6GF3S", fastDatePrinter0.getPattern());
      assertEquals(21, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'!JG153", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("'!JG153", fastDatePrinter0.getPattern());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = new Locale("K1{ ");
      assertEquals("k1{ ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("k1{ ", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-494), "9.3hzzY");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("9.3hzzY", simpleTimeZone0.getID());
      assertEquals((-494), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=9.3hzzY,offset=-494,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("K1{ ", simpleTimeZone0, locale0);
      assertEquals("k1{ ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("k1{ ", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("9.3hzzY", simpleTimeZone0.getID());
      assertEquals((-494), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=9.3hzzY,offset=-494,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("K1{ ", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter0);
      
      int[] intArray0 = new int[5];
      String string0 = fastDatePrinter0.parseToken("K1{ ", intArray0);
      assertEquals(5, intArray0.length);
      assertEquals("k1{ ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("k1{ ", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("9.3hzzY", simpleTimeZone0.getID());
      assertEquals((-494), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=9.3hzzY,offset=-494,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("K1{ ", fastDatePrinter0.getPattern());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(string0);
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      String string0 = FastDatePrinter.getTimeZoneDisplay(timeZone0, true, 1, locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(string0);
      assertEquals("Greenwich Mean Time", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "<null>");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("<null>", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=<null>,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("/[y", simpleTimeZone0, locale0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("<null>", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=<null>,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("/[y", fastDatePrinter0.getPattern());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("<null>", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=<null>,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("/[y", fastDatePrinter0.getPattern());
      assertEquals("java.util.SimpleTimeZone[id=<null>,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals("<null>", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.forLanguageTag("mu5A&6");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.getPattern();
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter0);
      
      int int0 = fastDatePrinter0.getMaxLengthEstimate();
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      MockDate mockDate0 = new MockDate((-373), 3, (-373), 2, 93);
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Fri Mar 23 03:33:00 GMT 1526", mockDate0.toString());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      MockDate mockDate0 = new MockDate(79, 43, 1);
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer(215);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Sun Aug 01 00:00:00 GMT 1982", mockDate0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      MockDate mockDate0 = new MockDate(0, 1573, 96, 121, 3533, 63);
      assertNotNull(mockDate0);
      
      String string0 = fastDatePrinter0.format((Date) mockDate0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Wed May 14 11:54:03 GMT 2031", mockDate0.toString());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 1000, 13, 58, 13, 105);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=13,MONTH=1000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=58,HOUR_OF_DAY=58,MINUTE=13,SECOND=105,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.forLanguageTag("mu5A&6");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer(2);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 1000, 13, 58, 13, 105);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, (FieldPosition) null);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=13,MONTH=1000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=58,HOUR_OF_DAY=58,MINUTE=13,SECOND=105,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 1000, 13, 58, 13, 105);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) mockGregorianCalendar0, stringBuffer0, (FieldPosition) null);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=13,MONTH=1000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=58,HOUR_OF_DAY=58,MINUTE=13,SECOND=105,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((-1L), stringBuffer0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format((long) 0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("@3]0~", (TimeZone) null, locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("@3]0~", fastDatePrinter0.getPattern());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
//      try { 
        fastDatePrinter0.parseToken("", intArray0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("6", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(1, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("6", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      int[] intArray0 = new int[5];
      // Undeclared exception!
//      try { 
        fastDatePrinter0.parseToken((String) null, intArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField");
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
//      try { 
        fastDatePrinter0.parseToken("", intArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      // Undeclared exception!
//      try { 
        FastDatePrinter.getTimeZoneDisplay(timeZone0, true, 16, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
//      try { 
        FastDatePrinter.getTimeZoneDisplay(timeZone0, true, (-169), locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal style: -169
//         //
//         verifyException("java.util.TimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("h", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("h", fastDatePrinter0.getPattern());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Date) null, stringBuffer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Calendar", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~}8sdS((dZ*ks", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(35, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("~}8sdS((dZ*ks", fastDatePrinter0.getPattern());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Date) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Calendar", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("`}", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("`}", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format(calendar0, (StringBuffer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$StringLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-/[y");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("-/[y", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("-/[y", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(0, 510);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=510,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid era
//         //
//         verifyException("java.util.GregorianCalendar", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}SdZ_s'");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}SdZ_s'", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(19, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}SdZ_s'", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Calendar) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("y.");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("y.", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("y.", fastDatePrinter0.getPattern());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(101, 1, 0, 101, 1, 1);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=101,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=101,HOUR_OF_DAY=101,MINUTE=1,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DAY_OF_MONTH
//         //
//         verifyException("java.util.GregorianCalendar", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("m'M", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("m'M", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format(820L, (StringBuffer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("@3]0~", (TimeZone) null, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("@3]0~", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((long) 6);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("m'M", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("m'M", fastDatePrinter0.getPattern());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.applyRules((Calendar) null, stringBuffer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3419), "hu\"2H@P!XQ;V'jT`y");
      assertEquals((-3419), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=hu\"2H@P!XQ;V'jT`y,offset=-3419,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("hu\"2H@P!XQ;V'jT`y", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter((String) null, simpleTimeZone0, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("yZ", timeZone0, locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("yZ", fastDatePrinter0.getPattern());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format(362L);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("yZ", fastDatePrinter0.getPattern());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(string0);
      assertEquals("1969-1800", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "6", 1, 1, 1, 96, 1, 1, 1, 1);
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("6", simpleTimeZone0.getID());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=6,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=96,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = new Locale("p==g@f{A3<y5s@0b");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("/M-yzzz", simpleTimeZone0, locale0);
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("6", simpleTimeZone0.getID());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=6,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=96,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(17, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("/M-yzzz", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format((long) 96);
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("6", simpleTimeZone0.getID());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=6,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=96,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(17, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("/M-yzzz", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(string0);
      assertEquals("/1-1970GMT+01:00", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}y ?");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]8zs", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("]8zs", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(7, stringBuffer0.length());
      assertEquals("]8GMT21", stringBuffer0.toString());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("]8zs", fastDatePrinter0.getPattern());
      assertEquals("]8GMT21", stringBuffer1.toString());
      assertEquals(7, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~}8sdS((dZ*ks", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(35, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("~}8sdS((dZ*ks", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format((long) 3);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(35, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("~}8sdS((dZ*ks", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(string0);
      assertEquals("~}8013((1+0000*240", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("*MMFh", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("*MMFh", fastDatePrinter0.getPattern());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format((-380L));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("*MMFh", fastDatePrinter0.getPattern());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(string0);
      assertEquals("*12511", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dy");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("dy", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("dy", fastDatePrinter0.getPattern());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(100, 2, 100, 1, 0);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("dy", fastDatePrinter0.getPattern());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58997890800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=5,WEEK_OF_YEAR=24,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=160,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(string0);
      assertEquals("80100", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M", fastDatePrinter0.getPattern());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      MockDate mockDate0 = new MockDate((-2760), 9, 9);
      assertNotNull(mockDate0);
      
      String string0 = fastDatePrinter0.format((Date) mockDate0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M", fastDatePrinter0.getPattern());
      assertEquals("Tue Oct 09 00:00:00 GMT 861", mockDate0.toString());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(string0);
      assertEquals("10", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("h", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("h", fastDatePrinter0.getPattern());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      Locale locale1 = Locale.US;
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("h", timeZone0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertEquals("h", fastDatePrinter1.getPattern());
      assertEquals(4, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("h", fastDatePrinter0.getPattern());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertEquals("h", fastDatePrinter1.getPattern());
      assertEquals(4, fastDatePrinter1.getMaxLengthEstimate());
      assertNotSame(locale0, locale1);
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(locale1, locale0);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}y ?", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}y ?", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}y ?", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("y");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("y", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("y", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(3, 0);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT+03:00", timeZone1.getID());
      assertNotSame(timeZone1, timeZone0);
      assertNotNull(timeZone1);
      assertFalse(timeZone1.equals((Object)timeZone0));
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("y", timeZone1, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("GMT+03:00", timeZone1.getID());
      assertEquals(4, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals("y", fastDatePrinter1.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter1);
      assertFalse(timeZone1.equals((Object)timeZone0));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      
      boolean boolean0 = fastDatePrinter1.equals(fastDatePrinter0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("y", fastDatePrinter0.getPattern());
      assertEquals("GMT+03:00", timeZone1.getID());
      assertEquals(4, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals("y", fastDatePrinter1.getPattern());
      assertNotSame(timeZone0, timeZone1);
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(timeZone1, timeZone0);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertFalse(timeZone0.equals((Object)timeZone1));
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(timeZone1.equals((Object)timeZone0));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}SdZ_s'", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("}SdZ_s'", fastDatePrinter0.getPattern());
      assertEquals(19, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter0);
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter1);
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("}SdZ_s'", fastDatePrinter0.getPattern());
      assertEquals(19, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}y ?");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}y ?", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("}y ?", fastDatePrinter0.getPattern());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      boolean boolean0 = fastDatePrinter0.equals("");
      assertEquals("GMT", timeZone0.getID());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("}y ?", fastDatePrinter0.getPattern());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("w.", (TimeZone) null, locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("w.", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.equals(fastDatePrinter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null, 2);
      assertEquals("java.text.FieldPosition[field=2,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(2, fieldPosition0.getField());
      assertNotNull(fieldPosition0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Object) null, stringBuffer0, fieldPosition0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unknown class: <null>
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "FNbho(Ld4URKKXS?uW");
      assertEquals(18, stringBuffer0.length());
      assertEquals("FNbho(Ld4URKKXS?uW", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null, 1508);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(1508, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=1508,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertNotNull(fieldPosition0);
      
      Long long0 = new Long(235L);
      assertNotNull(long0);
      assertEquals(235L, (long)long0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(18, stringBuffer0.length());
      assertEquals("FNbho(Ld4URKKXS?uW", stringBuffer0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(1508, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=1508,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals("FNbho(Ld4URKKXS?uW", stringBuffer1.toString());
      assertEquals(18, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("6GF3S", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("6GF3S", fastDatePrinter0.getPattern());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 1000, 13, 58, 13, 105);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, (FieldPosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      MockDate mockDate0 = new MockDate((-1), 2, 1508);
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null, (-1));
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals((-1), fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertNotNull(fieldPosition0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}y ?");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}y ?", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}y ?", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1333);
      assertEquals(1333, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1333, charBuffer0.limit());
      assertEquals(1333, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1333, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      assertEquals(1333, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1333, charBuffer0.limit());
      assertEquals(1333, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1333, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1333, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition(0);
      assertEquals(0, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertNotNull(fieldPosition0);
      
      // Undeclared exception!
//      try { 
        fastDatePrinter0.format((Object) fastDatePrinter0, stringBuffer0, fieldPosition0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unknown class: org.apache.commons.lang3.time.FastDatePrinter
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?8;ZZ@d4:", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(15, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format((-1457L));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(15, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("';'xQ?1{'`fI&])", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: x
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = new Locale("mu5A&6", "", "v");
      assertEquals("mu5a&6__v", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("v", locale0.getVariant());
      assertEquals("mu5a&6", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("v", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: v
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("mu5A&6", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: u
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2718, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2718,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2718, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("French", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: r
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "%xm{,'5[>-~l}-eu");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=%xm{,'5[>-~l}-eu,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("%xm{,'5[>-~l}-eu", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("zq++JLC.w", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: q
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: o
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("n", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: n
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("l%RT(B4$4vOq", (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: l
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("!j5*oLTw");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("!j5*oLTw", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: j
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(939, "OiO;n=BGI}");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(939, simpleTimeZone0.getRawOffset());
      assertEquals("OiO;n=BGI}", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=OiO;n=BGI},offset=939,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("yyiB>Iw;pyH", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: i
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("~gG7P", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: g
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("EF`f`");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("EF`f`", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: f
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("D!=3e<z2b", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: e
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("&bX4<3Woo6", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: b
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("FastDatePrinter[6GF3S,ja_JP,GMT]", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: t
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("55&YG]qk(BDrm(b%^\"", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: Y
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("*XN", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: X
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("W%7%<590WFKs\"=c_", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: c
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("@#>7<VJ", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: V
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("\"dm-U'*", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: U
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("k+T.q6Gd LSR.z+#L", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: T
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("R", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: R
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("QNBCIpV7)S$D%", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: Q
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("9MM`w?Px]@r8w", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: P
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = new Locale("mu5A&6", "mu5A&6", "mu5A&6");
      assertEquals("mu5A&6", locale0.getVariant());
      assertEquals("mu5a&6_MU5A&6_mu5A&6", locale0.toString());
      assertEquals("mu5a&6", locale0.getLanguage());
      assertEquals("MU5A&6", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter(",1)Oe4<g@OA}", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: O
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("FNbho(Ld4URKKXS?uW", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: N
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("kH6 L~E6&So", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: L
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = new Locale("K1{ ");
      assertEquals("k1{ ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("k1{ ", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-494), "9.3hzzY");
      assertEquals("9.3hzzY", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=9.3hzzY,offset=-494,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-494), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("K1{ ", simpleTimeZone0, locale0);
      assertEquals("k1{ ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("k1{ ", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("9.3hzzY", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=9.3hzzY,offset=-494,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-494), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("K1{ ", fastDatePrinter0.getPattern());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertEquals("k1{ ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("k1{ ", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("9.3hzzY", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=9.3hzzY,offset=-494,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-494), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("K1{ ", fastDatePrinter0.getPattern());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=9.3hzzY,offset=-494,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("9.3hzzY", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals((-494), timeZone0.getRawOffset());
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(99, "}SdZ_s'");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=}SdZ_s',offset=99,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("}SdZ_s'", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(99, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("3zJz;VY{Ci-P ZI", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: J
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(210, "mu5A&6", 210, 0, 210, 210, 1, (-4306), 0, 550, (-1647), 614, 2844);
      assertEquals("java.util.SimpleTimeZone[id=mu5A&6,offset=210,dstSavings=2844,useDaylight=false,startYear=0,startMode=0,startMonth=210,startDay=0,startDayOfWeek=210,startTime=210,startTimeMode=1,endMode=0,endMonth=-4306,endDay=0,endDayOfWeek=550,endTime=-1647,endTimeMode=614]", simpleTimeZone0.toString());
      assertEquals(210, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("mu5A&6", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("Illegal pattern component: ", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: I
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("Eyp", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: p
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter(" \"CWI0^fTK6e_z($^o5", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: C
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "");
      assertEquals(45, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=45,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("?=BP!$_U", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: B
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = new Locale("kA,R$jk(wS,");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ka,r$jk(ws,", locale0.toString());
      assertEquals("ka,r$jk(ws,", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
//      try {
        fastDatePrinter0 = new FastDatePrinter("kA,R$jk(wS,", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern component: A
//         //
//         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("*MMFh", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("*MMFh", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format(0L);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("*MMFh", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertNotNull(string0);
      assertEquals("*01112", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+4*7yy-)", timeZone0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("+4*7yy-)", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, (-1381), 0, 87);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("+4*7yy-)", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62218535580000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=19,DAY_OF_YEAR=139,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=27,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(string0);
      assertEquals("+4*703-)", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("}SdZ6)'");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}SdZ6)'", timeZone0, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("}SdZ6)'", fastDatePrinter0.getPattern());
      assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(3, 2);
      assertNotNull(zoneOffset0);
      
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      assertNotNull(zonedDateTime0);
      
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+03:02\",offset=10920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=23,SECOND=21,MILLISECOND=320,ZONE_OFFSET=10920000,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(gregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer(65);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(gregorianCalendar0, stringBuffer0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("}SdZ6)'", fastDatePrinter0.getPattern());
      assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+03:02\",offset=10920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=23,SECOND=21,MILLISECOND=320,ZONE_OFFSET=10920000,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("}32014+03026)", stringBuffer0.toString());
      assertEquals(13, stringBuffer0.length());
      assertEquals(13, stringBuffer1.length());
      assertEquals("}32014+03026)", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("ddG{`", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("ddG{`", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format(0L);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("ddG{`", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(string0);
      assertEquals("01n. Chr.{`", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = new Locale("}kkk<1/6");
      assertEquals("}kkk<1/6", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("}kkk<1/6", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}kkk<1/6", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("}kkk<1/6", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("}kkk<1/6", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}kkk<1/6", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.format((-9L));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("}kkk<1/6", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("}kkk<1/6", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}kkk<1/6", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertNotNull(string0);
      assertEquals("}023<1/6", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "/+yzzH", 2, 1, 1, 67, 2, 2, 1, 2);
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("/+yzzH", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=/+yzzH,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=1,startDayOfWeek=1,startTime=67,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=1,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = new Locale("/+yzzH", "/+yzzH");
      assertEquals("/+yzzh_/+YZZH", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("/+YZZH", locale0.getCountry());
      assertEquals("/+yzzh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("/+yzzH", simpleTimeZone0, locale0);
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("/+yzzH", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=/+yzzH,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=1,startDayOfWeek=1,startTime=67,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=1,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("/+yzzh_/+YZZH", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("/+YZZH", locale0.getCountry());
      assertEquals("/+yzzh", locale0.getLanguage());
      assertEquals("/+yzzH", fastDatePrinter0.getPattern());
      assertEquals(19, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("/+yzzH", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=/+yzzH,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=1,startDayOfWeek=1,startTime=67,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=1,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("/+yzzh_/+YZZH", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("/+YZZH", locale0.getCountry());
      assertEquals("/+yzzh", locale0.getLanguage());
      assertEquals("/+yzzH", fastDatePrinter0.getPattern());
      assertEquals(19, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("java.util.SimpleTimeZone[id=/+yzzH,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=1,startDayOfWeek=1,startTime=67,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=1,endTime=2,endTimeMode=0]", timeZone0.toString());
      assertTrue(timeZone0.useDaylightTime());
      assertEquals(3600000, timeZone0.getDSTSavings());
      assertEquals("/+yzzH", timeZone0.getID());
      assertEquals(1, timeZone0.getRawOffset());
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}y ?");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}y ?", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}y ?", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(fastDatePrinter0);
      
      String string0 = fastDatePrinter0.getPattern();
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}y ?", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertNotNull(string0);
      assertEquals("}y ?", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}y ?");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}y ?", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}y ?", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((-1L), stringBuffer0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}y ?", fastDatePrinter0.getPattern());
      assertEquals("}1969 ?", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertEquals("}1969 ?", stringBuffer1.toString());
      assertEquals(7, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "/+yzzH", 2, 1, 1, 67, 2, 2, 1, 2);
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=/+yzzH,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=1,startDayOfWeek=1,startTime=67,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=1,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("/+yzzH", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = new Locale("/+yzzH", "/+yzzH");
      assertEquals("", locale0.getVariant());
      assertEquals("/+YZZH", locale0.getCountry());
      assertEquals("/+yzzh_/+YZZH", locale0.toString());
      assertEquals("/+yzzh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("/+yzzH", simpleTimeZone0, locale0);
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=/+yzzH,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=1,startDayOfWeek=1,startTime=67,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=1,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("/+yzzH", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("/+YZZH", locale0.getCountry());
      assertEquals("/+yzzh_/+YZZH", locale0.toString());
      assertEquals("/+yzzh", locale0.getLanguage());
      assertEquals(19, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("/+yzzH", fastDatePrinter0.getPattern());
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      MockDate mockDate0 = new MockDate(3);
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=/+yzzH,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=1,startDayOfWeek=1,startTime=67,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=1,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("/+yzzH", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("/+YZZH", locale0.getCountry());
      assertEquals("/+yzzh_/+YZZH", locale0.toString());
      assertEquals("/+yzzh", locale0.getLanguage());
      assertEquals(19, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("/+yzzH", fastDatePrinter0.getPattern());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals("/+1970GMT+00:000", stringBuffer0.toString());
      assertEquals("/+1970GMT+00:000", stringBuffer1.toString());
      assertEquals(16, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("6GF3S", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("6GF3S", fastDatePrinter0.getPattern());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      fastDatePrinter0.hashCode();
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("6GF3S", fastDatePrinter0.getPattern());
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+4*7yy-)", timeZone0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("+4*7yy-)", fastDatePrinter0.getPattern());
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(fastDatePrinter0);
      
      Locale locale1 = fastDatePrinter0.getLocale();
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("+4*7yy-)", fastDatePrinter0.getPattern());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertNotNull(locale1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("*MMFh", timeZone0, locale0);
      String string0 = fastDatePrinter0.toString();
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("FastDatePrinter[*MMFh,ko_KR,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}y ?");
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}y ?", timeZone0, locale0);
      int int0 = fastDatePrinter0.getMaxLengthEstimate();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}y ?");
      Locale locale0 = Locale.US;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("yG+_4''", timeZone0, locale0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1333);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertEquals(1343, stringBuffer0.length());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
  }
}
