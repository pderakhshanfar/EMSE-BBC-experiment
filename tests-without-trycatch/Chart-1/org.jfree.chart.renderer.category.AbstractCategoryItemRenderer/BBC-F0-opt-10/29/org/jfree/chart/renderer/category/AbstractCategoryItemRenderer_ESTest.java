/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:03:41 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.LookupOp;
import java.awt.image.ShortLookupTable;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.Crosshair;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Week;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      groupedStackedBarRenderer0.setSeriesItemLabelGenerator(10, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
//      try { 
        groupedStackedBarRenderer0.drawItemLabel(graphics2D0, plotOrientation0, defaultMultiValueCategoryDataset0, 10, 10, false, 10, 10, true);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 10, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      groupedStackedBarRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, (CategoryDataset) null, 10, 713, true, 1.0F, 10, false);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.141592653589793, 12.0, "[)N");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      stackedBarRenderer3D0.setPlot(combinedRangeCategoryPlot0);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      stackedBarRenderer3D0.updateCrosshairValues(categoryCrosshairState0, false, true, 1.0F, 14, 0.0, 1.0E-8, plotOrientation0);
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleInsets rectangleInsets0 = PeriodAxisLabelInfo.DEFAULT_INSETS;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Crosshair crosshair0 = new Crosshair(8.0);
      RectangleAnchor rectangleAnchor0 = crosshair0.getLabelAnchor();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      Point2D.Double point2D_Double0 = (Point2D.Double)boxAndWhiskerRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle2D0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals((-2.0), point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 181, 5);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Crosshair crosshair0 = new Crosshair(1.0F, boxAndWhiskerRenderer0.DEFAULT_OUTLINE_PAINT, boxAndWhiskerRenderer0.DEFAULT_OUTLINE_STROKE);
      RectangleAnchor rectangleAnchor0 = crosshair0.getLabelAnchor();
      Rectangle rectangle1 = new Rectangle(778, 0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Point2D.Double point2D_Double0 = (Point2D.Double)boxAndWhiskerRenderer0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle0, rectangle1, categoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(4.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Rectangle rectangle0 = new Rectangle(5203, 0, 10, (-1792));
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Rectangle2D rectangle2D0 = rectangle0.getFrame();
      // Undeclared exception!
//      try { 
        defaultCategoryItemRenderer0.drawRangeLine(graphics2D0, categoryPlot0, numberAxis3D0, rectangle2D0, 0.35, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, (Stroke) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.141592653589793, 12.0, "[)N");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, defaultCaret0, 0.0, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("%rg.jfree.chart.renderer.category.AbstractCategoryIteRenderer", "%rg.jfree.chart.renderer.category.AbstractCategoryIteRenderer", 0.08);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      boolean boolean0 = statisticalLineAndShapeRenderer0.removeAnnotation(categoryTextAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(10, 10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 2.0F);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("##5Q");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      double double0 = ganttRenderer0.getItemMiddle(10, 0.05, defaultKeyedValues2DDataset0, subCategoryAxis0, rectangle0, rectangleEdge0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[][] doubleArray0 = new double[11][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, levelRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 0, 0, false, (-418.214521118851), 0.2);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      stackedBarRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setSeriesItemLabelGenerator(2000, (CategoryItemLabelGenerator) null);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(8, 1376, 8);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 2763.1F, 8, (-1415.9092F));
      groupedStackedBarRenderer0.drawOutline(graphics2D0, combinedRangeCategoryPlot0, rectangle2D_Float0);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[][] doubleArray0 = new double[6][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Rectangle rectangle0 = new Rectangle();
      statisticalBarRenderer0.addEntity(standardEntityCollection0, rectangle0, defaultIntervalCategoryDataset0, 0, 0, true);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 2, 2);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = defaultCategoryItemRenderer0.initialise(graphics2D0, (Rectangle2D) null, categoryPlot0, jDBCCategoryDataset0, plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Number[][] numberArray0 = new Number[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryItemRendererState categoryItemRendererState0 = defaultCategoryItemRenderer0.initialise((Graphics2D) null, defaultCaret0, combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0, (PlotRenderingInfo) null);
      assertEquals(7, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 5, 5);
      Rectangle rectangle0 = new Rectangle();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.initialise(graphics2D0, rectangle0, categoryPlot0, defaultKeyedValues2DDataset0, (PlotRenderingInfo) null);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      areaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, false);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)areaRenderer0.getToolTipGenerator(75, 75, false);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryURLGenerator categoryURLGenerator0 = ganttRenderer0.getSeriesURLGenerator(1779);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_SHADOW_PAINT;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(color0, color0, color0, color0);
      CategoryToolTipGenerator categoryToolTipGenerator0 = waterfallBarRenderer0.getSeriesToolTipGenerator((-1));
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ValueAxis valueAxis0 = stackedBarRenderer0.getRangeAxis(combinedDomainCategoryPlot0, 10);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      String[] stringArray0 = new String[9];
      SymbolAxis symbolAxis0 = new SymbolAxis("~$3gd>!nD[H;G_;5M", stringArray0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(symbolAxis0);
      SymbolAxis symbolAxis1 = (SymbolAxis)stackedAreaRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 1051);
      assertTrue(symbolAxis1.isGridBandsVisible());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      LogAxis logAxis0 = new LogAxis("org.jfree.chart.renderer.xy.XYErrorRenderer");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      ValueAxis valueAxis0 = statisticalLineAndShapeRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 7);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-0.883591637839081));
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      statisticalLineAndShapeRenderer0.setPlot(combinedRangeCategoryPlot0);
      CategoryPlot categoryPlot0 = statisticalLineAndShapeRenderer0.getPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(2062.626717910334, 2062.626717910334);
      DrawingSupplier drawingSupplier0 = barRenderer3D0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis categoryAxis0 = groupedStackedBarRenderer0.getDomainAxis(combinedRangeCategoryPlot0, (CategoryDataset) null);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = boxAndWhiskerRenderer0.getDomainAxis(combinedDomainCategoryPlot0, (CategoryDataset) null);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getBaseToolTipGenerator();
      assertSame(categoryToolTipGenerator0, boxAndWhiskerToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      String[] stringArray0 = new String[7];
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Range range0 = defaultCategoryItemRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 4.0;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(4.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1505.7757807888697);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Range range0 = scatterRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Range range0 = defaultCategoryItemRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Number[][] numberArray0 = new Number[1][9];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 10;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = defaultCategoryItemRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(10.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1505.7757807888697);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Range range0 = scatterRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals((-752.8878903944349), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      boolean boolean0 = groupedStackedBarRenderer0.equals(groupedStackedBarRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      boolean boolean0 = defaultCategoryItemRenderer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("&;S.");
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CategoryItemRendererState categoryItemRendererState0 = groupedStackedBarRenderer0.createState(plotRenderingInfo0);
      Rectangle2D rectangle2D0 = groupedStackedBarRenderer0.createHotSpotBounds(graphics2D0, rectangle0, combinedRangeCategoryPlot0, extendedCategoryAxis0, numberAxis3D0, defaultMultiValueCategoryDataset0, 1, 1, true, categoryItemRendererState0, rectangle0);
      assertNull(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.setSeriesURLGenerator(Integer.MAX_VALUE, (CategoryURLGenerator) null, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.util.AbstractObjectList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      // Undeclared exception!
//      try { 
        stackedBarRenderer0.setSeriesURLGenerator((-2965), (CategoryURLGenerator) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires index >= 0.
//         //
//         verifyException("org.jfree.chart.util.AbstractObjectList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("Null 'annotation' argument.");
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.setSeriesURLGenerator((-152), (CategoryURLGenerator) standardCategoryURLGenerator0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires index >= 0.
//         //
//         verifyException("org.jfree.chart.util.AbstractObjectList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      // Undeclared exception!
//      try { 
        statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator((-3526), (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires index >= 0.
//         //
//         verifyException("org.jfree.chart.util.AbstractObjectList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.setSeriesToolTipGenerator((-542), (CategoryToolTipGenerator) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires index >= 0.
//         //
//         verifyException("org.jfree.chart.util.AbstractObjectList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      // Undeclared exception!
//      try { 
        stackedBarRenderer3D0.setSeriesItemLabelGenerator((-2220), (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires index >= 0.
//         //
//         verifyException("org.jfree.chart.util.AbstractObjectList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle(10, 10);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      DateAxis dateAxis0 = new DateAxis("W[OtC%/GSav@J");
      // Undeclared exception!
//      try { 
        defaultCategoryItemRenderer0.hitTest(4.0, (-1.5707963267948966), (Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, (CategoryAxis) null, dateAxis0, (CategoryDataset) null, (-1691), 10, false, categoryItemRendererState0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("n");
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState((PlotRenderingInfo) null);
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.hitTest(0, 2560.3, (Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, extendedCategoryAxis0, (ValueAxis) null, defaultBoxAndWhiskerCategoryDataset0, 0, 10, false, categoryItemRendererState0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 10, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle((-1), 10);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State((PlotRenderingInfo) null);
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        defaultCategoryItemRenderer0.hitTest((-3220.24182985365), 1.0E-8, (Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, categoryAxis0, numberAxis3D0, defaultIntervalCategoryDataset0, 10, 0, false, categoryStepRenderer_State0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Not implemented.");
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      MockDate mockDate0 = new MockDate(497, 10, (-1279), 497, (-1279));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1756), "Not implemented.");
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      Locale locale0 = new Locale("Layer.FOREGROUND", "Layer.FOREGROUND", "Layer.FOREGROUND");
      PeriodAxis periodAxis0 = new PeriodAxis("Layer.FOREGROUND", quarter0, quarter0, simpleTimeZone0, locale0);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, periodAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.hitTest(0.0, 4.0, (Graphics2D) null, rectangle2D0, combinedRangeCategoryPlot0, extendedCategoryAxis0, periodAxis0, defaultBoxAndWhiskerCategoryDataset0, 3254, (-1279), false, categoryItemRendererState0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      // Undeclared exception!
//      try { 
        stackedBarRenderer0.getRangeAxis((CategoryPlot) null, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 3, 3);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'f' argument.");
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(0);
      // Undeclared exception!
//      try { 
        stackedAreaRenderer0.getItemMiddle(levelRenderer0.ZERO, levelRenderer0.ZERO, slidingCategoryDataset0, subCategoryAxis0, rectangle0, rectangleEdge0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, (-4034), 9);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Line2D.Double line2D_Double0 = new Line2D.Double(0.05, 0.0, (-1855.335), 1.0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
//      try { 
        stackedAreaRenderer0.getItemMiddle("({0}, {1}) = {3} - {4}", "{2}", slidingCategoryDataset0, categoryAxis3D0, rectangle2D0, rectangleEdge0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
//      try { 
        defaultCategoryItemRenderer0.getDomainAxis((CategoryPlot) null, defaultStatisticalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.getDomainAxis(combinedDomainCategoryPlot0, defaultStatisticalCategoryDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'index'.
//         //
//         verifyException("org.jfree.chart.plot.CategoryPlot", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-4227), 1824);
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[5];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        scatterRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Number[][] numberArray0 = new Number[5][7];
      Number[] numberArray1 = new Number[8];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      // Undeclared exception!
//      try { 
        statisticalLineAndShapeRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Rectangle rectangle0 = new Rectangle(10, 10);
      ValueMarker valueMarker0 = new ValueMarker(0, boxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateAxis dateAxis0 = new DateAxis("Null 'hotspot' argument.", timeZone0);
      Locale locale0 = Locale.forLanguageTag("M9s-");
      Week week0 = new Week(dateAxis0.DEFAULT_ANCHOR_DATE, timeZone0, locale0);
      PeriodAxis periodAxis0 = new PeriodAxis("M9s-", week0, week0, timeZone0, locale0);
      // Undeclared exception!
//      try { 
        defaultCategoryItemRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, periodAxis0, valueMarker0, rectangle0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (1.39240928132E12) <= upper (1.392409281319E12).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = waterfallBarRenderer0.getPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 470, 5);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame("3", false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      // Undeclared exception!
//      try { 
        waterfallBarRenderer0.drawRangeLine(graphics2D0, (CategoryPlot) null, (ValueAxis) null, rectangle0, 2.0, categoryPlot0.DEFAULT_GRIDLINE_PAINT, categoryPlot0.DEFAULT_OUTLINE_STROKE);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, defaultCategoryItemRenderer0.DEFAULT_OUTLINE_PAINT, minMaxCategoryRenderer0.DEFAULT_STROKE);
      // Undeclared exception!
//      try { 
        minMaxCategoryRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, subCategoryAxis0, categoryMarker0, (Rectangle2D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(2.0, 10, 3365.9515206018, 1862.0, (-2781.27600003442), 4.0);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      // Undeclared exception!
//      try { 
        statisticalLineAndShapeRenderer0.drawBackground((Graphics2D) null, (CategoryPlot) null, rectangle2D0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2466.601), 0.05, "");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("lxlP");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
//      try { 
        levelRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, subCategoryAxis0, periodAxis0, defaultIntervalCategoryDataset0, (-1047), 1, false, categoryItemRendererState0, (Rectangle2D) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
//      try { 
        levelRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, subCategoryAxis0, periodAxis0, defaultIntervalCategoryDataset0, 10, 10, true, categoryItemRendererState0, (Rectangle2D) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 10
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      ganttRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
//      try { 
        ganttRenderer0.clone();
//        fail("Expecting exception: CloneNotSupportedException");
      
//      } catch(CloneNotSupportedException e) {
//         //
//         // Base item URL generator not cloneable.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 5);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 2.0F);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, true);
      CenterArrangement centerArrangement0 = new CenterArrangement();
      LegendTitle legendTitle0 = new LegendTitle(deviationRenderer0, centerArrangement0, centerArrangement0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicLocation();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      // Undeclared exception!
//      try { 
        categoryStepRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'base' argument.
//         //
//         verifyException("org.jfree.chart.util.RectangleInsets", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      double[][] doubleArray0 = new double[4][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        ganttRenderer0.addEntity(standardEntityCollection0, categoryStepRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 5, (-4764), true, 0.0, 3.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The 'row' argument is out of bounds.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      double[][] doubleArray0 = new double[14][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        ganttRenderer0.addEntity(standardEntityCollection0, categoryStepRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 5, (-4764), true, 0.0, 3.0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4764
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
//      try { 
        statisticalBarRenderer0.addEntity(standardEntityCollection0, combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, (CategoryDataset) null, 10, 10, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
//      try { 
        statisticalBarRenderer0.addEntity(standardEntityCollection0, lineAndShapeRenderer0.DEFAULT_SHAPE, defaultKeyedValues2DDataset0, (-2673), (-2673), false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("OqpMSThL0VK8FiVk", statisticalLineAndShapeRenderer0.ZERO, (double) statisticalLineAndShapeRenderer0.ZERO);
      // Undeclared exception!
//      try { 
        statisticalLineAndShapeRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, (Layer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(10, 0, boxAndWhiskerRenderer0.ZERO, 0, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, boxAndWhiskerRenderer0.DEFAULT_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
//      try { 
        stackedAreaRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'annotation' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryURLGenerator categoryURLGenerator0 = minMaxCategoryRenderer0.getURLGenerator(3, 3, true);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      stackedBarRenderer0.setSeriesToolTipGenerator(379, (CategoryToolTipGenerator) null, true);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = areaRenderer0.getToolTipGenerator(75, 75, false);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      groupedStackedBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = barRenderer0.getItemLabelGenerator(0, 1201, false);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[11][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LogAxis logAxis0 = new LogAxis("");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
//      try { 
        levelRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, (CategoryAxis) null, logAxis0, defaultIntervalCategoryDataset0, 10, 1, true, categoryItemRendererState0, (Rectangle2D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      PeriodAxis periodAxis0 = new PeriodAxis("4CjVHV\"-4Yc>+");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("4CjVHV\"-4Yc>+");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
//      try { 
        levelRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, subCategoryAxis0, periodAxis0, defaultKeyedValues2DDataset0, 500, 7, true, categoryItemRendererState0, (Rectangle2D) null);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 7, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      DefaultCategoryItemRenderer[] defaultCategoryItemRendererArray0 = new DefaultCategoryItemRenderer[5];
      JList<DefaultCategoryItemRenderer> jList0 = new JList<DefaultCategoryItemRenderer>(defaultCategoryItemRendererArray0);
      ListSelectionModel listSelectionModel0 = jList0.getSelectionModel();
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0, listSelectionModel0);
      Rectangle rectangle0 = jTable0.getCellRect(10, 3426, false);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("3=NQ^<XD9f`EOc0v");
      NumberAxis numberAxis0 = new NumberAxis("3=NQ^<XD9f`EOc0v");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
//      try { 
        levelRenderer0.createHotSpotBounds(graphics2D0, rectangle0, categoryPlot0, extendedCategoryAxis0, numberAxis0, defaultMultiValueCategoryDataset0, 0, 69, true, categoryItemRendererState0, rectangle0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 69, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      statisticalBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, true);
      // Undeclared exception!
//      try { 
        statisticalBarRenderer0.addEntity(standardEntityCollection0, minMaxCategoryRenderer0.DEFAULT_SHAPE, taskSeriesCollection0, 1245, 3576, true);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1245, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
//      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, stackedAreaRenderer0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, 5, 1022, true);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 5, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(12.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      statisticalLineAndShapeRenderer0.setPlot(combinedRangeCategoryPlot0);
      // Undeclared exception!
//      try { 
        statisticalLineAndShapeRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultCategoryDataset0, 59, (-3884), true, 8.0, 59);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 59, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      // Undeclared exception!
//      try { 
        statisticalLineAndShapeRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultCategoryDataset0, 59, (-3884), true, 8.0, 59);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
//      try { 
        statisticalBarRenderer0.addEntity(standardEntityCollection0, (Shape) null, taskSeriesCollection0, (-578), (-578), true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'hotspot' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      defaultCategoryItemRenderer0.setPlot(combinedRangeCategoryPlot0);
      // Undeclared exception!
//      try { 
        defaultCategoryItemRenderer0.getLegendItems();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      LegendItemCollection legendItemCollection0 = defaultCategoryItemRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[11][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Thermometer_Plot");
      DateAxis dateAxis0 = new DateAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, dateAxis0, defaultCategoryItemRenderer0);
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
      
      LegendItemCollection legendItemCollection0 = defaultCategoryItemRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3153.11212027);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis0, cyclicNumberAxis0, statisticalLineAndShapeRenderer0);
      ValueAxis valueAxis0 = defaultCategoryItemRenderer0.getRangeAxis(categoryPlot0, 92);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2348, 2348);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingGanttCategoryDataset0, categoryAxis0, valueAxis0, scatterRenderer0);
      NumberAxis numberAxis0 = (NumberAxis)scatterRenderer0.getRangeAxis(categoryPlot0, 0);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("}\"47Hb@xg;*hwbJ");
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
//      try { 
        stackedAreaRenderer0.clone();
//        fail("Expecting exception: CloneNotSupportedException");
      
//      } catch(CloneNotSupportedException e) {
//         //
//         // Base item URL generator not cloneable.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      stackedAreaRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      Object object0 = stackedAreaRenderer0.clone();
      assertNotSame(object0, stackedAreaRenderer0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Rectangle rectangle0 = new Rectangle(0, 10, 0, 10);
      Layer layer0 = Layer.BACKGROUND;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(":=H{k,b=@rCBW", 0, (-3128.726113812912), 0.0);
      boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.drawAnnotations(graphics2D0, rectangle0, (CategoryAxis) null, (ValueAxis) null, layer0, plotRenderingInfo0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.annotations.CategoryTextAnnotation", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(10, 188, 5);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("PUBz;Hr)u]QtLT#`[*)");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Layer layer0 = Layer.FOREGROUND;
      boxAndWhiskerRenderer0.drawAnnotations(graphics2D0, rectangle0, categoryAxis3D0, cyclicNumberAxis0, layer0, plotRenderingInfo0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      stackedBarRenderer3D0.updateCrosshairValues((CategoryCrosshairState) null, "", "", 0.0, (-1153), 0.0, 927.149441687994, plotOrientation0);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 655.455082373057);
      // Undeclared exception!
//      try { 
        stackedBarRenderer3D0.updateCrosshairValues(categoryCrosshairState0, minMaxCategoryRenderer0.ZERO, minMaxCategoryRenderer0.ZERO, 0.0, 599, (-781.093859), 655.455082373057, (PlotOrientation) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'orientation' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) defaultCategoryItemRenderer0.ZERO, 162, false);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3153.11212027);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      // Undeclared exception!
//      try { 
        stackedBarRenderer3D0.updateCrosshairValues(categoryCrosshairState0, defaultCategoryItemRenderer0.ZERO, statisticalLineAndShapeRenderer0.ZERO, 162, (-1), 0.0, (-1), plotOrientation0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      defaultCategoryItemRenderer0.setPlot(categoryPlot0);
      DrawingSupplier drawingSupplier0 = defaultCategoryItemRenderer0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("");
      stackedAreaRenderer1.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      stackedAreaRenderer0.setSeriesURLGenerator(5, (CategoryURLGenerator) customCategoryURLGenerator0, true);
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer(true);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertFalse(boolean0);
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer(true);
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      stackedAreaRenderer1.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer();
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer(false);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem(1515, 1515);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis("c(oUHpD~*P~V_I#13h");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      minMaxCategoryRenderer0.setPlot(combinedDomainCategoryPlot0);
      // Undeclared exception!
//      try { 
        minMaxCategoryRenderer0.getLegendItem(1901, 834);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("c@BS-ql}w(%zh4?!n2", combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(5, 4778, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      short[] shortArray0 = new short[4];
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(10, shortArray0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      Rectangle2D rectangle2D0 = lookupOp0.getBounds2D(bufferedImage0);
      IntervalMarker intervalMarker0 = new IntervalMarker((short) (-3482), 0.0);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      // Undeclared exception!
//      try { 
        defaultCategoryItemRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, (PlotOrientation) null, rectangle2D0, rectangle2D0, combinedRangeXYPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.util.RectangleAnchor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(5, 172, 10);
      Rectangle rectangle0 = new Rectangle();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer0.getBlockAnchor();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Rectangle2D rectangle2D0 = combinedDomainXYPlot0.DEFAULT_INSETS.createInsetRectangle((Rectangle2D) rectangle0, true, true);
      Point2D.Double point2D_Double0 = (Point2D.Double)categoryStepRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle0, rectangle2D0, numberAxis3D0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("9xB|52$", compassPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 47, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.calculateDomainMarkerTextAnchorPoint(graphics2D0, (PlotOrientation) null, rectangle0, rectangle0, compassPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.util.RectangleAnchor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleInsets rectangleInsets0 = PeriodAxisLabelInfo.DEFAULT_INSETS;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Crosshair crosshair0 = new Crosshair(0.0);
      RectangleAnchor rectangleAnchor0 = crosshair0.getLabelAnchor();
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'base' argument.
//         //
//         verifyException("org.jfree.chart.util.RectangleInsets", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      IntervalMarker intervalMarker0 = new IntervalMarker(0, 3061.0);
      intervalMarker0.setLabel("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer");
      stackedBarRenderer3D0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, intervalMarker0, defaultCaret0);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedRangeCategoryPlot0.setOrientation(plotOrientation0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2.0F, 0, false);
      IntervalMarker intervalMarker0 = new IntervalMarker(0, 0.05);
      stackedBarRenderer3D0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, intervalMarker0, defaultCaret0);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Stroke stroke0 = candlestickRenderer0.getItemOutlineStroke((-461), 10, false);
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 10, categoryStepRenderer0.DEFAULT_VALUE_LABEL_PAINT, categoryStepRenderer0.DEFAULT_OUTLINE_STROKE, categoryStepRenderer0.DEFAULT_VALUE_LABEL_PAINT, stroke0, 0.0F);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      stackedBarRenderer3D0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, valueAxis0, intervalMarker0, defaultCaret0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 1.0F, 10, 1.0F);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateAxis dateAxis0 = new DateAxis("y(g[|", timeZone0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 10.0, dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      defaultCategoryItemRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, dateAxis0, intervalMarker0, rectangle2D_Double0);
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedRangeCategoryPlot0.setOrientation(plotOrientation0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2.0F, 0, false);
      IntervalMarker intervalMarker0 = new IntervalMarker((-1.0), 153.1541938082116);
      stackedBarRenderer3D0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, intervalMarker0, defaultCaret0);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 5, 5);
      Rectangle rectangle0 = new Rectangle();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      IntervalMarker intervalMarker0 = new IntervalMarker(1432.0, 0.05);
      stackedBarRenderer3D0.drawRangeMarker(graphics2D0, categoryPlot0, numberAxis3D0, intervalMarker0, rectangle0);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 5);
      Rectangle rectangle0 = new Rectangle(5, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 2.0F);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryMarker categoryMarker0 = new CategoryMarker(true, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      stackedBarRenderer3D0.drawRangeMarker(graphics2D0, categoryPlot0, cyclicNumberAxis0, categoryMarker0, rectangle0);
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Rectangle rectangle0 = new Rectangle(10, 10);
      ValueMarker valueMarker0 = new ValueMarker(0, boxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      valueMarker0.setLabel("Null 'hotspot' argument.");
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      defaultCategoryItemRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, dateAxis0, valueMarker0, rectangle0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_STROKE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateAxis dateAxis0 = new DateAxis("Null 'outlinePaint' argument.", timeZone0);
      defaultCategoryItemRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, dateAxis0, valueMarker0, rectangle2D_Double0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Rectangle rectangle0 = new Rectangle(10, 10);
      ValueMarker valueMarker0 = new ValueMarker(0, boxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      defaultCategoryItemRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, dateAxis0, valueMarker0, rectangle0);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ValueMarker valueMarker0 = new ValueMarker(10);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
//      try { 
        defaultCategoryItemRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, (ValueAxis) null, valueMarker0, rectangle2D_Double0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2.0F, 0, false);
      IntervalMarker intervalMarker0 = new IntervalMarker((-1.0), 153.1541938082116);
      stackedBarRenderer3D0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, intervalMarker0, defaultCaret0);
      assertEquals(0, defaultCaret0.width);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedRangeCategoryPlot0.setOrientation(plotOrientation0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      // Undeclared exception!
//      try { 
        defaultCategoryItemRenderer0.drawRangeLine(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, defaultCaret0, 1.0E-8, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT, (Stroke) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(21, 1082, 2.0, 2.0, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.drawRangeLine(graphics2D0, (CategoryPlot) null, numberAxis3D0, rectangle0, 10, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 5, 5);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      defaultCategoryItemRenderer0.drawRangeLine(graphics2D0, categoryPlot0, numberAxis3D0, rectangle0, 0.05, categoryPlot0.DEFAULT_OUTLINE_PAINT, groupedStackedBarRenderer0.DEFAULT_OUTLINE_STROKE);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedRangeCategoryPlot0.setOrientation(plotOrientation0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2.0F, 0, false);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.drawDomainLine(graphics2D0, combinedRangeCategoryPlot0, defaultCaret0, (-1.0), stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle(10, 10);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, rectangle0, 0.0, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, (Stroke) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'stroke' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      // Undeclared exception!
//      try { 
        groupedStackedBarRenderer0.drawDomainLine(graphics2D0, combinedRangeCategoryPlot0, rectangle0, 0, (Paint) null, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'paint' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      scatterRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      Range range0 = scatterRenderer0.findRangeBounds(defaultMultiValueCategoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Range range0 = scatterRenderer0.findRangeBounds((CategoryDataset) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PeriodAxis periodAxis0 = new PeriodAxis("pud>.q??#pH");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
//      try { 
        categoryStepRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, taskSeriesCollection0, plotRenderingInfo0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, categoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
//      try { 
        ganttRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'generator' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      // Undeclared exception!
//      try { 
        defaultCategoryItemRenderer0.addAnnotation((CategoryAnnotation) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'annotation' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      categoryStepRenderer0.setSeriesURLGenerator(10, (CategoryURLGenerator) standardCategoryURLGenerator0, false);
      CategoryURLGenerator categoryURLGenerator0 = categoryStepRenderer0.getURLGenerator(10, 10, false);
      assertSame(categoryURLGenerator0, standardCategoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      areaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, false);
      Object object0 = areaRenderer0.clone();
      assertTrue(object0.equals((Object)areaRenderer0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("2#", dateFormat0);
      stackedAreaRenderer0.setSeriesToolTipGenerator(5, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer(true);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      ganttRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Locale locale0 = Locale.PRC;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("Null 'plot' argument.", numberFormat0);
      groupedStackedBarRenderer0.setSeriesItemLabelGenerator(10, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)groupedStackedBarRenderer0.getItemLabelGenerator(10, 10, false);
      assertEquals("Null 'plot' argument.", intervalCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 6, 10);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      groupedStackedBarRenderer0.setSeriesItemLabelGenerator(6, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
//      try { 
        groupedStackedBarRenderer0.drawItemLabel(graphics2D0, plotOrientation0, defaultMultiValueCategoryDataset0, 6, 10, true, 0.0, 0.05, true);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 6, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      // Undeclared exception!
//      try { 
        lineAndShapeRenderer0.setPlot((CategoryPlot) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'plot' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      statisticalLineAndShapeRenderer0.setSeriesURLGenerator(10, (CategoryURLGenerator) customCategoryURLGenerator0);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalLineAndShapeRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = scatterRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      double[][] doubleArray0 = new double[2][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("!qcSuIz^}A|MP_u/");
      DateAxis dateAxis0 = new DateAxis("org.jfree.data.time.SpreadsheetDate");
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      // Undeclared exception!
//      try { 
        defaultCategoryItemRenderer0.createHotSpotShape((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, categoryAxis0, dateAxis0, defaultIntervalCategoryDataset0, (-834), 10, false, categoryItemRendererState0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Not implemented.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator1 = (StandardCategoryItemLabelGenerator)scatterRenderer0.getBaseItemLabelGenerator();
      assertEquals("{2}", standardCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedAreaRenderer0.getLegendItemLabelGenerator();
      defaultCategoryItemRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = (DefaultCategoryItemRenderer)defaultCategoryItemRenderer0.clone();
      assertEquals(0, defaultCategoryItemRenderer1.getRowCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      int int0 = stackedBarRenderer0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator(28, (CategoryToolTipGenerator) null);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 181, 5);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      boxAndWhiskerRenderer0.drawBackground(graphics2D0, categoryPlot0, rectangle0);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = intervalBarRenderer0.getSeriesItemLabelGenerator((-1012));
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = boxAndWhiskerRenderer0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-1102.16671518453), (-1102.16671518453));
      stackedBarRenderer3D0.removeAnnotations();
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      areaRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      AreaRenderer areaRenderer1 = (AreaRenderer)areaRenderer0.clone();
      assertTrue(areaRenderer1.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      // Undeclared exception!
//      try { 
        groupedStackedBarRenderer0.drawOutline((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.plot.Plot", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DecimalFormat decimalFormat0 = new DecimalFormat(".@e<Rb8YMV]E");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(3.0, decimalFormat0, (-1153));
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 1);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      // Undeclared exception!
//      try { 
        stackedBarRenderer3D0.getItemMiddle(false, numberTickUnit0, slidingGanttCategoryDataset0, categoryAxis0, defaultCaret0, rectangleEdge0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid category index: -1
//         //
//         verifyException("org.jfree.chart.axis.CategoryAxis", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) stackedAreaRenderer0.ZERO, (double) stackedAreaRenderer0.ZERO);
      int int0 = stackedBarRenderer3D0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      int int0 = defaultCategoryItemRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = defaultCategoryItemRenderer0.getLegendItemLabelGenerator();
      groupedStackedBarRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      GroupedStackedBarRenderer groupedStackedBarRenderer1 = (GroupedStackedBarRenderer)groupedStackedBarRenderer0.clone();
      assertEquals(4.0, groupedStackedBarRenderer1.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = defaultCategoryItemRenderer0.getLegendItemLabelGenerator();
      defaultCategoryItemRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Number[][] numberArray0 = new Number[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = defaultCategoryItemRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 5, 5);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
//      try { 
        groupedStackedBarRenderer0.initialise(graphics2D0, rectangle0, categoryPlot0, defaultCategoryDataset0, plotRenderingInfo0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'index'.
//         //
//         verifyException("org.jfree.chart.plot.CategoryPlot", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", stackedAreaRenderer0.ZERO, 1970.4);
      stackedAreaRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer(false);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.2, (double) groupedStackedBarRenderer0.ZERO);
      // Undeclared exception!
//      try { 
        stackedBarRenderer3D0.setSeriesItemLabelGenerator((-3098), (CategoryItemLabelGenerator) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires index >= 0.
//         //
//         verifyException("org.jfree.chart.util.AbstractObjectList", e);
//      }
  }
}
