/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 15:38:03 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.math.RoundingMode;
import java.sql.Connection;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JTabbedPane;
import javax.swing.plaf.basic.BasicTextPaneUI;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalTabbedPaneUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.text.Position;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeTableXYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.getSeriesItemLabelGenerator(43);
      waterfallBarRenderer0.setSeriesItemLabelGenerator(43, (CategoryItemLabelGenerator) null, true);
      Color color0 = Color.YELLOW;
      GradientPaint gradientPaint0 = new GradientPaint(43, 249.9911F, color0, 43, (-1248.116F), color0, false);
      waterfallBarRenderer0.equals(gradientPaint0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.hashCode();
      Object object0 = lineAndShapeRenderer0.clone();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", numberFormat0);
      boolean boolean0 = true;
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      categoryItemRendererState0.getEntityCollection();
      // Undeclared exception!
//      try { 
        ganttRenderer0.addEntity((EntityCollection) null, ((AbstractRenderer) object0).DEFAULT_SHAPE, (CategoryDataset) null, 5, 5, false, 0.0, (double) ((AbstractRenderer) object0).ZERO);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.setValue(8.0, (Comparable) 8.0, (Comparable) 12.0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.setIgnoreZeroValues(true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getOrientation();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      CategoryCrosshairState categoryCrosshairState1 = new CategoryCrosshairState();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("", "", "|xws'[*flf8xJX[");
      lineRenderer3D0.setSeriesURLGenerator(10, (CategoryURLGenerator) standardCategoryURLGenerator0, true);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, (-546), (-3805), (-1), 10, (-3805), true, false, false, true, false, false, true);
      // Undeclared exception!
//      try { 
        chartPanel0.createGraphics2D();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.ChartPanel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.setValue(8.0, (Comparable) 8.0, (Comparable) 12.0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1280, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      BasicTreeUI.NodeDimensionsHandler basicTreeUI_NodeDimensionsHandler0 = basicTreeUI0.new NodeDimensionsHandler();
      basicTreeUI_NodeDimensionsHandler0.getNodeDimensions(plotOrientation0, 1280, 9, false, (Rectangle) null);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
//      try { 
        levelRenderer0.initialise(graphics2D0, (Rectangle2D) null, combinedDomainCategoryPlot0, jDBCCategoryDataset0, plotRenderingInfo0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'index'.
//         //
//         verifyException("org.jfree.chart.plot.CategoryPlot", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.clearSeriesStrokes(true);
      levelRenderer0.findRangeBounds((CategoryDataset) null, true);
      levelRenderer0.setMaximumItemWidth((double) levelRenderer0.ZERO);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.setValue((double) levelRenderer0.ZERO, (Comparable) 0.2, (Comparable) levelRenderer0.ZERO);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      LevelRenderer levelRenderer1 = new LevelRenderer();
      levelRenderer1.setMaximumItemWidth((-3682.462754245));
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      ImageIcon imageIcon0 = new ImageIcon("");
      minMaxCategoryRenderer0.setMaxIcon(imageIcon0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.getErrorIndicatorStroke();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      // Undeclared exception!
//      try { 
        statisticalLineAndShapeRenderer0.addEntity((EntityCollection) null, minMaxCategoryRenderer0.DEFAULT_SHAPE, jDBCCategoryDataset0, (-1228), (-1228), true, (-1228), 8000000.0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.setValue(8.0, (Comparable) 8.0, (Comparable) 12.0);
      lineRenderer3D0.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setMaximumItemWidth(0.2);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("WI@ovPhI^", "WI@ovPhI^", "{f^43?}K~HQW");
      // Undeclared exception!
//      try { 
        lineRenderer3D0.setSeriesURLGenerator((-2736), (CategoryURLGenerator) standardCategoryURLGenerator0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires index >= 0.
//         //
//         verifyException("org.jfree.chart.util.AbstractObjectList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.hashCode();
      lineAndShapeRenderer0.clone();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.getBaseURLGenerator();
      waterfallBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.lookupSeriesShape(85);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart("LMS>yu#F}3", lineAndShapeRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(5, 3127);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      bufferedImageRenderingSource0.getSelectionState(timeTableXYDataset0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      lineAndShapeRenderer0.drawBackground(graphics2D0, combinedDomainCategoryPlot0, rectangle0);
      lineAndShapeRenderer0.hashCode();
      LineAndShapeRenderer lineAndShapeRenderer1 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      lineAndShapeRenderer1.setBaseLegendTextPaint(lineAndShapeRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.hashCode();
      LineAndShapeRenderer lineAndShapeRenderer1 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      lineAndShapeRenderer1.setBaseLegendTextPaint(lineAndShapeRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'annotation' argument.");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, periodAxis0, periodAxis0);
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ellipse2D_Double0.getBounds2D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'annotation' argument.");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CategoryStepRenderer.State categoryStepRenderer_State0 = (CategoryStepRenderer.State)categoryStepRenderer0.createState(plotRenderingInfo0);
      groupedStackedBarRenderer0.setDefaultEntityRadius(500);
      // Undeclared exception!
//      try { 
        groupedStackedBarRenderer0.calculateBarW0(categoryPlot0, plotOrientation0, rectangle2D_Double0, categoryAxis3D0, categoryStepRenderer_State0, 10, (-707));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.GroupedStackedBarRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      levelRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
      levelRenderer0.setMaximumItemWidth((double) levelRenderer0.ZERO);
      levelRenderer0.getLegendTextPaint((-29));
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      levelRenderer0.getToolTipGenerator(1579, 1579, true);
      LevelRenderer levelRenderer1 = new LevelRenderer();
      levelRenderer0.getSeriesURLGenerator((-29));
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("QE2^H4TaQ$^!5JV}ai ");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.setIgnoreZeroValues(false);
      Locale locale0 = Locale.JAPAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("CategoryLabelEntity: ", numberFormat0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
//      try { 
        ganttRenderer0.setSeriesItemLabelGenerator((-1613), (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires index >= 0.
//         //
//         verifyException("org.jfree.chart.util.AbstractObjectList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.getItemLabelGenerator((-1986), (-1430), false);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.getNegativeBarPaint();
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("l*-", numberFormat0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
//      try { 
        ganttRenderer0.setSeriesItemLabelGenerator((-82), (CategoryItemLabelGenerator) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires index >= 0.
//         //
//         verifyException("org.jfree.chart.util.AbstractObjectList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getToolTipGenerator((-1613), (-1613), false);
      levelRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, false);
      levelRenderer0.setMaximumItemWidth((double) levelRenderer0.ZERO);
      levelRenderer0.getLegendTextPaint((-29));
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      levelRenderer0.getToolTipGenerator(1579, 1579, true);
      LevelRenderer levelRenderer1 = new LevelRenderer();
      levelRenderer0.getSeriesURLGenerator((-29));
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("QE2^H4TaQ$^!5JV}ai ");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.setIgnoreZeroValues(false);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
//      try { 
        stackedAreaRenderer0.updateCrosshairValues(categoryCrosshairState0, 10, 1.0F, 10, 0, 0.0, 0.05, plotOrientation0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setMaximumItemWidth(1000000.0);
      levelRenderer0.getSeriesURLGenerator(1579);
      levelRenderer0.getToolTipGenerator(1579, 1579, true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      levelRenderer0.clearSeriesPaints(true);
      Rectangle rectangle0 = new Rectangle(121, 66);
      rectangle0.getFrame();
      levelRenderer0.setMaximumItemWidth(2.0F);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(levelRenderer0.DEFAULT_PAINT, categoryAxis3D0.DEFAULT_AXIS_LINE_PAINT, categoryAxis3D0.DEFAULT_AXIS_LINE_PAINT, levelRenderer0.DEFAULT_PAINT);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("CoFJIa9A", 121, 0);
      waterfallBarRenderer0.setPositiveBarPaint(categoryAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      levelRenderer0.getLegendItemLabelGenerator();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(3.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getChartArea();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "2L_";
      stringArray0[3] = "Base item URL generator not cloneable.";
      stringArray0[4] = "Requires stepPoint in [0.0;1.0]";
      stringArray0[5] = "u%4";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      // Undeclared exception!
//      try { 
        defaultCategoryItemRenderer0.addEntity(standardEntityCollection0, ganttRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 4, 0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      standardCategorySeriesLabelGenerator0.clone();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{0}";
      stringArray0[1] = "{0}";
      stringArray0[2] = "{0}";
      stringArray0[3] = "{0}";
      stringArray0[4] = "{0}";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        lineAndShapeRenderer0.addEntity(standardEntityCollection0, rectangle2D0, defaultIntervalCategoryDataset0, 182, 182, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.getItemLabelGenerator((-1986), (-1430), false);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(minMaxCategoryRenderer0.DEFAULT_PAINT, minMaxCategoryRenderer0.DEFAULT_PAINT, minMaxCategoryRenderer0.DEFAULT_PAINT, minMaxCategoryRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      waterfallBarRenderer0.getNegativeBarPaint();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) stackedBarRenderer3D0.ZERO, 3.0, 3.0, (double) stackedBarRenderer3D0.ZERO);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      stackedBarRenderer3D0.setShadowXOffset(0.0);
      stackedBarRenderer3D0.getSeriesURLGenerator((-580));
      minMaxCategoryRenderer0.getPassCount();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      standardCategorySeriesLabelGenerator0.clone();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      stackedBarRenderer3D0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      stackedBarRenderer3D0.getDrawingSupplier();
      stackedBarRenderer3D0.setBase(0.0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.getSeriesURLGenerator((-1412));
      CategoryAxis categoryAxis0 = new CategoryAxis("e=Hbycr");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.getOrientation();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      categoryAxis0.setAxisLinePaint(minMaxCategoryRenderer0.DEFAULT_OUTLINE_PAINT);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("Null 'serialDate' argument.", levelRenderer0.ZERO, 0.05);
      Layer layer0 = Layer.BACKGROUND;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      // Undeclared exception!
//      try { 
        waterfallBarRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'annotation' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(3.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 3063, 0.0, 0.0, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      thermometerPlot0.setNotify(false);
      bufferedImageRenderingSource0.createGraphics2D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo1.clear();
      levelRenderer0.setLegendTextPaint(9, ganttRenderer0.DEFAULT_OUTLINE_PAINT);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      levelRenderer0.createState(plotRenderingInfo0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("c_", numberFormat0);
      ganttRenderer0.setSeriesItemLabelGenerator(913, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      BasicTextPaneUI basicTextPaneUI0 = new BasicTextPaneUI();
      Position.Bias position_Bias0 = Position.Bias.Forward;
      // Undeclared exception!
//      try { 
        basicTextPaneUI0.modelToView((JTextComponent) null, 15, position_Bias0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.swing.plaf.basic.BasicTextUI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      stackedBarRenderer3D0.setSeriesToolTipGenerator(5, (CategoryToolTipGenerator) null);
      stackedBarRenderer3D0.setAutoPopulateSeriesFillPaint(false);
      stackedBarRenderer3D0.getRenderAsPercentages();
      stackedBarRenderer3D0.getRowCount();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.clone();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeCategoryPlot0, false);
      PolarChartPanel polarChartPanel0 = null;
//      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // plot is not a PolarPlot
//         //
//         verifyException("org.jfree.chart.PolarChartPanel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      int int0 = 1;
      lineRenderer3D0.lookupSeriesShape(1);
      jDBCCategoryDataset0.setValue((Number) 12.0, (Comparable) 0.2, (Comparable) (-3.0));
      lineRenderer3D0.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      statisticalBarRenderer0.getLegendItemToolTipGenerator();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.setShadowPaint(statisticalBarRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      int int1 = 273;
      lineAndShapeRenderer0.getSeriesLinesVisible(273);
      String string0 = "";
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeCategoryPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = null;
//      try {
        lookupOp0 = new LookupOp((LookupTable) null, renderingHints0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.awt.image.LookupOp", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getPlotInfo();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(5, 5);
      stackedBarRenderer3D0.getDrawingSupplier();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.clone();
      stackedBarRenderer3D0.setBase(3854.8722016519564);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_PAINT, categoryStepRenderer0.DEFAULT_VALUE_LABEL_PAINT, categoryStepRenderer0.DEFAULT_OUTLINE_PAINT, stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      waterfallBarRenderer0.removeAnnotation((CategoryAnnotation) null);
      stackedBarRenderer3D0.getSeriesURLGenerator(5);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getBaseURLGenerator();
      waterfallBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      SystemColor systemColor0 = SystemColor.controlShadow;
      WaterfallBarRenderer waterfallBarRenderer1 = new WaterfallBarRenderer(systemColor0, waterfallBarRenderer0.DEFAULT_VALUE_LABEL_PAINT, stackedBarRenderer3D0.DEFAULT_PAINT, lineAndShapeRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      waterfallBarRenderer0.setLastBarPaint(lineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT);
      stackedBarRenderer3D0.getBaseItemLabelGenerator();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      standardCategorySeriesLabelGenerator0.clone();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      stackedBarRenderer3D0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      stackedBarRenderer3D0.getDrawingSupplier();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.clone();
      stackedBarRenderer3D0.setBase(0.0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(stackedBarRenderer3D0.DEFAULT_PAINT, lineAndShapeRenderer0.DEFAULT_PAINT, lineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT, stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      waterfallBarRenderer0.removeAnnotation((CategoryAnnotation) null);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      int int0 = (-1412);
      levelRenderer0.getSeriesURLGenerator((-1412));
      CategoryAxis categoryAxis0 = new CategoryAxis("e=Hbycr");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
//      try { 
        stackedAreaRenderer0.updateCrosshairValues(categoryCrosshairState0, 8.0, stackedBarRenderer3D0.ZERO, 255.4462, 10, 0.0F, 0.0, plotOrientation0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      int int0 = 1;
      intervalBarRenderer0.getLegendItem(1, 1);
      String string0 = "";
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", 1);
      Layer layer0 = Layer.FOREGROUND;
      intervalBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      float[] floatArray0 = new float[0];
      HashMap<RenderingHints.Key, ValueMarker> hashMap0 = new HashMap<RenderingHints.Key, ValueMarker>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      AffineTransform affineTransform0 = null;
//      try {
        affineTransform0 = new AffineTransform(floatArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("java.awt.geom.AffineTransform", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, (-3057.5040563509915));
      barRenderer3D0.getLegendItem(545, 545);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.lookupSeriesOutlinePaint(545);
      defaultCategoryItemRenderer0.getUseSeriesOffset();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getSeriesToolTipGenerator(545);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("d5*wy|(A", numberFormat0, numberFormat0);
      categoryStepRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      categoryStepRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null);
      categoryStepRenderer0.setStagger(false);
      categoryStepRenderer0.setStagger(false);
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_AXIS_LABEL_INSETS;
      Size2D size2D0 = new Size2D(2232.6021502155, 0.0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 337.07632085, 0.0, rectangleAnchor0);
      Rectangle2D rectangle2D1 = rectangleInsets0.createOutsetRectangle(rectangle2D0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 3.0;
      doubleArray2[2] = (double) defaultCategoryItemRenderer0.ZERO;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) defaultCategoryItemRenderer0.ZERO;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[1] = 3.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (double) categoryStepRenderer0.ZERO;
      doubleArray4[5] = 0.2;
      doubleArray4[6] = (double) 1.0F;
      doubleArray4[7] = 2232.6021502155;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.2;
      doubleArray5[1] = (double) 10;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (double) 1.0F;
      doubleArray5[4] = (double) 1.0F;
      doubleArray5[6] = 12.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 3.0;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 5, 545);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, rectangle2D1, combinedDomainCategoryPlot0, slidingCategoryDataset0, plotRenderingInfo0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.getBaseItemLabelGenerator();
      minMaxCategoryRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", false, true, true);
      Icon icon0 = jInternalFrame0.getFrameIcon();
      minMaxCategoryRenderer0.setMinIcon(icon0);
      minMaxCategoryRenderer0.getItemLabelGenerator((-1986), (-1409), false);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.getNegativeBarPaint();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      minMaxCategoryRenderer0.getPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 10, (-1986));
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
//      try { 
        plotRenderingInfo0.getSubplotInfo(10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 10, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.getItemLabelGenerator((-1975), (-1430), false);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.getNegativeBarPaint();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      lineRenderer3D0.equals(defaultCategoryItemRenderer0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getPlot();
      // Undeclared exception!
//      try { 
        waterfallBarRenderer0.getDomainAxis((CategoryPlot) null, defaultStatisticalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setLegendTextFont(4, minMaxCategoryRenderer0.DEFAULT_VALUE_LABEL_FONT);
      CategoryAxis categoryAxis0 = new CategoryAxis("Matthew Wright");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((-567), 1707.711502, 169.0866496162);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      affineTransform0.transform((Point2D) point2D_Float0, (Point2D) point2D_Float0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      stackedAreaRenderer0.getRowCount();
      stackedAreaRenderer0.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      categoryItemRendererState0.getCrosshairState();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      combinedDomainCategoryPlot0.getOrientation();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryDataset categoryDataset0 = null;
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Enumeration<LayeredBarRenderer> enumeration0 = (Enumeration<LayeredBarRenderer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      AttributeSet attributeSet0 = styleContext0.removeAttributes((AttributeSet) styleContext_NamedStyle0, (Enumeration<?>) enumeration0);
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      stackedAreaRenderer0.setLegendTextFont(categoryStepRenderer0.STAGGER_WIDTH, font0);
      stackedAreaRenderer0.getDomainAxis(combinedDomainCategoryPlot0, categoryDataset0);
      stackedAreaRenderer0.getRowCount();
      stackedAreaRenderer0.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setMaximumItemWidth(1000000.0);
      levelRenderer0.getLegendTextPaint(0);
      levelRenderer0.getSeriesURLGenerator(1579);
      levelRenderer0.getToolTipGenerator(1579, 1579, true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      levelRenderer0.clearSeriesPaints(true);
      Rectangle rectangle0 = new Rectangle(121, 66);
      rectangle0.getFrame();
      levelRenderer0.setMaximumItemWidth(2.0F);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(levelRenderer0.DEFAULT_PAINT, categoryAxis3D0.DEFAULT_AXIS_LINE_PAINT, categoryAxis3D0.DEFAULT_AXIS_LINE_PAINT, levelRenderer0.DEFAULT_PAINT);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("CoFJIa9A", 121, 0);
      Layer layer0 = Layer.BACKGROUND;
      waterfallBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      waterfallBarRenderer0.setPositiveBarPaint(categoryAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      JInternalFrame jInternalFrame0 = new JInternalFrame("", false, true, true);
      Icon icon0 = jInternalFrame0.getFrameIcon();
      minMaxCategoryRenderer0.setMinIcon(icon0);
      double[][] doubleArray0 = new double[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      stackedBarRenderer3D0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      stackedBarRenderer3D0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      // Undeclared exception!
//      try { 
        stackedBarRenderer3D0.setShadowPaint((Paint) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'paint' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(30.0, 0.0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.getOpenTickPaint();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(highLowRenderer0.DEFAULT_OUTLINE_PAINT, barRenderer3D0.DEFAULT_OUTLINE_PAINT, highLowRenderer0.DEFAULT_VALUE_LABEL_PAINT, barRenderer3D0.DEFAULT_WALL_PAINT);
      waterfallBarRenderer0.removeAnnotation((CategoryAnnotation) null);
      barRenderer3D0.getSeriesURLGenerator(2);
      waterfallBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      waterfallBarRenderer0.setLastBarPaint(barRenderer3D0.DEFAULT_OUTLINE_PAINT);
      barRenderer3D0.getBaseItemLabelGenerator();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      categoryStepRenderer0.drawLine((Graphics2D) null, categoryStepRenderer_State0, (PlotOrientation) null, 1433.3476454, 1288.0, (-2901.13089809), 20000.0);
      waterfallBarRenderer0.getSeriesToolTipGenerator((-2363));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      lineRenderer3D0.findRangeBounds((CategoryDataset) null, false);
      statisticalBarRenderer0.getLegendItemToolTipGenerator();
      // Undeclared exception!
//      try { 
        lineRenderer3D0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'generator' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      JInternalFrame jInternalFrame0 = new JInternalFrame("", false, true, true);
      Icon icon0 = jInternalFrame0.getFrameIcon();
      minMaxCategoryRenderer0.setMinIcon(icon0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      NumberFormat numberFormat0 = mockSimpleDateFormat0.getNumberFormat();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0, numberFormat0, (-1986));
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.clearSeriesPaints(true);
      Rectangle rectangle0 = new Rectangle((-1986), 121, 121, (-1986));
      Rectangle2D rectangle2D0 = rectangle0.getFrame();
      // Undeclared exception!
//      try { 
        levelRenderer0.getItemMiddle(true, (Comparable) null, (CategoryDataset) null, categoryAxis3D0, rectangle2D0, (RectangleEdge) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.axis.CategoryAxis", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      boolean boolean0 = true;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      int int0 = 7;
      int int1 = (-2179);
      levelRenderer0.getToolTipGenerator(7, (-2179), true);
      NumberTickUnit numberTickUnit0 = null;
//      try {
        numberTickUnit0 = new NumberTickUnit((-2179), (NumberFormat) null, 1214);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'formatter' argument.
//         //
//         verifyException("org.jfree.chart.axis.NumberTickUnit", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = true;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      categoryStepRenderer0.findRangeBounds(defaultCategoryDataset0);
      int int0 = 1;
      String string0 = "\\9K";
      int int1 = 185;
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      IndexColorModel indexColorModel0 = null;
//      try {
        indexColorModel0 = new IndexColorModel(185, 185, intArray0, 1, true, 185, 87);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Number of bits must be between 1 and 16.
//         //
//         verifyException("java.awt.image.IndexColorModel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.removeAnnotations();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      ganttRenderer0.equals(stackedBarRenderer0);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("xtih[^*B|@?q*q");
      stackedBarRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setMaximumItemWidth(1000000.0);
      levelRenderer0.getLegendTextPaint(0);
      levelRenderer0.getSeriesURLGenerator(1579);
      levelRenderer0.getToolTipGenerator(1579, 1579, true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      levelRenderer0.clearSeriesPaints(true);
      Rectangle rectangle0 = new Rectangle(121, 66);
      rectangle0.getFrame();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getLegendItemToolTipGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
//      try { 
        lineRenderer3D0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'generator' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      int int0 = 4925;
      lineRenderer3D0.lookupSeriesShape(4925);
      boolean boolean0 = true;
      lineRenderer3D0.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      statisticalBarRenderer0.getLegendItemToolTipGenerator();
      // Undeclared exception!
//      try { 
        lineRenderer3D0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'generator' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setMaximumItemWidth(1000000.0);
      levelRenderer0.getLegendTextPaint(0);
      levelRenderer0.lookupSeriesPaint((-225));
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      boolean boolean0 = true;
      levelRenderer0.getToolTipGenerator(1579, 1579, true);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        minMaxCategoryRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'generator' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      int int0 = (-1);
      statisticalBarRenderer0.getSeriesItemLabelGenerator((-1));
      statisticalBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null);
      statisticalBarRenderer0.setDrawBarOutline(true);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      // Undeclared exception!
//      try { 
        statisticalBarRenderer0.setShadowPaint((Paint) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'paint' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setMaximumItemWidth(1000000.0);
      levelRenderer0.getLegendTextPaint(0);
      levelRenderer0.getSeriesURLGenerator(1579);
      levelRenderer0.getToolTipGenerator(1579, 1579, true);
      NumberTickUnit numberTickUnit0 = null;
//      try {
        numberTickUnit0 = new NumberTickUnit(1000000.0, (NumberFormat) null, 263);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'formatter' argument.
//         //
//         verifyException("org.jfree.chart.axis.NumberTickUnit", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      categoryItemRendererState0.getCrosshairState();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      stackedAreaRenderer0.updateCrosshairValues((CategoryCrosshairState) null, categoryStepRenderer0.ZERO, categoryStepRenderer0.ZERO, 0.0, 5, (double) categoryStepRenderer0.ZERO, (double) categoryStepRenderer0.ZERO, plotOrientation0);
      stackedAreaRenderer0.getRowCount();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      JInternalFrame jInternalFrame0 = new JInternalFrame("", false, true, true);
      Icon icon0 = jInternalFrame0.getFrameIcon();
      minMaxCategoryRenderer0.setMinIcon(icon0);
      minMaxCategoryRenderer0.getItemLabelGenerator((-1986), (-1409), false);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.getNegativeBarPaint();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Graphics2D graphics2D0 = null;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      minMaxCategoryRenderer0.getPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-1409), 10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
//      try { 
        plotRenderingInfo0.getSubplotInfo(10);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 10, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, (-3057.5040563509915));
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(barRenderer3D0);
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertFalse(barRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(barRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertTrue(barRenderer3D0.getBaseCreateEntities());
      assertTrue(barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertTrue(barRenderer3D0.getBaseSeriesVisible());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, barRenderer3D0.getXOffset(), 0.01);
      assertTrue(barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals((-3057.5040563509915), barRenderer3D0.getYOffset(), 0.01);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertTrue(barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(barRenderer3D0.getShadowsVisible());
      
      LegendItem legendItem0 = barRenderer3D0.getLegendItem(545, 545);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNull(legendItem0);
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertFalse(barRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(barRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertTrue(barRenderer3D0.getBaseCreateEntities());
      assertTrue(barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertTrue(barRenderer3D0.getBaseSeriesVisible());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, barRenderer3D0.getXOffset(), 0.01);
      assertTrue(barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals((-3057.5040563509915), barRenderer3D0.getYOffset(), 0.01);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertTrue(barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(barRenderer3D0.getShadowsVisible());
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertNotNull(defaultCategoryItemRenderer0);
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      
      Color color0 = (Color)defaultCategoryItemRenderer0.lookupSeriesOutlinePaint(545);
      assertNotNull(color0);
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(128, color0.getBlue());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      
      boolean boolean0 = defaultCategoryItemRenderer0.getUseOutlinePaint();
      assertFalse(boolean0);
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNotNull(categoryStepRenderer0);
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(statisticalBarRenderer0);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getSeriesToolTipGenerator(545);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNull(categoryToolTipGenerator0);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      
      String string0 = "d5*wy|(A";
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("d5*wy|(A", decimalFormat0, decimalFormat0);
      assertNotNull(standardCategoryItemLabelGenerator0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("d5*wy|(A", standardCategoryItemLabelGenerator0.getLabelFormat());
      
      categoryStepRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("d5*wy|(A", standardCategoryItemLabelGenerator0.getLabelFormat());
      
      categoryStepRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      categoryStepRenderer0.setStagger(false);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      categoryStepRenderer0.setStagger(false);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(stackedBarRenderer0);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      
      Graphics2D graphics2D0 = null;
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertNotNull(boxAndWhiskerRenderer0);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_AXIS_LABEL_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      
      Size2D size2D0 = new Size2D(2232.6021502155, 0.0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(2232.6021502155, size2D0.width, 0.01);
      assertNotNull(size2D0);
      assertEquals(2232.6021502155, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      assertNotNull(rectangleAnchor0);
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 337.07632085, 0.0, rectangleAnchor0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(2232.6021502155, size2D0.width, 0.01);
      assertEquals((-1895.5258293655), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(2232.6021502155, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(2232.6021502155, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(337.07632085, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1895.5258293655), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-779.22475425775), rectangle2D_Double0.getCenterX(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle2D_Double0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(2232.6021502155, size2D0.width, 0.01);
      assertEquals((-1895.5258293655), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(2232.6021502155, rectangle2D_Double0.width, 0.01);
      assertEquals((-1898.5258293655), rectangle2D_Double1.x, 0.01);
      assertEquals(6.0, rectangle2D_Double1.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double1.y, 0.01);
      assertEquals(2238.6021502155, rectangle2D_Double1.width, 0.01);
      assertNotNull(rectangle2D_Double1);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2232.6021502155, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(337.07632085, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1895.5258293655), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-779.22475425775), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(340.07632085, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals((-779.22475425775), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-1898.5258293655), rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(3.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-3.0), rectangle2D_Double1.getMinY(), 0.01);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 3.0;
      doubleArray2[2] = (double) defaultCategoryItemRenderer0.ZERO;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) defaultCategoryItemRenderer0.ZERO;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.2;
      doubleArray4[1] = 3.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (double) categoryStepRenderer0.ZERO;
      doubleArray4[5] = 0.2;
      doubleArray4[6] = (double) 1.0F;
      doubleArray4[7] = 2232.6021502155;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.2;
      doubleArray5[1] = (double) 10;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (double) 1.0F;
      doubleArray5[4] = (double) 1.0F;
      doubleArray5[5] = 0.2;
      doubleArray5[6] = 12.0;
      doubleArray5[7] = (double) 1.0F;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 3.0;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 5, 545);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(545, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(6, doubleArray0.length);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      // Undeclared exception!
//      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, rectangle2D_Double1, combinedDomainCategoryPlot0, slidingCategoryDataset0, plotRenderingInfo0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(30.0, 0.0);
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 3.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 30.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 12.0;
      doubleArray3[1] = 12.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 12.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 8.0;
      doubleArray3[6] = 8.0;
      doubleArray3[7] = 12.0;
      doubleArray3[8] = 0.2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.2;
      doubleArray4[1] = 8.0;
      doubleArray4[2] = 8.0;
      doubleArray4[3] = (double) barRenderer3D0.ZERO;
      doubleArray4[4] = 3.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.2;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 30.0;
      doubleArray5[3] = 1366.3;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.2;
      doubleArray5[6] = 30.0;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 3.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (double) barRenderer3D0.ZERO;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 0.2;
      doubleArray8[1] = 3.0;
      doubleArray8[2] = 12.0;
      doubleArray8[3] = 3.0;
      doubleArray8[4] = 3.0;
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 1366.3;
      doubleArray8[7] = 3.0;
      doubleArray8[8] = 12.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      doubleArray9[0] = (double) barRenderer3D0.ZERO;
      doubleArray9[1] = 0.0;
      doubleArray9[2] = (double) barRenderer3D0.ZERO;
      doubleArray9[3] = 0.0;
      doubleArray9[4] = (double) barRenderer3D0.ZERO;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      barRenderer3D0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      // Undeclared exception!
//      try { 
        barRenderer3D0.setShadowPaint((Paint) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'paint' argument.
//         //
//         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getRangeGridlinePaint();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, paint0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      waterfallBarRenderer0.removeAnnotations();
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart(ringPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2796, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      bufferedImageRenderingSource0.createGraphics2D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getPlot();
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("RectangleAnchor.TOP_RIGHT", millisecond0, millisecond0);
      MetalTabbedPaneUI metalTabbedPaneUI0 = new MetalTabbedPaneUI();
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      // Undeclared exception!
//      try { 
        metalTabbedPaneUI0.getTabBounds(jTabbedPane0, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("javax.swing.plaf.basic.BasicTabbedPaneUI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      standardCategorySeriesLabelGenerator0.clone();
      stackedBarRenderer3D0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      stackedBarRenderer3D0.getDrawingSupplier();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.clone();
      stackedBarRenderer3D0.setBase(3854.8722016519564);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.getWallPaint();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      stackedBarRenderer3D0.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryStepRenderer_State0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      lineRenderer3D0.createState(plotRenderingInfo1);
      int int0 = 0;
      Color color0 = Color.red;
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, color0, 0, 0, 0.0);
      // Undeclared exception!
//      try { 
        ColorSpace.getInstance(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unknown color space
//         //
//         verifyException("java.awt.color.ColorSpace", e);
//      }
  }
}
