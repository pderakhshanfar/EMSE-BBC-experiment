/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:11:57 GMT 2021
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NumberSerializers;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.CharArrayWriter;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.Writer;
import java.lang.reflect.Type;
import java.net.URI;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberSerializers_ESTest extends NumberSerializers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<BeanSerializer> class0 = BeanSerializer.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      Double double0 = new Double(0.0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      IOContext iOContext0 = new IOContext(bufferRecycler0, nioPathSerializer0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("3&TM;Ub]>oC`");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, mockPrintStream0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      numberSerializers_DoubleSerializer0.serialize(double0, uTF8JsonGenerator0, serializerProvider0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = NumberSerializers.ShortSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<?> jsonSerializer0 = numberSerializers_ShortSerializer0.createContextual(defaultSerializerProvider_Impl0, beanProperty_Bogus0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = NumberSerializers.ShortSerializer.instance;
      Short short0 = new Short((short)1653);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      numberSerializers_ShortSerializer0.serialize(short0, jsonGenerator0, serializerProvider0);
      assertFalse(jsonGenerator0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
      Float float0 = new Float((double) (-1435L));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 96, objectMapper0, (OutputStream) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      numberSerializers_FloatSerializer0.serialize(float0, uTF8JsonGenerator0, serializerProvider0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(numberSerializers_IntegerSerializer0, beanProperty_Bogus0);
      assertSame(numberSerializers_IntegerSerializer0, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      numberSerializers_FloatSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = new NumberSerializers.ShortSerializer();
      assertFalse(numberSerializers_ShortSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      Double double0 = new Double((-3214.06));
      JsonFactory jsonFactory0 = new JsonFactory();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, ") in base64 content");
      numberSerializers_DoubleSerializer0.serializeWithType(double0, jsonGenerator0, (SerializerProvider) null, asExternalTypeSerializer0);
      assertEquals(0, jsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = new NumberSerializers.IntLikeSerializer();
      assertFalse(numberSerializers_IntLikeSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Byte byte0 = new Byte((byte)1);
      NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = NumberSerializers.IntLikeSerializer.instance;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer", "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      numberSerializers_IntLikeSerializer0.serialize(byte0, jsonGenerator0, defaultSerializerProvider_Impl0);
      assertTrue(jsonGenerator0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<TemporalField> class0 = TemporalField.class;
      NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer(class0);
      Long long0 = new Long((-627L));
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) charArrayWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      numberSerializers_LongSerializer0.serialize(long0, jsonGeneratorDelegate0, (SerializerProvider) null);
      assertEquals(4, jsonGeneratorDelegate0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Double> class0 = Double.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      Integer integer0 = new Integer((-1621));
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_IntegerSerializer0.serializeWithType(integer0, jsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
      assertTrue(jsonGenerator0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Module> class0 = Module.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      Class<Object> class1 = Object.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
//      try { 
        numberSerializers_IntegerSerializer0.serialize(numberSerializers_DoubleSerializer0, jsonGeneratorDelegate0, defaultSerializerProvider_Impl0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer cannot be cast to java.lang.Integer
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      numberSerializers_IntegerSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(numberSerializers_IntegerSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberSerializers numberSerializers0 = new NumberSerializers();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Module> class0 = Module.class;
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class1 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer(class1);
      JsonNode jsonNode0 = numberSerializers_LongSerializer0.getSchema((SerializerProvider) null, (Type) class0);
      assertEquals(1, jsonNode0.size());
  }
}
