/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 20:06:04 GMT 2021
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NumberSerializers;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberSerializers_ESTest extends NumberSerializers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<DOMSerializer> class0 = DOMSerializer.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      Integer integer0 = new Integer((-997));
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_IntegerSerializer0.serialize(integer0, jsonGenerator0, defaultSerializerProvider_Impl0);
      assertEquals(4, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      Double double0 = new Double((-9.223372036854776E18));
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.ser.PropertyBuilder", "#0RlQ|n;Rkm\"7L6sbC");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      numberSerializers_DoubleSerializer0.serialize(double0, writerBasedJsonGenerator0, defaultSerializerProvider_Impl0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = new NumberSerializers.IntLikeSerializer();
      Byte byte0 = new Byte((byte)2);
      numberSerializers_IntLikeSerializer0.serialize(byte0, jsonGenerator0, defaultSerializerProvider_Impl0);
      assertTrue(jsonGenerator0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = NumberSerializers.FloatSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      numberSerializers_FloatSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(numberSerializers_FloatSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = new NumberSerializers.ShortSerializer();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(serializerProvider0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TreeSet> class0 = TreeSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      numberSerializers_ShortSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, collectionType0);
      assertTrue(collectionType0.hasContentType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
      Double double0 = new Double((-2646));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleObjectIdResolver0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      File file0 = MockFile.createTempFile("jOyJjG@tX", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectReader0, mockPrintStream0);
      numberSerializers_DoubleSerializer0.serializeWithType(double0, uTF8JsonGenerator0, (SerializerProvider) null, (TypeSerializer) null);
      assertFalse(numberSerializers_DoubleSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = NumberSerializers.IntLikeSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      NumberSerializers numberSerializers0 = new NumberSerializers();
      // Undeclared exception!
//      try { 
        numberSerializers_IntLikeSerializer0.serialize(numberSerializers0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.ser.std.NumberSerializers cannot be cast to java.lang.Number
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer(class0);
      Long long0 = new Long(0L);
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1246);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      numberSerializers_LongSerializer0.serialize(long0, jsonGenerator0, (SerializerProvider) null);
      assertFalse(jsonGenerator0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = NumberSerializers.FloatSerializer.instance;
      Float float0 = new Float(2723.3F);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      numberSerializers_FloatSerializer0.serialize(float0, jsonGenerator0, defaultSerializerProvider_Impl0);
      assertTrue(jsonGenerator0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<?> jsonSerializer0 = numberSerializers_FloatSerializer0.createContextual(defaultSerializerProvider_Impl0, beanProperty_Bogus0);
      assertSame(numberSerializers_FloatSerializer0, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<JavaType> class0 = JavaType.class;
      NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
      Integer integer0 = new Integer(0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      numberSerializers_IntegerSerializer0.serializeWithType(integer0, uTF8JsonGenerator0, serializerProvider0, (TypeSerializer) null);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = NumberSerializers.IntLikeSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = numberSerializers_IntLikeSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
      assertEquals(1, jsonNode0.size());
  }
}
