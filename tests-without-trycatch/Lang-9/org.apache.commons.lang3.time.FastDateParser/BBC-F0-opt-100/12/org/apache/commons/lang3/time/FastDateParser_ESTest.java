/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:18:15 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$TextStrategy");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser(">yy", timeZone0, locale0);
      assertEquals(">yy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("KO)2avD21NWz", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(36);
      assertEquals(1936, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(":[M^<=-");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(":[M^<=-", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("FastDateParser[:[M^<=-,de_DE,GMT]", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("-Y@F*QeqEQ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("-Y@F*QeqEQ", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("`<o*%fUN,zJ|Tq/lc", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "&w!aLIkJG");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("&w!aLIkJG", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1956), "|yC?H^1ww'hHMHs]O");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("|yC?H^1ww'hHMHs]O", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "GCp");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(").6;T :Yb2:p", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-4194));
      assertEquals((-2194), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("6Lp.S-jn$~+", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-724));
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("d-M$)bcGQ|:", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(":[M^<=-");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(":[M^<=-", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(":[M^<=-");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(":[M^<=-", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-6477));
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "GCp");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("GCp", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(":[M^<=-");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(":[M^<=-", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("cT%S# Qcdx", (TimeZone) null, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("EP0}C<Z", "EP0}C<Z");
      Locale.forLanguageTag("%rcfr'4~Y0Kql");
      FastDateParser fastDateParser0 = new FastDateParser("a&zv", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTEAT", timeZone0, locale0);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1956), "|yC?H^1ww'hHMHs]O");
      Locale locale0 = Locale.forLanguageTag("|yC?H^1ww'hHMHs]O");
      FastDateParser fastDateParser0 = new FastDateParser("|yC?H^1ww'hHMHs]O", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(")", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("FastDateParser[),ja_JP_JP_#u-ca-japanese,GMT]");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"FastDateParser[),ja_JP_JP_#u-ca-japanese,GMT]\" does not match \\)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F>|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+s''|'[^']++(''[^']+)*+[^'AZa-z0++", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("GMTEAT");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"GMTEAT\" does not match (\\p{IsNd}++)\\+\\|(Di|Dienstag|Do|Donnerstag|Fr|Freitag|Mi|Mittwoch|Mo|Montag|Sa|Samstag|So|Sonntag)\\+\\|(\\p{IsNd}++)>\\|(n\\. Chr\\.|n\\. Chr\\.|v\\. Chr\\.|v\\. Chr\\.)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Normalzeit|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistanische Zeit|AFT|AKDT|AKST|Alaska Normalzeit|Alaska Sommerzeit|Alma Ata Zeit|ALMT|Amazonas Normalzeit|AMT|Anadyr Zeit|ANAT|Aqtau Zeit|Aqtobe Zeit|AQTT|Arabische Normalzeit|Argentinische Zeit|Armenische Zeit|ART|Aserbaidschanische Zeit|AST|Atlantik Normalzeit|Atlantik Sommerzeit|AWST|Azoren Sommerzeit|Azoren Zeit|AZOST|AZOT|AZT|Bangladesch Zeit|BDT|Bhutanische Zeit|BNT|Bolivianische Zeit|BOT|Bougainville Standard Time|Brasilianische Zeit|Britische Sommerzeit|BRT|Brunei Zeit|BST|BTT|CAT|CCT|CDT|CHADT|Chamorro Normalzeit|CHAST|Chatham Normalzeit|Chatham Sommerzeit|Chilenische Sommerzeit|Chilenische Zeit|Chinesische Normalzeit|Choibalsan Zeit|CHOT|Christmas Island Zeit|ChST|CHUT|Chuuk Zeit|CKT|CLST|CLT|Cocos Islands Zeit|Cook-Inseln Zeit|COT|CST|CVT|CXT|Davis Zeit|DAVT|DDUT|Dumont-d'Urville Zeit|EASST|EAST|EAT|ECT|Ecuadorianische Zeit|EDT|EGST|EGT|EST|Falkland Inseln Zeit|Fernando de Noronha Zeit|Fidschi Sommerzeit|Fidschi Zeit|FJST|FJT|FKT|FNT|Franz\u00F6sisch S\u00FCd- u\\. Antarktische Landzeit|Franz\u00F6sisch-Guiana Zeit|Galapagos Zeit|GALT|Gambier Zeit|GAMT|Georgische Zeit|GET|GFT|Ghanaische Normalzeit|Gilbert-Inseln Zeit|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Golf Normalzeit|Greenwich Zeit|GST|Guyanische Zeit|GYT|Hawaii Normalzeit|Hawaii Sommerzeit|HDT|HKT|Hongkong Zeit|Hovd Zeit|HOVT|HST|ICT|IDT|Indische Normalzeit|Indischer Ozean Territorium Zeit|Indochina Zeit|IOT|Iranische Normalzeit|Iranische Sommerzeit|IRDT|Irische Sommerzeit|IRKT|Irkutsk Zeit|IRST|Israelische Normalzeit|Israelische Sommerzeit|IST|Jakutsk Zeit|Japanische Normalzeit|Jekaterinburger Zeit|JST|Kap Verde Zeit|KGT|Kirgisische Zeit|Kolumbianische Zeit|Koordinierte Universalzeit|Koreanische Normalzeit|Kosrae Zeit|KOST|Kostanay Standard Time|Krasnojarsker Zeit|KRAT|KST|Kubanische Normalzeit|Kubanische Sommerzeit|LHDT|LHST|Line Inseln Zeit|LINT|Lord Howe Normalzeit|Lord Howe Sommerzeit|Macquarieinsel Sommerzeit|Macquarieinsel Zeit|Magadanische Zeit|MAGT|Malaysische Zeit|Maledivische Zeit|Marquesas Zeit|Marshallinseln Zeit|MART|Mauritius Zeit|Mawson Zeit|MAWT|MDT|MEST|MESZ|MET|MEZ|MHT|MIST|Mitteleurop\u00E4ische Sommerzeit|Mitteleurop\u00E4ische Zeit|MMT|Moskauer Normalzeit|MSK|MST|MUT|MVT|Myanmar Zeit|MYT|Nauru Zeit|NCT|NDT|Nepalesische Zeit|Neufundland Normalzeit|Neufundland Sommerzeit|Neukaledonische Zeit|Neuseeland Normalzeit|Neuseeland Sommerzeit|NFST|NFT|Niue Zeit|Norfolk Sommerzeit|Norfolk Zeit|NOVT|Nowosibirsker Zeit|NPT|NRT|NST|NUT|NZDT|NZST|OESZ|OEZ|Omsk Zeit|OMST|Oral Zeit|ORAT|Ostafrikanische Zeit|Osterinseln Sommerzeit|Osterinseln Zeit|Osteurop\u00E4ische Sommerzeit|Osteurop\u00E4ische Zeit|Ostgr\u00F6nl\u00E4ndische Sommerzeit|Ostgr\u00F6nl\u00E4ndische Zeit|Ostindonesische Zeit|Pakistanische Zeit|Palau Zeit|Papua-Neuguinea Zeit|Paraguay Sommerzeit|Paraguay Zeit|Pazifische Normalzeit|Pazifische Sommerzeit|PDT|Peruanische Zeit|PET|Petropawlowsk-Kamtschatkische Zeit|PETT|PGT|Philippines Standard Time|Phoenix Inseln Zeit|PHOT|Pierre & Miquelon Normalzeit|Pierre & Miquelon Sommerzeit|Pitcairn Normalzeit|PKT|PMDT|PMST|Pohnpei Zeit|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda Zeit|RET|Reunion Zeit|Rocky Mountains Normalzeit|Rocky Mountains Sommerzeit|Rothera Zeit|ROTT|Sakhalin Zeit|SAKT|Salomoninseln Zeit|Samarische Zeit|Samoa Normalzeit|SAMT|SAST|SBT|SCT|Seychellen Zeit|SGT|Singapur Zeit|South Georgia Normalzeit|Srednekolymsk Time|SRET|SRT|SST|Suriname Zeit|SYOT|Syowa Zeit|S\u00FCdafrikanische Normalzeit|Tadschikische Zeit|Tahiti Zeit|TAHT|TFT|Timor-Leste Normalzeit|TJT|TKT|TLT|TMT|Tokelau Zeit|Tonga Zeit|TOT|Turkmenische Zeit|Tuvalu Zeit|TVT|Ulaanbaatar Zeit|ULAT|Uruguayische Zeit|Usbekistan Zeit|Ust-Nera Zeit|UTC|UYT|UZT|Vanuatu Zeit|Venezuelanische Zeit|VET|VLAT|VOST|Vostok Zeit|VUT|Wake Zeit|WAKT|Wallis u\\. Futuna Zeit|WAT|West Samoa Sommerzeit|West Samoa Zeit|Westafrikanische Zeit|Westeurop\u00E4ische Sommerzeit|Westeurop\u00E4ische Zeit|Westgr\u00F6nl\u00E4ndische Sommerzeit|Westgr\u00F6nl\u00E4ndische Zeit|Westindonesische Zeit|Westliche Normalzeit \\(Australien\\)|WESZ|WEZ|WFT|WGST|WGT|WIB|WIT|WITA|Wladiwostok Zeit|WSDT|WSST|XJT|YAKT|YEKT|Zentral-Westliche Normalzeit \\(Australien\\)|Zentralafrikanische Zeit|Zentrale Normalzeit|Zentrale Normalzeit \\(Northern Territory\\)|Zentrale Normalzeit \\(S\u00FCdaustralien\\)|Zentrale Normalzeit \\(S\u00FCdaustralien/New South Wales\\)|Zentrale Sommerzeit|Zentrale Sommerzeit \\(S\u00FCdaustralien\\)|Zentrale Sommerzeit \\(S\u00FCdaustralien/New South Wales\\)|Zentraleurop\u00E4ische Sommerzeit|Zentraleurop\u00E4ische Zeit|Zentralindonesische Zeit|\u00D6stliche Normalzeit|\u00D6stliche Normalzeit \\(New South Wales\\)|\u00D6stliche Normalzeit \\(Queensland\\)|\u00D6stliche Normalzeit \\(Tasmanien\\)|\u00D6stliche Normalzeit \\(Victoria\\)|\u00D6stliche Sommerzeit|\u00D6stliche Sommerzeit \\(New South Wales\\)|\u00D6stliche Sommerzeit \\(Tasmanien\\)|\u00D6stliche Sommerzeit \\(Victoria\\))\\+\\|(AM|PM)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Normalzeit|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistanische Zeit|AFT|AKDT|AKST|Alaska Normalzeit|Alaska Sommerzeit|Alma Ata Zeit|ALMT|Amazonas Normalzeit|AMT|Anadyr Zeit|ANAT|Aqtau Zeit|Aqtobe Zeit|AQTT|Arabische Normalzeit|Argentinische Zeit|Armenische Zeit|ART|Aserbaidschanische Zeit|AST|Atlantik Normalzeit|Atlantik Sommerzeit|AWST|Azoren Sommerzeit|Azoren Zeit|AZOST|AZOT|AZT|Bangladesch Zeit|BDT|Bhutanische Zeit|BNT|Bolivianische Zeit|BOT|Bougainville Standard Time|Brasilianische Zeit|Britische Sommerzeit|BRT|Brunei Zeit|BST|BTT|CAT|CCT|CDT|CHADT|Chamorro Normalzeit|CHAST|Chatham Normalzeit|Chatham Sommerzeit|Chilenische Sommerzeit|Chilenische Zeit|Chinesische Normalzeit|Choibalsan Zeit|CHOT|Christmas Island Zeit|ChST|CHUT|Chuuk Zeit|CKT|CLST|CLT|Cocos Islands Zeit|Cook-Inseln Zeit|COT|CST|CVT|CXT|Davis Zeit|DAVT|DDUT|Dumont-d'Urville Zeit|EASST|EAST|EAT|ECT|Ecuadorianische Zeit|EDT|EGST|EGT|EST|Falkland Inseln Zeit|Fernando de Noronha Zeit|Fidschi Sommerzeit|Fidschi Zeit|FJST|FJT|FKT|FNT|Franz\u00F6sisch S\u00FCd- u\\. Antarktische Landzeit|Franz\u00F6sisch-Guiana Zeit|Galapagos Zeit|GALT|Gambier Zeit|GAMT|Georgische Zeit|GET|GFT|Ghanaische Normalzeit|Gilbert-Inseln Zeit|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Golf Normalzeit|Greenwich Zeit|GST|Guyanische Zeit|GYT|Hawaii Normalzeit|Hawaii Sommerzeit|HDT|HKT|Hongkong Zeit|Hovd Zeit|HOVT|HST|ICT|IDT|Indische Normalzeit|Indischer Ozean Territorium Zeit|Indochina Zeit|IOT|Iranische Normalzeit|Iranische Sommerzeit|IRDT|Irische Sommerzeit|IRKT|Irkutsk Zeit|IRST|Israelische Normalzeit|Israelische Sommerzeit|IST|Jakutsk Zeit|Japanische Normalzeit|Jekaterinburger Zeit|JST|Kap Verde Zeit|KGT|Kirgisische Zeit|Kolumbianische Zeit|Koordinierte Universalzeit|Koreanische Normalzeit|Kosrae Zeit|KOST|Kostanay Standard Time|Krasnojarsker Zeit|KRAT|KST|Kubanische Normalzeit|Kubanische Sommerzeit|LHDT|LHST|Line Inseln Zeit|LINT|Lord Howe Normalzeit|Lord Howe Sommerzeit|Macquarieinsel Sommerzeit|Macquarieinsel Zeit|Magadanische Zeit|MAGT|Malaysische Zeit|Maledivische Zeit|Marquesas Zeit|Marshallinseln Zeit|MART|Mauritius Zeit|Mawson Zeit|MAWT|MDT|MEST|MESZ|MET|MEZ|MHT|MIST|Mitteleurop\u00E4ische Sommerzeit|Mitteleurop\u00E4ische Zeit|MMT|Moskauer Normalzeit|MSK|MST|MUT|MVT|Myanmar Zeit|MYT|Nauru Zeit|NCT|NDT|Nepalesische Zeit|Neufundland Normalzeit|Neufundland Sommerzeit|Neukaledonische Zeit|Neuseeland Normalzeit|Neuseeland Sommerzeit|NFST|NFT|Niue Zeit|Norfolk Sommerzeit|Norfolk Zeit|NOVT|Nowosibirsker Zeit|NPT|NRT|NST|NUT|NZDT|NZST|OESZ|OEZ|Omsk Zeit|OMST|Oral Zeit|ORAT|Ostafrikanische Zeit|Osterinseln Sommerzeit|Osterinseln Zeit|Osteurop\u00E4ische Sommerzeit|Osteurop\u00E4ische Zeit|Ostgr\u00F6nl\u00E4ndische Sommerzeit|Ostgr\u00F6nl\u00E4ndische Zeit|Ostindonesische Zeit|Pakistanische Zeit|Palau Zeit|Papua-Neuguinea Zeit|Paraguay Sommerzeit|Paraguay Zeit|Pazifische Normalzeit|Pazifische Sommerzeit|PDT|Peruanische Zeit|PET|Petropawlowsk-Kamtschatkische Zeit|PETT|PGT|Philippines Standard Time|Phoenix Inseln Zeit|PHOT|Pierre & Miquelon Normalzeit|Pierre & Miquelon Sommerzeit|Pitcairn Normalzeit|PKT|PMDT|PMST|Pohnpei Zeit|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda Zeit|RET|Reunion Zeit|Rocky Mountains Normalzeit|Rocky Mountains Sommerzeit|Rothera Zeit|ROTT|Sakhalin Zeit|SAKT|Salomoninseln Zeit|Samarische Zeit|Samoa Normalzeit|SAMT|SAST|SBT|SCT|Seychellen Zeit|SGT|Singapur Zeit|South Georgia Normalzeit|Srednekolymsk Time|SRET|SRT|SST|Suriname Zeit|SYOT|Syowa Zeit|S\u00FCdafrikanische Normalzeit|Tadschikische Zeit|Tahiti Zeit|TAHT|TFT|Timor-Leste Normalzeit|TJT|TKT|TLT|TMT|Tokelau Zeit|Tonga Zeit|TOT|Turkmenische Zeit|Tuvalu Zeit|TVT|Ulaanbaatar Zeit|ULAT|Uruguayische Zeit|Usbekistan Zeit|Ust-Nera Zeit|UTC|UYT|UZT|Vanuatu Zeit|Venezuelanische Zeit|VET|VLAT|VOST|Vostok Zeit|VUT|Wake Zeit|WAKT|Wallis u\\. Futuna Zeit|WAT|West Samoa Sommerzeit|West Samoa Zeit|Westafrikanische Zeit|Westeurop\u00E4ische Sommerzeit|Westeurop\u00E4ische Zeit|Westgr\u00F6nl\u00E4ndische Sommerzeit|Westgr\u00F6nl\u00E4ndische Zeit|Westindonesische Zeit|Westliche Normalzeit \\(Australien\\)|WESZ|WEZ|WFT|WGST|WGT|WIB|WIT|WITA|Wladiwostok Zeit|WSDT|WSST|XJT|YAKT|YEKT|Zentral-Westliche Normalzeit \\(Australien\\)|Zentralafrikanische Zeit|Zentrale Normalzeit|Zentrale Normalzeit \\(Northern Territory\\)|Zentrale Normalzeit \\(S\u00FCdaustralien\\)|Zentrale Normalzeit \\(S\u00FCdaustralien/New South Wales\\)|Zentrale Sommerzeit|Zentrale Sommerzeit \\(S\u00FCdaustralien\\)|Zentrale Sommerzeit \\(S\u00FCdaustralien/New South Wales\\)|Zentraleurop\u00E4ische Sommerzeit|Zentraleurop\u00E4ische Zeit|Zentralindonesische Zeit|\u00D6stliche Normalzeit|\u00D6stliche Normalzeit \\(New South Wales\\)|\u00D6stliche Normalzeit \\(Queensland\\)|\u00D6stliche Normalzeit \\(Tasmanien\\)|\u00D6stliche Normalzeit \\(Victoria\\)|\u00D6stliche Sommerzeit|\u00D6stliche Sommerzeit \\(New South Wales\\)|\u00D6stliche Sommerzeit \\(Tasmanien\\)|\u00D6stliche Sommerzeit \\(Victoria\\))\\+(\\p{IsNd}++)'\\|\\[\\^\\]\\+\\+\\('\\[\\^\\]\\+\\)\\*\\+\\[\\^
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("zQr$I\"#.U]G_N:", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("BST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("zQr$I\"#.U]G_N:", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("GMTIST", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("@,2aS8lYlND9@", timeZone0, locale0);
      assertEquals("@,2aS8lYlND9@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("9v*'K8l#fT", timeZone0, locale0);
      assertEquals("9v*'K8l#fT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("5l", timeZone0, locale0);
      assertEquals("5l", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(":[M^<=-");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("3SF;%<rc3Y80Aw", timeZone0, locale0);
      assertEquals("3SF;%<rc3Y80Aw", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(89, "2o_}zds%");
      FastDateParser fastDateParser0 = new FastDateParser("2o_}zds%", simpleTimeZone0, locale0);
      assertEquals("2o_}zds%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("1FG");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("1FG", timeZone0, locale0);
      assertEquals("1FG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("(ah0Zys7S<3", timeZone0, locale0);
      assertEquals("(ah0Zys7S<3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "GCp");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("/B5U]aJ:'t+", simpleTimeZone0, locale0);
      assertEquals("/B5U]aJ:'t+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(".gj8{!wL", timeZone0, locale0);
      assertEquals(".gj8{!wL", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1956), "|yC?H^1ww'hHMHs]O");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser(",", simpleTimeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("~m*STOg+Cr^", timeZone0, locale0);
      assertEquals("~m*STOg+Cr^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("ECT", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("E4ES_Sla", timeZone0, locale0);
      assertEquals("E4ES_Sla", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "GCp");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("}m-0P^#", simpleTimeZone0, locale0);
      assertEquals("}m-0P^#", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1956), "");
      Locale locale0 = Locale.forLanguageTag("6Lp.S-jn$~+");
      FastDateParser fastDateParser0 = new FastDateParser("`y{u3q", simpleTimeZone0, locale0);
      assertEquals("`y{u3q", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "GCp");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("?y", simpleTimeZone0, locale0);
      assertEquals("?y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("W$jY,.D 8&r", timeZone0, locale0);
      assertEquals("W$jY,.D 8&r", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(")", timeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("FastDateParser[),ja_JP_JP_#u-ca-japanese,GMT]");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"FastDateParser[),ja_JP_JP_#u-ca-japanese,GMT]\" does not match \\)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeZone timeZone1 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      timeZone1.setRawOffset(108);
      FastDateParser fastDateParser0 = new FastDateParser("GMTNST", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTNST", timeZone1, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(":[M^<=-");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(":[M^<=-", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("FastDateParser[:[M^<=-,fr_FR,GMT]", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1956), "|yC?H^1ww'hHMHs]O");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("|yC?H^1ww'hHMHs]O", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("-Y@F*QqEQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(":[M^<=-");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("`<o*%fUN,zJ|Tq/lc", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("`<", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(" is not a supported timezone name", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("&w!aLIkJG", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("6Lp.S-jn$~+", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("6Lp.S-jn$~+", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("`<o*%fUN,zJ|Tq/lc", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("KO)2avD21NWz", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("3ZskB:D%E$ZYluzp");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MTNT", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("9:T^ZR4 \"1ej6Yw");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("kZ>.M=HMTPm%8{:T>e", timeZone0, locale0);
      assertEquals("kZ>.M=HMTPm%8{:T>e", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F>|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+s''|'[^']++(''[^']+)*+[^'AZa-z0++", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[D+|E+|F>|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+s''|'[^']++(''[^']+)*+[^'AZa-z0++,de,GMT]", string0);
  }
}
