/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:38:10 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(154, "x");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("m%=vKEkwu,", simpleTimeZone0, locale0);
      assertEquals("m%=vKEkwu,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("_\"yy", timeZone0, locale0);
      assertEquals("_\"yy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1750), "7yOH(E");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("7yOH(E", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(2950);
      assertEquals(4850, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parseObject("88y+37rH^[>\"FJ;", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("DvdA;WpI1VAzdmngPG");
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "a|K0sft7l}]%L");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("a|K0sft7l}]%L", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("a|K0sft7l}]%L", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1750), "7yOH(E");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("7yOH(E", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1750), "7yOH(E");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("7yOH(E", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals((-1750), timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "}jY4b{P<9JkQG>LWX");
      FastDateParser fastDateParser0 = new FastDateParser("2:\"QE5", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(154, "x");
      Locale locale0 = new Locale("?jgPaci*:-QIiLM!", "p", "/mm@.6aysXn-~ul");
      FastDateParser fastDateParser0 = new FastDateParser("2pitH8/r.)P$l!#", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2236));
      assertEquals((-236), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("{'55xr!J>3=&1J68i", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(358);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("\"n9BYMX.w:\"2HV8p", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("4KD*cI|*Oep~U3x6ZuV", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(90);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("E>aEze]+(", timeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("(p{IsNd}++)");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"(p{IsNd}++)\" does not match (\uAE08|\uAE08\uC694\uC77C|\uBAA9|\uBAA9\uC694\uC77C|\uC218|\uC218\uC694\uC77C|\uC6D4|\uC6D4\uC694\uC77C|\uC77C|\uC77C\uC694\uC77C|\uD1A0|\uD1A0\uC694\uC77C|\uD654|\uD654\uC694\uC77C)>(\uC624\uC804|\uC624\uD6C4)(\uAE08|\uAE08\uC694\uC77C|\uBAA9|\uBAA9\uC694\uC77C|\uC218|\uC218\uC694\uC77C|\uC6D4|\uC6D4\uC694\uC77C|\uC77C|\uC77C\uC694\uC77C|\uD1A0|\uD1A0\uC694\uC77C|\uD654|\uD654\uC694\uC77C)(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|Chatham \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|Chatham \uD45C\uC900\uC2DC|Choibalsan \uC2DC\uAC04|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|Davis \uC2DC\uAC04|DAVT|DDUT|EASST|EAST|Easter Is\\. \uC2DC\uAC04|Easter Is\\. \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|Fernando de Noronha \uC2DC\uAC04|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|Hovd \uC2DC\uAC04|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Standard Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk \uC2DC\uAC04|OMST|Oral \uD45C\uC900\uC2DC|ORAT|PDT|PET|PETT|PGT|Philippines Standard Time|PHOT|Pitcairn \uD45C\uC900\uC2DC|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda \uD45C\uC900\uC2DC|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|Syowa \uC2DC\uAC04|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|Vostok \uC2DC\uAC04|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT|\uAC00\uB098 \uD45C\uC900\uC2DC|\uAC00\uC774\uC544\uB098 \uC2DC\uAC04|\uAC08\uB77C\uD30C\uACE0\uC2A4 \uC2DC\uAC04|\uAC10\uBE44\uC544 \uC2DC\uAC04|\uAC78\uD504\uB9CC \uD45C\uC900\uC2DC|\uADF8\uB8E8\uC9C0\uC57C \uC2DC\uAC04|\uADF8\uB9AC\uB2C8\uCE58 \uD45C\uC900\uC2DC|\uAE38\uBC84\uD2B8 \uAD70\uB3C4 \uC2DC\uAC04|\uAE4C\uBF40\uBCA0\uB974\uB370 \uC2DC\uAC04|\uB098\uC6B0\uB8E8 \uC2DC\uAC04|\uB0A8\uC544\uD504\uB9AC\uCE74 \uD45C\uC900\uC2DC|\uB124\uD314 \uC2DC\uAC04|\uB178\uBE0C\uC2DC\uBE4C\uC2A4\uD06C \uC2DC\uAC04|\uB178\uD37D \uC2DC\uAC04|\uB178\uD37D \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274 \uCE7C\uB808\uB3C4\uB2C8\uC544 \uC2DC\uAC04|\uB274\uC9C8\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274\uC9C8\uB79C\uB4DC \uD45C\uC900\uC2DC|\uB274\uD380\uB4E4\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274\uD380\uB4E4\uB79C\uB4DC \uD45C\uC900\uC2DC|\uB2C8\uC6B0\uC5D0 \uC2DC\uAC04|\uB300\uC11C\uC591 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB300\uC11C\uC591 \uD45C\uC900\uC2DC|\uB3D9\uBD80 \uADF8\uB9B0\uB79C\uB4DC \uC2DC\uAC04|\uB3D9\uBD80 \uADF8\uB9B0\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB3D9\uBD80 \uC544\uD504\uB9AC\uCE74 \uC2DC\uAC04|\uB3D9\uBD80 \uC778\uB3C4\uB124\uC2DC\uC544 \uC2DC\uAC04|\uB3D9\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uB3D9\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uBE45\uD1A0\uB9AC\uC544\\)|\uB3D9\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uD0DC\uC988\uBA54\uC774\uB2C8\uC544\\)|\uB3D9\uBD80 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB3D9\uBD80 \uD45C\uC900\uC2DC|\uB3D9\uBD80 \uD45C\uC900\uC2DC\\(\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uB3D9\uBD80 \uD45C\uC900\uC2DC\\(\uBE45\uD1A0\uB9AC\uC544\\)|\uB3D9\uBD80 \uD45C\uC900\uC2DC\\(\uD038\uC990\uB79C\uB4DC\\)|\uB3D9\uBD80 \uD45C\uC900\uC2DC\\(\uD0DC\uC988\uBA54\uC774\uB2C8\uC544\\)|\uB3D9\uC720\uB7FD \uC2DC\uAC04|\uB3D9\uC720\uB7FD \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB4A4\uBABD \uB4A4\uB974\uBE4C \uC2DC\uAC04|\uB77C\uC778 \uAD70\uB3C4 \uC2DC\uAC04|\uB85C\uB4DC \uD558\uC6B0 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB85C\uB4DC \uD558\uC6B0 \uD45C\uC900\uC2DC|\uB85C\uC81C\uB77C \uD45C\uC900\uC2DC|\uB9AC\uC720\uB2C8\uC5B8 \uC2DC\uAC04|\uB9C8\uAC00\uB2E8 \uC2DC\uAC04|\uB9C8\uB974\uCF00\uC0AC\uC2A4 \uC2DC\uAC04|\uB9C8\uC15C\uC81C\uB3C4 \uC2DC\uAC04|\uB9D0\uB808\uC774\uC2DC\uC544 \uC2DC\uAC04|\uB9E4\uCF70\uB9AC \uC12C \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04|\uB9E4\uCF70\uB9AC \uC12C \uD45C\uC900\uC2DC|\uBAA8\uB9AC\uC154\uC2A4 \uC2DC\uAC04|\uBAA8\uC2A4\uD06C\uBC14 \uD45C\uC900\uC2DC|\uBAA8\uC2A8 \uC2DC\uAC04|\uBAB0\uB514\uBE0C \uC2DC\uAC04|\uBBF8\uC580\uB9C8 \uC2DC\uAC04|\uBC29\uAE00\uB77C\uB370\uC2DC \uC2DC\uAC04|\uBCA0\uB124\uC218\uC5D8\uB77C \uC2DC\uAC04|\uBCFC\uB9AC\uBE44\uC544 \uC2DC\uAC04|\uBD80\uD0C4 \uC2DC\uAC04|\uBE0C\uB77C\uC9C8\uB9AC\uC544 \uC2DC\uAC04|\uBE0C\uB8E8\uB098\uC774 \uC2DC\uAC04|\uBE14\uB77C\uB514\uBCF4\uC2A4\uD1A1 \uC2DC\uAC04|\uBE44\uB204\uC544\uD22C \uC2DC\uAC04|\uC0AC\uB9C8\uB77C \uC2DC\uAC04|\uC0AC\uBAA8\uC544 \uD45C\uC900\uC2DC|\uC0AC\uC6B0\uC2A4 \uC870\uC9C0\uC544 \uD45C\uC900\uC2DC|\uC0AC\uD560\uB9B0 \uC2DC\uAC04|\uC0B0\uC9C0 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC0B0\uC9C0 \uD45C\uC900\uC2DC|\uC11C\uBD80 \uADF8\uB9B0\uB79C\uB4DC \uC2DC\uAC04|\uC11C\uBD80 \uADF8\uB9B0\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uBD80 \uC544\uD504\uB9AC\uCE74 \uC2DC\uAC04|\uC11C\uBD80 \uD45C\uC900\uC2DC\\(\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC11C\uC0AC\uBAA8\uC544 \uC2DC\uAC04|\uC11C\uC0AC\uBAA8\uC544 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uC720\uB7FD \uC2DC\uAC04|\uC11C\uC720\uB7FD \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uC778\uB3C4\uB124\uC2DC\uC544 \uC2DC\uAC04|\uC138\uACC4 \uD45C\uC900\uC2DC|\uC138\uC774\uC140 \uC2DC\uAC04|\uC194\uB85C\uBAAC \uAD70\uB3C4 \uC2DC\uAC04|\uC218\uB9AC\uB0A8 \uC2DC\uAC04|\uC2F1\uAC00\uD3EC\uB974 \uC2DC\uAC04|\uC544\uB098\uB514\uB974 \uC2DC\uAC04|\uC544\uB78D \uD45C\uC900\uC2DC|\uC544\uB974\uBA54\uB2C8\uC544 \uC2DC\uAC04|\uC544\uB974\uD5E8\uD2F0\uB098 \uC2DC\uAC04|\uC544\uB9C8\uC874 \uC2DC\uAC04|\uC544\uC77C\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC544\uC81C\uB974\uBC14\uC774\uC794 \uC2DC\uAC04|\uC544\uC870\uB808\uC2A4 \uC2DC\uAC04|\uC544\uC870\uB808\uC2A4 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4 \uC2DC\uAC04|\uC545\uD0C0\uC6B0 \uC2DC\uAC04|\uC545\uD1A0\uBE0C \uC2DC\uAC04|\uC54C\uB798\uC2A4\uCE74 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC54C\uB798\uC2A4\uCE74 \uD45C\uC900\uC2DC|\uC54C\uB9C8\uC544\uD0C0 \uC2DC\uAC04|\uC57C\uCE20\uD06C \uC2DC\uAC04|\uC5D0\uC774\uCEE4 \uC2DC\uAC04|\uC5D0\uCFE0\uC544\uB3C4\uB974 \uC2DC\uAC04|\uC601\uAD6D \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC601\uC778\uB3C4 \uC81C\uB3C4 \uC2DC\uAC04|\uC608\uCE74\uD14C\uB9B0\uBC84\uADF8 \uC2DC\uAC04|\uC6B0\uB8E8\uACFC\uC774 \uC2DC\uAC04|\uC6B0\uC2A4\uD2F0\uB124\uB77C \uD45C\uC900\uC2DC|\uC6B0\uC988\uBCA0\uD0A4\uC2A4\uD0C4 \uC2DC\uAC04|\uC6B8\uB780\uBC14\uD0C0\uB974 \uC2DC\uAC04|\uC6D4\uB9AC\uC2A4 \uD6C4\uD22C\uB098 \uC2DC\uAC04|\uC6E8\uC774\uD06C \uC2DC\uAC04|\uC774\uB780 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC774\uB780 \uD45C\uC900\uC2DC|\uC774\uB974\uCFE0\uCE20\uD06C \uC2DC\uAC04|\uC774\uC2A4\uB77C\uC5D8 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC774\uC2A4\uB77C\uC5D8 \uD45C\uC900\uC2DC|\uC778\uB3C4 \uD45C\uC900\uC2DC|\uC778\uB3C4\uCC28\uC774\uB098 \uBC18\uB3C4 \uC2DC\uAC04|\uC77C\uBCF8 \uD45C\uC900\uC2DC|\uC911\uAD6D \uD45C\uC900\uC2DC|\uC911\uBD80 \uC720\uB7FD \uC2DC\uAC04|\uC911\uBD80 \uC720\uB7FD \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uB0A8\uBD80 \uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uB0A8\uBD80 \uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544/\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uC911\uBD80 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uBD80 \uD45C\uC900\uC2DC|\uC911\uBD80 \uD45C\uC900\uC2DC\\(\uB0A8\uBD80 \uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uBD80 \uD45C\uC900\uC2DC\\(\uB0A8\uBD80 \uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544/\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uC911\uBD80 \uD45C\uC900\uC2DC\\(\uBD81\uBD80 \uC9C0\uC5ED\\)|\uC911\uC559 \uC11C\uBD80 \uD45C\uC900\uC2DC\\(\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uC559 \uC544\uD504\uB9AC\uCE74 \uC2DC\uAC04|\uC911\uC559 \uC720\uB7FD \uC2DC\uAC04|\uC911\uC559 \uC720\uB7FD \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uC559 \uC778\uB3C4\uB124\uC2DC\uC544 \uC2DC\uAC04|\uCC28\uBAA8\uB85C \uD45C\uC900\uC2DC|\uCD94\uD06C \uD45C\uC900\uC2DC|\uCE60\uB808 \uC2DC\uAC04|\uCE60\uB808 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uCF54\uC2A4\uB798 \uC2DC\uAC04|\uCF54\uCF54\uC2A4 \uAD70\uB3C4 \uC2DC\uAC04|\uCF5C\uB86C\uBE44\uC544 \uC2DC\uAC04|\uCFE0\uBC14 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uCFE0\uBC14 \uD45C\uC900\uC2DC|\uCFE0\uD06C \uAD70\uB3C4 \uC2DC\uAC04|\uD06C\uB77C\uC2A4\uB178\uC57C\uB974\uC2A4\uD06C \uC2DC\uAC04|\uD06C\uB9AC\uC2A4\uB9C8\uC2A4\uC12C \uC2DC\uAC04|\uD0A4\uB974\uD0A4\uC988\uC2A4\uD0C4 \uC2DC\uAC04|\uD0C0\uC9C0\uD0A4\uC2A4\uD0C4 \uC2DC\uAC04|\uD0C0\uD788\uD2F0 \uC2DC\uAC04|\uD0DC\uD3C9\uC591 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD0DC\uD3C9\uC591 \uD45C\uC900\uC2DC|\uD1A0\uCF08\uB77C\uC6B0 \uC2DC\uAC04|\uD1B5\uAC00 \uC2DC\uAC04|\uD22C\uB974\uD06C\uBA54\uB2C8\uC2A4\uD0C4 \uC2DC\uAC04|\uD22C\uBC1C\uB8E8 \uC2DC\uAC04|\uD2F0\uBAA8\uB974-\uB808\uC2A4\uD14C \uC2DC\uAC04|\uD30C\uB77C\uACFC\uC774 \uC2DC\uAC04|\uD30C\uB77C\uACFC\uC774 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD30C\uD0A4\uC2A4\uD0C4 \uC2DC\uAC04|\uD30C\uD478\uC544\uB274\uAE30\uB2C8 \uC2DC\uAC04|\uD314\uB77C\uC6B0 \uC2DC\uAC04|\uD398\uB8E8 \uC2DC\uAC04|\uD398\uD2B8\uB85C\uD30C\uBE14\uB85C\uD504\uC2A4\uD06C-\uCE84\uCC28\uCE20\uD0A4 \uC2DC\uAC04|\uD3EC\uD074\uB79C\uB4DC \uAD70\uB3C4 \uC2DC\uAC04|\uD3F0\uD398\uC774 \uD45C\uC900\uC2DC|\uD504\uB791\uC2A4 \uB0A8\uBD80 \uC9C0\uBC29 \uBC0F \uB0A8\uADF9 \uC9C0\uC5ED \uC2DC\uAC04|\uD504\uB791\uC2A4\uB839 \uAE30\uC544\uB098 \uC2DC\uAC04|\uD53C\uB2C9\uC2A4 \uAD70\uB3C4 \uC2DC\uAC04|\uD53C\uC5D0\uB974 \uBBF8\uD06C\uB860 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD53C\uC5D0\uB974 \uBBF8\uD06C\uB860 \uD45C\uC900\uC2DC|\uD53C\uC9C0 \uC2DC\uAC04|\uD53C\uC9C0 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD558\uC640\uC774 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD558\uC640\uC774 \uD45C\uC900\uC2DC|\uD55C\uAD6D \uD45C\uC900\uC2DC|\uD64D\uCF69 \uC2DC\uAC04)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("DvdA;WpI1VAzdmngPG");
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("4KD*cI|*Oep~U3x6ZuV", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("4[>Vf+/U", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("MTPRT", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "a|K0sft7l}]%L");
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("a|K0sft7l}]%L", simpleTimeZone0, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("DvdA;WpI1VAzdmngPG");
      FastDateParser fastDateParser0 = new FastDateParser("{<<:?}54!?>6]KjeGY", timeZone0, locale0);
      assertEquals("{<<:?}54!?>6]KjeGY", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("zcl|Jz1y)gW &@>}", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("GMTPRT", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("zcl|Jz1y)gW &@>}", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTBST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("0yyy", timeZone0, locale0);
      assertEquals("0yyy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(4689);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("\"zzW^9tG", timeZone0, locale0);
      assertEquals("\"zzW^9tG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("xH2*ku:yq");
      FastDateParser fastDateParser0 = new FastDateParser("k+)m(kf59?P", timeZone0, locale0);
      assertEquals("k+)m(kf59?P", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("DvdA;WpI1VAzdmngPG");
      FastDateParser fastDateParser0 = new FastDateParser("=|5R#{L>Cpcb~yO", timeZone0, locale0);
      assertEquals("=|5R#{L>Cpcb~yO", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("DvdA;WpI1VAzdmngPG");
      FastDateParser fastDateParser0 = new FastDateParser("<&Y]j:YQO@WyL#>RK", timeZone0, locale0);
      assertEquals("<&Y]j:YQO@WyL#>RK", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2592), "");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser(";yDwyts[", simpleTimeZone0, locale0);
      assertEquals(";yDwyts[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("DvdA;WpI1VAzdmngPG");
      FastDateParser fastDateParser0 = new FastDateParser("ZM:<8bnxMIY?agf", timeZone0, locale0);
      assertEquals("ZM:<8bnxMIY?agf", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1750), "4KD*cI|*Oep~U3x6ZuV");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("9wA$W#U}e", simpleTimeZone0, locale0);
      assertEquals("9wA$W#U}e", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1311, "CTT");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("8Bm&tu", simpleTimeZone0, locale0);
      assertEquals("8Bm&tu", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1010, "@_MaYEYa<H5w*sB<");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(":wH5aa", simpleTimeZone0, locale0);
      assertEquals(":wH5aa", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1750), "7yOH(E");
      Locale locale0 = new Locale("7yOH(E", "7yOH(E");
      FastDateParser fastDateParser0 = new FastDateParser("W3u)tC", simpleTimeZone0, locale0);
      assertEquals("W3u)tC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("/rZ}Q_$", timeZone0, locale0);
      assertEquals("/rZ}Q_$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(4689);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(".xR[rW9pxh4X}u", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(154, "x");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("GM-AET", simpleTimeZone0, locale0);
      assertEquals("GM-AET", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(154, "FastDateParser[");
      Locale locale0 = new Locale("N9|Z1hkb", "GMTIET");
      FastDateParser fastDateParser0 = new FastDateParser(")qfjR", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-246));
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("GMTIET", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("@p(||'*G<!mh", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MMM&f.6`<(p;0h6)]>", timeZone0, locale0);
      assertEquals("MMM&f.6`<(p;0h6)]>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(154, "x");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("}hpA1", simpleTimeZone0, locale0);
      assertEquals("}hpA1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1750), "7yOH(E");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("7yOH(E", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("7yOH(E", parsePosition0);
      assertNull(date0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("DvdA;WpI1VAzdmngPG");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "$rOPvU9,M6?'c~*@0");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("$rOPvU9,M6?'c~*@0", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(0);
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("0+w6L,", timeZone0, locale0);
//      try { 
        fastDateParser0.parse(" 0i!:-uE7{");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \" 0i!:-uE7{\" does not match 0\\+(\\p{IsNd}{1}+)6
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(113, "`");
      FastDateParser fastDateParser0 = new FastDateParser("`", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parse("}?gKy^>-YW^Xz2");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"}?gKy^>-YW^Xz2\" does not match `
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("w,myOJ1gM&", timeZone0, locale0);
      Locale locale1 = Locale.JAPANESE;
      FastDateParser fastDateParser1 = new FastDateParser("w,myOJ1gM&", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("dU|M.`@", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1359), "dU|M.`@");
      FastDateParser fastDateParser1 = new FastDateParser("dU|M.`@", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("dU|M`@", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("2:\"QE5", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("@p(||'*G<!mh", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("dU|M.`@", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("DvdA;WpI1VAzdmngPG");
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("MTPRT", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5k_d(}T,=T{1:q");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("HT,HuZP6pgqjrXp", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("2:\"QE5");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("DvdA;WpI1VAzdmngPG");
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\((AD|AD|BC|BC)(\\p{IsNd}++)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("{'55xr!J>3=&1J68i", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("kor", locale1.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("4KD*cI|*Oep~U3x6ZuV", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("4KD*cI|*Oep~U3x6ZuV", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("@p(||'*G<!mh", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[@p(||'*G<!mh,en,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(154, "@_MaYEYa<H5w*sB<");
      Locale locale0 = new Locale("v@fCYf/YT|*D6DMEta$", "?jgPaci*:-QIiLM!");
      FastDateParser fastDateParser0 = new FastDateParser("?jgPaci*:-QIiLM!", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("hVy11CO%n\"[", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5k_d(}T,=T{1:q");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1010, "@_MaYEYa<H5w*sB<");
      Locale locale0 = new Locale("|C/nti,s", "|C/nti,s");
      FastDateParser fastDateParser0 = new FastDateParser("@_MaYEYa<H5w*sB<", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(1010, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("y~Z12Dz~L/+", timeZone0, locale0);
      assertEquals("y~Z12Dz~L/+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("zcl|Jz1y)gW &@>}", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("EAT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }
}
