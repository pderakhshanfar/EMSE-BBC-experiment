/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:21:30 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " A~HpDu");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(" A~HpDu", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject(" A~HpDu", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("BI5|5C%ZLvb*#8T[8");
      FastDateParser fastDateParser0 = new FastDateParser("BI5|5C%ZLvb*#8T[8", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("BI5|5C%ZLvb*#8T[8");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMTBST");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(";zh6Sm{L~4", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("5#Oi~Awai`XK");
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("GMT+18:00", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3689));
      assertEquals((-1689), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";zh6Sm{L~4");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(";zh6Sm{L~4", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2510);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject(";zh6Sm{L~4", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("5#Oi~Awai`XK");
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("GMT+18:00", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(40);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("SST", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";zh6Sm{L~4");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(";zh6Sm{L~4", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("BET", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";zh6Sm{L~4");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(";zh6Sm{L~4", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";zh6Sm{L~4");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(";zh6Sm{L~4", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";zh6Sm{L~4");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(";zh6Sm{L~4", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3503);
      parsePosition0.setIndex(3503);
      Locale locale1 = Locale.ITALY;
      FastDateParser fastDateParser1 = new FastDateParser("/;JNh", simpleTimeZone0, locale1);
      fastDateParser0.equals(fastDateParser1);
      Locale locale2 = fastDateParser0.getLocale();
      FastDateParser fastDateParser2 = new FastDateParser(";zh6Sm{L~4", simpleTimeZone0, locale1);
      fastDateParser0.isNextNumber();
      assertSame(locale0, locale2);
      
      fastDateParser1.getTimeZone();
      assertFalse(fastDateParser1.equals((Object)fastDateParser2));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";zh6Sm{L~4");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(";zh6Sm{L~4", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("C", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";zhZSm{L~4");
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser(";zhZSm{L~4", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("]", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "'Gs3B?");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("(xeUSQ8)+X%Sm6pY~", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parse("Invalid pattern");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"Invalid pattern\" does not match \\(
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("ZlfyENlMhLfDP>", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTJST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("ZlfyENlMhLfDP>", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      fastDateParser0.parse("GMTPST", parsePosition0);
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition0.toString());
      assertEquals(6, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("2KFEhF_GI", timeZone0, locale0);
      assertEquals("2KFEhF_GI", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "GMTBST");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("^", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("@T", timeZone0, locale0);
      assertEquals("@T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " A~HpDu");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("=A'Pfnvr~f'd{W$", simpleTimeZone0, locale0);
      assertEquals("=A'Pfnvr~f'd{W$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("<I\"~)\"L=wtmCSSfMyo@", timeZone0, locale0);
      assertEquals("<I\"~)\"L=wtmCSSfMyo@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("8b#BrI0Vk", timeZone0, locale0);
      assertEquals("8b#BrI0Vk", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " A~HpDu");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("aD7&R2!2;bP\"YmgcM", simpleTimeZone0, locale0);
      assertEquals("aD7&R2!2;bP\"YmgcM", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("5#Oi~Awai`XK");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(41, "GMT+18:00");
      FastDateParser fastDateParser0 = new FastDateParser("5#Oi~Awai`XK", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " A~HpDu");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("4U-shyt,8eR", simpleTimeZone0, locale0);
      assertEquals("4U-shyt,8eR", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "'Gs3B?");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("1", simpleTimeZone0, locale0);
      assertEquals("1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "g");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(":d0V#v", simpleTimeZone0, locale0);
      assertEquals(":d0V#v", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";zh6Sm{L~4");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser(".0Wjk_U\"_p9.d},", simpleTimeZone0, locale0);
      assertEquals(".0Wjk_U\"_p9.d},", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$2");
      FastDateParser fastDateParser0 = new FastDateParser("-2RxFS,P$As", timeZone0, locale0);
      assertEquals("-2RxFS,P$As", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ja");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(",;1", timeZone0, locale0);
      assertEquals(",;1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";zh6Sm{L~4");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("*v.E&$;yET4z", simpleTimeZone0, locale0);
      assertEquals("*v.E&$;yET4z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M)|S+|W:|Z+|7+|+|h+|+|m+|s+|w+|y+|z+K''|'[^']++(''[^'l*+)*+'|[^'A-Za-z++", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1658);
      assertEquals(3558, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("(l&#XfhlG^$j", timeZone0, locale0);
      assertEquals("(l&#XfhlG^$j", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(34, "BET");
      FastDateParser fastDateParser0 = new FastDateParser("`Iwv&=\"T", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("}+)", timeZone0, locale0);
      assertEquals("}+)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "g");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^'l*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^'l*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " A~HpDu");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("3m$;k:%Fm\u0001GOTi", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^'l*+)*+'|[^'A-Za-F]+f");
      FastDateParser fastDateParser0 = new FastDateParser("\"7MMMju6LHVSba!)E", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("\"7MMMju6LHVSba!)E");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"\"7MMMju6LHVSba!)E\" does not match \"7(1|10|10\u6708|11|11\u6708|12|12\u6708|1\u6708|2|2\u6708|3|3\u6708|4|4\u6708|5|5\u6708|6|6\u6708|7|7\u6708|8|8\u6708|9|9\u6708)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " A~HpDu");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(" A~HpDu", simpleTimeZone0, locale0);
      Locale locale1 = Locale.ENGLISH;
      FastDateParser fastDateParser1 = new FastDateParser(" A~HpDu", simpleTimeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("GMTART", timeZone0, locale0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTART", timeZone1, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";zh6Sm{L~4");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(";zh6Sm{L~4", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("GMTART", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("l).R~wR$267'fS+k", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("9x[E Qcf");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "4");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("hA", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("4");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("%@s:%9?xYgB$zB.-");
      FastDateParser fastDateParser0 = new FastDateParser("%@s:%9?xYgB$zB.-", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("%@(\\p{IsNd}++):%9\\?", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " A~HpDu");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(">Y'b", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(" A~HpDu", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[SST,zh,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("4");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";zh6Sm{L~4");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(";zh6Sm{L~4", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals(";zh6Sm{L~4", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("yZa?aG9?Fl_/", timeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("D(sDQ");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"D(sDQ\" does not match (\\p{IsNd}++)(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Normalzeit|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistanische Zeit|AFT|AKDT|AKST|Alaska Normalzeit|Alaska Sommerzeit|Alma Ata Zeit|ALMT|Amazonas Normalzeit|AMT|Anadyr Zeit|ANAT|Aqtau Zeit|Aqtobe Zeit|AQTT|Arabische Normalzeit|Argentinische Zeit|Armenische Zeit|ART|Aserbaidschanische Zeit|AST|Atlantik Normalzeit|Atlantik Sommerzeit|AWST|Azoren Sommerzeit|Azoren Zeit|AZOST|AZOT|AZT|Bangladesch Zeit|BDT|Bhutanische Zeit|BNT|Bolivianische Zeit|BOT|Bougainville Standard Time|Brasilianische Zeit|Britische Sommerzeit|BRT|Brunei Zeit|BST|BTT|CAT|CCT|CDT|CHADT|Chamorro Normalzeit|CHAST|Chatham Normalzeit|Chatham Sommerzeit|Chilenische Sommerzeit|Chilenische Zeit|Chinesische Normalzeit|Choibalsan Zeit|CHOT|Christmas Island Zeit|ChST|CHUT|Chuuk Zeit|CKT|CLST|CLT|Cocos Islands Zeit|Cook-Inseln Zeit|COT|CST|CVT|CXT|Davis Zeit|DAVT|DDUT|Dumont-d'Urville Zeit|EASST|EAST|EAT|ECT|Ecuadorianische Zeit|EDT|EGST|EGT|EST|Falkland Inseln Zeit|Fernando de Noronha Zeit|Fidschi Sommerzeit|Fidschi Zeit|FJST|FJT|FKT|FNT|Franz\u00F6sisch S\u00FCd- u\\. Antarktische Landzeit|Franz\u00F6sisch-Guiana Zeit|Galapagos Zeit|GALT|Gambier Zeit|GAMT|Georgische Zeit|GET|GFT|Ghanaische Normalzeit|Gilbert-Inseln Zeit|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Golf Normalzeit|Greenwich Zeit|GST|Guyanische Zeit|GYT|Hawaii Normalzeit|Hawaii Sommerzeit|HDT|HKT|Hongkong Zeit|Hovd Zeit|HOVT|HST|ICT|IDT|Indische Normalzeit|Indischer Ozean Territorium Zeit|Indochina Zeit|IOT|Iranische Normalzeit|Iranische Sommerzeit|IRDT|Irische Sommerzeit|IRKT|Irkutsk Zeit|IRST|Israelische Normalzeit|Israelische Sommerzeit|IST|Jakutsk Zeit|Japanische Normalzeit|Jekaterinburger Zeit|JST|Kap Verde Zeit|KGT|Kirgisische Zeit|Kolumbianische Zeit|Koordinierte Universalzeit|Koreanische Normalzeit|Kosrae Zeit|KOST|Kostanay Standard Time|Krasnojarsker Zeit|KRAT|KST|Kubanische Normalzeit|Kubanische Sommerzeit|LHDT|LHST|Line Inseln Zeit|LINT|Lord Howe Normalzeit|Lord Howe Sommerzeit|Macquarieinsel Sommerzeit|Macquarieinsel Zeit|Magadanische Zeit|MAGT|Malaysische Zeit|Maledivische Zeit|Marquesas Zeit|Marshallinseln Zeit|MART|Mauritius Zeit|Mawson Zeit|MAWT|MDT|MEST|MESZ|MET|MEZ|MHT|MIST|Mitteleurop\u00E4ische Sommerzeit|Mitteleurop\u00E4ische Zeit|MMT|Moskauer Normalzeit|MSK|MST|MUT|MVT|Myanmar Zeit|MYT|Nauru Zeit|NCT|NDT|Nepalesische Zeit|Neufundland Normalzeit|Neufundland Sommerzeit|Neukaledonische Zeit|Neuseeland Normalzeit|Neuseeland Sommerzeit|NFST|NFT|Niue Zeit|Norfolk Sommerzeit|Norfolk Zeit|NOVT|Nowosibirsker Zeit|NPT|NRT|NST|NUT|NZDT|NZST|OESZ|OEZ|Omsk Zeit|OMST|Oral Zeit|ORAT|Ostafrikanische Zeit|Osterinseln Sommerzeit|Osterinseln Zeit|Osteurop\u00E4ische Sommerzeit|Osteurop\u00E4ische Zeit|Ostgr\u00F6nl\u00E4ndische Sommerzeit|Ostgr\u00F6nl\u00E4ndische Zeit|Ostindonesische Zeit|Pakistanische Zeit|Palau Zeit|Papua-Neuguinea Zeit|Paraguay Sommerzeit|Paraguay Zeit|Pazifische Normalzeit|Pazifische Sommerzeit|PDT|Peruanische Zeit|PET|Petropawlowsk-Kamtschatkische Zeit|PETT|PGT|Philippines Standard Time|Phoenix Inseln Zeit|PHOT|Pierre & Miquelon Normalzeit|Pierre & Miquelon Sommerzeit|Pitcairn Normalzeit|PKT|PMDT|PMST|Pohnpei Zeit|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda Zeit|RET|Reunion Zeit|Rocky Mountains Normalzeit|Rocky Mountains Sommerzeit|Rothera Zeit|ROTT|Sakhalin Zeit|SAKT|Salomoninseln Zeit|Samarische Zeit|Samoa Normalzeit|SAMT|SAST|SBT|SCT|Seychellen Zeit|SGT|Singapur Zeit|South Georgia Normalzeit|Srednekolymsk Time|SRET|SRT|SST|Suriname Zeit|SYOT|Syowa Zeit|S\u00FCdafrikanische Normalzeit|Tadschikische Zeit|Tahiti Zeit|TAHT|TFT|Timor-Leste Normalzeit|TJT|TKT|TLT|TMT|Tokelau Zeit|Tonga Zeit|TOT|Turkmenische Zeit|Tuvalu Zeit|TVT|Ulaanbaatar Zeit|ULAT|Uruguayische Zeit|Usbekistan Zeit|Ust-Nera Zeit|UTC|UYT|UZT|Vanuatu Zeit|Venezuelanische Zeit|VET|VLAT|VOST|Vostok Zeit|VUT|Wake Zeit|WAKT|Wallis u\\. Futuna Zeit|WAT|West Samoa Sommerzeit|West Samoa Zeit|Westafrikanische Zeit|Westeurop\u00E4ische Sommerzeit|Westeurop\u00E4ische Zeit|Westgr\u00F6nl\u00E4ndische Sommerzeit|Westgr\u00F6nl\u00E4ndische Zeit|Westindonesische Zeit|Westliche Normalzeit \\(Australien\\)|WESZ|WEZ|WFT|WGST|WGT|WIB|WIT|WITA|Wladiwostok Zeit|WSDT|WSST|XJT|YAKT|YEKT|Zentral-Westliche Normalzeit \\(Australien\\)|Zentralafrikanische Zeit|Zentrale Normalzeit|Zentrale Normalzeit \\(Northern Territory\\)|Zentrale Normalzeit \\(S\u00FCdaustralien\\)|Zentrale Normalzeit \\(S\u00FCdaustralien/New South Wales\\)|Zentrale Sommerzeit|Zentrale Sommerzeit \\(S\u00FCdaustralien\\)|Zentrale Sommerzeit \\(S\u00FCdaustralien/New South Wales\\)|Zentraleurop\u00E4ische Sommerzeit|Zentraleurop\u00E4ische Zeit|Zentralindonesische Zeit|\u00D6stliche Normalzeit|\u00D6stliche Normalzeit \\(New South Wales\\)|\u00D6stliche Normalzeit \\(Queensland\\)|\u00D6stliche Normalzeit \\(Tasmanien\\)|\u00D6stliche Normalzeit \\(Victoria\\)|\u00D6stliche Sommerzeit|\u00D6stliche Sommerzeit \\(New South Wales\\)|\u00D6stliche Sommerzeit \\(Tasmanien\\)|\u00D6stliche Sommerzeit \\(Victoria\\))(AM|PM)\\?(AM|PM)(n\\. Chr\\.|n\\. Chr\\.|v\\. Chr\\.|v\\. Chr\\.)9\\?(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }
}
