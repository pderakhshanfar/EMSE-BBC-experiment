/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 12:11:03 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(1);
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("&fsLC}(ER", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("&fsLC}(ER", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(39, "5\"/&Ob=_4|_Ffm\"4i}");
      Locale locale0 = new Locale("5\"/&Ob=_4|_Ffm\"4i}", "5\"/&Ob=_4|_Ffm\"4i}", "5\"/&Ob=_4|_Ffm\"4i}");
      FastDateParser fastDateParser0 = new FastDateParser("5\"/&Ob=_4|_Ffm\"4i}", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3322), "5\"/&Ob=_4|_Ffm\"4i}");
      Locale locale0 = new Locale("5\"/&Ob=_4|_Ffm\"4i}", "5\"/&Ob=_4|_Ffm\"4i}", "5\"/&Ob=_4|_Ffm\"4i}");
      FastDateParser fastDateParser0 = new FastDateParser("5\"/&Ob=_4|_Ffm\"4i}", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("CST");
      FastDateParser fastDateParser0 = new FastDateParser("+4l-G(ttga|", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2191));
      assertEquals((-191), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("d(h:'*xyUvTu:'h`]");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("Z2ftcJ B:{", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-385));
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("FastDateParser[", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3322), "5\"/&Ob=_4|_Ffm\"4i}");
      Locale locale0 = new Locale("5\"/&Ob=_4|_Ffm\"4i}", "5\"/&Ob=_4|_Ffm\"4i}", "5\"/&Ob=_4|_Ffm\"4i}");
      FastDateParser fastDateParser0 = new FastDateParser("5\"/&Ob=_4|_Ffm\"4i}", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(101);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(":)T=! O4}", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("Z2ftcJ B:{", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1156);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMTNST", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("2|bh]=D0V", timeZone0, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("d(h:'*xyUvTu:'h`]");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("Z2ftcJ B:{", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1156);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("+SaY c&OsY)>?PS64U", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(">V7G", timeZone0, locale0);
      assertEquals(">V7G", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      ParsePosition parsePosition0 = new ParsePosition(1);
      FastDateParser fastDateParser0 = new FastDateParser("-&3[s", timeZone0, locale0);
      Date date0 = fastDateParser0.parse(":)T=! O4}", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("GAeYYFV", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("GAeYYFV");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"GAeYYFV\" does not match (n\\. Chr\\.|n\\. Chr\\.|v\\. Chr\\.|v\\. Chr\\.)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("Zia", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("GMTSST", parsePosition0);
      fastDateParser0.parse("GMTSST", parsePosition0);
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition0.toString());
      assertEquals(6, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("y", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("s462x^/'FdI.y.wBo", parsePosition0);
      assertEquals(4, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("FU:wfw@", timeZone0, locale0);
      assertEquals("FU:wfw@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1208), "M<AkS");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("M<AkS", simpleTimeZone0, locale0);
      assertEquals("M<AkS", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("9K>(jOR~$M", timeZone0, locale0);
      assertEquals("9K>(jOR~$M", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("8:h@X5 ", timeZone0, locale0);
      assertEquals("8:h@X5 ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("7_6G", timeZone0, locale0);
      assertEquals("7_6G", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ";", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D4#/2|]cu$(o 3E}", simpleTimeZone0, locale0);
      assertEquals("D4#/2|]cu$(o 3E}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("3", timeZone0, locale0);
      assertEquals("3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTART");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("1WctrSPb>RLzRG", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("0");
      FastDateParser fastDateParser0 = new FastDateParser("0", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("Y/0KP");
      FastDateParser fastDateParser0 = new FastDateParser("#D/-u5", timeZone0, locale0);
      assertEquals("#D/-u5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")3dU0sV?yv_j");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("* ,wEQ*IEARPp@%I", timeZone0, locale0);
      assertEquals("* ,wEQ*IEARPp@%I", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("-&3[s");
      FastDateParser fastDateParser0 = new FastDateParser("Z)4a|+Mfq*vF;)ME", timeZone0, locale0);
      assertEquals("Z)4a|+Mfq*vF;)ME", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("yyN1MuAzB6", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("6/bWK");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("E(`El=Dg.EwEDmsg5\"", timeZone0, locale0);
      assertEquals("E(`El=Dg.EwEDmsg5\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("5\"/&Ob=_4|_Ffm\"4i}");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser(" }.:@6.;wLP[-i:I`A", timeZone0, locale0);
      assertEquals(" }.:@6.;wLP[-i:I`A", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("=|x)wf#I", timeZone0, locale0);
      assertEquals("=|x)wf#I", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("d(h:'*xyUvTu:'h`]");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("{vlZf", timeZone0, locale0);
      assertEquals("{vlZf", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("0");
      FastDateParser fastDateParser0 = new FastDateParser("^", timeZone0, locale0);
      assertEquals("^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("_LjS", timeZone0, locale0);
      assertEquals("_LjS", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("-&3[s", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(100);
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("d(h:'*xyUvTu:'h`]");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("d(h:'*xyUvTu:'h`]", timeZone0, locale0);
      assertEquals("d(h:'*xyUvTu:'h`]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateParser fastDateParser0 = new FastDateParser(" $(mI]AF", timeZone0, locale0);
      assertEquals(" $(mI]AF", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" 34<Qw<%E}f,RaqB");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("(The ", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("ECT");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"ECT\" does not match \\(
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ";", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(";", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("wVm=e");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"wVm=e\" does not match ;
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = new Locale("Z2&cJ -:W", "Z2&cJ -:W");
      FastDateParser fastDateParser0 = new FastDateParser("Z2&cJ -:W", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("Z2&cJ -:W", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(93, "(The ");
      FastDateParser fastDateParser0 = new FastDateParser("yNMc>3", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("yNMc>3", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("66qOAdj1Pk9B+^IC", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("Z2&cJ -:W", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("yy,Az\u0006?,jS", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMTNST", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("CST", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("CST");
      FastDateParser fastDateParser0 = new FastDateParser("+4l-G(ttga|", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\+4", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "7");
      FastDateParser fastDateParser0 = new FastDateParser("671o{Z~X", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(39, "5\"/&Ob=_4|_Ffm\"4i}");
      Locale locale0 = new Locale("5\"/&Ob=_4|_Ffm\"4i}", "5\"/&Ob=_4|_Ffm\"4i}", "5\"/&Ob=_4|_Ffm\"4i}");
      FastDateParser fastDateParser0 = new FastDateParser("5\"/&Ob=_4|_Ffm\"4i}", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5\"/&Ob=_4|_Ffm\"4i}");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("k!xh", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("fr", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("._0rv", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("._0rv", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3322), "5\"/&Ob=_4|_Ffm\"4i}");
      Locale locale0 = new Locale("5\"/&Ob=_4|_Ffm\"4i}", "5\"/&Ob=_4|_Ffm\"4i}", "5\"/&Ob=_4|_Ffm\"4i}");
      FastDateParser fastDateParser0 = new FastDateParser("5\"/&Ob=_4|_Ffm\"4i}", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("5\"/&Ob=_4|_Ffm\"4i}", parsePosition0);
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
      assertEquals(4, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("k!xh", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[k!xh,fr_CA,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("Z2&cJ -:W", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("5\"/&O=_|_Ffm%\"4i}");
      FastDateParser fastDateParser0 = new FastDateParser("KOs&|P+e", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("5\"/&O=_|_Ffm%\"4i}");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("MMOT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("0V&lrI");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("-&3[s");
      FastDateParser fastDateParser0 = new FastDateParser("?hk6i2]U%VU ]{>eVO", timeZone0, locale0);
      assertEquals("?hk6i2]U%VU ]{>eVO", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("EdZf\"JbLeV2Wh-H$`Rd]", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("mMMMzeT", timeZone0, locale0);
      assertEquals("mMMMzeT", fastDateParser0.getPattern());
  }
}
