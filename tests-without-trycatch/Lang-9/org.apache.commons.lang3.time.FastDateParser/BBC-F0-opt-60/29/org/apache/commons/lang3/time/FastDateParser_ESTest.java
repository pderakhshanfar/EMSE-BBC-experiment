/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 09:55:03 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("MNoH");
      Locale locale0 = Locale.forLanguageTag("MNoH");
      FastDateParser fastDateParser0 = new FastDateParser("MNoH", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("3`");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("<TWk6!'R&44MEc3", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[<TWk6!'R&44MEc3,de_DE,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0", 4, 4, 4, 4, 4, 4, 4, 4);
      Locale locale0 = new Locale("%h`9;xAaXnLC0", "EN5Ms0u+PC", "");
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("2u|R^-K'siE)qA+BV>", simpleTimeZone0, locale0);
      fastDateParser0.parseObject("2u|R^-K'siE)qA+BV>", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMT");
      Locale locale0 = new Locale("GMT", "GMT", "GMT");
      FastDateParser fastDateParser0 = new FastDateParser("GMT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1949), "2.,@A *l");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("Greenwich Mean Time", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(125, "#OfsB9Q63<M");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("#OfsB9Q63<M", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0", 4, 4, 4, 4, 4, 4, 4, 4);
      Locale locale0 = new Locale("%h`9;xAaXnLC0", "EN5Ms0u+PC", "");
      FastDateParser fastDateParser0 = new FastDateParser("%h`9;xAaXnLC0", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(3600000, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("<TWk6!'R&44MEc3", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3305);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("Greenwich Zeit", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1949), "2.,@A *l");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("D2j9*}.WeLdF", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("D2j9*}.WeLdF", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("<TWk6!'R&44MEc3", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(130, "#OfsB9_Q63<M");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("#OfsB9_Q63<M", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(130);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("GMTART", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("M]T!:xEYtV-NL", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(125, "#OfsB9Q63<M");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("#OfsB9Q63<M", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("#sZ[u(=~}I1Y?", (TimeZone) null, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0", 4, 4, 4, 4, 4, 4, 4, 4);
      Locale locale0 = new Locale("%h`9;xAaXnLC0", "EN5Ms0u+PC", "");
      FastDateParser fastDateParser0 = new FastDateParser("%h`9;xAaXnLC0", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(10);
      Date date0 = fastDateParser0.parse("%h`9;xAaXnLC0", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@H`@E\"hH(D");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("yy<a#so4|", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("yy<a#so4|");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"yy<a#so4|\" does not match (\\p{IsNd}++)<(AM|PM)#(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("Zi^ ;}Wsz(", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("AST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMT");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("_v", simpleTimeZone0, locale0);
      assertEquals("_v", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wIkyTgSZ@U'dX-X,g");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("^m", timeZone0, locale0);
      assertEquals("^m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(125, "#OfsB9Q63<M");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("h@Me?g93r1+", simpleTimeZone0, locale0);
      assertEquals("h@Me?g93r1+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(125, "#OfsB9Q63<M");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("?c0Sd|-r6+.iFM9K", simpleTimeZone0, locale0);
      assertEquals("?c0Sd|-r6+.iFM9K", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(125, "#OfsB9Q63<M");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("s>@__a-s.k", simpleTimeZone0, locale0);
      assertEquals("s>@__a-s.k", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(125, "#OfsB9Q63<M");
      Locale locale0 = new Locale("l'#gd|t(9j@y{fiFh@", "NST", "+M3");
      FastDateParser fastDateParser0 = new FastDateParser("=HA_ozd~r#(+ D", simpleTimeZone0, locale0);
      assertEquals("=HA_ozd~r#(+ D", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone(":");
      FastDateParser fastDateParser0 = new FastDateParser(";dMnT'[8U7 ohTv", timeZone0, locale0);
      assertEquals(";dMnT'[8U7 ohTv", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone(":");
      FastDateParser fastDateParser0 = new FastDateParser(":", timeZone0, locale0);
      assertEquals(":", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0", 4, 4, 4, 4, 4, 4, 4, 4);
      Locale locale0 = new Locale("%h`9;xAaXnLC0", "EN5Ms0u+PC", "");
      FastDateParser fastDateParser0 = new FastDateParser("9b,PZCJAjG&", simpleTimeZone0, locale0);
      assertEquals("9b,PZCJAjG&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wIkyTgSZ@U'dX-X,g");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("6tv1!]!o|h'xGNZgzu", timeZone0, locale0);
      assertEquals("6tv1!]!o|h'xGNZgzu", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMT");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("5ECLD7\"ZB_", simpleTimeZone0, locale0);
      assertEquals("5ECLD7\"ZB_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("#OfsB9Q63<M");
      FastDateParser fastDateParser0 = new FastDateParser("y4zT6'q;*", timeZone0, locale0);
      assertEquals("y4zT6'q;*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(125, "#OfsB9Q63<M");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("0v2FExeC/RL!6XJ0R", simpleTimeZone0, locale0);
      assertEquals("0v2FExeC/RL!6XJ0R", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMT");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("1/`M/XSmWxM|[PC", simpleTimeZone0, locale0);
      assertEquals("1/`M/XSmWxM|[PC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wIkyTgSZ@U'dX-X,g");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("K,T]TetN~", timeZone0, locale0);
      assertEquals("K,T]TetN~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("*_QrpyN", timeZone0, locale0);
      assertEquals("*_QrpyN", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(130, ")*");
      FastDateParser fastDateParser0 = new FastDateParser(")*", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(103);
      assertEquals(2003, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wIkyTgSZ@U'dX-X,g");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("Greenwich Mean Time", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-4122));
      assertEquals((-2122), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ACT");
      Locale locale0 = new Locale("ACT", "ACT");
      FastDateParser fastDateParser0 = new FastDateParser("Zi^ ;}Wsz", timeZone0, locale0);
      Locale locale1 = Locale.CHINESE;
      FastDateParser fastDateParser1 = new FastDateParser("Zi^ ;}Wsz", timeZone0, locale1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("-0}KN+?=[_6!Y-Co", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parse("%h`9;xAaXnLC0");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"%h`9;xAaXnLC0\" does not match -0\\}(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0", 4, 4, 4, 4, 4, 4, 4, 4);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("s{!", simpleTimeZone0, locale0);
      assertEquals("s{!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wIkyTgSZ@U'dX-X,g");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("7?xZA6_T", timeZone0, locale0);
      assertEquals("7?xZA6_T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("%h`9;xAaXnLC0");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"%h`9;xAaXnLC0\" does not match \\((\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTPST");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPST", timeZone0, locale0);
      Locale locale1 = Locale.KOREAN;
      FastDateParser fastDateParser1 = new FastDateParser("GMTPST", timeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("yy<a#sk%o|");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("yy<a#sk%o|", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "~J)", 1, 1, 1, 1998, 39, 1, 0, 1998, 2, 1, 39);
      FastDateParser fastDateParser1 = new FastDateParser("yy<a#sk%o|", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "+rbaLl#OFky7}[");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("+rbaLl#OFky7}[", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("3$o ?\"4gT-G+&A{% qs", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("zJ)", timeZone0, locale0);
      Object object0 = fastDateParser1.parseObject("GMT");
      boolean boolean0 = fastDateParser0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("PMJ%|^!s-", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(125, "#OfsB9Q63<M");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("#OfsB9Q63<M", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("#", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0", 4, 4, 4, 4, 4, 4, 4, 4);
      Locale locale0 = new Locale("%h`9;xAaXnLC0", "EN5Ms0u+PC", "");
      FastDateParser fastDateParser0 = new FastDateParser("%h`9;xAaXnLC0", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("EN5MS0U+PC", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0", 4, 4, 4, 4, 4, 4, 4, 4);
      Locale locale0 = new Locale("%h`9;xAaXnLC0", "EN5Ms0u+PC", "");
      FastDateParser fastDateParser0 = new FastDateParser("%h`9;xAaXnLC0", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("%h`9;xAaXnLC0", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0", 4, 4, 4, 4, 4, 4, 4, 4);
      Locale locale0 = new Locale("%h`9;xAaXnLC0", "EN5Ms0u+PC", "");
      FastDateParser fastDateParser0 = new FastDateParser("%h`9;xAaXnLC0", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("2u|R^-K'siE)qA+BV>", parsePosition0);
      assertNull(object0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMT");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wlkyTgSZU'id=D-X,g");
      Locale locale0 = Locale.US;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("wlkyTgSZU'id=D-X,g", timeZone0, locale0);
      fastDateParser0.parse("4[Y2 xg$ebY_tU", parsePosition0);
      fastDateParser0.parse("L0-.3zn", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("yy<a#sk%o|");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("yy<a#sk%o|", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "%h`9;xAaXnLC0");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
      assertEquals("FastDateParser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wIkyTgSZ@U'dX-X,g");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("yZ8.qT-p<U}Z%", timeZone0, locale0);
      assertEquals("yZ8.qT-p<U}Z%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|+|S+|W+|+|a+d+h+|k+|m+|s+|w+|y+|z+|'|'[^']++(''[^']*+)*+'|7k'-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|+|S+|W+|+|a+d+h+|k+|m+|s+|w+|y+|z+|'|'[^']++(''[^']*+)*+'|7k'-Za-z]++", fastDateParser0.getPattern());
  }
}
