/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:17:37 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8140, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.setBit(677);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 677, (-1));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8218, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(7);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true, true, 8218);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2436L));
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8152, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(8152);
      base64_0.encode(byteArray0, (int) (byte)63, (int) (byte)77);
      base64_0.encode(byteArray0, (int) (byte)63, (-1969));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8164, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8164);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeInteger(bigInteger0);
      base64_0.encodeToString(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-2);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2436L));
      mockRandom0.nextLong();
      mockRandom0.ints();
      BigInteger bigInteger0 = new BigInteger(8152, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(8152);
      base64_0.encode(byteArray0, (int) (byte)52, (int) (byte)52);
      base64_0.encode(byteArray0, (int) (byte)52, (-1969));
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(6, byteArray0);
      Object object0 = base64_0.decode((Object) "\")`m#BSr'Gw{j");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2436L));
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8164, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.floatValue();
      Base64 base64_0 = new Base64(7);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray2);
      base64_0.decode((Object) string0);
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8201, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(7);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = base64_0.encode(byteArray1);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      base64_0.decode(byteArray4);
      // Undeclared exception!
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2436L));
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8164, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(8164);
      base64_0.encode(byteArray0, (int) (byte)54, (int) (byte)77);
      base64_0.encode(byteArray0, (int) (byte)54, (-1979));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(1431655765, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(1073741824, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8164, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8164);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeInteger(bigInteger0);
      String string0 = base64_0.encodeToString(byteArray2);
      Object object0 = base64_0.decode((Object) string0);
      Object object1 = base64_0.decode(object0);
      base64_0.decode(object1);
      Object object2 = base64_0.decode(object1);
      // Undeclared exception!
      base64_0.decode(object2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
//        try {
          MockRandom mockRandom0 = new MockRandom();
          mockRandom0.nextLong();
          BigInteger bigInteger0 = new BigInteger(8164, mockRandom0);
          byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
          Base64 base64_0 = new Base64(8164);
          byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
          byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
          Base64.encodeInteger(bigInteger0);
          String string0 = base64_0.encodeToString(byteArray2);
          Object object0 = base64_0.decode((Object) string0);
          // Undeclared exception!
          base64_0.encode(object0);
//        } catch(Throwable t) {
//            // Need to catch declared exceptions
//        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8164, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(7);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2436L));
      BigInteger bigInteger0 = new BigInteger(8164, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(21);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      base64_0.avail();
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray3);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encodeToString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2436L));
      BigInteger bigInteger0 = new BigInteger(8164, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(30);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64(") than the specified maxium size of ");
      base64_0.encode(byteArray0, 106, 30);
      byte[] byteArray1 = new byte[0];
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)74;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)27;
      Base64.encodeBase64(byteArray1, false, false, 6);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8164, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8164);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeInteger(bigInteger0);
      base64_0.encodeToString(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3668, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(608, byteArray0.length);
      
      Base64 base64_0 = new Base64(3668);
      base64_0.decode(byteArray0, 76, 3668);
      int int0 = base64_0.readResults(byteArray0, 1, 1);
      assertEquals(1, int0);
      assertEquals(608, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(30L);
      BigInteger bigInteger0 = new BigInteger(3668, mockRandom1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(455, byteArray1.length);
      assertEquals(608, byteArray0.length);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-31);
      byteArray2[1] = (byte)21;
      byteArray2[2] = (byte)6;
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertArrayEquals(new byte[] {(byte)52, (byte)82, (byte)85, (byte)71}, byteArray3);
      
      base64_0.decode(byteArray2, (int) (byte)6, (int) (byte) (-31));
      assertNotSame(byteArray2, byteArray3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)62;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)3, 76);
      BigInteger bigInteger0 = BigInteger.TEN;
      base64_0.encode(byteArray1, 3067, (int) (byte)3);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertEquals((short)830, bigInteger1.shortValue());
      assertEquals(14, byteArray1.length);
      
      int int0 = base64_0.avail();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2464L));
      MockRandom mockRandom1 = new MockRandom(30L);
      BigInteger bigInteger0 = new BigInteger(3668, mockRandom1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64();
      Base64 base64_2 = new Base64((-791));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      BigInteger bigInteger1 = BigInteger.ZERO;
      base64_0.encodeToString(byteArray2);
      assertEquals(1142, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.encode((byte[]) null, (-1515), (-1515));
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, 1013, 2506);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2407L));
      BigInteger bigInteger0 = new BigInteger(3668, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 76, 3668);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, 3668, 3668);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64(13, (byte[]) null);
      base64_0.encode((byte[]) null, 614, (-1325));
      MockRandom mockRandom0 = new MockRandom(76);
      mockRandom0.ints((long) 13);
      Random.setNextRandom(614);
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64.decodeBase64((String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)32;
      byteArray0[0] = (byte) (-101);
      byteArray0[0] = (byte) (-122);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(25);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)81, (byte)65, (byte)65, (byte)79, (byte)106, (byte)47, (byte)1, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2464L));
      BigInteger bigInteger0 = new BigInteger(3701, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(459, byteArray0.length);
      assertEquals(455, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(2120);
      base64_0.decode(byteArray1, 1, 64);
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(1252);
      base64_0.decode(byteArray1, 0, 1252);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)43;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)5;
      byteArray2[3] = (byte)76;
      byteArray2[4] = (byte)80;
      byteArray2[5] = (byte)100;
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(byteArray1);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length BigInteger
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte) (-67), 5078);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -67
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-110);
      byte byte0 = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)91;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1, 8192);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 64, 64);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("");
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray0, (byte) (-68), 120);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(2523);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      base64_1.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isBase64("ISO-8859-1");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, true, true, (-3080));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (104) than the specified maxium size of -3080
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byte[] byteArray1 = Base64.decodeBase64("H8]zH3+7\"@y|");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte)1);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray0, 0, 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("HYoX5cA-P\"5PG2");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-68);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64String((byte[]) null);
      base64_0.readResults(byteArray1, (byte) (-68), 120);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(2516);
      base64_1.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.hasData();
      base64_1.encode(byteArray2);
      Base64.encodeBase64String((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1, 111);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.isBase64((byte)126);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(1624);
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray0, 1212, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1212
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)99;
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.not();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64((-1976), byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte)82);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)62;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_2 = new Base64((-193));
      base64_1.decode(byteArray2, 31, (-28));
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)81;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byteArray0[4] = (byte)0;
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.isBase64((byte)0);
      base64_0.encode(byteArray2, 1395, (int) (byte)32);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte) (-37);
      byteArray3[1] = (byte)32;
      byteArray3[2] = (byte) (-12);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray3, false, false, (-1588));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1588
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Base64 base64_0 = new Base64(18);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-49);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.intValue();
      bigInteger0.modPow(bigInteger1, bigInteger1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-49);
      byteArray1[2] = (byte)32;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)39;
      base64_0.encode(byteArray2);
      Base64.isBase64((byte)123);
      base64_0.encode(byteArray2, 83, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-19);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte) (-19));
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, 8180, 0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray1, (int) (byte) (-19), (int) (byte) (-19));
      base64_0.decode((Object) "");
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 2763);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(112, byteArray0);
      base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64 base64_1 = new Base64(61);
      byte[] byteArray1 = base64_0.decode("f7");
      byte[] byteArray2 = Base64.decodeBase64("G5q5)3b Ek|EkM");
      Base64.encodeBase64(byteArray2, true);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, true);
      Base64.encodeBase64(byteArray2);
      Base64.isBase64((byte)61);
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)119, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64((byte)69);
      Base64 base64_1 = new Base64();
      base64_0.decode("Vd>I6");
      Base64 base64_2 = new Base64(false);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)69;
      byteArray2[1] = (byte) (-110);
      byteArray2[2] = (byte)78;
      byteArray2[3] = (byte)119;
      byteArray2[4] = (byte)62;
      byteArray2[5] = (byte)78;
      byteArray2[6] = (byte)69;
      byteArray2[1] = (byte)119;
      byteArray2[8] = (byte)69;
      base64_2.decode(byteArray2, 76, (-1));
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte) (-78);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)13;
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode((String) null);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-208), byteArray0, true);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64((-3410));
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 76, 76);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 76
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)0);
      byte[] byteArray1 = Base64.decodeBase64("US-ASCII");
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_2 = new Base64(64, byteArray0);
      base64_2.decode(byteArray0, (-4118), (int) (byte)0);
      base64_2.encode(byteArray0);
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray1, 64, 54);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 64
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null, (-1497), (-1497));
      base64_0.encode((byte[]) null, (-1497), (-1497));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null, (-1432), (-1432));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-1477), (-1477));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Object object0 = base64_0.decode((Object) "Z6|");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "eua(~d");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.isBase64((byte)68);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray3, true, false, 76);
      base64_0.hasData();
      base64_0.readResults(byteArray2, 13, 2959);
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray1);
      base64_0.readResults(byteArray0, 1653, 1653);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)39;
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)81;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      byteArray0[4] = (byte)0;
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)109;
      byteArray1[2] = (byte)32;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 42);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isBase64((byte)0);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_0 = new Base64(577, (byte[]) null, false);
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 33, 42);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      base64_0.avail();
      base64_0.avail();
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray5 = new byte[2];
      byteArray5[0] = (byte)1;
      byteArray5[1] = (byte)55;
      base64_0.decode(byteArray5);
      Base64.discardWhitespace(byteArray4);
      byte[] byteArray6 = Base64.decodeBase64("N%8+S!M,");
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.encodeBase64Chunked(byteArray6);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-35);
      byteArray0[8] = (byte) (-35);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((-767));
      BigInteger bigInteger0 = BigInteger.ZERO;
      base64_0.decode("3Qnd3d3d3d3d");
      Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-35);
      byteArray2[1] = (byte) (-35);
      byteArray2[2] = (byte)9;
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, true, (int) (byte)71);
      Base64 base64_0 = new Base64((byte)71);
      base64_0.decode((Object) "");
      Base64.encodeBase64((byte[]) null, false, true, (int) (byte)0);
      Base64 base64_1 = new Base64(76, (byte[]) null, false);
      base64_1.avail();
      byte[] byteArray0 = Base64.decodeBase64("k3&wUBFG8 8");
      Base64.decodeBase64(";@]ehooHz8");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shortValueExact();
      Base64.encodeInteger(bigInteger0);
      base64_1.readResults(byteArray0, 111, (byte)0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 361, 361);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 361
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)0);
      byte[] byteArray2 = Base64.decodeBase64("US-ASCII");
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeBase64(byteArray2, true);
      base64_0.encodeToString(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
      base64_1.encodeToString(byteArray2);
      Base64.decodeBase64(byteArray3);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_2 = new Base64(false);
      // Undeclared exception!
//      try { 
        base64_2.decode(byteArray1, 1517, 1517);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1517
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-15);
      Base64 base64_0 = new Base64((byte) (-15), byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.decode("#W_f+F3");
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray2, false, true);
      Base64.encodeBase64(byteArray3);
      Base64.isBase64((byte) (-114));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)62;
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64((-4935));
      base64_1.decode(byteArray1, (int) (byte)0, 76);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64((byte)78);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode("");
      base64_0.decode(byteArray1, (int) (byte)0, (-3028));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)68;
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte)68;
      byteArray1[4] = (byte)68;
      byteArray1[5] = (byte)68;
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)68;
      byteArray2[1] = (byte)68;
      byteArray2[2] = (byte)68;
      byteArray2[3] = (byte)4;
      byteArray2[4] = (byte)68;
      byteArray2[5] = (byte)68;
      byteArray2[6] = (byte)68;
      byteArray2[7] = (byte)68;
      byteArray2[8] = (byte)68;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.isBase64("");
      Base64.encodeBase64(byteArray3, true);
      Base64.isBase64((byte) (-33));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byte byte0 = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)115;
      byte byte1 = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64(byteArray0);
      String string0 = "B+)QQ|=&o+#NNE>In[";
      Base64.isBase64("B+)QQ|=&o+#NNE>In[");
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(1980, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFDs\u07BEv\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)119);
      base64_0.decode((Object) "");
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, true, true, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, 6);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(112, byteArray0);
      base64_0.encode(byteArray0);
      String string0 = "";
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "");
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte)8, byteArray0);
      Base64.encodeBase64(byteArray0, false, true, 76);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray0, 0, 0);
      bigInteger0.abs();
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        bigInteger0.setBit((-3232));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative bit address
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      Base64.encodeBase64(byteArray1);
      base64_0.decode("");
      Base64.decodeBase64("");
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray2, true, true);
      Base64.encodeBase64(byteArray2);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)1, (-1362));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)113;
      byteArray0[8] = (byte)36;
      base64_0.encode(byteArray0, (-1), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.readResults((byte[]) null, 4622, 4622);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom(34L);
      BigInteger bigInteger1 = new BigInteger(3668, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(123);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0, 1, 3668);
      base64_0.readResults(byteArray0, 123, 10);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray1, (-1882), (-1882));
      Base64.isBase64((byte)36);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray3);
      Base64.encodeBase64(byteArray2, false, false, (int) (byte)36);
      base64_0.hasData();
      base64_0.readResults(byteArray3, (byte)36, (-1882));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1827, byteArray0);
      String string0 = null;
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-68);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)72;
      byteArray1[4] = (byte)22;
      byteArray1[5] = (byte)71;
      byteArray1[6] = (byte) (-16);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = Base64.decodeBase64("dPR(%aBBIJO9R#lW4c");
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-60), (byte)81}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-208), byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray0);
      base64_0.avail();
      base64_0.avail();
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      base64_0.decode(byteArray0);
      Base64.discardWhitespace(byteArray2);
      Base64.decodeBase64(";wZ:_E0oS8");
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte)5;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64.decodeBase64("POr;354");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64.decodeBase64("O*");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-2881), (byte[]) null, true);
      Base64.encodeBase64((byte[]) null);
      base64_0.decode((byte[]) null, (-2881), (-2881));
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64("");
      Base64.encodeBase64((byte[]) null);
      String string0 = "%@_ZYQHvrVQJl ";
      Base64.decodeBase64("%@_ZYQHvrVQJl ");
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)31;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      boolean boolean0 = false;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte) (-1), byteArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [L3g4PQ==]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      Base64.decodeBase64((String) null);
      base64_0.avail();
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.decode((byte[]) null, 0, 0);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.encode((byte[]) null);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64.decodeBase64("5z=r-p>C!wmKe6*");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64(694);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      Base64.decodeBase64("");
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-14);
      byteArray2[1] = (byte)15;
      byteArray2[2] = (byte)48;
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode((Object) "8g8w");
      Base64.decodeBase64("");
      Base64.encodeBase64(byteArray1, true, true);
      base64_0.decode(byteArray1, 1, (-1));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-401), (byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.negate();
//      try { 
        base64_0.encode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64 base64_0 = new Base64(119, (byte[]) null);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(1, byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-208), byteArray0, true);
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray0);
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.decodeBase64(";wZ:_E0oS8");
      Base64 base64_1 = new Base64(0, byteArray1, true);
      Base64.isBase64(";wZ:_E0oS8");
      base64_1.isUrlSafe();
      base64_1.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte) (-5);
      Base64.encodeBase64(byteArray0, true, true, 2464);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 7596, 7596);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)99;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-35);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((byte)36, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray2);
      Base64.isBase64(" ");
      Base64.encodeBase64(byteArray0, true);
      Base64.isBase64((byte) (-35));
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)62;
      Base64.decodeInteger(byteArray0);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray0, (-3028), 0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte) (-26);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      int int0 = 39;
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, (int) (byte)0, 39);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-1), byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AQ==]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(3375, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\uFFFD=:{\uFFFD\uFFFD\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-79));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)45);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(1, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=\uFFFD\u0699\uFFFD^\uFFFD\u02E9\uFFFDX\uFFFDv\uFFFD\u0001j\u01FA\uFFFD\u05DC\uFFFD\u05E2\uFFFDz-i\uFFFD\uFFFDz\uFFFD\uFFFDJ\uFFFD\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-94);
      boolean boolean0 = false;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(281, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\uFFFDW\u0000\u0000\uFFFD\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)91;
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(") than the specified maxium size of ");
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)12;
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("#CeNjs(Z;,c\"3P'");
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Base64 base64_0 = new Base64((-1599));
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)66;
      Base64.decodeBase64(byteArray0);
      Object object0 = base64_1.decode((Object) "{)p[Q5");
      Object object1 = base64_1.encode(object0);
      base64_0.decode(object1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      Base64.decodeBase64("5hks@lPC`-2^xS|#I");
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64((byte) (-114), byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray0);
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64(5);
      base64_1.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-899L));
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Base64 base64_0 = new Base64();
//      try { 
        base64_0.encode((Object) "y!b,}.>u)>JL<y:/}");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode(byteArray0, (-114), (-2651));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte) (-39));
      base64_0.encode(byteArray1, 83, 83);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Base64.decodeBase64("H8]zH3+7\"@y|");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-47);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = new byte[7];
      base64_0.decode(byteArray0);
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte) (-47);
      byteArray2[5] = (byte)1;
      byteArray2[6] = (byte)0;
      base64_0.encode(byteArray2);
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-35);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("3Q", string0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-35);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64((byte) (-35));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64(16, byteArray0);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(11, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Base64 base64_0 = new Base64(2849);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Base64 base64_0 = new Base64(40);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        bigInteger0.pow((-4029));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative exponent
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }
}
