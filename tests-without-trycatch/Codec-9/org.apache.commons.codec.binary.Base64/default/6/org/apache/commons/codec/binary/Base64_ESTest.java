/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:17:37 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3861);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64 base64_0 = new Base64(3861);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(2197);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      int int0 = Base64.PEM_CHUNK_SIZE;
      base64_0.decode(byteArray1, 17, 1402);
      // Undeclared exception!
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      int int0 = 2197;
      BigInteger bigInteger1 = bigInteger0.pow((byte)5);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      int int1 = Base64.PEM_CHUNK_SIZE;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(64, byteArray1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [DDUAAAAAAAAAAAAAAAAAAAAAAAAAAA==]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeBase64(byteArray0, true, false, 76);
      Random.setNextRandom((byte)5);
      BigInteger bigInteger1 = bigInteger0.pow(2180);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      base64_0.decode(byteArray1, 17, 76);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Random.setNextRandom(3523);
      BigInteger bigInteger1 = bigInteger0.pow(3523);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, (int) (byte)5, 29);
      base64_0.encode(byteArray0, 5979, (-1));
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, (byte)5, 3523);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3861);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 64, 64);
      base64_0.encode(byteArray0, 4, (-82));
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger2);
      base64_0.avail();
//      try { 
        base64_0.decode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Random.setNextRandom((byte)5);
      BigInteger bigInteger1 = bigInteger0.pow(2180);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      int int0 = Base64.MIME_CHUNK_SIZE;
      base64_0.decode(byteArray1, 17, 1402);
      base64_0.encode(byteArray0, 76, (-32));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Random.setNextRandom((byte)5);
      BigInteger bigInteger1 = bigInteger0.pow(2180);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      int int0 = Base64.MIME_CHUNK_SIZE;
      base64_0.decode(byteArray1, 17, 1402);
      base64_0.encode(byteArray1, (int) (byte)5, 1402);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3852);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 229, 229);
      base64_0.encode(byteArray0, 4, (-82));
      base64_0.decode((Object) "");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(2197);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      int int0 = Base64.PEM_CHUNK_SIZE;
      base64_0.decode(byteArray1, 17, 1402);
      // Undeclared exception!
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Random.setNextRandom((byte)5);
      BigInteger bigInteger1 = bigInteger0.pow(2180);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      base64_0.encode(byteArray1, (int) (byte)5, 5979);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Random.setNextRandom((byte)5);
      BigInteger bigInteger1 = bigInteger0.pow(2180);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      base64_0.readResults(byteArray1, 64, (byte)5);
      base64_0.decode(byteArray2, 17, 1402);
      // Undeclared exception!
      base64_0.encode(byteArray2, 1402, 5608);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(2176);
      String string0 = bigInteger1.toString();
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      int int0 = 8;
      int int1 = (-840);
      Base64 base64_0 = new Base64((-840), byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte) (-95);
      byteArray2[4] = (byte) (-16);
      byteArray2[5] = (byte)107;
      Base64.decodeBase64("j]URivwY3'WB9gP");
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)123;
      byteArray2[8] = (byte)40;
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Base64 base64_0 = new Base64(17);
          byte[] byteArray0 = new byte[7];
          byteArray0[2] = (byte)5;
          byteArray0[5] = (byte)5;
          byteArray0[4] = (byte)5;
          BigInteger bigInteger0 = new BigInteger(byteArray0);
          Base64.toIntegerBytes(bigInteger0);
          Random.setNextRandom((byte)5);
          BigInteger bigInteger1 = bigInteger0.pow(2180);
          byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
          int int0 = Base64.MIME_CHUNK_SIZE;
          base64_0.decode(byteArray1, 17, 1402);
          // Undeclared exception!
          Base64.discardWhitespace(byteArray1);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3852);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2176);
      String string0 = bigInteger1.toString();
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[4] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Random.setNextRandom((byte)5);
      BigInteger bigInteger1 = bigInteger0.pow(2180);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Random.setNextRandom((byte)5);
      Base64 base64_1 = new Base64(3403);
      int int0 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(2180);
      Base64.encodeInteger(bigInteger1);
      base64_1.readResults(byteArray1, 64, (-1146));
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2180);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3852);
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64(15);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray2, 15, (byte)0);
      base64_0.decode(byteArray2, 1, 7844);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.not();
      Random.setNextRandom(640);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3852);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, false, true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Random.setNextRandom((byte)5);
      Base64 base64_1 = new Base64(3403);
      Base64 base64_2 = new Base64(false);
      base64_0.decode(byteArray1, (int) (byte)0, 1437);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger2 = bigInteger1.pow(9975);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Random.setNextRandom((byte)5);
      Base64 base64_1 = new Base64(3403);
      Base64 base64_2 = new Base64(false);
      base64_0.decode(byteArray1, (int) (byte)0, 1437);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(8156, byteArray0, false);
      Base64.isBase64("fl1O{xIl{G9");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)49;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)10);
      byte[] byteArray2 = new byte[0];
      base64_1.encode(byteArray2);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)4;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2290);
      bigInteger1.shiftRight((-3708));
      String string0 = bigInteger1.toString();
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Random.setNextRandom((byte)5);
      Base64 base64_1 = new Base64(3403);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2180);
      Base64.encodeInteger(bigInteger0);
      base64_1.avail();
      Base64.encodeBase64(byteArray0, false, true, 76);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      base64_1.readResults(byteArray2, 64, (-1146));
      Base64 base64_2 = new Base64(true);
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)5;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)5;
      byteArray4[3] = (byte)0;
      base64_2.decode(byteArray4);
      Base64.decodeBase64("");
      // Undeclared exception!
      base64_2.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(29);
      base64_0.encode(byteArray0, (-2599), (-2599));
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray1, (-92), (-3723));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.readResults((byte[]) null, 1, 1);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64((byte[]) null, true, true, 0);
      Base64 base64_1 = new Base64();
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_1.encode(object0);
      base64_0.encode(object1);
      Base64.encodeBase64((byte[]) null, true, true);
      base64_0.avail();
      base64_0.readResults((byte[]) null, (-1), 1);
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64((byte)5, byteArray0, false);
      Base64 base64_2 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, 76);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, (int) (byte)60, (int) (byte)60);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)47, (-186));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64(byteArray0, false);
      Base64.isBase64((byte)125);
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1);
      base64_0.hasData();
      base64_0.avail();
      Base64.decodeBase64((byte[]) null);
      base64_0.decode((byte[]) null);
      base64_0.decode((Object) "org.apache.commons.codec.binary.StringUtils");
      base64_0.readResults(byteArray2, (-1), 1974);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)1;
      Base64 base64_1 = new Base64((byte)5, byteArray0, false);
      byte[] byteArray1 = base64_1.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray3);
      base64_1.hasData();
      base64_0.avail();
      byte[] byteArray4 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray2);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64(byteArray2, false);
      assertEquals(60, byteArray2.length);
      assertNotSame(byteArray0, byteArray4);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[1] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("zwAAAAAA", string0);
      
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode("9}_'");
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray1, 7, (int) (byte)0);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)57, (byte)119, (byte)61, (byte)61, (byte) (-117), (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray4.length);
      
      byte[] byteArray5 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray5.length);
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray1, false, false);
      //  // Unstable assertion: assertSame(byteArray1, byteArray6);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)1;
      Base64 base64_1 = new Base64((byte)5, byteArray0, false);
      byte[] byteArray1 = base64_1.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray3);
      boolean boolean0 = base64_1.hasData();
      base64_0.avail();
      Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray2);
      assertEquals(60, byteArray2.length);
      
      Base64.encodeBase64((byte[]) null, false);
      boolean boolean1 = Base64.isBase64((byte)47);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)5;
      Base64 base64_0 = new Base64((byte)5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(20, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)5;
      Base64 base64_0 = new Base64((byte)5);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64 base64_0 = new Base64((-2175));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)114;
      base64_0.readResults(byteArray0, (byte) (-91), 2940);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)1, 105);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 64, 64);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64((-1), (byte[]) null);
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64((-1116), byteArray0, false);
      Base64 base64_1 = new Base64(64, byteArray0);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64(byteArray0, false, true, 249);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (-1116), 58);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1116
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      assertEquals(24, byteArray0.length);
      
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      Object object1 = base64_0.encode(object0);
      assertNotSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 127;
      Base64 base64_0 = new Base64(127);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)4;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.DecoderException");
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64(0, byteArray1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u001A\uFFFD\uFFFD!y\uFFFD&\uFFFD\uFFFD\uFFFDr\uFFFD^p7\uFFFD\uFFFD\u05EB\u0013\u0017\u001E\uFFFD\u0628]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      MockRandom mockRandom0 = new MockRandom(89);
      bigInteger0.byteValueExact();
      BigInteger.probablePrime(89, mockRandom0);
      Random.setNextRandom(32);
      int int0 = 440;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(440, byteArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AQ==]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)94;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((byte)94, byteArray1, true);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      base64_0.decode(byteArray1, 3715, (-2250));
      assertTrue(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AF4AAAAAAAAA", string0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      boolean boolean0 = Base64.isBase64("XrkZc");
      assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)94, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertEquals(37, byteArray0.length);
      
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 1, (int) (byte)1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte) (-117), (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64((-1116), byteArray0, false);
      Base64 base64_1 = new Base64(64, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_1.encode(byteArray1);
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray1, false);
      boolean boolean0 = Base64.isBase64((byte)55);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)94;
      Base64 base64_0 = new Base64((byte)94, byteArray0, false);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false, 76);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true);
      assertEquals(18, byteArray4.length);
      
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray2, (int) (byte)94, (-1760));
      base64_0.decode(byteArray1, 64, 127);
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(119, byteArray0);
      base64_0.encode(byteArray0, 119, (-134));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(76, byteArray0, true);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64((byte[]) null, false, false, (-1));
      base64_0.hasData();
      Base64 base64_2 = new Base64(64, byteArray0);
      base64_2.avail();
      Base64.decodeBase64((byte[]) null);
      base64_0.encode(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, (byte)1, (-2147483645));
      Base64 base64_1 = new Base64(1, byteArray0, false);
      String string1 = base64_1.encodeToString(byteArray1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 13);
      Base64 base64_0 = new Base64(false);
      boolean boolean0 = Base64.isBase64("D>t@pBvB~");
      //  // Unstable assertion: assertFalse(boolean0);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)97, (byte)87, (byte)100, (byte)66, (byte)105, (byte)119, (byte)65, (byte)61, (byte) (-117), (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64(13, byteArray1, true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-829));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte) (-30);
      base64_0.encode(byteArray1, (int) (byte) (-20), (-3160));
      base64_0.decode(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-117)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(5582, byteArray0, true);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(2945);
      base64_0.encode(byteArray0, 1908874353, (int) (byte)0);
      byte[] byteArray1 = base64_0.decode("I}<#pr");
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      assertArrayEquals(new byte[] {(byte)73, (byte)112, (byte)111}, byteArray3);
      
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true);
      base64_0.encodeToString(byteArray4);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1997), byteArray0, false);
      Base64.encodeBase64(byteArray0, false, false, 64);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      base64_0.avail();
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.valueOf(76);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false);
      assertArrayEquals(new byte[] {(byte)84, (byte)65, (byte)61, (byte)61}, byteArray4);
      assertEquals(4, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[1] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("zwAAAAAA", string0);
      
      Base64.decodeInteger(byteArray0);
      byteArray0[2] = (byte) (-98);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)13;
      byte[] byteArray2 = base64_0.decode("9}_'");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-9)}, byteArray2);
      
      byteArray0[5] = (byte)32;
      byte[] byteArray3 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)122, (byte)119, (byte)67, (byte)101, (byte)88, (byte)81, (byte)48, (byte)103, (byte)0, (byte)0}, byteArray3);
      
      base64_0.decode(byteArray0, 69, 8186);
      byte[] byteArray4 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)94;
      byteArray0[1] = (byte) (-24);
      byteArray0[3] = (byte)121;
      byteArray0[7] = (byte) (-24);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 1, (int) (byte)1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byteArray0[2] = (byte) (-98);
      Base64.decodeBase64(byteArray0);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)13;
      base64_0.decode("9}_'");
      Base64.isBase64("9}_'");
//      try { 
        base64_0.decode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)16;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-819));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-20);
      base64_0.encode(byteArray0, 0, (int) (byte)0);
      byteArray1[1] = (byte) (-30);
      base64_0.encode(byteArray1, (int) (byte) (-20), (-3160));
      base64_0.decode(byteArray1);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)14;
      byte byte0 = (byte) (-15);
      byteArray0[3] = (byte) (-15);
      byte byte1 = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "rdO4>9_z=^%/#r=D/");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object1, object0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(5582, byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      boolean boolean0 = base64_0.isUrlSafe();
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)80, (byte)56, (byte)65}, byteArray4);
      
      Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)65, (byte)52, (byte)81, (byte)81, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      
      Base64 base64_1 = new Base64((byte)0);
      Base64.isBase64((byte)0);
      base64_1.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_0.hasData();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-20);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 83);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray0);
      byteArray0[2] = (byte) (-98);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray1);
      base64_1.avail();
      Base64.encodeBase64(byteArray1);
      Base64 base64_2 = new Base64(false);
      Object object0 = new Object();
//      try { 
        base64_2.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte byte0 = (byte)47;
      byte byte1 = (byte) (-17);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(5582, byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_1 = new Base64(1284, byteArray0, false);
      base64_1.decode(byteArray0, 5582, (int) (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-124);
      Base64 base64_0 = new Base64((-1997), byteArray2, true);
      boolean boolean0 = base64_0.isUrlSafe();
      //  // Unstable assertion: assertTrue(boolean0);
      
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.isBase64((byte) (-124));
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)104, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray4);
      
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte)0;
      byteArray5[2] = (byte)0;
      byteArray5[3] = (byte) (-124);
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte) (-40);
      byteArray5[6] = (byte) (-124);
      byte[] byteArray6 = base64_0.encode(byteArray5);
      //  // Unstable assertion: assertEquals(10, byteArray6.length);
      
      base64_0.avail();
      Base64.encodeBase64(byteArray3);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-17);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64((byte) (-42));
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64((byte)47);
      base64_0.encode(byteArray1);
      base64_0.avail();
      Base64.encodeBase64(byteArray2);
      Object object0 = base64_0.decode((Object) "L+8=");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(98);
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray0, (-2261), 1);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("orgapachecommonscodecDecoderExceptio", string0);
      
      Base64.isArrayByteBase64(byteArray0);
      base64_0.encode(byteArray0, (-2374), (-2374));
      base64_0.encode(byteArray0, 1, 1243);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1243);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(36, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-108);
      byteArray0[8] = (byte)0;
      Base64 base64_0 = new Base64(46, byteArray0);
      int int0 = base64_0.readResults(byteArray0, (byte) (-1), (byte) (-1));
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-17);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64((byte) (-17));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("TC04QUFBQUFBQQ==", string0);
      
      Base64 base64_0 = new Base64((byte) (-17));
      byte[] byteArray3 = base64_0.encode(byteArray0);
      base64_0.avail();
      Base64.encodeBase64String(byteArray3);
      Base64.encodeBase64(byteArray2);
      assertEquals(18, byteArray2.length);
      
      Object object0 = base64_0.decode((Object) "TC04QUFBQUFBQQ==");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object1, object0);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertEquals(12, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "");
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(98);
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray0, (-2261), 1);
      Base64.encodeBase64String(byteArray0);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      assertEquals(37, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = Base64.isBase64(";gh.U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte) (-20), (int) (byte) (-20));
      base64_0.encode(byteArray0, (int) (byte)105, 1496);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray0, 64, (-1611));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-1587));
      boolean boolean1 = Base64.isBase64("JL0=");
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64(119);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray1);
      
      base64_1.decode(byteArray0);
      byte[] byteArray2 = base64_1.decode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray2);
      
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-89);
      byteArray3[1] = (byte)87;
      byteArray3[2] = (byte)32;
      byteArray3[3] = (byte)123;
      byteArray3[5] = (byte)40;
      Base64.discardWhitespace(byteArray3);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)2;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64((-1997));
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte) (-20)}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byteArray0[2] = (byte) (-98);
      Base64.decodeBase64(byteArray0);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)13;
      base64_0.decode("9}_'");
      byteArray0[5] = (byte)32;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64((byte[]) null, false, false, 64);
      base64_0.hasData();
      base64_0.avail();
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64(byteArray2, false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      base64_0.decode("x}+l=LJOu I E");
      Base64.isBase64("x}+l=LJOu I E");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64(612);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)92;
      base64_0.decode("RQE(7kWn35");
      byteArray0[4] = (byte)0;
      Base64.encodeBase64(byteArray0);
      byteArray0[5] = (byte)75;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = base64_0.decode("$~_i");
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.setBit(1715);
      bigInteger0.signum();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.intValueExact();
      Base64.encodeBase64(byteArray2, false, false);
      base64_0.encode(byteArray2);
      Base64.isBase64(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("Hl4AXABL");
      base64_0.encodeToString(byteArray3);
      Base64.decodeBase64("Hl4AXABL");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = null;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger2.toString();
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "");
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-37);
      byteArray1[2] = (byte) (-4);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64 base64_0 = new Base64(56, byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.floatValue();
      bigInteger1.byteValueExact();
      bigInteger0.max(bigInteger1);
      bigInteger0.doubleValue();
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger.valueOf(56);
      Base64.encodeInteger(bigInteger2);
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigInteger3.floatValue();
      Base64.toIntegerBytes(bigInteger3);
      BigInteger bigInteger4 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigInteger2.divide(bigInteger4);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger divide by zero
//         //
//         verifyException("java.math.MutableBigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 691;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)0;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(691, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000_\u0000Kf\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("QVFBQUFBQUFBQUFB", string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray2, 1, (byte)1);
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = new byte[0];
      String string1 = base64_0.encodeToString(byteArray3);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertNull(byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-6);
      byteArray1[1] = (byte)105;
      Base64.encodeBase64(byteArray1, false, false);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-60);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("-mkAxA", string0);
      
      base64_0.avail();
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-47);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)77;
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte)79;
      byteArray2[6] = (byte)3;
      byteArray2[7] = (byte)0;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64.decodeInteger(byteArray3);
      assertArrayEquals(new byte[] {(byte)48}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-49);
      byteArray0[0] = (byte) (-49);
      byte byte1 = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      byte byte2 = (byte)87;
      byteArray0[2] = (byte)87;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(3473);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-49));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -49
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 64, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 64
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      Base64 base64_0 = new Base64(0, byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 7, 19);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)1;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-829));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte) (-30);
      base64_0.encode(byteArray1, (int) (byte) (-20), (-3160));
      base64_0.decode(byteArray1);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[33];
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("4nc7,p\u0003nqzP;p;O,");
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.avail();
      byte[] byteArray2 = new byte[2];
      byte byte1 = (byte)0;
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-122);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.gcd(bigInteger1);
      bigInteger0.setBit(1202);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray4, true);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, true, true, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, false, 0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 879, 879);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 879
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Base64.decodeBase64("=AizA");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-1);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)80;
      byteArray0[0] = (byte)80;
      byte byte1 = (byte) (-20);
      byteArray0[1] = (byte) (-20);
      Base64.isBase64(byteArray0);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(4189, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [P\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(5582, byteArray0);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.isUrlSafe();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      boolean boolean1 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)65, (byte)52, (byte)81, (byte)81, (byte)61, (byte)61, (byte) (-94), (byte)10}, byteArray2);
      
      Base64 base64_1 = new Base64((byte) (-1));
      base64_0.decode((Object) "");
      boolean boolean2 = Base64.isBase64((byte)1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-17);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64String(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)47);
      Base64.isBase64("");
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)65;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte) (-1), byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFDo\uFFFD\u0000\u0000\u0000\u0000\u0000A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      int int0 = base64_0.readResults(byteArray0, (-1), (-1));
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)103, (byte)111, (byte)61}, byteArray1);
      
      int int0 = base64_0.readResults(byteArray0, 25, 25);
      //  // Unstable assertion: assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-1);
      Base64 base64_1 = new Base64(true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      Object object0 = new Object();
      Base64 base64_2 = new Base64();
      Object object1 = base64_2.decode((Object) "}6ns2=}n");
      Object object2 = base64_1.encode(object1);
      assertNotSame(object2, object1);
      assertTrue(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte) (-111);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64(false);
      base64_0.decode((String) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      base64_0.decode("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      base64_0.decode("");
      base64_0.decode("]");
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("rdO4>9_z=^%/#r=D/");
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-45), (byte) (-72), (byte) (-9), (byte) (-4)}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("azc-#y?3'K3");
      int int0 = base64_0.readResults(byteArray0, 3650, 3650);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)107, (byte)55, (byte)62, (byte) (-53), (byte)114, (byte) (-73)}, byteArray0);
      
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)97;
      byteArray2[2] = (byte)32;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("AGEgAAA", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.multiply(bigInteger1);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 105, 105);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 105
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)65;
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)32, bigInteger0.byteValue());
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)8, bigInteger0.byteValue());
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      int int0 = (-2192);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-2192), byteArray1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AAAA]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64(604, byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, (-4514), (-230));
//      try { 
        base64_0.encode((Object) "K56VrW8");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)77);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int0 = 1;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(1, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [Cg==]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)0, byteArray1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AA==\uFFFD\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Base64 base64_0 = new Base64((-976), (byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 116, 17);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-16);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)101, (byte)115, (byte)69, (byte)65, (byte)80, (byte)65, (byte)61}, byteArray1);
  }
}
