/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:13:12 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray1, 68, (-2030));
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray1, 0, 113);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2117, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      mockRandom0.nextGaussian();
      base64_1.encode(byteArray0, 10, 64);
      base64_1.decode(byteArray0, 76, 64);
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      int int0 = 1;
      byte[] byteArray2 = Base64.decodeBase64("Wa`($7'");
      base64_0.encode(byteArray1, 1, 2);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray2, 4657, 1214);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      bigInteger0.toString(13);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-83);
      byteArray1[1] = (byte) (-62);
      byte byte0 = (byte) (-41);
      byteArray1[2] = (byte) (-41);
      byte byte1 = (byte) (-57);
      byteArray1[3] = (byte) (-57);
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray1, 1, 2);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)59;
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte) (-85);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-58);
      byteArray2[5] = (byte)39;
      base64_0.encode(byteArray2, 424, (-1));
      base64_0.encodeToString(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(2556L);
      BigInteger bigInteger0 = BigInteger.probablePrime(2117, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int0 = (-874);
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(int0, byteArray1, boolean0);
      base64_0.hasData();
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      int int1 = 0;
      base64_0.encode(byteArray2, int0, int1);
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2117, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)109;
      Base64.discardWhitespace(byteArray2);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)123;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, 31);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_1 = new Base64();
      base64_0.decode(byteArray1, (int) (byte)2, 121);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      base64_0.decode(byteArray1, (int) (byte)2, 121);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      Random.setNextRandom(64);
      Base64.encodeBase64(byteArray0, false);
      Base64.isBase64((byte)8);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray1, 1, 2);
      Base64 base64_1 = new Base64();
      Object object0 = new Object();
      base64_0.decode(byteArray1, (-1997), (-1997));
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)105;
      byteArray2[1] = (byte)64;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)61;
      byteArray2[4] = (byte)61;
      byte byte0 = (byte)3;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray2, (int) (byte)3, 4211);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)0, (-2636));
      base64_0.hasData();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)1;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)31;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray1);
//      try { 
        base64_0.decode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      base64_0.encodeToString(byteArray1);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)27;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64((byte)13, byteArray1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\uFFFD\uFFFDw\u001B\u0000\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)119;
      byte byte0 = (byte)13;
      byteArray0[6] = (byte) (-5);
      byteArray0[3] = (byte)1;
      byteArray0[8] = (byte) (-122);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Object object0 = base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      Base64.encodeBase64String(byteArray1);
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64.discardWhitespace(byteArray0);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      base64_0.decode(object0);
      Base64.isBase64((byte)57);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      Base64.discardWhitespace(byteArray1);
      bigInteger1.longValueExact();
      BigInteger bigInteger2 = bigInteger0.negate();
      base64_0.decode((Object) "]");
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(64, mockRandom0);
      Base64.encodeInteger(bigInteger2);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64("]");
      base64_0.avail();
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(1156, (byte[]) null, false);
      base64_0.readResults((byte[]) null, 1156, 1878);
      Base64.encodeBase64String((byte[]) null);
      base64_1.encodeToString((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray1, true);
      base64_0.readResults(byteArray0, (byte)0, 715);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(926, mockRandom0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64.isBase64((byte) (-83));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      Base64 base64_0 = new Base64((byte) (-83), byteArray0, false);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)57;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte) (-69);
      byteArray1[4] = (byte)57;
      byteArray1[5] = (byte)57;
      byteArray1[6] = (byte)73;
      byteArray1[7] = (byte)57;
      byteArray1[8] = (byte)57;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)57, byteArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [999\uFFFD99I99]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      base64_0.decode((Object) "Ob U$%");
      base64_0.hasData();
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      base64_0.readResults(byteArray1, (byte)0, 438);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte) (-1);
      Base64.decodeBase64(byteArray2);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64("VW_pG;8`FNxM&ts!.");
      Base64 base64_1 = new Base64(1156, (byte[]) null, false);
      base64_0.readResults((byte[]) null, 1156, 1878);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, 835);
      Base64.isBase64((byte) (-1));
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, (-1655));
      Base64 base64_2 = new Base64((byte) (-1), (byte[]) null, true);
      Base64 base64_3 = new Base64((-459), (byte[]) null, true);
//      try { 
        base64_3.encode((Object) base64_2);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray0, (-482), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte)8, byteArray0, false);
      base64_0.readResults(byteArray0, 0, 108);
      base64_0.avail();
      Base64.isBase64((byte)65);
      base64_0.hasData();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray1);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(1156, (byte[]) null, false);
      base64_0.readResults((byte[]) null, 1156, 1878);
      Base64 base64_2 = new Base64();
      // Undeclared exception!
//      try { 
        base64_1.decode((byte[]) null, 634, 76);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)3;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)31;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)31;
      byteArray1[5] = (byte)74;
      byteArray1[6] = (byte)1;
      Base64.isBase64((byte) (-4));
      Base64.decodeInteger(byteArray1);
      Base64.isBase64((byte)123);
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(1982292598, byteArray0, false);
      base64_0.readResults(byteArray0, 97, 1156);
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray0, 76, (-157));
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64("AAAAAAAAAA");
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64((-1103), (byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, (-1103), 32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      String string0 = "Input array too big, the output array would be bigger (";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-104);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 1118);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)58;
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte)95;
      Base64.encodeBase64String(byteArray1);
      byteArray1[7] = (byte)95;
      Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 1, 1505);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64((byte)70);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)58;
      BigInteger bigInteger0 = BigInteger.TEN;
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(1156, (byte[]) null, false);
      base64_0.readResults((byte[]) null, 1156, 1878);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(219, mockRandom0);
      bigInteger0.flipBit(64);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64((String) null);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64 base64_0 = new Base64(90);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray1);
      base64_0.decode((String) null);
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, true, (-1500));
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-120);
      byteArray1[1] = (byte)126;
      byteArray1[2] = (byte)97;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)44;
      byteArray1[5] = (byte)24;
      byteArray1[6] = (byte)6;
      byteArray1[7] = (byte)3;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-1028), byteArray1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD~a\uFFFD,\u0018\u0006\u0003]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)7;
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray3, false, true, (-55));
      Base64.isBase64((byte)95);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray1, true, true, 74);
      Base64 base64_0 = new Base64(105, byteArray3, true);
      Base64.decodeBase64(byteArray3);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = Base64.decodeBase64("#Qdn;J");
      byteArray0[0] = (byte)84;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.readResults(byteArray1, (-221), (byte)84);
      byteArray0[1] = (byte) (-124);
      Base64.decodeInteger(byteArray2);
      base64_0.decode("#Qdn;J");
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)84;
      byteArray3[1] = (byte) (-124);
      byteArray3[2] = (byte) (-124);
      byteArray3[3] = (byte) (-124);
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(1156, (byte[]) null, false);
      base64_0.readResults((byte[]) null, 1156, 1878);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(219, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)95;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)58;
      byteArray1[4] = (byte)58;
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = base64_0.decode("org.apache.commons.codec.binary.Base64");
      base64_0.decode(byteArray2);
      base64_0.decode(byteArray2);
      base64_0.decode("LXnbJ(E;H #");
      base64_0.decode("");
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(0, byteArray0);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // signum-magnitude mismatch
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)123;
      base64_0.decode("i8|Lh/{$|.|2");
      base64_0.decode(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      base64_0.decode(byteArray1);
      base64_0.decode("IHB5I-_z'7B8wC1");
      base64_0.decode("Zl4sV(z';Kzw");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 1827);
      Base64.isBase64((byte)0);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.decodeInteger(byteArray2);
      Base64.isBase64((byte) (-23));
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64(2300, (byte[]) null, true);
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray0 = base64_0.decode("@RXFg0i+d");
      Base64.decodeBase64((byte[]) null);
      base64_0.decode((byte[]) null, (-636), 8);
      base64_0.decode((byte[]) null, 2300, 8);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      base64_0.encode((byte[]) null);
      Base64.isBase64((byte)0);
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 1827);
      Base64.isBase64((byte)0);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray1, true, false, (int) (byte)105);
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64((byte)105, byteArray2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [ZW1rQUFBQUFBQUE9\u0000\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)92, 0);
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      bigInteger0.getLowestSetBit();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger1 = BigInteger.TEN;
      Random.setNextRandom((-62));
      bigInteger0.bitCount();
      base64_0.encodeToString(byteArray0);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      Base64.isBase64("XAAAAA==");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      Base64.decodeBase64(byteArray3);
      base64_0.decode(object0);
      bigInteger0.testBit(0);
      base64_0.encodeToString(byteArray1);
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, false, true, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)0;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-4);
      byteArray1[6] = (byte) (-4);
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = new byte[0];
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte) (-1);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte) (-37);
      byteArray4[6] = (byte) (-1);
      byteArray4[7] = (byte) (-4);
      Base64.isArrayByteBase64(byteArray4);
      Base64.isArrayByteBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(1156, byteArray0, false);
      base64_0.readResults(byteArray0, 302, 302);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1, 0, (-1));
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray0, 0, 3125);
      base64_0.encode(byteArray0, 0, 0);
      Base64.encodeBase64(byteArray1, false);
      Base64 base64_1 = new Base64(2389, byteArray1, false);
      Object object0 = base64_1.decode((Object) "AA");
      // Undeclared exception!
//      try { 
        base64_1.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)31;
      byteArray0[1] = (byte)31;
      byte byte2 = (byte)123;
      byteArray0[2] = (byte)123;
      byte byte3 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte4 = (byte)0;
      byteArray0[4] = (byte)0;
      byte byte5 = (byte)74;
      byteArray0[5] = (byte)74;
      byte byte6 = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-22);
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64((byte)74, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\u001F{\u0000\u0000J\u0001\uFFFD\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(1156, byteArray0, false);
      base64_0.readResults(byteArray0, 302, 302);
      Base64.encodeBase64String(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("AA", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2117, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte) (-124)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64 base64_0 = new Base64(90);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-65);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.EncoderException");
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-65);
      byteArray2[1] = (byte)64;
      byteArray2[2] = (byte) (-65);
      base64_0.decode(byteArray2, 587, 18);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)58;
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte)95;
      byteArray1[7] = (byte)95;
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 61);
      Base64.isBase64((byte)7);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray0, false, true, 15);
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64(15, byteArray2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [BzoAADpfX18=]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-73);
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (-3135), (int) (byte)105);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3135
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.decodeBase64("#Qdn;J");
      byteArray0[0] = (byte)84;
      Base64.encodeBase64(byteArray1);
      base64_0.readResults(byteArray1, (-221), (byte)84);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)0;
      base64_0.readResults(byteArray1, 352, (-1356));
      base64_0.avail();
      Base64.isBase64((byte)65);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.discardWhitespace(byteArray1);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-22);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)1;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)81, (byte)0, (byte) (-124)}, byteArray2);
      
      byteArray0[8] = (byte) (-7);
      base64_0.encodeToString(byteArray0);
      base64_0.decode((String) null);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(12, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("cu>W73T?OKh7Z");
      assertFalse(boolean0);
      
      Base64.isBase64("");
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2147483646), byteArray0);
      base64_0.decode("Fxg*^0%O$g5A%9wPgSJ");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray1);
      base64_0.decode("cu>W73T?OKh7Z");
      byte[] byteArray2 = base64_0.decode("cu>W73T?OKh7Z");
      assertEquals(8, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)114, (byte) (-27), (byte) (-69), (byte) (-35), (byte)51, (byte) (-118), (byte) (-121), (byte) (-74)}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(1156, byteArray0, false);
      base64_0.readResults(byteArray0, 302, 302);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1, 0, (-1));
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray0, 0, 3125);
      base64_0.encode(byteArray0, 0, 0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64 base64_0 = new Base64((-1), (byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, 83);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-74);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(433, byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.valueOf(3246L);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.xor(bigInteger0);
      bigInteger0.negate();
      bigInteger0.shortValueExact();
      bigInteger0.multiply(bigInteger1);
      bigInteger0.longValue();
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeInteger(bigInteger2);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)54;
      byteArray3[1] = (byte) (-66);
      byteArray3[2] = (byte) (-5);
      byteArray3[3] = (byte)31;
      byteArray3[4] = (byte)89;
      byteArray3[5] = (byte)23;
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-63);
      byteArray0[0] = (byte) (-63);
      byte byte1 = (byte)9;
      byteArray0[1] = (byte)9;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      String string0 = "y lvM7^x/zqdT9X";
      base64_0.decode("y lvM7^x/zqdT9X");
      base64_0.encode(byteArray1, (int) (byte) (-63), (int) (byte)9);
//      try { 
        base64_0.encode((Object) "y lvM7^x/zqdT9X");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)92, 0);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      bigInteger0.getLowestSetBit();
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
//      try { 
        bigInteger0.pow((byte) (-1));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative exponent
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(1927);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = 0;
      int int1 = 0;
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (-1500));
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((-1500));
      Base64.encodeBase64(byteArray1, false, true, (-1500));
      Base64.decodeInteger(byteArray0);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-22);
      byteArray0[8] = (byte) (-7);
      base64_0.encodeToString(byteArray0);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.decodeBase64("#Qdn;J");
      byteArray0[0] = (byte)84;
      Base64.encodeBase64(byteArray1);
      base64_0.readResults(byteArray1, (-221), (byte)84);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)106;
      base64_0.readResults(byteArray0, 0, 0);
      base64_0.avail();
      Base64.isBase64((byte)0);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      byte[] byteArray0 = base64_0.decode("*ks+AM+T5O+2:");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)56;
      byteArray1[1] = (byte) (-113);
      byteArray1[2] = (byte) (-102);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-8);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      assertEquals(9, byteArray2.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.flipBit(64);
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.decodeInteger(byteArray0);
      bigInteger1.getLowestSetBit();
      bigInteger1.bitLength();
      bigInteger0.modPow(bigInteger1, bigInteger1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("ks+AM+T5O+0=", string0);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray3);
      assertEquals("Cg", string1);
      
      byte[] byteArray4 = base64_0.decode(byteArray3);
      byte[] byteArray5 = Base64.decodeBase64("ks+AM+T5O+0=");
      byte[] byteArray6 = Base64.discardWhitespace(byteArray5);
      assertEquals(8, byteArray6.length);
      
      Base64.encodeBase64(byteArray4, true, true);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)27;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (-1258), (int) (byte)27);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1258
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)0;
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = Base64.isBase64((byte) (-72));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      int int0 = base64_0.readResults(byteArray0, (-523), 16);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(283, byteArray1);
      int int0 = 0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray2, 0, 77);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray0);
      String string0 = "*%*dAtYuLMRN5";
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte) (-110), 3365);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -110
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)1;
      Base64.encodeBase64URLSafeString(byteArray0);
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byte byte0 = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)95;
      byteArray1[4] = (byte)22;
      byteArray1[5] = (byte) (-27);
      byteArray1[6] = (byte)58;
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte)7);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      base64_0.decode("");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)68;
      byteArray1[4] = (byte)0;
      base64_0.decode(byteArray1);
      byteArray0[1] = (byte) (-107);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode("LXnbJ(E;H #");
      assertArrayEquals(new byte[] {(byte)45, (byte)121, (byte) (-37), (byte)36, (byte)65}, byteArray2);
      assertEquals(5, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode("");
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(1994);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.hasData();
      base64_0.decode((byte[]) null);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, false);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-45);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("MgBmFgAB0w==", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-41);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)66;
      byteArray0[0] = (byte)66;
      byte byte1 = (byte) (-11);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)0;
      byte byte2 = (byte) (-58);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byte byte3 = (byte)96;
      byteArray0[7] = (byte)96;
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte) (-1), byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [B\uFFFD\u0000\u0180\uFFFD\u0000`]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-49);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.negate();
      bigInteger0.doubleValue();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-1534), byteArray1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [Q2c9PQ]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte byte0 = (byte) (-23);
      Base64.isBase64((byte) (-23));
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray0 = new byte[0];
      Base64.isBase64("");
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(byteArray1);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length BigInteger
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-37);
      base64_0.decode(byteArray0, (int) (byte)0, (-1));
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)65, (byte)65, (byte) (-34), (byte)10}, byteArray1);
      
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      boolean boolean1 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean1);
      
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte) (-1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byte byte0 = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64((-4165), byteArray0, false);
      Base64 base64_1 = new Base64(1);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
//      try { 
        base64_1.decode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)108;
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }
}
