/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:11:04 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)95;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)73, byteArray1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [u-)I\uFFFD_]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)9;
      byteArray0[0] = (byte)9;
      byte byte1 = (byte)81;
      byteArray0[1] = (byte)81;
      byte byte2 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte byte3 = (byte)1;
      byteArray0[3] = (byte)1;
      byte byte4 = (byte)68;
      byteArray0[4] = (byte)68;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(false);
      Base64.encodeBase64(byteArray0, false);
//      try { 
        base64_1.encode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)29;
      byteArray0[3] = (byte)29;
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom((-1L));
      BigInteger.probablePrime((byte)52, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte) (-82));
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray1, 0, (int) (byte)29);
      base64_0.decode(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)78;
      byteArray2[1] = (byte) (-82);
      byteArray2[2] = (byte)52;
      byteArray2[3] = (byte) (-82);
      byteArray2[4] = (byte)29;
      byteArray2[5] = (byte) (-82);
      byteArray2[6] = (byte) (-82);
      Base64.isBase64(byteArray2);
      base64_0.encode(byteArray0, 76, (int) (byte)29);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(false);
      Base64.isBase64((byte)125);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(64);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray1);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, true, (-3420));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of -3420
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte)29;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom((byte)29);
      BigInteger bigInteger1 = BigInteger.probablePrime(2507, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((byte)68);
      base64_0.encode(byteArray1, 6, (int) (byte)68);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-43);
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-43);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      Base64 base64_0 = new Base64((byte) (-43), byteArray1);
      base64_0.encodeToString(byteArray1);
      Base64.decodeInteger(byteArray1);
      boolean boolean0 = false;
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray0, (int) (byte)0, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitCount();
      bigInteger0.toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(true);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_1 = new Base64((byte)0, byteArray0);
      base64_1.encode(byteArray1, 76, (-1063));
      // Undeclared exception!
//      try { 
        base64_1.readResults(byteArray1, 2874, 61);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString();
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, 1);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      base64_0.isUrlSafe();
      Base64.isBase64((byte)61);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      base64_0.encodeToString(byteArray0);
      Base64 base64_2 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isBase64(byteArray1);
      Random.setNextRandom(76);
      base64_1.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64((-2051), (byte[]) null);
      base64_0.decode((byte[]) null, (-2051), (-2051));
      base64_0.decode((byte[]) null);
      base64_0.readResults((byte[]) null, (-2051), 956);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)77;
      Base64 base64_0 = new Base64(false);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64(byteArray1, true, true);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(23, mockRandom0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      String string0 = "org.apache.commons.codec.DecoderException";
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      base64_0.isUrlSafe();
      Base64.isBase64((byte)24);
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("[?)(n8B<");
      Base64 base64_1 = new Base64(1084, byteArray3, false);
      // Undeclared exception!
//      try { 
        base64_1.encodeToString(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) ">F]23MNm{`?/5/$& ");
      base64_0.encode(object0);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      base64_0.encode(byteArray1, 1788, (-101));
      Base64.encodeBase64(byteArray0, true, true, 343);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, 8);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)87, (int) (byte) (-82));
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-82);
      byteArray2[1] = (byte) (-82);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte) (-82);
      base64_0.decode(byteArray2, 48, (int) (byte) (-82));
      base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_1 = new Base64();
      base64_1.encode((byte[]) null);
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64((-2141), (byte[]) null);
      base64_0.encodeToString((byte[]) null);
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        base64_1.encode((byte[]) null, 0, 56);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, (-601), (-686));
      base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_1 = new Base64();
      Base64 base64_2 = new Base64(6);
      base64_2.encode(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)58;
      byteArray1[3] = (byte) (-89);
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte)58;
      byteArray1[6] = (byte) (-89);
      byteArray1[7] = (byte)58;
      byteArray1[8] = (byte)70;
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_1 = new Base64(true);
      Base64.decodeBase64("7i");
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, 1, (int) (byte)77);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 14
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64((-2402), (byte[]) null, true);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isBase64("h\"/(OKK_U}[\"j)");
      Base64.isBase64("h\"/(OKK_U}[\"j)");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)104;
      byteArray1[3] = (byte)85;
      byteArray1[4] = (byte)64;
      Base64.decodeInteger(byteArray1);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64(byteArray1, false);
      Base64.isBase64((byte)0);
      base64_0.decode((Object) "h\"/(OKK_U}[\"j)");
//      try { 
        base64_0.encode((Object) "org.apache.commons.codec.binary.Base64");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = Base64.MIME_CHUNK_SIZE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.isBase64("YElG");
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) ">F]23MNm{`?/5/$& ");
      base64_0.encode(object0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.getLowestSetBit();
      bigInteger1.isProbablePrime(815);
      Base64 base64_1 = new Base64(false);
      Base64.encodeBase64(byteArray0, false);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      base64_0.hasData();
      base64_0.encode(byteArray1, (int) (byte)74, (-2051));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)79;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-11);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom((byte) (-79));
      BigInteger bigInteger1 = BigInteger.probablePrime(1157, mockRandom0);
      Base64.toIntegerBytes(bigInteger1);
      Base64.decodeBase64(byteArray0);
      Base64.isBase64((byte)72);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((-2141), byteArray0);
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)74);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, 8);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-43);
      base64_1.decode(byteArray0, 29, (int) (byte) (-80));
      Base64 base64_2 = new Base64((byte) (-80), byteArray0, false);
      base64_2.decode("0");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64((-714));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)35, (-144));
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_0.decode((String) null);
      Object object0 = new Object();
      Base64.isBase64("\"s\",s<2kh.q");
      Object object1 = base64_0.decode((Object) "\"s\",s<2kh.q");
      Object object2 = base64_0.decode(object1);
      Object object3 = base64_0.encode(object2);
      base64_0.encode(object3);
      bigInteger0.isProbablePrime(87);
      base64_0.isUrlSafe();
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1, false, false, 76);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte) (-95), byteArray0);
      base64_0.decode(byteArray0, (int) (byte)44, (-1186));
      Base64 base64_1 = new Base64((-1481), byteArray0, true);
      Base64.encodeBase64(byteArray0, true, true, 64);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)77;
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray0, (int) (byte)0, (int) (byte)77);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("CZ.mLX9.6");
//      try { 
        base64_0.encode((Object) "CZ.mLX9.6");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null, true, true);
      MockRandom mockRandom0 = new MockRandom(20L);
      BigInteger.probablePrime(2, mockRandom0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      base64_0.encode(byteArray0);
      Base64.decodeBase64("pnT3`*FN h2ZOs26");
      base64_0.hasData();
      Base64.encodeBase64String(byteArray0);
      Object object0 = new Object();
      Base64 base64_1 = new Base64();
      Object object1 = new Object();
//      try { 
        base64_1.encode(object1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = new byte[0];
      base64_0.encodeToString(byteArray3);
      Base64.isBase64("xLwUDqI,$AVk0");
      Base64.decodeInteger(byteArray2);
      base64_0.hasData();
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray2, false);
      Base64.isBase64((byte)11);
      base64_0.decode((Object) "");
      base64_0.decode((Object) "MVFBQUFBQT0=");
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)91;
      byteArray2[1] = (byte)92;
      byteArray2[2] = (byte)26;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte)125;
      byteArray2[6] = (byte)3;
      Base64.decodeInteger(byteArray2);
      Base64.isBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.isUrlSafe();
      Base64.isBase64(byteArray0);
      base64_0.encode(byteArray2, (int) (byte)0, (int) (byte)0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray4 = new byte[8];
      base64_0.encode(byteArray3);
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte) (-6);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      base64_0.readResults(byteArray1, (byte)0, (-1372));
      Base64.decodeInteger(byteArray4);
      Base64.isBase64(byteArray1);
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)26;
      byteArray5[2] = (byte)92;
      byteArray5[3] = (byte)3;
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte)26;
      byteArray5[6] = (byte)26;
      Base64.encodeBase64(byteArray5, false);
      Base64.encodeBase64(byteArray4);
      base64_0.isUrlSafe();
      base64_0.decode((Object) "]~{|[");
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger("]~{|[", 123);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Radix out of range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-1);
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)0;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte)2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of 2
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(35, byteArray0);
      base64_0.encode(byteArray2);
      base64_0.decode(byteArray0, 76, 76);
      base64_0.decode(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, 0, 3027);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)91;
      byteArray3[1] = (byte)92;
      byteArray3[2] = (byte)26;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte) (-1);
      byteArray3[5] = (byte)125;
      byteArray3[6] = (byte)3;
      Base64.decodeInteger(byteArray3);
      Base64.isBase64(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray4);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      base64_0.encodeToString(byteArray0);
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      base64_0.decode(byteArray0, 2, 1601);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, false, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 76);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)7;
      byteArray3[2] = (byte) (-50);
      byteArray3[3] = (byte) (-118);
      byteArray3[4] = (byte)42;
      byteArray3[5] = (byte)14;
      Base64.decodeBase64(byteArray3);
      base64_0.hasData();
      Base64.isArrayByteBase64(byteArray2);
      Base64.encodeBase64(byteArray1, true, false, 64);
      Base64.decodeBase64("");
      Base64.encodeBase64(byteArray2, false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)80;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = null;
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 0, 8192);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(35, byteArray0);
      base64_0.encode(byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 1269, 35);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1269
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)108;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 2, 1601);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (-1));
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1, false);
      base64_0.avail();
      Base64.isBase64(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)4;
      byteArray2[3] = (byte)0;
      base64_0.decode(byteArray2, (-1425), 0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)32;
      Base64.encodeBase64(byteArray0, false, false, (int) (byte)86);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64.isBase64((byte) (-111));
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      byte byte0 = (byte) (-36);
      Base64.isBase64((byte) (-36));
      int int0 = (-3431);
      Base64 base64_0 = new Base64((-3431), byteArray0, true);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)41;
      Base64 base64_0 = new Base64((-1702), byteArray0, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)41;
      base64_0.encode(byteArray1);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      base64_0.encode(byteArray3, (int) (byte)8, (-3817));
      base64_0.encode(byteArray3);
      base64_0.decode(byteArray2, (int) (byte)41, (int) (byte) (-83));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom((byte)29);
      BigInteger bigInteger1 = BigInteger.probablePrime(2507, mockRandom0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64(byteArray0);
      Base64.isBase64(byteArray0[1]);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)63;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [Y?]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      int int0 = 0;
      Base64.encodeBase64((byte[]) null);
      int int1 = 5774;
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 5774, 5774);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-121);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-79);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true);
      String string0 = null;
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)112;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0016\u0000H\u0000)\u0000\u0000p]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false, false, 568);
      String string0 = "org.apache.commons.codec.DecoderException";
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64(568);
      base64_0.decode((byte[]) null, 568, 0);
      base64_0.readResults((byte[]) null, 568, 568);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.isUrlSafe();
      Base64.isBase64(byteArray0);
      base64_0.encode(byteArray2, (int) (byte)0, (int) (byte)0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray4 = new byte[8];
      base64_0.encode(byteArray3);
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte) (-6);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byte[] byteArray5 = base64_0.decode(byteArray0);
      byteArray4[4] = (byte)49;
      base64_0.encodeToString(byteArray3);
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)0;
      Base64.isBase64("");
      byteArray4[7] = (byte)0;
      Base64.decodeInteger(byteArray4);
      base64_0.hasData();
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray5);
      Base64.encodeBase64(byteArray0, false);
      Base64.isBase64((byte)111);
      Object object0 = base64_0.decode((Object) "AA==");
      base64_0.decode((Object) "AA==");
      Object object1 = base64_0.encode(object0);
      base64_0.decode(object1);
      Base64.encodeBase64URLSafeString(byteArray5);
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)109;
      byteArray1[1] = (byte)103;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)103;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)1;
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      String string0 = ")K{{{&8_XOGSpA.U= ";
      base64_0.decode(")K{{{&8_XOGSpA.U= ");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 2875;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)94;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(2875, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [-'^]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64((-2402), (byte[]) null, true);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isBase64("h\"/(OKK_U}[\"j)");
      Base64.isBase64("encodeInteger called with null parameter");
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encode((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      base64_0.encode((byte[]) null, (-5559), (-1368));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(1295);
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)37;
      base64_0.readResults(byteArray0, 2453, 0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray1, (int) (byte)79, (int) (byte)79);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)77;
      base64_0.decode(byteArray0, 76, (-1));
      Base64.encodeInteger(bigInteger0);
      base64_0.decode((String) null);
      Object object0 = new Object();
      Base64.isBase64(">F]23MNm{`?/5/$& ");
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      byte[] byteArray0 = base64_0.decode("eH/6X|#%-Kq");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)104;
      base64_0.encode(byteArray0, 0, 0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)27, bigInteger0.shortValue());
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)93;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(3415, byteArray0);
      int int0 = base64_0.readResults(byteArray0, (-1792), 791);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(1388);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-7);
      base64_0.decode(byteArray0, 0, (-274));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1, false);
      Base64.encodeBase64URLSafeString(byteArray0);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)26;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64((-2857));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)119;
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64((-714));
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)77;
      byteArray0[0] = (byte)77;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      base64_0.hasData();
      Base64.encodeBase64String(byteArray1);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }
}
