/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 10:56:09 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[147];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = new byte[168];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 2166);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 2166);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray5);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[147];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = new byte[168];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 2166);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[135];
      int int0 = 10;
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = new byte[157];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 2170);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 2170);
      base64_0.decode(byteArray1);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray5);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray6 = new byte[1];
      byte byte0 = (byte) (-1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray4, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[147];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[168];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 2166);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 2166);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.negate();
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      Base64.encodeBase64(byteArray5, false, false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[147];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = new byte[168];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 2166);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 2166);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.negate();
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      Base64.isBase64(byteArray5);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[135];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = new byte[139];
      Base64.encodeBase64(byteArray1, true, true, 2166);
      base64_0.encode(byteArray1, 10, 66);
      base64_0.encode(byteArray0, 66, (-1291));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[129];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = new byte[157];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 2166);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 2166);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray5);
      // Undeclared exception!
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[129];
      Base64 base64_0 = new Base64(10, byteArray0, false);
      byte[] byteArray1 = new byte[141];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 2166);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 2166);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      base64_0.encode(byteArray5);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[129];
      Base64 base64_0 = new Base64(10, byteArray0, false);
      byte[] byteArray1 = new byte[141];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 2166);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 2166);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      bigInteger0.not();
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      base64_0.encodeToString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[163];
      Base64 base64_0 = new Base64(10, byteArray0, false);
      byte[] byteArray1 = new byte[141];
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 14);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, false, 10);
      byte[] byteArray5 = base64_0.encode(byteArray1);
      byte[] byteArray6 = new byte[1];
      byteArray6[0] = (byte)86;
      base64_0.decode(byteArray6);
      byte[] byteArray7 = new byte[7];
      byteArray7[0] = (byte)86;
      byteArray7[1] = (byte)86;
      byteArray7[2] = (byte)86;
      byteArray7[3] = (byte)112;
      byteArray7[4] = (byte)86;
      byteArray7[5] = (byte)86;
      byteArray7[6] = (byte)86;
      BigInteger bigInteger0 = new BigInteger(byteArray7);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.and(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray4);
      base64_0.encode(byteArray5, (int) (byte)112, 1125);
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[148];
      Base64 base64_0 = new Base64(10, byteArray0, false);
      byte[] byteArray1 = new byte[141];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 2166);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false, 2166);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      base64_0.decode(byteArray2);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.and(bigInteger1);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray4);
      byte[] byteArray6 = new byte[3];
      byteArray6[0] = (byte)73;
      base64_0.encode(byteArray6, 47, (int) (byte)73);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray5);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[148];
      Base64 base64_0 = new Base64(10, byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 2166);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[129];
      Base64 base64_0 = new Base64(10, byteArray0, false);
      byte[] byteArray1 = new byte[141];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 2166);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 2166);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      String string0 = base64_0.encodeToString(byteArray3);
      base64_0.decode(byteArray2);
      Base64.decodeBase64(string0);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(3013);
      base64_0.encode(byteArray0, 1, 1);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAAAAAAA", string0);
      
      base64_0.encode(byteArray0, 1, (-196));
      int int0 = base64_0.readResults(byteArray0, 2, 0);
      assertEquals(0, int0);
      
      base64_0.encode(byteArray0, (-196), (-1896));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[118];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      base64_0.decode((Object) "&@2Q");
      base64_0.readResults(byteArray0, 64, 2171);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 4550);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2);
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Random.setNextRandom((-4488));
      Base64 base64_0 = new Base64((-4488), byteArray0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)113;
      byte byte0 = (byte)26;
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte) (-119);
      byteArray1[5] = (byte)39;
      byteArray1[6] = (byte)95;
      byteArray1[7] = (byte)61;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(2997);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, (-187));
      base64_0.readResults(byteArray1, 1, 2997);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[46];
      Base64 base64_0 = new Base64(17);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray0, 1, 1);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte)124;
      byteArray1[4] = (byte) (-102);
      byteArray1[5] = (byte)123;
      byteArray1[6] = (byte)23;
      base64_1.encode(byteArray1, 40, (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(17, byteArray0, true);
      base64_0.encode(byteArray0, 17, 17);
      base64_0.encode(byteArray0, (-623), (-1));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(17, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64((-2078), byteArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      Base64 base64_0 = new Base64(3014);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, (-224));
      assertEquals(27, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_1 = new Base64((-1));
      byte[] byteArray2 = Base64.decodeBase64("E3");
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)0;
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[3] = (byte)0;
      base64_1.decode(byteArray1, (int) (byte)0, 1212);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      
      base64_1.encode(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)69, (byte)119, (byte)61, (byte)61, (byte) (-72), (byte) (-72)}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      Base64 base64_0 = new Base64(3014);
      base64_0.encode(byteArray0, 11, 11);
      base64_0.encode(byteArray0, 11, (-224));
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.avail();
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[46];
      byteArray0[1] = (byte) (-100);
      byteArray0[4] = (byte) (-100);
      Base64 base64_0 = new Base64(17, byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode((Object) "lineSeperator must not contain base64 characters: [");
      base64_0.encode(byteArray0, (int) (byte) (-100), (int) (byte) (-100));
      Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(46, byteArray2.length);
      
      base64_0.encode(byteArray1, 17, (int) (byte) (-100));
      assertEquals(62, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-100);
      byteArray0[4] = (byte)123;
      Base64 base64_0 = new Base64(17, byteArray0, true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)31);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 24
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null, 51, (-1));
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, (-3229), 54);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      Base64 base64_0 = new Base64(3014);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(34, byteArray1.length);
      
      base64_0.encode(byteArray0, 11, 11);
      base64_0.encode(byteArray0, 11, (-232));
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)36;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)33;
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte)41;
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte)121;
      byteArray2[8] = (byte) (-125);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertEquals(24, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(703, byteArray0, true);
      Base64 base64_1 = new Base64(76, byteArray0);
      Object object0 = base64_1.decode((Object) "uCyn>");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-55);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-100);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)123;
      Base64 base64_0 = new Base64(17, byteArray0, true);
      Object object0 = base64_0.decode((Object) "lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)72, (byte)53, (byte)119, (byte)65, (byte)115, (byte)51, (byte)115, (byte)61, (byte) (-30), (byte) (-72)}, byteArray1);
      
      Object object1 = base64_0.encode(object0);
      base64_0.decode(object1);
      base64_0.encode(object1);
      boolean boolean0 = Base64.isBase64((byte)53);
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertEquals(21, byteArray3.length);
      
      boolean boolean1 = Base64.isBase64((byte)123);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64((byte) (-1));
      Base64 base64_1 = new Base64(1284);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)125;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)101;
      byteArray1[5] = (byte) (-1);
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray1, 1, (int) (byte)101);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[7];
      byteArray1[2] = (byte)0;
      byteArray1[1] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, 3156);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((short)10, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)13;
      Base64.decodeInteger(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
//      try { 
        base64_0.encode((Object) "'=Jcu{}(?U2o!rbIr");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      Base64 base64_0 = new Base64(2193, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)13;
      byteArray1[4] = (byte)13;
      byteArray1[5] = (byte)13;
      Base64.encodeBase64(byteArray1, true, false, 64);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 6);
      Random.setNextRandom((-5540));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-41);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64 base64_0 = new Base64((byte) (-109));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, (-102), (int) (byte) (-109));
      Random.setNextRandom(2876);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)77;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)123);
      Base64 base64_0 = new Base64(39, byteArray0);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray2 = new byte[0];
      Base64.isBase64(byteArray2);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray2, (-1), (-1));
      Base64.isBase64(byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, 99, 1717);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 48);
      Base64 base64_0 = new Base64((-305), byteArray1, false);
      String string0 = "";
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)64;
      byteArray2[2] = (byte)32;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte) (-71);
      byteArray2[5] = (byte)57;
      byteArray2[6] = (byte) (-38);
      byteArray2[7] = (byte) (-95);
      byteArray2[8] = (byte) (-99);
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 103, (int) (byte) (-1));
      byte[] byteArray1 = new byte[8];
      Base64.decodeBase64("k,");
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)10;
      base64_0.encode(byteArray1);
      byteArray1[5] = (byte)23;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte) (-1);
      base64_0.encode(byteArray1);
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64 base64_0 = new Base64(29);
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-84);
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray0, (int) (byte) (-84), (-858));
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64("N-RR\"`8^+");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64(18);
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-84);
      base64_0.decode(byteArray0, (int) (byte) (-84), (-858));
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray2, (byte) (-84), (byte) (-84));
      base64_0.encode(byteArray1, (int) (byte) (-103), 87);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_1 = new Base64((-1));
      Base64.decodeBase64("E3");
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[0] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray1, (int) (byte)0, 1212);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.not();
      Base64.isBase64((byte)119);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[6] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)119;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)23;
      base64_0.decode(byteArray1, (int) (byte)0, 0);
      Base64.decodeBase64(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.encodeToString(byteArray2);
      Base64 base64_1 = new Base64(64, byteArray1, false);
      Base64.encodeBase64(byteArray0, true, false, 64);
      Base64.encodeBase64(byteArray0);
      Base64.isBase64("");
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_2 = new Base64(false);
      Base64.encodeBase64((byte[]) null, true, true, (int) (byte)23);
      Base64 base64_3 = new Base64();
      Base64.decodeBase64(byteArray2);
      base64_3.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      Object object0 = new Object();
      Base64 base64_1 = new Base64(64);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_1.encodeToString(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_2 = new Base64(7, byteArray0, false);
      Base64.encodeBase64(byteArray0);
      base64_1.decode("");
      Base64 base64_3 = new Base64(true);
      Base64 base64_4 = new Base64();
      Base64.decodeBase64(byteArray2);
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)61;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.isBase64(byteArray0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-26);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)31);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.setBit((byte)116);
      bigInteger1.add(bigInteger0);
      byte[] byteArray0 = Base64.decodeBase64("9-]c*k1 ]g'e~)s~-4");
      Base64.isBase64((byte)116);
      Base64.encodeBase64(byteArray0);
      base64_0.decode("9-]c*k1 ]g'e~)s~-4");
      Base64 base64_1 = new Base64(false);
      Base64 base64_2 = new Base64();
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-799));
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(false);
      base64_1.decode(byteArray1, 1, 2);
      base64_1.encode(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      Base64 base64_1 = new Base64(76, byteArray1, true);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.hasData();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.isBase64(byteArray2);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      Base64.encodeBase64(byteArray0);
      Base64 base64_1 = new Base64((-1));
      Base64.decodeBase64("E3");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      base64_0.encode(byteArray1, (int) (byte)0, (-1030));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)31;
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)31);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      bigInteger1.add(bigInteger2);
      Base64.decodeBase64("ib_9@");
      Base64.isBase64((byte)52);
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
      Base64.isBase64("");
      base64_0.decode("");
      Base64.encodeBase64String((byte[]) null);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 55, 3065);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 55
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(false);
      Base64.isBase64(byteArray1);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64("Input array too big, the output array would be bigger (");
      Object object0 = base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      base64_0.encode(object0);
      Base64 base64_1 = new Base64(76, byteArray1, true);
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray0, 92, 1186);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 92
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.gcd(bigInteger0);
      bigInteger1.add(bigInteger0);
      String string0 = "";
      String string1 = "XEO";
      Base64.isBase64("XEO");
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.decodeBase64("cVr+j/yoF=n");
      Base64.encodeBase64String(byteArray2);
      base64_0.readResults(byteArray1, (byte) (-68), 2617);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64.isArrayByteBase64(byteArray3);
      Base64.encodeBase64(byteArray0);
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
//      try { 
        base64_1.encode((byte[]) null, (-3451), 76);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      bigInteger1.add(bigInteger2);
      Base64.decodeBase64("ib_9@");
      Base64.isBase64((byte)52);
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
      Base64.isBase64("");
      base64_0.decode("");
      Base64.encodeBase64(byteArray1);
      Base64.isBase64("3Hs~$BFd=!{\"nUuo");
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.isBase64(byteArray2);
      Base64 base64_0 = new Base64(false);
//      try { 
        base64_0.encode((Object) "PAAAAA");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)116;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.gcd(bigInteger1);
      bigInteger0.add(bigInteger1);
      Base64.decodeBase64("9-]c*k1 ]g'e~)s~-4");
      Base64.isBase64((byte)116);
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
      Base64.isBase64("UFArSmRBPT2ZCg");
      base64_0.decode("");
      Base64.encodeBase64(byteArray1);
      Base64.isBase64("4u>|&<");
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64((-1843), byteArray0, true);
      base64_0.decode(byteArray0, (-5353), (int) (byte) (-1));
      base64_0.decode((Object) "fNKIYO*flm].Jvx.W");
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(29);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)92;
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte)57);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = Base64.decodeBase64("^Pyc<jEnFYn9z4");
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)87;
      byteArray4[1] = (byte)87;
      Base64.isArrayByteBase64(byteArray4);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.readResults(byteArray4, 100, (-5270));
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray6 = Base64.encodeInteger(bigInteger0);
      bigInteger0.shortValueExact();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.getLowestSetBit();
      BigInteger bigInteger2 = BigInteger.ZERO;
      Object object0 = new Object();
      byte[] byteArray7 = Base64.decodeBase64(byteArray2);
      Base64.isBase64(byteArray5);
      Base64.encodeBase64(byteArray6);
      base64_0.readResults(byteArray7, (-1817), (byte)87);
      base64_0.readResults(byteArray3, (-4202), 1140);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)1;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, false, false, (int) (byte)32);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)31;
      Base64 base64_1 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, 636, (byte)76);
      base64_0.readResults(byteArray0, 0, (byte)0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)76;
      base64_0.encode(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      Object object1 = new Object();
//      try { 
        base64_0.encode(object1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, 636, (byte)76);
      base64_0.readResults(byteArray0, 0, (byte)0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.readResults(byteArray2, 48, 8);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode("");
      Base64.decodeBase64(byteArray0);
      base64_0.hasData();
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64((-289));
      base64_0.decode((byte[]) null);
      Base64.isBase64((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeInteger(byteArray0);
      base64_0.decode("");
//      try { 
        base64_0.decode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64((-2013));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[2];
      base64_0.decode(byteArray0, 0, (int) (byte)0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-96);
      byteArray2[3] = (byte)0;
      Base64.decodeBase64(byteArray2);
      base64_0.encodeToString(byteArray1);
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      Base64.decodeBase64(byteArray1);
      base64_0.readResults(byteArray1, (-1983), 978);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode("ry&h{&`Hi1FRD|#47");
      Base64.decodeBase64(byteArray1);
      base64_0.hasData();
//      try { 
        base64_0.encode((Object) "/wA=");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64((byte)68);
      base64_0.decode((Object) "im!mQs_'=$JN7|&");
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray0, (int) (byte)68, (int) (byte)68);
//      try { 
        base64_0.encode((Object) "[]\"OjC|y?cx77>");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      int int0 = 0;
      base64_0.encode((byte[]) null, 0, 0);
      base64_0.isUrlSafe();
      int int1 = 366;
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 0, 366);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (-926));
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("_E");
      base64_0.decode((String) null);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      base64_0.encode(byteArray2);
      base64_0.avail();
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-52);
      byteArray0[8] = (byte) (-18);
      Base64.encodeBase64(byteArray0);
      base64_0.avail();
      base64_0.readResults(byteArray0, (byte) (-18), (byte) (-1));
      base64_0.decode((Object) "\"/CV`%(R");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_0 = new Base64(0, byteArray3, true);
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte) (-60);
      byte byte0 = (byte)0;
      Base64.encodeBase64((byte[]) null);
      byteArray4[1] = (byte)0;
      Base64.encodeBase64URLSafeString((byte[]) null);
      byteArray4[2] = (byte)51;
      base64_0.encode(byteArray0, 0, (int) (byte)0);
      byteArray4[3] = (byte)66;
      byte byte1 = (byte) (-89);
      byteArray4[4] = (byte) (-89);
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray4, (int) (byte)51, (int) (byte) (-89));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)1;
      base64_0.decode(byteArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_1 = new Base64(109, (byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64((-728));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte) (-9);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.readResults(byteArray1, (-728), (-728));
      Base64.decodeBase64("@s");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-33);
      Base64.encodeBase64(byteArray0, true, true, 64);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      byteArray0[2] = (byte)7;
      base64_0.decode(byteArray0, (int) (byte)91, (-1));
      Base64.decodeBase64((byte[]) null);
      base64_0.decode((byte[]) null, 0, (-35));
      BigInteger bigInteger1 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(0L);
      // Undeclared exception!
//      try { 
        BigInteger.probablePrime((-560), mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // bitLength < 2
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, 762);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64(1, byteArray1, true);
      Base64.encodeBase64(byteArray1);
      Base64.decodeBase64("cVr+j/yoF=n");
      Base64.encodeBase64String(byteArray1);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-799));
      Base64.decodeBase64("E3");
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray1, (-726), (-1));
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)0;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(2200);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      base64_1.encode(byteArray1);
//      try { 
        base64_1.decode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode("M");
//      try { 
        base64_0.encode((Object) "M");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      base64_0.decode((Object) "v'jB8=y.@FtIw");
      bigInteger0.doubleValue();
      byte[] byteArray2 = new byte[3];
      byte[] byteArray3 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.add(bigInteger0);
      bigInteger1.xor(bigInteger0);
      bigInteger0.or(bigInteger1);
      byteArray2[0] = (byte)0;
      BigInteger bigInteger2 = new BigInteger(byteArray3);
      bigInteger0.or(bigInteger2);
      byteArray2[1] = (byte)0;
//      try { 
        base64_0.encode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)50;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-1), (byte) (-49), (byte) (-10), (byte) (-125), (byte) (-19), (byte) (-1), (byte)50}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)41;
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-62);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)41, byteArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [KcI=\u0678]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)6;
      base64_0.encode(byteArray0);
      Base64.encodeBase64((byte[]) null, false, false);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-1843), byteArray0, true);
      base64_0.decode(byteArray0, (-5353), (int) (byte) (-1));
      base64_0.decode((Object) "fNKIYO*flm].Jvx.W");
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte) (-1);
      base64_0.encode(byteArray1);
      byteArray2[5] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode("fNKIYO*flm].Jvx.W");
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)77;
      boolean boolean0 = true;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(4242, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [*\uFFFD\u0000\uFFFD\u0000M]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64("^Pyc<jEnFYn9z4");
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)87;
      byteArray3[1] = (byte)87;
      Base64.isArrayByteBase64(byteArray3);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.readResults(byteArray3, 100, (-5270));
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      bigInteger0.shortValueExact();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.getLowestSetBit();
      bigInteger0.add(bigInteger1);
//      try { 
        base64_0.encode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(59, (byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false);
      String string0 = null;
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null, false);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)31);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-90);
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)50;
      byte byte1 = (byte)61;
      byteArray0[2] = (byte)61;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)50, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD2=]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray0);
      String string0 = "encodeInteger called with null parameter";
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-120);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, true, true, (int) (byte) (-120));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -120
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("?3V_[I$c`1Z:aTH");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        bigInteger0.mod(bigInteger1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger: modulus not positive
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }
}
