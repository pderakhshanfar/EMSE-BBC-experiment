/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:07:24 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)0}, byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("{j1i4QB2YM?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, (-1099), (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(111, byteArray0);
      base64_0.encode(byteArray0, (-866), (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[4];
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, false);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)95;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)54;
      byteArray0[3] = (byte)65;
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)29);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[38];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray1, 0, (int) (byte)42);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, (byte) (-35), (byte) (-14));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1174);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      Base64.isBase64(byteArray2);
      // Undeclared exception!
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(5, byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(76, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1788);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1174);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1174);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1137);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 19, 766);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(104);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(5686);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(0, byteArray0, false);
      byte[] byteArray1 = base64_0.decode("]");
      Base64 base64_1 = new Base64(512, byteArray1, true);
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(349, byteArray0, false);
      Object object0 = base64_0.decode((Object) "+0C ygP4/W%W");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1143);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      Base64.discardWhitespace(byteArray2);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1137);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 1369, 68);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1137);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      // Undeclared exception!
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)103;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(2724, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\u0000g\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(1, byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte) (-60), byteArray1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AA\uFFFD\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)82);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)62);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)124);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-86));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(64);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.decode(byteArray1, 1, 64);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(64);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.decode(byteArray1, 0, 60);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64((-3086));
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)123;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)5, 160);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(207, byteArray0, false);
      base64_0.decode(byteArray0, (int) (byte) (-66), (-131));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[38];
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)42);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 38
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(64);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1135);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      base64_1.encode(byteArray2, 64, 1135);
      base64_1.encode(byteArray0, 122, (-2428));
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.encode(byteArray0, (-236), (-236));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("");
      String string0 = base64_0.encodeToString(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(207, byteArray0, false);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)9, (byte)0}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, false, 0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64();
//      try { 
        base64_0.decode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(607);
      Object object0 = base64_0.decode((Object) "dA==");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 5, 5);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(64);
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.decode(byteArray1, 0, 76);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(2559, byteArray0, true);
      base64_0.decode((Object) "2i*F97");
      base64_0.decode(byteArray0, 76, 3070);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64 base64_0 = new Base64(30);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, 76);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 32
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64(4);
      Object object0 = base64_0.decode((Object) "0eP,d{!r8[9*");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(766);
      base64_0.encode(byteArray0, 0, (-3475));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 76);
      assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      base64_0.encode(byteArray0, 122, (-2428));
      base64_0.encode(byteArray0, 122, 1135);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-240), byteArray0);
      byte[] byteArray1 = base64_0.decode("+wj*s}4or3w,#P:MfM");
      assertArrayEquals(new byte[] {(byte) (-5), (byte)8, (byte) (-20), (byte) (-30), (byte) (-118), (byte) (-9), (byte) (-64), (byte) (-13), (byte)31}, byteArray1);
      assertEquals(9, byteArray1.length);
      
      int int0 = base64_0.readResults(byteArray0, (-1132), (-1132));
      assertFalse(base64_0.isUrlSafe());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)61;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1947);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      base64_0.decode(byteArray1, (int) (byte)61, 1947);
      int int0 = base64_0.readResults(byteArray1, 64, 76);
      assertEquals(76, int0);
      assertEquals(4524, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(766, byteArray0, false);
      base64_0.readResults(byteArray1, 2076, 738);
      assertEquals(32, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64();
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      base64_0.encode(byteArray0, (int) (byte)97, (-74));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(1, byteArray0, true);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(2041, (byte[]) null, true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 6);
      assertArrayEquals(new byte[] {(byte)68, (byte)81, (byte)111, (byte)13, (byte)10}, byteArray1);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAAA", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = base64_0.encodeToString((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("lineSeperator must not contain base64 characters: [");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(0, byteArray1.length);
  }
}
