/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:10:06 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[8];
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8197, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.and(bigInteger1);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger(bigInteger0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)25;
      byteArray0[6] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8197, mockRandom0);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger(bigInteger0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(true);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-5485), byteArray0, false);
      Object object0 = base64_0.decode((Object) "UTF-16LE");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(6095, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      mockRandom0.doubles();
      // Undeclared exception!
//      try { 
        Base64.encodeInteger(bigInteger0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1073741824, mockRandom1);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger(bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64();
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64();
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(6095, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.min(bigInteger1);
      mockRandom0.doubles();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger(byteArray1);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(true);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(false);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(6129, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(6129, mockRandom0);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger(bigInteger1);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextInt();
      BigInteger bigInteger1 = new BigInteger(476, mockRandom1);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger(bigInteger1);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(5149);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 6103;
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(476, mockRandom1);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger(bigInteger1);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(5133);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(3510);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64((byte)33, byteArray0);
      base64_0.avail();
      base64_0.decode(byteArray0, (-2950), (-1393));
      // Undeclared exception!
//      try { 
        Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64((byte)123, byteArray0);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 926, (-1442));
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
      
      int int0 = base64_0.avail();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64((byte)123, byteArray0);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.decode(byteArray0, 1, (-101));
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64((byte) (-124), byteArray0);
      base64_0.decode((String) null);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64();
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)123;
      Base64 base64_0 = new Base64((byte)123, byteArray0);
      base64_0.decode((String) null);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      Base64 base64_0 = new Base64(1342, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64Chunked(byteArray0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
//      try { 
        Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-3645), byteArray0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      Base64 base64_0 = new Base64((byte)33, byteArray0, true);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)123);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.encode(byteArray0, 4044, 0);
      Base64.isBase64((byte)61);
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, true);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64((byte)123, byteArray0);
      base64_0.encode(byteArray0, 1, 1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.isBase64((byte)123);
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)9;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(true);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.avail();
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64(111);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      Base64 base64_0 = new Base64(370, byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1, (int) (byte)116);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64((byte)84);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)84);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = new byte[2];
      // Undeclared exception!
//      try { 
        Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64();
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)33;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
//      try { 
        Base64.decodeBase64(byteArray0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte) (-71));
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)84);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)84);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.avail();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, 36);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.avail();
      base64_0.decode(byteArray0, (-2950), 0);
      // Undeclared exception!
//      try { 
        Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(5142);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-888), (byte[]) null);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.avail();
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, true, 64);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)33;
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64URLSafe(byteArray0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-318), byteArray0);
      // Undeclared exception!
//      try { 
        Base64.decodeBase64(byteArray0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)75;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(true);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte) (-47));
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte) (-47));
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(false);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        Base64.decodeInteger(byteArray0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(1034);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.decodeBase64("");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((-46), byteArray0);
      base64_0.hasData();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray2, false);
      base64_0.decode("R{ENqI$5");
      base64_0.decode("j");
      base64_0.encode(byteArray0, 1916, (-46));
      Base64.isBase64(byteArray0);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-17);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-12);
      byteArray3[3] = (byte) (-7);
      base64_0.decode((Object) "R{ENqI$5");
      base64_0.readResults(byteArray3, (byte) (-17), 0);
      base64_0.hasData();
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false, false, (int) (byte) (-7));
      assertSame(byteArray1, byteArray4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, (byte[]) null, true);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-113);
      Base64 base64_0 = new Base64(110, byteArray0);
      base64_0.avail();
      byte[] byteArray1 = base64_0.decode("");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals(0, byteArray2.length);
      
      Base64.isBase64("");
      base64_0.decode((Object) "");
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      base64_0.encodeToString(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)104, (byte)87, (byte)80, (byte) (-38), (byte)21, (byte) (-113)}, byteArray3);
      
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray2, true, false, (-1452));
      base64_0.encode(byteArray1, 3832, (-1));
      byte[] byteArray4 = base64_0.decode("");
      byte[] byteArray5 = base64_0.decode("Input array too big, the output array would be bigger (");
      Base64.isBase64("");
      Base64.isBase64(byteArray1);
      assertNotSame(byteArray1, byteArray2);
      
      byte[] byteArray6 = base64_0.decode(byteArray5);
      assertEquals(32, byteArray5.length);
      assertEquals(6, byteArray6.length);
      
      base64_0.decode("");
      base64_0.encodeToString(byteArray4);
      assertNotSame(byteArray0, byteArray3);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
//      try { 
        Base64.decodeBase64(byteArray0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)16;
      byte byte2 = (byte)52;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)0;
      Base64.isBase64(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-104);
      Base64 base64_0 = new Base64((-1639), byteArray0, false);
      base64_0.encode(byteArray0);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1145, byteArray0, true);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-100);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [d\u0000\uFFFDE\u0007\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-45);
      Base64 base64_0 = new Base64((-1878), byteArray0);
      base64_0.readResults(byteArray0, (-1878), (byte)25);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      // Undeclared exception!
//      try { 
        Base64.decodeBase64("org.apache.commons.codec.EncoderException");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, (byte[]) null, false);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64.isBase64((byte) (-128));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte) (-128);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray2);
      assertEquals(1, byteArray2.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128), (byte) (-128)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "dg)";
      // Undeclared exception!
//      try { 
        Base64.decodeBase64("dg)");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.avail();
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.decode(object0);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64String(byteArray0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte)27;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)122;
      byteArray1[5] = (byte)8;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)104;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(18, byteArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [c\u001B\uFFFD\u0000z\b\u0000h]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-84);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)36;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64String(byteArray0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
//      try { 
        Base64.decodeInteger(byteArray0);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-36);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte) (-36);
      byteArray1[2] = (byte) (-36);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, true);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-102);
      byteArray0[0] = (byte) (-102);
      byte byte1 = (byte)79;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byte byte2 = (byte)119;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)25;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-1322), byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFDO]\u0000w\u0019]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-92);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, true, (-2909));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of -2909
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-19);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger0.toByteArray();
      BigInteger bigInteger3 = bigInteger0.gcd(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      bigInteger2.add(bigInteger3);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger(byteArray1);
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }
}
