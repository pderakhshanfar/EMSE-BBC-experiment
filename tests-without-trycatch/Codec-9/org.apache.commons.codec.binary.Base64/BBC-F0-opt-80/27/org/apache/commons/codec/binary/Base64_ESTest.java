/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:23:38 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(165L);
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(1431655765, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7732, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(7);
      BigInteger bigInteger1 = BigInteger.TEN;
      base64_0.encode(byteArray0, 7, 7);
      base64_0.encode(byteArray0, 44, 44);
      base64_0.encode(byteArray1, (-1294), (-1294));
      base64_0.decode(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)16;
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7732, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(7);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)17;
      byteArray1[3] = (byte) (-3);
      byteArray1[4] = (byte)40;
      byteArray1[5] = (byte)122;
      byteArray1[6] = (byte) (-3);
      byteArray1[7] = (byte)76;
      byteArray1[8] = (byte)2;
      base64_0.encode(byteArray1, (int) (byte)2, (int) (byte)2);
      base64_0.encode(byteArray1, 1, (-4869));
      Random.setNextRandom(2304);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7732);
      mockRandom0.nextLong();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7732, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(4);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 7732;
      MockRandom mockRandom0 = new MockRandom(7732);
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7732, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(17);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7732);
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7732, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(4);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7732);
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7732, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(4);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, false, false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(1693, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(969);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      bigInteger1.shiftLeft(969);
      base64_0.encode(byteArray0, 9, 4);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-18);
      base64_0.encode(byteArray1, (int) (byte) (-18), (-1271));
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(178L);
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7732, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      bigInteger0.signum();
      Base64 base64_0 = new Base64(4);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      Base64.discardWhitespace(byteArray3);
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 7732;
      MockRandom mockRandom0 = new MockRandom(178L);
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7732, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(4);
      Base64.decodeBase64("&nw");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)55;
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(178L);
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(1431655765, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(178L);
      BigInteger bigInteger0 = new BigInteger(7732, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(4);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3643, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextBytes(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger1 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, 3643);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 604
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7732);
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7732, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(7732);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray3, true, true, 7732);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte) (-90);
      byteArray4[1] = (byte)17;
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64();
      base64_0.decode(byteArray0, 0, 65);
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(442, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-177));
      BigInteger bigInteger1 = BigInteger.ONE;
      base64_0.decode(byteArray0, 1, 1263);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Random.setNextRandom(512);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3643, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(512);
      BigInteger bigInteger1 = BigInteger.ONE;
      base64_0.decode(byteArray0, 512, 512);
      base64_0.readResults(byteArray0, 512, 3643);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.encodeInteger(bigInteger1);
      Base64.discardWhitespace(byteArray0);
//      try { 
        base64_0.encode((Object) "ISO-8859-1");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte) (-92);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0);
      byteArray0[1] = (byte)61;
      byte byte0 = (byte) (-64);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[2] = (byte) (-64);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Random.setNextRandom((byte) (-64));
      byte[] byteArray3 = base64_0.decode(byteArray2);
      base64_0.readResults(byteArray3, (byte)61, (byte) (-92));
      base64_0.readResults(byteArray1, 17, (-502));
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.max(bigInteger1);
      Random.setNextRandom((byte) (-92));
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte)61);
      bigInteger0.min(bigInteger1);
      base64_0.encode(byteArray4, 448, (-634));
//      try { 
        base64_0.encode((Object) bigInteger1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Random.setNextRandom(512);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3643, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(512);
      BigInteger bigInteger1 = BigInteger.ONE;
      base64_0.decode(byteArray0, 512, 512);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom(2685L);
      BigInteger bigInteger0 = new BigInteger(1111, mockRandom0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-141));
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64 base64_1 = new Base64(9);
      base64_1.encode(byteArray2, 39, 104);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Random.setNextRandom(512);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3646, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      bigInteger0.abs();
      base64_0.readResults(byteArray0, 79, 28);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      base64_0.encodeToString(byteArray0);
      mockRandom0.nextGaussian();
      mockRandom0.nextBytes(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.discardWhitespace(byteArray0);
      base64_0.encode(byteArray2, 12, 2183);
      base64_0.encode(byteArray0, 79, 119);
      byte[] byteArray3 = Base64.decodeBase64("[");
      base64_0.decode(byteArray0, (-1002), 36);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeBase64Chunked(byteArray4);
//      try { 
        base64_0.encode((Object) bigInteger1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64.isBase64((byte)6);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)6);
      assertArrayEquals(new byte[] {(byte)66, (byte)103, (byte)65, (byte)65}, byteArray1);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64((byte[]) null, true, false, 0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.decode((byte[]) null, (-794), (-794));
      base64_0.encode((byte[]) null, 0, 0);
      Random.setNextRandom((-794));
      Base64.encodeBase64((byte[]) null, true, false);
      Random.setNextRandom(64);
      Base64.encodeBase64((byte[]) null, false, true, 64);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0, true);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(53);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-53);
      byteArray2[1] = (byte) (-32);
      byteArray2[2] = (byte)28;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray2, 0, 45);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64("");
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0, (-393), (-393));
      String string0 = "encodeInteger called with null parameter";
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, (-393), (-393));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64.isBase64((byte)7);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[0] = (byte)7;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0}, byteArray1);
      
      Base64 base64_0 = new Base64((byte)7, byteArray0, true);
      String string0 = base64_0.encodeToString(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals("BwAA\u0007\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)24;
      byteArray0[1] = (byte) (-6);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-6), (byte[]) null, false);
      String string0 = "I:(sx,`YMyG.Y-JAv";
      byte[] byteArray2 = Base64.decodeBase64("I:(sx,`YMyG.Y-JAv");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.longValueExact();
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray3, false);
      base64_0.encodeToString(byteArray3);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)24;
      byteArray4[1] = (byte)24;
      byteArray4[2] = (byte)24;
      byteArray4[3] = (byte) (-6);
      byteArray4[4] = (byte)24;
      byteArray4[0] = (byte)24;
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("K2c9PQ==");
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Random.setNextRandom((-1));
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null, (-1), (-1));
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.encode((byte[]) null, 0, 1690);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)34;
      base64_0.decode(byteArray0);
      base64_0.avail();
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.readResults((byte[]) null, 0, 1798);
      Base64.encodeBase64((byte[]) null, true, true, 76);
      boolean boolean0 = Base64.isBase64((byte) (-3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((byte)28, byteArray1, true);
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(29);
      Object object0 = base64_0.decode((Object) "lineSeperator must not contain base64 characters: [");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      base64_0.encode(byteArray0, 29, (-2301));
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-51);
      Random.setNextRandom(173);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-51);
      byteArray1[1] = (byte) (-51);
      byteArray1[2] = (byte) (-51);
      byteArray1[3] = (byte) (-51);
      byteArray1[4] = (byte) (-51);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.decodeInteger(byteArray2);
      Random.setNextRandom((byte) (-51));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.isBase64("u?>");
      Base64 base64_0 = new Base64((-67));
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = base64_1.encode(byteArray0);
      base64_0.encode(byteArray1, 76, (-1551));
      Base64 base64_2 = new Base64();
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)9);
      Base64 base64_3 = new Base64((-97));
      byte[] byteArray4 = new byte[0];
      base64_3.decode(byteArray4);
      Base64.isBase64((byte)123);
      // Undeclared exception!
//      try { 
        base64_2.encode(byteArray0, (int) (byte)123, 85);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 123
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Random.setNextRandom(512);
      MockRandom mockRandom0 = new MockRandom();
      byte byte0 = (byte) (-4);
      Base64.isBase64((byte) (-4));
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 860, 512);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.isBase64((byte)1);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray1, (int) (byte) (-1), (int) (byte)0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64Chunked(byteArray2);
      Random.setNextRandom(469);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64((-496));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)49;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 2, (int) (byte)81);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64.isBase64((byte)7);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[0] = (byte)7;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, false, false, (int) (byte)7);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray3);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray3);
      base64_1.decode(byteArray2, 76, 2243);
      Base64.isBase64("encodeInteger called with null parameter");
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byte byte0 = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(76, byteArray0);
      base64_1.encode(byteArray1);
      String string0 = "#Q~&";
      byte[] byteArray2 = base64_1.decode("#Q~&");
      Base64 base64_2 = new Base64(76, byteArray2);
      // Undeclared exception!
//      try { 
        base64_2.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Random.setNextRandom(512);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2183, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-109));
      base64_0.readResults(byteArray0, 79, 2183);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.doubleValue();
      base64_0.encode(byteArray0, 0, (-109));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(364, byteArray1.length);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)120, (byte)65, (byte)99, (byte)61, (byte) (-60), (byte)7}, byteArray3);
      
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeBase64((String) null);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(268, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Random.setNextRandom(512);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2183, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-109));
      base64_0.readResults(byteArray0, 79, 2183);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(374, byteArray1.length);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("QWdBQUFRSUFBQUlDQUFBREFnQUFCQUlBQUFVQ0FBQUdBZ0FBQndJQUFBZ0NBQUFKQWdBQUNnSUFBQXNDQUFBTUFnQUFEUUlBQUE0Q0FBQVBBZ0FBRUFJQUFCRUNBQUFTQWdBQUV3SUFBQlFDQUFBVkFnQUFGZ0lBQUJjQ0FBQVlBZ0FBR1FJQUFCb0NBQUFiQWdBQUhBSUFBQjBDQUFBZUFnQUFId0lBQUNBQ0FBQWhBZ0FBSWdJQUFDTUNBQUFrQWdBQUpRSUFBQ1lDQUFBbkFnQUFLQUlBQUNrQ0FBQXFBZ0FBS3dJQUFDd0NBQUF0QWdBQUxnSUFBQzhDQUFBd0FnQUFNUUlBQURJQ0FBQXpBZ0FBTkFJQUFEVUNBQUEyQWdBQU53SUFBRGdDQUFBNUFnQUFPZ0lBQURzQ0FBQThBZ0FBUFFJQUFENENBQUEvQWdBQVFBSUFBRUVDQUFCQ0FnQUFRd0lBQUVRPQ", string0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals(488, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte)120;
      byteArray1[4] = (byte)120;
      byteArray1[5] = (byte)120;
      byteArray1[6] = (byte)120;
      byteArray1[7] = (byte)120;
      byteArray1[8] = (byte)58;
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, (int) (byte)58);
      Base64.encodeBase64(byteArray3);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ONE;
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger2);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      int int0 = base64_0.readResults(byteArray4, (byte)120, 16);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte byte0 = (byte)124;
      Base64.isBase64((byte)124);
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-7);
      byteArray0[8] = (byte)56;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)48);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, true);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte) (-1);
      base64_0.encode(byteArray4);
      Base64.encodeBase64(byteArray3, false);
      Base64 base64_1 = new Base64(true);
      base64_0.decode(byteArray0, 90, (-3448));
      base64_1.isUrlSafe();
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("QVFBPQ", string0);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray2);
      assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)70, (byte)66, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Random.setNextRandom(512);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2183, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-109));
      base64_0.readResults(byteArray0, 79, 2183);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.doubleValue();
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.toIntegerBytes(bigInteger2);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-88);
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)52;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64((-1));
      Base64.decodeBase64((String) null);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.intValueExact();
      base64_0.hasData();
      Base64.encodeInteger(bigInteger0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64(0, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD4\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)24;
      byteArray0[0] = (byte)24;
      byte byte1 = (byte) (-6);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(34);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.longValueExact();
      bigInteger0.toString((int) (byte)24);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      byte byte2 = (byte)9;
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false, 108);
      byte byte3 = (byte)55;
      Base64.isBase64((byte)55);
      Base64.decodeBase64(byteArray3);
      Base64.decodeBase64("ag0");
      Base64.decodeBase64("ag0");
      Base64.discardWhitespace(byteArray2);
//      try { 
        base64_0.encode((Object) "H97H2!\";6LPK9]");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("nQ");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte) (-99);
      byteArray1[2] = (byte) (-99);
      byteArray1[3] = (byte) (-99);
      base64_0.encode(byteArray1, (int) (byte) (-99), (int) (byte) (-99));
      base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      base64_0.hasData();
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.encode(byteArray3, 1, (int) (byte) (-99));
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger1);
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray4, (byte) (-99), (byte) (-99));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals("TQABAAAAAAAA\uFFFD\u0007", string0);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      String string0 = "k|`wmE";
      Base64.isBase64("k|`wmE");
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, (int) (byte) (-1), (int) (byte)1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)1, 1165);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      int int0 = 0;
      Random.setNextRandom(0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray1);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(34);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.longValueExact();
      bigInteger0.toString((int) (byte)24);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      base64_0.encodeToString(byteArray3);
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)24;
      base64_0.decode(byteArray3, (int) (byte)24, (-1));
      Base64.isBase64("UjBGQlBRPT0=\r\n");
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("xP?Pq.p3!Dzgn5!ZCK");
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-13), (byte) (-22), (byte) (-89), (byte)112, (byte) (-13), (byte) (-126), (byte)126, (byte)89, (byte)8}, byteArray0);
      
      boolean boolean0 = Base64.isBase64("xP?Pq.p3!Dzgn5!ZCK");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte) (-114);
      byteArray1[2] = (byte) (-70);
      byteArray1[3] = (byte) (-114);
      byteArray1[4] = (byte)62;
      byteArray1[5] = (byte)62;
      Base64 base64_0 = new Base64((byte) (-70));
      base64_0.encode(byteArray1, 1847, (int) (byte) (-114));
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1 == boolean0);
      
      base64_0.decode(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean2 = Base64.isBase64((byte) (-70));
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)1;
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode((String) null);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64();
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray2 = null;
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 2243, 98);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64.isBase64((byte)7);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, false, false, (int) (byte)7);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("J'<wAwO@]A");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, true, 60);
      Base64.encodeBase64(byteArray2);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(2995, byteArray3, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [BwcH]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("nQ");
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte) (-99);
      byteArray1[2] = (byte) (-99);
      byteArray1[3] = (byte) (-99);
      base64_0.encode(byteArray1, (int) (byte) (-99), (int) (byte) (-99));
      base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      base64_0.hasData();
      Base64.encodeBase64(byteArray3, false, false, 5921);
      base64_0.decode(byteArray2);
      Base64.encodeBase64String(byteArray2);
      base64_0.decode("%NIG/N<_");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("J");
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false, true);
      base64_0.decode((String) null);
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("nQ");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-99);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_1 = new Base64(29);
      Base64.decodeBase64("x}]vN`<");
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      bigInteger0.longValueExact();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.toString(64);
      Base64.toIntegerBytes(bigInteger1);
      base64_0.hasData();
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-99);
      byteArray3[1] = (byte) (-99);
      byteArray3[2] = (byte) (-99);
      byteArray3[3] = (byte) (-99);
      byteArray3[4] = (byte) (-99);
      byteArray3[5] = (byte) (-99);
      byteArray3[6] = (byte) (-99);
      Base64.encodeBase64(byteArray3, false);
      base64_1.encodeToString(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      Base64 base64_0 = new Base64((-259));
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 10, 10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 10
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 47, 1315);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-6);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(34);
      String string0 = "I:(sx,`YMyG.Y-JAv";
      byte[] byteArray2 = Base64.decodeBase64("I:(sx,`YMyG.Y-JAv");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.longValueExact();
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray3, false);
      base64_0.encodeToString(byteArray3);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)24;
      byteArray4[1] = (byte)24;
      byteArray4[2] = (byte)24;
      byteArray4[3] = (byte) (-6);
      byteArray4[4] = (byte)24;
      byteArray4[0] = (byte)24;
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.hasData();
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("nQ");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte) (-99);
      byteArray1[2] = (byte) (-99);
      byteArray1[3] = (byte) (-99);
      base64_0.encode(byteArray1, (int) (byte) (-99), (int) (byte) (-99));
      byte[] byteArray2 = base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true);
      base64_0.hasData();
      Base64.encodeBase64(byteArray4, false, false, 5921);
      Base64.isBase64((byte)9);
      Base64.decodeBase64(byteArray2);
      Base64.decodeBase64("H97H2!\";6LPK9]");
      Base64.decodeBase64("nQ");
      Base64.discardWhitespace(byteArray3);
//      try { 
        base64_0.encode((Object) "nQ");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(68);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)56;
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0);
      byteArray0[3] = (byte)1;
      Base64.decodeBase64("@");
      Base64.encodeBase64(byteArray0, false, true, 83);
      base64_0.avail();
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.toByteArray();
      Base64.encodeInteger(bigInteger0);
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)56;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = base64_0.decode("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray2);
      base64_0.encodeToString(byteArray3);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64((-358));
      Base64.isBase64("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)66;
      Base64.encodeBase64(byteArray0, true, true, 64);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-1831), (byte[]) null, true);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.decode((byte[]) null, 0, 0);
      Base64.encodeBase64String((byte[]) null);
      int int0 = 2200;
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, (-1831), 2200);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-40);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64(byteArray2, true, true);
      base64_0.readResults(byteArray0, (byte) (-37), 3301);
      byte[] byteArray3 = base64_0.decode("\"O{Q(9L");
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray5 = base64_0.encode(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divideAndRemainder(bigInteger1);
      base64_0.hasData();
      Base64.encodeBase64(byteArray4, false, false);
      Base64.encodeBase64(byteArray3, false, true, 31);
      base64_0.avail();
      base64_0.isUrlSafe();
      Base64.encodeInteger(bigInteger0);
      base64_0.encodeToString(byteArray3);
      Base64.isArrayByteBase64(byteArray5);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)0;
      base64_0.decode(byteArray0);
      byteArray0[6] = (byte)52;
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray0, 2157, (byte)0);
      base64_0.readResults(byteArray0, 0, (-787));
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      base64_0.decode((byte[]) null);
      base64_0.decode((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-27);
      byteArray1[6] = (byte)0;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte) (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)1;
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)51);
      base64_0.decode("");
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)41);
      base64_0.encode(byteArray0);
      base64_0.decode("3SUpAMYA_w");
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      base64_0.encode((byte[]) null);
      boolean boolean0 = true;
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)78;
      byteArray0[1] = (byte)78;
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode("");
      base64_0.isUrlSafe();
      base64_0.avail();
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)0);
      base64_0.isUrlSafe();
      byte[] byteArray2 = Base64.decodeBase64("AAAAAAA9AAAA");
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray2);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64((-336), byteArray1, false);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("nQ");
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte) (-99);
      byteArray1[2] = (byte) (-99);
      byteArray1[3] = (byte) (-99);
      base64_0.encode(byteArray1, (int) (byte) (-99), (int) (byte) (-99));
      byte[] byteArray2 = base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true);
      base64_0.hasData();
      int int0 = 5921;
      Base64.encodeBase64(byteArray4, false, false, 5921);
      Base64.isBase64((byte)9);
      Base64.decodeBase64(byteArray2);
      Base64.decodeBase64("H97H2!\";6LPK9]");
      Base64.decodeBase64("nQ");
      Base64.discardWhitespace(byteArray3);
//      try { 
        base64_0.encode((Object) "nQ");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64(1353);
      byte[] byteArray0 = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64((byte[]) null);
      byte byte0 = (byte)0;
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(1721, byteArray0, false);
      Base64.encodeBase64(byteArray2, true, false, (-4731));
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 747, 747);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 747
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)63;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-21);
      byteArray2[2] = (byte)127;
      byteArray2[3] = (byte) (-19);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)59;
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("AOt/7QA7", string0);
      
      Object object0 = base64_0.decode((Object) "U_'t$Ap\"L2FY|C");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object1, object0);
      
      base64_0.avail();
      Base64.isBase64((byte)0);
      boolean boolean0 = Base64.isBase64(",,,`7b=g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      assertArrayEquals(new byte[] {(byte)81, (byte)87, (byte)89, (byte)52, (byte)80, (byte)81}, byteArray2);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-1);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      byte[] byteArray5 = base64_0.decode("#Q~&");
      assertEquals(0, byteArray5.length);
      
      base64_0.encode(byteArray0);
      byte[] byteArray6 = Base64.discardWhitespace(byteArray1);
      assertEquals(4, byteArray6.length);
      
      base64_0.encode(byteArray4, (int) (byte) (-1), 1729);
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray4);
      assertEquals(6, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)100;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      boolean boolean0 = Base64.isBase64("J");
      assertTrue(boolean0);
      
      base64_0.avail();
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("QVJQc1lFSUFaQT09", string0);
      
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(12, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode("z)!+TnAsHOP>*$R2(Rg");
      assertEquals(9, byteArray3.length);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-28), (byte) (-25), (byte)2, (byte) (-63), (byte) (-50), (byte)61, (byte)29, (byte) (-111)}, byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true);
      assertEquals(18, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      Base64.encodeBase64(byteArray0, false);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, (-1996));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64(47);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-13);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("yADz", string0);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("$_*a[VH\"n6ic>P~");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64(byteArray1, false);
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64(byteArray1, false, true, 76);
      base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        bigInteger0.remainder((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte)115;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray1, (byte)115, (byte)0);
      MockRandom mockRandom0 = new MockRandom(1823L);
      BigInteger bigInteger0 = new BigInteger(274, (byte)0, mockRandom0);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(byteArray1, 25, (-775));
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, true, false, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)108;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      int int0 = (-900);
      bigInteger0.byteValueExact();
      String string0 = "";
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.min(bigInteger0);
      bigInteger0.add(bigInteger1);
      BigInteger bigInteger2 = null;
//      try {
        bigInteger2 = new BigInteger("", (byte)66);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Radix out of range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(3109, byteArray2, true);
      base64_0.encodeToString(byteArray1);
      base64_0.readResults(byteArray1, (-867), (-788));
      base64_0.hasData();
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encodeToString(byteArray1);
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-39);
      byteArray0[8] = (byte)118;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte)93, (byte)90}, byteArray1);
      
      byte[] byteArray2 = base64_0.decode("z>");
      assertEquals(0, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-6);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(34);
      byte[] byteArray3 = Base64.decodeBase64("I:(sx,`YMyG.Y-JAv");
      assertEquals(9, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-52), (byte)88, (byte)51, (byte)33, (byte) (-104), (byte) (-8), (byte) (-112), (byte)47}, byteArray3);
      
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.longValueExact();
      bigInteger0.toString(1447);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray4, false);
      String string0 = base64_0.encodeToString(byteArray4);
      assertEquals("R1BvPQ==\r\n", string0);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray5);
      assertEquals("UjFCdlBRPT0", string1);
      
      Base64.encodeBase64URLSafeString(byteArray1);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)1;
      Base64.encodeBase64(byteArray0, false);
      byteArray0[6] = (byte) (-1);
      base64_0.decode(byteArray0, 2872, 0);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AADTAB8B_w", string0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)110;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-2096), byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0000B\u001D\u07F9n]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)68, (byte)85, (byte)43, (byte)65, (byte)65, (byte)65, (byte)61, (byte)13, (byte)10}, byteArray1);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("ZDU-AAA", string0);
      
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)100;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)53;
      byteArray2[3] = (byte)62;
      byteArray2[4] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      assertArrayEquals(new byte[] {(byte)90, (byte)65, (byte)65, (byte)49, (byte)80, (byte)103, (byte)65, (byte)61}, byteArray3);
  }
}
