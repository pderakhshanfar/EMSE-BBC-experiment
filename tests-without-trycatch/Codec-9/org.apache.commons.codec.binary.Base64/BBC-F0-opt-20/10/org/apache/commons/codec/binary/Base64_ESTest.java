/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:15:39 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8248, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8248);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      mockRandom0.nextInt((-580));
      Base64.decodeInteger(byteArray3);
      Base64.decodeInteger(byteArray4);
      base64_0.encode(byteArray0, 8248, 8248);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, false, true, 64);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (3354) than the specified maxium size of 64
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8248, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8248);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeInteger(byteArray3);
      Base64.decodeInteger(byteArray4);
      base64_0.encode(byteArray0, 8248, 8248);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, false, true, 64);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (3354) than the specified maxium size of 64
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8248, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8248);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64();
      byte[] byteArray3 = base64_1.encode(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeInteger(byteArray4);
      Base64.isBase64(byteArray4);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(455);
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8177, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8177);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray1);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)32;
      byteArray2[1] = (byte)25;
      byteArray2[2] = (byte)20;
      byteArray2[3] = (byte)100;
      byteArray2[4] = (byte)37;
      byteArray2[5] = (byte) (-66);
      byteArray2[6] = (byte)29;
      byteArray2[7] = (byte)71;
      Base64.decodeInteger(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8248, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      BigInteger.valueOf(76);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray2);
      Base64 base64_1 = new Base64(64);
      base64_1.decode("UTF-8");
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base64 base64_0 = new Base64(14);
      base64_0.encode((byte[]) null, (-2546), (-2546));
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, 0, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8248, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = Base64.decodeBase64("");
      int int0 = 498;
      Base64 base64_0 = new Base64(498, byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64(byteArray0);
      base64_0.readResults(byteArray1, 1659, 1659);
      base64_0.decode(byteArray1, 0, 115);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8220);
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8220, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      bigInteger0.floatValue();
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, 64);
      base64_0.avail();
      Base64.isBase64((byte)24);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8220, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      mockRandom0.ints((long) 76);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8220);
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8220, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(8220);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(96, byteArray0, false);
      base64_0.readResults(byteArray0, (-2438), (-2438));
      Object object0 = base64_0.decode((Object) "z(+pha#Q>?H  Cmj(Fu");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      Base64 base64_0 = new Base64(9, byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, 36);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, 3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)68, (byte)118, (byte)56, (byte)61, (byte)14, (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 1);
      Base64.encodeBase64(byteArray0, true, false);
      base64_0.encode(byteArray0, 64, (-2027));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)14, (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("x&zunm9,=jtVDcKB");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, 14);
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 797);
      MockRandom mockRandom0 = new MockRandom(64);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(1, 61, mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // bitLength < 2
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray1);
      Random.setNextRandom((-265));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(1, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-51);
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte) (-8);
      byte byte0 = (byte)118;
      byteArray1[3] = (byte)118;
      byteArray1[4] = (byte)57;
      byte byte1 = (byte)63;
      byteArray1[5] = (byte)63;
      Base64.encodeBase64String(byteArray0);
      byteArray1[6] = (byte) (-95);
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte) (-68);
      base64_0.encode(byteArray1, (int) (byte) (-95), (int) (byte) (-8));
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, (byte) (-1), (byte) (-68));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-61);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      MockRandom mockRandom0 = new MockRandom(2706L);
      BigInteger bigInteger0 = new BigInteger(4113, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(684, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)16;
      Base64 base64_0 = new Base64((-1), byteArray0);
      base64_0.avail();
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(498, byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      Base64 base64_0 = new Base64((-124), byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(") than the specified maxium size of ");
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-100);
      byteArray1[1] = (byte)79;
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1, false, false);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 1, 76);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 21
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(0);
      base64_0.encode(byteArray1, 0, 14);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64((-11));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      byteArray0[2] = (byte)126;
      base64_0.decode(byteArray0, (int) (byte)126, 0);
      Base64.decodeBase64("");
      Base64.isBase64((byte)126);
      Random.setNextRandom(76);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "Input array oo big,the output array would be bigger (";
      byte[] byteArray0 = Base64.decodeBase64("Input array oo big,the output array would be bigger (");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-3162), byteArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\"zn\uFFFD\uFFFD\uFFFDk*(n(-\uFFFD\uFFFD.\uFFFD\uFFFD\uFFFDj\uFFFD\uFFFD\uFFFD.\uFFFD\uFFFD\uFFFDn(z]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big,the output array would be bigger (");
      Base64 base64_0 = new Base64(51);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1, 8192);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 32
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)44);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray1, (-485), (-485));
      assertSame(byteArray1, byteArray2);
      
      boolean boolean1 = Base64.isBase64(": ");
      assertFalse(boolean1);
      
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      boolean boolean2 = base64_0.hasData();
      assertFalse(boolean2 == boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("Inputarraytoobigtheoutputarraywouldbebiggeo=", string0);
      
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      Base64 base64_2 = new Base64();
      base64_2.encode(byteArray0);
      Object object0 = base64_2.decode((Object) "Inputarraytoobigtheoutputarraywouldbebiggeo=");
      Object object1 = base64_2.encode(object0);
      assertNotSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)29;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)55, (byte) (-27), (byte) (-21), (byte) (-80), (byte)29}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.isBase64("-E5U.}:uWISLynspP");
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((-808));
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)105);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 2, 1584);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 32
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64 base64_0 = new Base64((-640));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)75;
      Base64.decodeInteger(byteArray0);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64("d`q|z=+l");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_1 = new Base64();
      base64_0.isUrlSafe();
      base64_0.readResults((byte[]) null, 62, (byte)0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null, 2078, 0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)44);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)44);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(77, byteArray1, false);
      base64_1.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 512;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.remainder(bigInteger0);
      bigInteger0.flipBit(17);
      bigInteger0.divideAndRemainder(bigInteger1);
      bigInteger1.bitCount();
      bigInteger0.getLowestSetBit();
      bigInteger1.nextProbablePrime();
      bigInteger0.shiftLeft(512);
      bigInteger0.subtract(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true, false, 869);
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      base64_0.encode(byteArray0, 512, 0);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-109);
      Base64 base64_0 = new Base64((-109));
      Base64.decodeBase64("-XC4AqR[fD<S");
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Object object0 = base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      base64_0.decode(object0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.isBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64("Input array too big, the output array would be bigger (");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_0 = new Base64((byte)0, (byte[]) null, false);
      base64_0.decode((byte[]) null);
      base64_0.encode((byte[]) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64.isBase64((byte)61);
      Base64 base64_0 = new Base64(114, (byte[]) null);
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.EncoderException");
      base64_0.decode(byteArray0);
      base64_0.encode((byte[]) null, 1650, (int) (byte)61);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-19);
      Base64 base64_0 = new Base64(1, (byte[]) null);
      base64_0.encode(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big,the output array would be bigger (");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-83);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, false, false, 64);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (88) than the specified maxium size of 64
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_0 = new Base64((byte)0, (byte[]) null, false);
      base64_0.decode((byte[]) null);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64(76, byteArray0, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)83;
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)76;
      byteArray1[5] = (byte)83;
      byteArray1[6] = (byte)6;
      byteArray1[7] = (byte)83;
      byteArray1[8] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 48);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)76;
      byte byte0 = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)77;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)77, byteArray2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [bCFMU00=\u000E\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)61);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.encodeToString(byteArray2);
      base64_0.encode(byteArray2, (-485), (-485));
      Base64.isBase64((byte)44);
      base64_0.encode(byteArray0, (int) (byte)44, 52);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray3 = new byte[0];
      Base64.isBase64(byteArray3);
      base64_0.decode("");
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(61, mockRandom0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode("");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64(2035);
      Base64.encodeBase64(byteArray0);
      base64_1.decode("ADYGAA");
      base64_0.avail();
      Base64.isBase64((byte)119);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(false);
      Base64.isBase64("ch:");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-36);
      Base64.isBase64((byte) (-36));
      int int0 = 52;
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray0, 64, 76);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 64
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(false);
      Object object0 = base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      base64_0.decode(object0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.isBase64((byte)54);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64 base64_0 = new Base64(1);
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      base64_0.decode("org.apache.commons.codec.DecoderException");
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-1);
      base64_0.encode(byteArray0, 1, 1);
      byteArray1[4] = (byte)0;
      Base64.isBase64(byteArray1);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_0.decode(object0);
      base64_0.decode("org.apache.commons.codec.DecoderException");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom((-1));
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(76, mockRandom1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = base64_0.decode("V*V<`|PDT+l'={'?n");
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = base64_0.decode("V*V<`|PDT+l'={'?n");
      Base64.decodeBase64("lo,FjkHL0JDD");
      base64_0.decode(byteArray1, 107, (-1));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      Base64.isBase64("j}0");
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)44);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.encodeToString(byteArray2);
      base64_0.encode(byteArray2, (-485), (-485));
      Base64.isBase64((byte)44);
      base64_0.encode(byteArray0, (int) (byte)44, 52);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeInteger(byteArray3);
      base64_0.decode(byteArray3);
      base64_0.decode(byteArray1, (int) (byte)44, (-111));
      base64_0.decode(byteArray2, (int) (byte)44, 6);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1717986918, byteArray0);
      byte[] byteArray1 = new byte[5];
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byteArray1[0] = (byte)69;
      base64_0.readResults(byteArray0, (byte)69, 75);
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte)114;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)12;
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(114, (byte[]) null);
      byte[] byteArray0 = new byte[4];
      Base64 base64_1 = new Base64(114, (byte[]) null);
      // Undeclared exception!
//      try { 
        base64_1.decode((byte[]) null, 64, 3775);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(61);
      BigInteger bigInteger0 = BigInteger.probablePrime(61, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(8, byteArray0.length);
      
      Base64 base64_0 = new Base64((-1615), byteArray0);
      base64_0.hasData();
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString((byte[]) null);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-19);
      Base64 base64_0 = new Base64(65);
      byte[] byteArray1 = base64_0.decode("! n,");
      Base64.encodeBase64(byteArray0, false, true);
      base64_0.isUrlSafe();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)51;
      byteArray2[1] = (byte) (-19);
      byteArray2[2] = (byte)19;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)122;
      byteArray2[6] = (byte)1;
      byteArray2[7] = (byte)110;
      byteArray2[8] = (byte) (-19);
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1064, byteArray0, false);
      Base64.isBase64("");
      base64_0.readResults(byteArray0, (-814), 0);
      Base64.isBase64("#54k>L?ai>W/Dj");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64.isBase64("RLYl#.!U9~}Y1U");
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("RLYl#.!U9~}Y1U");
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 76);
      base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_1.decode((Object) "RLYl#.!U9~}Y1U");
      Base64.isBase64("RLYl#.!U9~}Y1U");
      Base64.decodeBase64("");
      Base64.decodeInteger(byteArray1);
      base64_0.decode("6Tok19{P");
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)119;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.decodeBase64(byteArray2);
      Base64.isArrayByteBase64(byteArray2);
      base64_1.decode("RLYl#.!U9~}Y1U");
      base64_1.avail();
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64.isBase64((byte)22);
      Base64 base64_0 = new Base64(114, (byte[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 76, (int) (byte)56);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 76
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-3);
      base64_0.decode(byteArray0, (int) (byte) (-3), (-607));
//      try { 
        base64_0.encode((Object) "#+=Zdu<");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      Base64.decodeBase64((String) null);
      byteArray0[1] = (byte)118;
      Base64.encodeBase64((byte[]) null);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)20;
      base64_0.decode(byteArray1);
      byteArray1[2] = (byte) (-35);
      byteArray1[3] = (byte) (-128);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)63;
      Base64.isBase64(byteArray1);
      Base64.decodeBase64(byteArray1);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64("fzz`}?Br>wr[\"lHF9");
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0);
      Base64.decodeBase64(byteArray0);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      MockRandom mockRandom0 = new MockRandom(45);
      mockRandom0.longs((long) 45);
      BigInteger.probablePrime(45, mockRandom0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.isProbablePrime(2286);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)88;
      base64_0.encode(byteArray0, (int) (byte)55, (-1457));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-11);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64(byteArray0, true, true);
      boolean boolean0 = true;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte) (-1), byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [d\u0000\u0007\uFFFD\uFFFDa\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1064, byteArray0, false);
      Base64.isBase64("");
      int int0 = base64_0.readResults(byteArray0, (-814), 0);
      assertEquals(0, int0);
      
      boolean boolean0 = Base64.isBase64("#54k>L?ai>W/Dj");
      base64_0.decode("");
      Base64.encodeBase64(byteArray0, false, true);
      boolean boolean1 = base64_0.isUrlSafe();
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(".L4ae&0\")AYd3MpCzNj");
      Base64 base64_0 = new Base64();
      int int0 = 115;
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 115, 115);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 115
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-107);
      byteArray0[0] = (byte) (-107);
      byte byte1 = (byte)48;
      byteArray0[1] = (byte)48;
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-1113), byteArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD0]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)65, (byte)61}, byteArray1);
      
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0);
      Base64.decodeBase64((String) null);
      base64_0.decode(byteArray0, (int) (byte) (-1), (int) (byte)0);
      base64_0.decode(") than the specified maxium size of ");
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      assertEquals(27, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.EncoderException");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(1);
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = new BigInteger(0, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(27, byteArray0.length);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)0;
      Base64.isBase64(byteArray1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.pow(2962);
      bigInteger1.negate();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray2.length);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64(1871);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-30);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAAAAA==", string0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byteArray0[0] = (byte)92;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray2.length);
      
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)0;
      byte[] byteArray3 = Base64.decodeBase64("AAAAAA==");
      assertEquals(4, byteArray3.length);
      
      byteArray0[3] = (byte) (-31);
      boolean boolean0 = Base64.isBase64("\"iIZ=jYf/^4]m");
      byte[] byteArray4 = Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray0, (int) (byte)27, (int) (byte) (-31));
      byte[] byteArray5 = Base64.encodeBase64(byteArray1);
      assertSame(byteArray5, byteArray4);
      
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      
      int int0 = base64_0.readResults(byteArray0, 0, (byte)92);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-39);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = null;
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_0 = new Base64((byte) (-27));
      Object object0 = new Object();
      Base64.encodeBase64URLSafe((byte[]) null);
//      try { 
        base64_0.encode((Object) "^,6ylE%4BwB#,^");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64.encodeBase64String((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(95, (byte[]) null, false);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 15, 4031);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)111;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
//      try { 
        base64_0.encode((Object) "em8=");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      Base64 base64_0 = new Base64((-3672), byteArray0);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray0, (-1125), (int) (byte) (-1));
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode((Object) "M9x@(_Dhr9");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.not();
      bigInteger0.nextProbablePrime();
      // Undeclared exception!
//      try { 
        bigInteger0.setBit((byte) (-1));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative bit address
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false, false, (-634));
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom(76);
      // Undeclared exception!
//      try { 
        BigInteger.probablePrime((-634), mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // bitLength < 2
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(false);
      String string0 = "ch:";
      Base64.isBase64("ch:");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte) (-76);
      base64_0.decode((String) null);
      Base64.decodeBase64(byteArray0);
//      try { 
        base64_1.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)26;
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)0;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      boolean boolean1 = true;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, true, false, (int) (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (18) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("4f^si\"%?Ee");
      Base64 base64_0 = new Base64((-269), byteArray0, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-125);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte)59;
      byteArray1[4] = (byte) (-34);
      byteArray1[5] = (byte)18;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertArrayEquals(new byte[] {(byte)103, (byte)95, (byte)56, (byte)102, (byte)79, (byte)57, (byte)52, (byte)83}, byteArray2);
      
      base64_0.hasData();
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-5), (byte)34, (byte)17}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      base64_0.encode(byteArray0, (-1), (int) (byte) (-60));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      Base64.isBase64("j}0");
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-68);
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64(2393, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [z{\u0000\uFFFDF\u0000\uFFFD\u0001\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-47);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }
}
