/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:15:01 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8162);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8162, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(6);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      mockRandom0.doubles(2722L);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8192);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(6);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8194);
      BigInteger bigInteger0 = new BigInteger(8194, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(6);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray3);
      // Undeclared exception!
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8192);
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(6);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray3);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(26, byteArray0);
      Base64 base64_1 = new Base64(76);
      Object object0 = base64_1.decode((Object) "org.apache.commons.codec.DecoderException");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8192);
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(6);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64(byteArray1);
//      try { 
        base64_0.encode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(8192);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8192);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64 base64_1 = new Base64(64);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8223, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8192);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64 base64_1 = new Base64(8192);
      Base64.decodeInteger(byteArray1);
      int int1 = 50;
      base64_1.decode(byteArray1, 76, 104);
      int int2 = 1064;
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8223, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8192);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray1);
      Base64.isBase64(string0);
      base64_1.decode(byteArray1, 76, 104);
      mockRandom0.nextBytes(byteArray0);
      base64_1.encode(byteArray2, (-2308), (-3328));
      base64_1.encode(byteArray0);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8192);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(76);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)74;
      byteArray4[1] = (byte) (-118);
      byteArray4[2] = (byte) (-1);
      byteArray4[3] = (byte) (-128);
      byteArray4[4] = (byte) (-1);
      byteArray4[5] = (byte) (-103);
      base64_1.encode(byteArray4);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 8192;
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8192);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64 base64_0 = new Base64(8192);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      bigInteger0.xor(bigInteger0);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)12;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64.encodeBase64(byteArray0, false, false, 18);
      Random.setNextRandom(114);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2049, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, 76, 2049);
      base64_0.avail();
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      MockRandom mockRandom0 = new MockRandom(40L);
      BigInteger bigInteger0 = new BigInteger(1982292611, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      mockRandom0.nextGaussian();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = null;
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2049, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      mockRandom0.nextBoolean();
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      base64_0.decode(byteArray0, 6, 531);
      base64_0.decode(byteArray0, (-537), 2049);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2049, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextBoolean();
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      base64_0.decode(byteArray0, 76, 2049);
      base64_0.readResults(byteArray0, 232, 35);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (-578), (-578));
      Base64.decodeInteger(byteArray0);
      base64_0.avail();
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, (-578), 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2049, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64 base64_1 = new Base64(2049);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = base64_1.encode(byteArray2);
      mockRandom0.nextBoolean();
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      Base64.encodeBase64String(byteArray3);
      Base64.decodeInteger(byteArray4);
      base64_0.decode(byteArray2, 64, 2049);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-31);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Base64 base64_0 = new Base64(5);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)1;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-51);
      base64_0.encode((byte[]) null);
      byteArray0[0] = (byte) (-51);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      base64_0.encode(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger1);
      byte byte2 = (byte)61;
      Base64.isBase64((byte)61);
      Base64.isBase64(byteArray0);
      Base64.encodeInteger(bigInteger0);
//      try { 
        base64_0.encode((Object) bigInteger1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64(4);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-47);
      byteArray0[1] = (byte) (-47);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray2, 1, 9);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(277, byteArray0, true);
      boolean boolean0 = false;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte) (-34);
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(2049, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      mockRandom0.nextInt();
      mockRandom0.nextBoolean();
      Base64.encodeInteger(bigInteger1);
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = base64_1.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_1.readResults(byteArray2, 76, (-1));
      Base64.encodeBase64String(byteArray2);
      base64_1.readResults(byteArray0, (-235), (-2407));
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray3, 76, 2062);
      Base64.toIntegerBytes(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)28;
      byteArray2[2] = (byte)5;
      byteArray2[3] = (byte) (-7);
      byteArray2[4] = (byte) (-126);
      byteArray2[5] = (byte) (-20);
      base64_1.encode(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray3, (int) (byte)5, (int) (byte)10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("{&-,.^L");
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)9;
      byteArray2[2] = (byte)50;
      byteArray2[3] = (byte) (-98);
      byteArray2[4] = (byte)18;
      byteArray2[5] = (byte)71;
      byteArray2[6] = (byte)0;
      Base64.discardWhitespace(byteArray2);
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2049, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextInt();
      mockRandom0.nextBoolean();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = base64_1.encode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray1, 43, (-249));
      base64_0.decode(byteArray3, 76, 4);
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byte byte0 = (byte)1;
      byte byte1 = (byte)8;
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray0, 35, (-582));
      // Undeclared exception!
//      try { 
        base64_1.readResults(byteArray0, (-1746), (byte) (-8));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64(21);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, true, 10);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = new byte[5];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 64);
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("{&-,.^L");
      Base64 base64_0 = new Base64(0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 64);
      base64_0.encode(byteArray0, 0, (-283));
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.hasData();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2049, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextInt();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-43);
      byteArray1[2] = (byte) (-43);
      byteArray1[3] = (byte) (-43);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-43);
      byteArray1[6] = (byte) (-43);
      byteArray1[7] = (byte) (-1);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      base64_0.encode(byteArray3, (int) (byte) (-43), (int) (byte) (-43));
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("UVZGQlFVRkJTVUZCUVVGRVFVRkJRVUpCUVVGQlFWVkJRVUZCUjBGQlFVRkNkMEZCUVVGblFVRkJRVXBCUVVGQlEyZEJRVUZCYzBGQlFVRk5RVUZCUVVSUlFVRkJRVFJCUVVGQlVFRkJRVUZGUVVGQlFVSkZRVUZCUVZOQlFVRkJSWGRCUVVGQ1VVRkJRVUZXUVVGQlFVWm5RVUZCUW1OQlFVRkJXVUZCUVVGSFVVRkJRVUp2UVVGQlFXSkJRVUZCU0VGQlFVRkNNRUZCUVVGbFFVRkJRVWgzUVVGQlEwRkJRVUZCYUVGQlFVRkpaMEZCUVVOTlFVRkJRV3RCUVVGQlNsRkJRVUZEV1VGQlFVRnVRVUZCUVV0QlFVRkJRMnRCUVVGQmNVRkJRVUZMZDBGQlFVTjNRVUZCUVhSQlFVRkJUR2RCUVVGRE9FRkJRVUYzUVVGQlFVMVJRVUZCUkVsQlFVRkJla0ZCUVVGT1FVRkJRVVJWUVVGQlFUSkJRVUZCVG5kQlFVRkVaMEZCUVVFMVFVRkJRVTluUVVGQlJITkJRVUZCT0VGQlFVRlFVVUZCUVVRMFFVRkJRUzlCUVVGQlVVRTlQUT09", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2049, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      String string0 = "Fi.wm#mNb5";
      Base64.isBase64("Fi.wm#mNb5");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      base64_0.readResults(byteArray0, (byte)92, (byte)92);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)92);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("{&-,.^L");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)123;
      byteArray2[1] = (byte) (-58);
      byteArray2[2] = (byte)93;
      Base64 base64_0 = new Base64(121, byteArray2);
      base64_0.readResults(byteArray0, (-576), (byte)123);
      base64_0.avail();
      base64_0.hasData();
      Base64.isBase64((byte)123);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      assertFalse(byteArray3.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      base64_0.hasData();
      Base64.isBase64("]");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-38);
      byteArray1[2] = (byte)1;
      base64_0.decode(byteArray1, 71, (int) (byte) (-38));
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("{&-,.^L");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.isBase64((byte)86);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)76, (byte)85, (byte)69, (byte)61, (byte)2, (byte) (-1)}, byteArray2);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)43, (byte)65, (byte)61, (byte)61}, byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-42);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-1);
      Base64.encodeBase64(byteArray2, true);
      base64_0.encode(byteArray1, (int) (byte) (-42), (int) (byte) (-1));
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)2;
      byteArray3[1] = (byte) (-42);
      byteArray3[2] = (byte) (-42);
      byteArray3[3] = (byte)2;
      byteArray3[4] = (byte)2;
      byteArray3[5] = (byte) (-1);
      byteArray3[6] = (byte) (-42);
      base64_0.encode(byteArray3);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray4 = base64_0.encode(byteArray1);
      Base64.isBase64(byteArray1);
      base64_0.decode(byteArray4);
      Base64.isBase64((byte) (-42));
      base64_0.decode((String) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.isBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64.isBase64((byte)109);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)109;
      byteArray2[1] = (byte)109;
      byteArray2[2] = (byte)109;
      byteArray2[3] = (byte)109;
      byteArray2[4] = (byte)109;
      byteArray2[5] = (byte)109;
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)109);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      base64_0.hasData();
      Base64.isBase64("]");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 1225);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray0, (-1), (-916));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.or(bigInteger0);
      Base64.discardWhitespace(byteArray0);
      base64_1.encode(byteArray1);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      base64_0.hasData();
      Base64.isBase64("]");
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-38);
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byte byte1 = (byte)1;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-38);
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte) (-38);
      byteArray1[4] = (byte) (-38);
      byteArray1[5] = (byte)1;
      byte byte2 = (byte)8;
      byteArray1[6] = (byte)8;
      byteArray1[7] = (byte)1;
      byteArray1[8] = (byte) (-38);
      Base64 base64_1 = new Base64(64, byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 64);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, 0, 0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, true);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray4);
      base64_0.decode(byteArray0);
//      try { 
        base64_0.encode((Object) bigInteger2);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("{&-,.^L");
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 64);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, 0, 0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      Base64.discardWhitespace(byteArray1);
      base64_0.encode(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)45, (byte)65, (byte)0, (byte)21}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)43, (byte)65, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64(21);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)19;
      base64_1.decode(byteArray0, 64, (int) (byte) (-1));
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-43), (byte) (-1), (byte) (-1), (byte)19}, byteArray1);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(10, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)102, (byte)56, (byte)78, (byte)47, (byte)120, (byte)77, (byte)61}, byteArray3);
      assertEquals(8, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64((-272));
      byte[] byteArray0 = new byte[8];
      base64_0.decode(byteArray0, (-272), (-272));
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)67;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 61;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte)34;
      Base64 base64_0 = new Base64(61, byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = null;
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-272);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-113);
      base64_0.readResults(byteArray0, (byte)9, 0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 4, (int) (byte)9);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)90, (byte)121, (byte)88, (byte)119, (byte)61, (byte)61}, byteArray2);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = Base64.decodeBase64("i_~_l(v>c4Ob");
      byte[] byteArray4 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)70, (byte)114, (byte)47, (byte)0, (byte)21}, byteArray4);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)105, (byte)47, (byte)47, (byte)108, (byte)118, (byte)99, (byte)52, (byte)79}, byteArray5);
      
      base64_0.decode((Object) "4\"");
      Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)70, (byte)114, (byte)95}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64((-272));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_1 = new Base64(true);
      Base64.decodeBase64((String) null);
      base64_1.encode((byte[]) null);
      Base64.encodeBase64(byteArray1);
//      try { 
        base64_1.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(3613);
      byte[] byteArray0 = new byte[0];
      base64_0.decode("");
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray0);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte byte0 = (byte)102;
      Base64.isBase64((byte)102);
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_0 = new Base64();
      int int0 = (-2070);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, (-2070), (int) (byte)102);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 27);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64((-989));
      base64_0.isUrlSafe();
      base64_0.hasData();
      Base64.isBase64("");
      byte[] byteArray0 = new byte[4];
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64.encodeBase64((byte[]) null, false, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64.isBase64((byte)102);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)102, (byte[]) null);
      Object object0 = new Object();
      Base64.encodeBase64((byte[]) null, false, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.longValueExact();
      BigInteger bigInteger3 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger3);
      base64_0.decode(byteArray0);
      Object object1 = new Object();
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-52);
      Base64.encodeBase64URLSafeString((byte[]) null);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)31;
      base64_0.decode(byteArray0, 0, (-3393));
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("{&-,.^L");
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 64);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, 0, 0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, true);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray4);
      Base64.encodeBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray3);
      base64_0.avail();
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64.isBase64((byte)102);
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, (-327), (int) (byte)102);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64.isBase64((byte)102);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[1] = (byte)14;
      byteArray2[2] = (byte)102;
      byteArray2[3] = (byte)102;
      Base64.encodeBase64(byteArray2, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)102, (byte[]) null);
      Object object0 = new Object();
      Base64.isBase64((byte)63);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64((-272));
      byte[] byteArray0 = new byte[8];
      base64_0.decode(byteArray0, (-272), (-272));
      byteArray0[0] = (byte)67;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[1] = (byte) (-1);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      Base64 base64_1 = new Base64(false);
      Base64.decodeBase64("(tMVTxQrn");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray2);
//      try { 
        base64_1.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)102;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-2462), byteArray1, false);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("Fi.wm#mNb5");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      base64_0.readResults(byteArray0, 0, (byte)1);
      base64_0.decode(byteArray0, 0, (int) (byte)1);
      byte[] byteArray1 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64(byteArray1, true, false);
      bigInteger0.toString(0);
      base64_0.encode(byteArray1, 0, 0);
      Base64.isBase64((byte)1);
      Base64.isBase64("anun'=Q1");
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      base64_0.decode((Object) "10");
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64.isBase64((byte)102);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[1] = (byte)14;
      byteArray2[2] = (byte)102;
      byteArray2[3] = (byte)102;
      Base64.encodeBase64(byteArray2, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)102, (byte[]) null);
      Object object0 = new Object();
      Base64.isBase64((byte)63);
      Base64.toIntegerBytes(bigInteger0);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(710, byteArray1);
      String string0 = "";
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.isBase64(byteArray0);
      Base64 base64_1 = new Base64(90, byteArray0);
      Base64 base64_2 = new Base64(90, byteArray1, true);
//      try { 
        base64_2.decode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)102;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(true);
      base64_0.decode("I:E>w2.F[  RFW");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      base64_0.encode(byteArray0, (-70), 74);
      bigInteger0.bitLength();
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64Chunked(byteArray3);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.add(bigInteger0);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)102;
      byteArray4[1] = (byte) (-1);
      byteArray4[2] = (byte)13;
      byteArray4[3] = (byte) (-46);
      byteArray4[4] = (byte) (-46);
      byteArray4[5] = (byte) (-46);
      byteArray4[6] = (byte) (-46);
      byteArray4[7] = (byte)26;
      Base64.encodeBase64(byteArray4);
      base64_0.encode(byteArray1);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray2, false, false, (int) (byte)13);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-46), byteArray0);
      Object object0 = base64_0.decode((Object) "yK9o]");
      base64_0.encode(object0);
      base64_0.encode(byteArray0);
      bigInteger0.toString(0);
      base64_0.encode(byteArray1, (int) (byte) (-46), (int) (byte) (-46));
      Base64.isBase64((byte) (-46));
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("Fi.wm#mNb5");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      base64_0.readResults(byteArray0, 0, (byte)1);
      base64_0.decode(byteArray0, 0, (int) (byte)1);
      byte[] byteArray1 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray1, false, true);
      Base64.encodeBase64(byteArray0, true, false);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger2.subtract(bigInteger1);
      bigInteger1.longValueExact();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger1);
      Base64.encodeInteger(bigInteger3);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.isArrayByteBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte byte0 = (byte)102;
      Base64.isBase64((byte)102);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, (int) (byte)102, 64);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("Fi.wm#mNb5");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      base64_0.readResults(byteArray0, 0, (byte)1);
      base64_0.decode(byteArray0, 0, (int) (byte)1);
      byte[] byteArray1 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64(byteArray1, true, false);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger1.subtract(bigInteger2);
      bigInteger3.longValueExact();
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger3);
      base64_0.decode(byteArray2);
      Object object0 = base64_0.decode((Object) "lineSeperator must not contain base64 characters: [");
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
//      try { 
        base64_0.encode((Object) "lineSeperator must not contain base64 characters: [");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(710, byteArray1);
      base64_0.decode("");
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 710, 710);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 710
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64(338);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)17;
      Base64.isBase64("encodeInteger called with null parameter");
      byteArray0[2] = (byte)109;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)0;
      Base64.isBase64("");
      Base64.encodeBase64String(byteArray0);
      base64_0.decode((Object) "ABFt");
      byteArray1[2] = (byte) (-117);
      byteArray1[3] = (byte)0;
      base64_0.decode(byteArray1);
      base64_0.encode(byteArray1, (int) (byte)0, (-1584));
      byte[] byteArray2 = new byte[4];
      Base64.encodeBase64String(byteArray1);
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-117);
      byteArray2[2] = (byte)109;
      byteArray2[3] = (byte)54;
      base64_0.decode(byteArray2, (int) (byte)0, (-829));
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      base64_0.readResults(byteArray3, (byte)109, 1680);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)125;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray1);
      String string0 = "";
      Base64.encodeBase64(byteArray1);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("Fi.wm#mNb5");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      base64_0.readResults(byteArray0, 0, (byte)1);
      base64_0.decode(byteArray0, 0, (int) (byte)1);
      byte[] byteArray1 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64(byteArray1, true, false);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger1.subtract(bigInteger2);
      bigInteger3.longValueExact();
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger3);
      Base64.encodeBase64(byteArray2);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      Base64.decodeBase64("AA==");
      Base64.encodeBase64String(byteArray0);
      base64_0.avail();
      base64_0.decode(byteArray0, (-1326), 0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.decode((Object) "AA==");
      base64_0.encode(byteArray1);
//      try { 
        base64_0.encode((Object) "AA==");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      boolean boolean0 = true;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [+]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-62);
      base64_0.encodeToString(byteArray0);
      byteArray0[0] = (byte) (-62);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray2, true, false, 0);
      Base64.encodeBase64(byteArray0, true);
//      try { 
        base64_0.encode((Object) "AA==");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)119, (byte)65, (byte)111, (byte)65, (byte)70, (byte)110, (byte)97, (byte)65, (byte)65}, byteArray1);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)95);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)95;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte)95;
      Base64.encodeBase64(byteArray1, false, false, (int) (byte)95);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-82);
      Base64 base64_0 = new Base64(0, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)119, (byte)65, (byte)76, (byte)70, (byte)75, (byte)52, (byte)61}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("{&-,.^L");
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 64);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, 0, 0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, true);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray4);
      base64_0.decode(byteArray0);
//      try { 
        base64_0.encode((Object) bigInteger2);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(1);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-111);
      base64_0.decode("WV?r@D{`");
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)34;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)106;
      base64_0.decode(byteArray1, 70, (-1));
      byteArray0[6] = (byte) (-4);
      byte[] byteArray2 = Base64.decodeBase64(":XL;-FDh");
      assertArrayEquals(new byte[] {(byte)92, (byte) (-65), (byte) (-123), (byte)14}, byteArray2);
      assertEquals(4, byteArray2.length);
      
      byteArray0[7] = (byte)0;
      base64_0.readResults(byteArray0, (byte)126, (byte) (-4));
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(13, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)76;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 109, (int) (byte)122);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 109
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)126;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(14, byteArray1.length);
      
      base64_0.hasData();
      boolean boolean0 = Base64.isBase64("+b{?U`iG^]Zkysw8y1");
      assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.decodeBase64("+b{?U`iG^]Zkysw8y1");
      assertEquals(9, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-75), (byte)34, (byte)25, (byte) (-103), (byte)50, (byte) (-77), (byte)15, (byte)50}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)92;
      byteArray0[0] = (byte)92;
      byte byte1 = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byte byte2 = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      Base64.encodeBase64(byteArray0, true);
//      try { 
        base64_0.encode((Object) "k[xgAZ#SDyp=hF6wQV");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, true, true, (int) (byte) (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-31);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(12, byteArray1.length);
      
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)81;
      byteArray2[1] = (byte)103;
      byteArray2[2] = (byte)106;
      byteArray2[3] = (byte)83;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)20;
      byteArray2[6] = (byte)118;
      byteArray2[7] = (byte)0;
      Base64.encodeBase64(byteArray2, true, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      assertEquals(13, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("pNsAfgBrwAA=", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)30;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(2877, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [)9\uFFFD\u0000@m\uFFFD\uFFFD\u001E]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.readResults((byte[]) null, 1, (-395));
      base64_0.encodeToString((byte[]) null);
      base64_0.decode((byte[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-71);
      Base64.encodeBase64(byteArray0, false, true);
      base64_0.readResults((byte[]) null, 2905, 253);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-10);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("RlL2AAAAAA==\r\n", string0);
      
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)5397, bigInteger0.shortValue());
      
      byteArray0[6] = (byte) (-51);
      int int0 = base64_0.readResults(byteArray0, 0, 0);
      assertEquals((-1), int0);
      
      Base64.isBase64((byte) (-26));
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      assertSame(byteArray1, byteArray3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte byte0 = (byte)66;
      Base64.isBase64((byte)66);
      Base64.isBase64("");
      Base64 base64_0 = new Base64((byte)66);
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 96);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(96, byteArray1, true);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray1, true, false, 76);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-46);
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)102;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte) (-46), byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFDf]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.or(bigInteger1);
      bigInteger0.intValueExact();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray0, (-653), 0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (-1291), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1291
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte byte0 = (byte)102;
      Base64.isBase64((byte)102);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString((byte[]) null);
      int int0 = (-327);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encode((byte[]) null, (int) (byte)102, (-327));
      base64_0.decode((byte[]) null);
      base64_0.isUrlSafe();
      base64_0.encode((byte[]) null);
      base64_0.avail();
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
