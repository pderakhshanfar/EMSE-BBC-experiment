/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:14:58 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7694, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(7694);
      base64_0.encode(byteArray0, (-742), (-772));
      base64_0.encode(byteArray0, (-742), (-165));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7694, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(5);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      mockRandom0.ints((long) 64, 64, 511);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.decodeInteger(byteArray3);
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7694, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.decodeInteger(byteArray3);
      base64_0.encode(byteArray2, 7694, 546);
      // Undeclared exception!
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3090, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(3090);
      base64_0.encode(byteArray0, 64, 64);
      Base64.discardWhitespace(byteArray0);
      base64_0.readResults(byteArray0, 1, 1);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)95;
      byteArray1[1] = (byte) (-101);
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte) (-112);
      byteArray1[4] = (byte) (-19);
      byteArray1[5] = (byte) (-54);
      byteArray1[6] = (byte)24;
      byteArray1[7] = (byte) (-67);
      byteArray1[8] = (byte)82;
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray1, (byte) (-112), 1507);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)54;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)87);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7694, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(7694);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3089, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(3089);
      base64_0.encode(byteArray0, 64, 64);
      base64_0.encode(byteArray0, (-3060), (-165));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextInt();
      BigInteger bigInteger0 = new BigInteger(7700, mockRandom1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextInt();
      BigInteger bigInteger0 = new BigInteger(7700, mockRandom1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray2);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)0;
      // Undeclared exception!
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(138, byteArray0);
      Object object0 = base64_0.decode((Object) ") than the specified maxium size of ");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3089, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 64, 64);
      base64_0.encode(byteArray0, (-3060), (-141));
      assertEquals(512, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(1908874353, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextDouble();
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(boolean0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0);
      base64_0.encode(byteArray1);
      base64_0.decode(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray2, 31, 31);
      Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray1, 31, (-2098));
      boolean boolean0 = Base64.isBase64((byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3082, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.encode(byteArray1);
      base64_0.decode((Object) "QVFBQUFBSUFBQUFEQUFBQUJBQUFBQVVBQUFBR0FBQUFCd0FBQUFnQUFBQUpBQUFBQ2dBQUFBc0FBQUFNQUFBQURRQUFBQTRBQUFBUEFBQUFFQUFBQUJFQUFBQVNBQUFBRXdBQUFCUUFBQUFWQUFBQUZnQUFBQmNBQUFBWUFBQUFHUUFBQUJvQUFBQWJBQUFBSEFBQUFCMEFBQUFlQUFBQUh3QUFBQ0FBQUFBaEFBQUFJZ0FBQUNNQUFBQWtBQUFBSlFBQUFDWUFBQUFuQUFBQUtBQUFBQ2tBQUFBcUFBQUFLd0FBQUN3QUFBQXRBQUFBTGdBQUFDOEFBQUF3QUFBQU1RQUFBRElBQUFBekFBQUFOQUFBQURVQUFBQTJBQUFBTndBQUFEZ0FBQUE1QUFBQU9nQUFBRHNBQUFBOEFBQUFQUUFBQUQ0QUFBQS9BQUFBUUFBQUFFRUFBQUJDQUFBQVF3QUFBRVFBQUFCRkFBQUFSZ0FBQUVjQUFBQklBQUFBU1FBQUFFb0FBQUJMQUFBQVRBQUFBRTBBQUFCT0FBQUFUd0FBQUZBQUFBQlJBQUFBVWdBQUFGTUFBQUJVQUFBQVZRQUFBRllBQUFCWEFBQUFXQUFBQUZrQUFBQmFBQUFBV3dBQUFGd0FBQUJkQUFBQVhnQUFBRjhBQUFCZ0FBPT0=");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3082, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(359);
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray0, 113, 1062);
      assertEquals(512, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(1908874360);
      base64_0.decode(byteArray2, 31, 31);
      assertEquals(74, byteArray2.length);
      
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      Base64.encodeBase64(byteArray1, true);
      int int0 = base64_0.readResults(byteArray1, 12, 31);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
      
      base64_0.readResults(byteArray0, 3467, 0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)63;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 6);
      assertArrayEquals(new byte[] {(byte)88, (byte)65, (byte)69, (byte)47}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)35;
      byteArray0[6] = (byte)26;
      byteArray0[3] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)35, (byte)0, (byte)0, (byte)0, (byte)26}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      Base64 base64_0 = new Base64(18);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, 18);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 14
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(130);
      base64_0.decode(byteArray1, 31, 31);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(64);
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray0 = new byte[0];
      base64_1.encode(byteArray0, (int) (byte)98, (-3948));
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
//      try { 
        base64_1.readResults((byte[]) null, 42, (byte)98);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(130);
      base64_0.decode(byteArray2, 31, 31);
      Base64.decodeInteger(byteArray2);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("3p!q");
      Base64.decodeInteger(byteArray2);
      Base64.isBase64(byteArray0);
      base64_0.decode(byteArray1, 44, 44);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray2, 53, 53);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(110);
      base64_0.decode(byteArray2, 31, 31);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)105;
      Base64.isBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)103;
      byteArray1[3] = (byte)103;
      byteArray1[4] = (byte)9;
      byteArray1[5] = (byte)103;
      byteArray1[6] = (byte)9;
      byteArray1[7] = (byte)9;
      Base64.encodeBase64(byteArray1, false, true, 352);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      Base64 base64_0 = new Base64(7, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-44);
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte) (-44);
      byteArray1[3] = (byte) (-44);
      byteArray1[4] = (byte) (-44);
      byteArray1[5] = (byte) (-44);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(16, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte)58;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      base64_0.decode((byte[]) null);
      Base64 base64_1 = new Base64((byte)58, byteArray0, true);
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray0, 1, 8128);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)103;
      Base64 base64_0 = new Base64(1977);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-11);
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte)103;
      Base64.encodeBase64Chunked(byteArray0);
      byteArray1[5] = (byte)1;
      base64_0.encodeToString(byteArray1);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64("9UwBCWcB\r\n");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte byte0 = (byte) (-99);
      Base64 base64_0 = new Base64(1866, byteArray0, false);
      int int0 = (-3200);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte) (-99);
      byteArray1[2] = (byte) (-99);
      byteArray1[3] = (byte) (-99);
      byteArray1[4] = (byte) (-99);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64(1866);
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-30);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte)69;
      byteArray1[4] = (byte)8;
      byteArray1[5] = (byte) (-89);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64((-3136), byteArray0);
      byte[] byteArray1 = base64_0.decode((String) null);
      assertNull(byteArray1);
      
      Base64.encodeBase64URLSafe((byte[]) null);
      int int0 = base64_0.readResults(byteArray0, 48, 54);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[4] = (byte)31;
      base64_0.encodeToString(byteArray0);
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(120);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-49);
      byteArray2[4] = (byte)95;
      byteArray2[5] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray2, (int) (byte)0, 120);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(2136, (byte[]) null);
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[ or a String");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray2);
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, false, true, 35);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (104) than the specified maxium size of 35
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(120);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 20);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.decodeBase64("-tT");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      Object object1 = new Object();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte byte0 = (byte)65;
      Base64.isBase64((byte)65);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte)65, byteArray0, true);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode("");
      Base64.decodeBase64("");
      String string0 = "";
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1320, byteArray0, true);
      base64_0.encodeToString(byteArray0);
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_1 = new Base64(1320);
      Base64.encodeBase64URLSafeString(byteArray0);
//      try { 
        base64_1.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64.isBase64("oRAFL}f1Ksk=O==");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)40;
      Object object0 = new Object();
      Base64 base64_0 = new Base64((byte)40);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, (int) (byte)40, (int) (byte)40);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64.isBase64("tzv$Uvs#?fN@Q|px'");
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray2 = new byte[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.subtract(bigInteger0);
      Base64.isBase64(byteArray1);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)73;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte byte1 = (byte)0;
      Base64 base64_0 = new Base64(1866, byteArray0, true);
      base64_0.decode(byteArray1, 114, (int) (byte) (-99));
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, true, false, (int) (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (22) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(97);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 97);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)31;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-49);
      byteArray1[1] = (byte)116;
      byteArray1[2] = (byte) (-49);
      byteArray1[3] = (byte) (-76);
      Base64.encodeBase64(byteArray1, false, false);
      byteArray0[8] = (byte)116;
      base64_0.encode(byteArray0);
      base64_0.encode((byte[]) null);
      Base64.isBase64((byte)112);
      Base64 base64_1 = new Base64((byte)50, (byte[]) null);
      String string0 = ";5-e|H>Dr5>{";
//      try { 
        base64_1.encode((Object) "6cXb");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-99);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.subtract(bigInteger1);
      Base64.isBase64(byteArray1);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-1312), byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64 base64_1 = new Base64(32);
      Base64.encodeBase64(byteArray3);
      byte[] byteArray4 = base64_1.encode(byteArray2);
      Base64.encodeBase64(byteArray1);
      base64_1.encode(byteArray4, 1107, (-829));
      Base64.isBase64("UTF-8");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64.isBase64((byte)29);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)29;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64((-1));
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 1, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 12
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64.isBase64((byte)29);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, false, false, 2450);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)29;
      byteArray1[3] = (byte)29;
      byteArray1[4] = (byte)29;
      byteArray1[5] = (byte)29;
      byteArray1[6] = (byte)29;
      byteArray1[7] = (byte)29;
      byteArray1[8] = (byte)29;
      Base64.decodeBase64(byteArray1);
//      try { 
        base64_1.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-1312), byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      base64_0.hasData();
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64.isBase64((byte)27);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)27;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      int int0 = 0;
      bigInteger0.signum();
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray1, 0, (-636));
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.avail();
      Base64.decodeInteger(byteArray2);
      base64_0.encode(byteArray0, (-2588), 0);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray3, 1583, 7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64.isBase64("tzv$Uvs#?fN@Q|px'");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitCount();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(748);
      Base64.encodeBase64(byteArray1, false);
      base64_0.encode(byteArray0, 0, (-738));
      Base64.isBase64("7");
      Base64.encodeBase64(byteArray1, true, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, 0, (-2588));
      byte[] byteArray3 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.avail();
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray1, (-351), 1583);
      base64_0.decode(byteArray3);
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.decodeBase64(byteArray3);
      Base64.decodeInteger(byteArray2);
      Base64.isBase64((byte) (-120));
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64.isBase64((byte)29);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)29;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64.isBase64((byte)27);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      Base64 base64_0 = new Base64((byte)27, byteArray0);
      Base64.decodeBase64("2jXZ)<VG7p.W-~b");
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      base64_0.hasData();
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(1320);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)4;
      base64_0.decode(byteArray0);
      byte[] byteArray1 = new byte[1];
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger1);
      byteArray1[0] = (byte)0;
      Base64.encodeBase64String(byteArray1);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray1, true, true);
      base64_0.decode(byteArray1, 1320, 1320);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray1, true, false);
      Base64.encodeBase64String(byteArray1);
      base64_0.encode((byte[]) null);
      base64_0.decode("AA==");
      base64_0.encode((byte[]) null);
      Base64 base64_1 = new Base64(true);
      base64_1.decode("AA==");
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64.isBase64("nl$Q'^x~e");
      Base64 base64_0 = new Base64((byte)57, (byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, (-1));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-99);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      base64_0.decode(byteArray1, (int) (byte) (-99), (int) (byte)0);
      Base64.encodeBase64(byteArray0, true, false, 76);
      base64_0.decode((Object) "");
      base64_0.avail();
      base64_0.readResults(byteArray0, (byte)12, 46);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64.isBase64("tzv$Uvs#?fN@Q|px'");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((byte)0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 27, 788);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 27
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)20;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.readResults(byteArray1, (byte)0, 87);
      Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      Base64.encodeBase64(byteArray1, false);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, (-1753));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1753
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1320, byteArray0, true);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray0, (-172), 2584);
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.encode(byteArray2, (-172), 0);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64.isBase64("tzv$Uvs#?fN@Q|px'");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-19);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger1);
      Base64.isBase64(byteArray0);
      Object object0 = new Object();
      Base64.encodeBase64(byteArray0, true, false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1320, byteArray0, true);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0);
      base64_0.readResults(byteArray0, (-172), 2584);
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64(byteArray0, true, true, 64);
      base64_0.isUrlSafe();
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.setBit(1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-112);
      byteArray0[2] = (byte)68;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)102;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)102);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.decode((Object) "_8BEkAAdZg");
      Base64.decodeBase64(byteArray0);
      base64_0.hasData();
      Base64.isBase64("a9~rbsl#HUHJ8Ij3,T");
      base64_0.encode(byteArray0, (-335), 1462);
      Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_1 = new Base64((-559));
      base64_1.hasData();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64.isBase64((byte)29);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-123);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-123);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64(98);
      base64_0.encode(byteArray1, 64, (int) (byte)0);
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)123;
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.binary.StringUtils");
      base64_0.encode(byteArray0);
      base64_0.decode("B7h)s2'zUK5IEia9");
      Base64.encodeBase64(byteArray1, true, true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)53;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)119, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)123;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.decodeBase64((String) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray0);
      int int0 = 774;
      Base64 base64_0 = new Base64(35);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_1 = new Base64(269, byteArray0, false);
      base64_1.decode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigInteger1.modInverse(bigInteger0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger: modulus not positive
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = null;
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true, true);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 1, 1320);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.setBit(1);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.max(bigInteger0);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, false, false, (-2218));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of -2218
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = Base64.isBase64(")X18n:pjpwV8:n|Fa{");
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-12));
      base64_0.encode(byteArray0, 10, (-113));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64((-3265));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("W+wXnAABNAA=", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64.isBase64("nl$Q'^x~e");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)109;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte)48;
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(774);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.encode((byte[]) null, (-155), (int) (byte)109);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1320, byteArray0, true);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray0, (-172), 2584);
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64(byteArray0, true, true, 64);
      base64_0.isUrlSafe();
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte byte0 = (byte)27;
      Base64.isBase64((byte)27);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      Base64 base64_0 = new Base64((byte)27, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      base64_0.hasData();
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)20;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.readResults(byteArray0, (-1), 1205);
      base64_0.encode(byteArray1, 1964, (int) (byte)0);
      base64_0.decode((Object) "");
      Base64.decodeBase64("");
      base64_0.decode("");
      Base64.decodeBase64("");
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (-4204), (int) (byte)20);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4204
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("o?'+9'1*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)82;
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      boolean boolean1 = Base64.isBase64("");
      assertFalse(boolean1 == boolean0);
      
      Object object0 = base64_0.decode((Object) "o?'+9'1*");
      base64_0.decode(object0);
      base64_0.decode("");
      byte[] byteArray3 = base64_0.decode(byteArray0);
      assertEquals(1, byteArray3.length);
      
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.decodeBase64(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)75, (byte)71, (byte)55, (byte)117, (byte)85, (byte)103, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals((byte)82, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(1332);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte) (-103), (-1806));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64((-705));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-30);
      byteArray0[8] = (byte) (-60);
      Base64.encodeBase64(byteArray0, false, true);
      Object object0 = new Object();
      Base64.decodeBase64("1SB#<v2W/i^bR+7Wl");
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64.isBase64((byte)29);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)29;
      Base64.encodeBase64String(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = null;
      boolean boolean0 = true;
      Base64.encodeBase64((byte[]) null, false, false);
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)123;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-36);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)13;
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64((-1587), byteArray0, false);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      base64_0.decode("");
      byte[] byteArray1 = Base64.decodeBase64("");
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 0);
      base64_0.encode(byteArray3, (int) (byte)0, 0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64((-2636));
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-49);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((byte[]) null);
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("tzv$Uvs#?fN@Q|px'");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)46;
      Base64 base64_0 = new Base64(0, byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 28);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)85;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      Base64 base64_0 = new Base64((byte) (-106));
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-99);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertArrayEquals(new byte[] {(byte)114, (byte)107, (byte)109, (byte)100, (byte)65, (byte)65, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray1);
      
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false, 76);
      assertEquals(10, byteArray2.length);
      
      base64_0.decode((Object) "");
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)0;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD\u0000_\uFFFD\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      boolean boolean1 = false;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray0, (-782), (-782));
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte) (-124);
      Base64.encodeBase64(byteArray1);
      byteArray0[2] = (byte)1;
      base64_0.decode("");
      base64_0.readResults(byteArray0, (-2582), (-2582));
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)99;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64((-3006), byteArray1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [k2M=\u0000#]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64(byteArray0, true, false);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1130);
      base64_0.encode(byteArray0, 0, (int) (byte) (-69));
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64.decodeBase64("/o64$");
      Base64 base64_0 = new Base64();
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, 0, (-2588));
      byte[] byteArray3 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      assertEquals(27, byteArray3.length);
      
      int int0 = base64_0.avail();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray1, (-351), 1583);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray4.length);
      
      int int1 = base64_0.readResults(byteArray1, 0, 0);
      assertSame(byteArray1, byteArray2);
      assertTrue(int1 == int0);
      
      int int2 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)92;
      Base64 base64_0 = new Base64((-2459), byteArray0, false);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, (-846));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -846
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }
}
