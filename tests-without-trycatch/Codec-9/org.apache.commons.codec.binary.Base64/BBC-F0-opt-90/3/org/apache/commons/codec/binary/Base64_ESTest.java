/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:14:05 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(8, byteArray0, true);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0, 1, 8);
      base64_0.encode(byteArray0, 797, (int) (byte) (-23));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(10, byteArray0, false);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1, 10, 10);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(8, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = new byte[8];
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray2, 9950, (int) (byte) (-1));
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte) (-1);
      byteArray4[1] = (byte) (-1);
      byteArray4[2] = (byte) (-1);
      byteArray4[3] = (byte) (-1);
      byteArray4[4] = (byte) (-1);
      byteArray4[5] = (byte) (-1);
      byteArray4[6] = (byte) (-1);
      byteArray4[7] = (byte)11;
      base64_0.encode(byteArray4);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(10, byteArray0, false);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1, 10, 10);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray1);
      String string0 = base64_0.encodeToString(byteArray2);
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[66];
      Base64 base64_0 = new Base64(8, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      int int0 = 7;
      Base64 base64_0 = new Base64(7, byteArray0, false);
      Base64.encodeBase64(byteArray0, true, false);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = null;
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(8, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte) (-110);
      byteArray2[3] = (byte)14;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte) (-113);
      byteArray2[6] = (byte)35;
      byteArray2[7] = (byte)94;
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[66];
      Base64 base64_0 = new Base64(8, byteArray0, false);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray2, 8, 8);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      base64_0.encode(byteArray0, (-902), (-677));
      base64_0.readResults(byteArray2, (-677), (-677));
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      Base64 base64_0 = new Base64(8);
      base64_0.encode(byteArray0, 8, 6);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("&~k'BS/IW");
      base64_0.encode(byteArray0, (-3913), (-1740));
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[62];
      Base64 base64_0 = new Base64(8, byteArray0, false);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.discardWhitespace(byteArray3);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.decodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[62];
      Base64 base64_0 = new Base64(6, byteArray0, false);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      Base64 base64_0 = new Base64(8);
      base64_0.encode(byteArray0, 8, 8);
      base64_0.readResults(byteArray0, 8, 8);
      base64_0.encode(byteArray0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(8, byteArray0, false);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(8, byteArray0, false);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(8, byteArray0, false);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      base64_0.encodeToString(byteArray2);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      int int0 = 7;
      Base64 base64_0 = new Base64(7, byteArray0, false);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(8, byteArray0, true);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 797, (int) (byte) (-23));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[55];
      Base64 base64_0 = new Base64(8, byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[1] = (byte) (-23);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray1, 1, 1);
      base64_1.encode(byteArray1, 797, (int) (byte) (-23));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(8, byteArray0, false);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte) (-23);
      byteArray1[2] = (byte)1;
      byteArray0[48] = (byte) (-90);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(80, byteArray2.length);
      
      byteArray1[8] = (byte)0;
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.discardWhitespace(byteArray4);
      byte[] byteArray5 = base64_0.encode(byteArray4);
      assertEquals(87852, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(8, byteArray0, false);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte) (-23);
      String string1 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("AOkAAAAAAAAA", string1);
      
      Base64 base64_1 = new Base64(1, byteArray0, false);
      base64_1.encode(byteArray1, 1, 1);
      base64_1.encode(byteArray1, 797, (-1259));
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      Base64 base64_0 = new Base64(8);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      
      base64_0.encode(byteArray0, 8, 8);
      base64_0.encode(byteArray0, 8, (-46));
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)119;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      Base64.encodeBase64((byte[]) null, true, true, (int) (byte) (-98));
      base64_0.encode(byteArray1);
      Base64.encodeBase64((byte[]) null);
      base64_0.decode((String) null);
      Base64.encodeBase64String((byte[]) null);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)119;
      byteArray3[1] = (byte)36;
      byteArray3[2] = (byte)36;
      byteArray3[3] = (byte)36;
      byteArray3[4] = (byte) (-98);
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte) (-98);
      byteArray3[7] = (byte)85;
      base64_0.encode(byteArray3, (int) (byte) (-98), (-1661));
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, (byte)119, 8176);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-2234));
      boolean boolean0 = Base64.isBase64("{_nt@5)T_");
      assertFalse(boolean0);
      
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1472, mockRandom0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(240, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 6);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = new byte[0];
      Base64 base64_0 = new Base64(24, byteArray2);
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-118), (byte)1, (byte)101, (byte) (-1)}, byteArray1);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      Base64 base64_0 = new Base64(5);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 1302);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 13
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)124;
      byteArray0[0] = (byte)124;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)124;
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      int int0 = (-730);
      Base64 base64_0 = new Base64((-730));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)9);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, (int) (byte)9, (int) (byte)124);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-272), byteArray0, true);
      Object object0 = base64_0.decode((Object) "NvN(1m");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)31;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1, byteArray0, false);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 1, (int) (byte)31);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 13
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((byte)121);
      base64_0.encode(byteArray0, (-1679), (-1679));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)121;
      byteArray1[3] = (byte)121;
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64(byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, (-1113), (byte)121);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(26);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, 0, 8192);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64((byte) (-111));
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray0, 2478, 1106);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)3;
      byteArray2[3] = (byte) (-85);
      byteArray2[4] = (byte)9;
      byteArray2[5] = (byte) (-85);
      byteArray2[6] = (byte)9;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte) (-111);
      Base64.isBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_1 = new Base64(1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray3, 75, 0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)12;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)46, (byte)120, (byte) (-82), (byte)12}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-99);
      Base64.decodeInteger(byteArray0);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)124;
      byteArray1[3] = (byte)57;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte) (-71), byteArray2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u000E\u0010|9]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      Base64 base64_0 = new Base64((byte)123, byteArray0, true);
      base64_0.decode(") than the specified maxium size of ");
      Base64 base64_1 = new Base64();
      Base64.encodeBase64String((byte[]) null);
      Base64.isBase64((byte)123);
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64.isBase64((byte) (-111));
      Base64 base64_0 = new Base64((byte) (-111));
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray2, true, true, 64);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64(byteArray3, true, true);
      Base64.encodeBase64Chunked(byteArray0);
      base64_1.encode(byteArray1, 76, (-528));
      Base64.encodeBase64(byteArray0, false, true, 76);
      base64_1.encode(byteArray0, (-528), (int) (byte) (-111));
      base64_1.hasData();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("e,Xy$S|RcJ0qE\"JZ");
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)66;
      Base64.encodeBase64(byteArray1);
      base64_0.decode((Object) "");
      byte[] byteArray2 = null;
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 34, 945);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-730));
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)9);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("qy@y!Z6eOP0LY");
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray0, (-1022), (int) (byte) (-1));
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode("yy8");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode("yy8");
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray3, (int) (byte)0, (-1614));
      base64_0.encode(byteArray0, (-730), (int) (byte) (-125));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((-2297));
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Base64 base64_1 = new Base64((-2297), byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.toString();
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-730));
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)9);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("qy@y!Z6eOP0LY");
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray0, (-1022), (int) (byte) (-1));
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode("yw");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode("yw");
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray3, (int) (byte)0, (-1614));
      base64_0.encode(byteArray0, (-730), (int) (byte) (-125));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((-2297));
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Base64.isBase64((byte)0);
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      Base64.isBase64("");
      Base64.decodeBase64(byteArray3);
      Base64.isBase64((byte)121);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeBase64(byteArray0);
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.not();
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte)35);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(90);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray1);
      base64_0.decode("DXhdb#}Vlu@qGcM2{");
      Base64.encodeBase64(byteArray2, false, false, 90);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)121;
      byteArray3[1] = (byte)121;
      byteArray3[2] = (byte)121;
      byteArray3[3] = (byte)121;
      byteArray3[4] = (byte)121;
      byteArray3[5] = (byte)121;
      base64_0.encode(byteArray3, 115, 1741);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Object object0 = base64_0.decode((Object) "EJS");
      Object object1 = base64_0.encode(object0);
      base64_0.decode(object1);
      Object object2 = new Object();
//      try { 
        base64_0.encode(object2);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)6;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(1872);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, 1, (int) (byte)6);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("qy@y!Z6eOP0LY");
      Base64.encodeBase64(byteArray2, false, false);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)88;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-255), byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\uFFFD{\u0001\uFFFDX]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte byte0 = (byte)44;
      Base64.isBase64((byte)44);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)44;
      Base64 base64_0 = new Base64(1325, byteArray0, true);
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(14);
      bigInteger0.bitCount();
      bigInteger0.flipBit(1325);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)33;
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64((byte)1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.subtract(bigInteger0);
      bigInteger1.bitCount();
      bigInteger1.divide(bigInteger0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)123;
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64((byte)6);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)92;
      byteArray2[1] = (byte)92;
      byteArray2[2] = (byte)92;
      base64_0.encode(byteArray2);
      base64_0.decode(byteArray2, 751, (int) (byte)123);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)119;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      Base64.encodeBase64((byte[]) null, true, true, (int) (byte) (-98));
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-98);
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte) (-98));
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 1982292598);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-730));
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)9);
      byte[] byteArray1 = Base64.decodeBase64("qy@y!Z6eOP0LY");
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray2, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode("");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_1 = new Base64(false);
      Base64.decodeInteger(byteArray3);
//      try { 
        base64_1.encode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)1;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)121);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_1 = new Base64(false);
      base64_0.decode("");
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)1;
      byteArray4[1] = (byte)121;
      byteArray0[0] = (byte)121;
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray4);
      base64_1.encode(byteArray5, (int) (byte)121, (-2363));
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray5, false, false, (int) (byte)1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)119;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      base64_0.decode((String) null);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.encode((byte[]) null);
      base64_0.decode((byte[]) null, (-1), (-1));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)33;
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64((byte)1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.subtract(bigInteger0);
      bigInteger1.bitCount();
      bigInteger1.divide(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64("");
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64.isBase64((byte)51);
      Base64.decodeBase64(byteArray2);
      Base64.encodeBase64(byteArray3, true, false, 1157);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)51;
      byteArray4[2] = (byte)51;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)33;
      byteArray4[6] = (byte)92;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-1797), byteArray4, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u000033\u0000\u0000!\\]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-730));
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)9);
      byte[] byteArray1 = Base64.decodeBase64("qy@y!Z6eOP0LY");
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray0, (-1022), (int) (byte) (-1));
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode("");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode("");
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray3, (int) (byte)0, (-1614));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)35);
      base64_0.decode((String) null);
      base64_0.decode(byteArray0, 60, 0);
      Base64.encodeBase64(byteArray1);
      base64_0.decode((String) null);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)35;
      byteArray2[1] = (byte)35;
      byteArray2[2] = (byte)35;
      byteArray2[3] = (byte)35;
      byteArray2[4] = (byte)35;
      byteArray2[5] = (byte)35;
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode((String) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.decode("[");
      Base64.encodeBase64Chunked(byteArray3);
      base64_0.decode(byteArray3, 2746, 3314);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64((-3516));
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.avail();
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)35);
      base64_0.decode((String) null);
      base64_0.decode(byteArray0, 60, 0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.decode((String) null);
      Base64 base64_1 = new Base64(1, (byte[]) null, false);
      base64_1.readResults(byteArray2, 60, 60);
      Base64 base64_2 = new Base64(false);
      base64_0.decode("F<Sz");
      base64_1.isUrlSafe();
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)35);
      base64_0.decode((String) null);
      base64_0.decode(byteArray0, 60, 0);
      Base64.encodeBase64(byteArray1);
      base64_0.decode((String) null);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)35;
      byteArray2[1] = (byte)35;
      byteArray2[2] = (byte)35;
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64(byteArray2, true, true);
      base64_0.avail();
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-63);
      Base64 base64_0 = new Base64(1041, byteArray0);
      Base64.isBase64(byteArray0);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)26;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray3 = base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray2, false, false);
      base64_0.readResults(byteArray3, (byte)23, 5);
      Base64 base64_1 = new Base64(true);
      base64_1.decode("F<Sz");
      base64_1.isUrlSafe();
      Base64.isBase64(byteArray1);
      Base64.decodeBase64("}]B:W^TtK");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64((byte)23);
      Base64 base64_1 = new Base64(96);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.bitCount();
      bigInteger1.divide(bigInteger0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64("v");
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      base64_1.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_1.decode(byteArray2);
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)23;
      byteArray4[1] = (byte)6;
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      base64_1.encodeToString(byteArray3);
      base64_0.decode((Object) "UTF-16");
      Base64.isBase64((byte)6);
      byte[] byteArray6 = Base64.encodeBase64(byteArray5, false);
      Base64.decodeBase64(byteArray6);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-730));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)9);
      byte[] byteArray2 = Base64.decodeBase64("qy@y!Z6eOP0LY");
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode("");
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode("");
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray4, (int) (byte)0, (-1614));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[1] = (byte)26;
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray2, true, true, (int) (byte)23);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)23;
      byteArray3[1] = (byte)26;
      byteArray3[2] = (byte)23;
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte)23;
      base64_0.readResults(byteArray3, (byte)0, (byte) (-1));
      base64_0.isUrlSafe();
      base64_0.encode(byteArray2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte)12);
      Base64.encodeBase64String(byteArray3);
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-63);
      Base64 base64_0 = new Base64(1041, byteArray0);
      Base64.isBase64(byteArray0);
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      int int0 = 1;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 9);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1, byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64((-1678), (byte[]) null, true);
      Base64.decodeBase64((byte[]) null);
      base64_0.decode((Object) "m!f>ss!W2&7J@jkA2c");
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true, (-665));
      base64_0.encode((byte[]) null, 2654, (-665));
      base64_0.encode((byte[]) null, 2654, 2654);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      base64_0.readResults((byte[]) null, (-1678), (-1678));
      base64_0.decode("7");
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encode((byte[]) null);
      base64_0.readResults((byte[]) null, 2654, 0);
      base64_0.encode((byte[]) null, 1, (-193));
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-100);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)0;
      Base64.encodeBase64(byteArray2, false, true);
      base64_0.readResults(byteArray1, 643, 643);
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.isUrlSafe();
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertTrue(boolean0);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray3 = Base64.decodeBase64("}]B:W^TtK");
      assertEquals(3, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)5, (byte)100, (byte) (-19)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      base64_0.encode(byteArray0, (int) (byte)112, (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)35}, byteArray2);
      
      Base64 base64_0 = new Base64((byte)35);
      base64_0.decode((String) null);
      base64_0.decode(byteArray0, 60, 0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      base64_0.decode((String) null);
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)35;
      byteArray4[1] = (byte)35;
      byteArray4[2] = (byte)35;
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, true, true);
      //  // Unstable assertion: assertEquals(6, byteArray5.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)73, (byte)121, (byte)77, (byte)106, (byte) (-98), (byte)24}, byteArray5);
      
      base64_0.avail();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)54, (byte)118, (byte)56, (byte)71, (byte)65, (byte)72, (byte)73, (byte)65, (byte) (-98), (byte)24}, byteArray2);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      
      Base64 base64_0 = new Base64(2521);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)114;
      byteArray4[2] = (byte)6;
      byteArray4[3] = (byte) (-22);
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte) (-6);
      byte[] byteArray5 = base64_0.decode(byteArray4);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)119;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)74, (byte)52, (byte)107, (byte)100, (byte)119}, byteArray1);
      assertEquals(6, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      Base64.encodeBase64((byte[]) null, true, true, (int) (byte) (-98));
      byteArray2[1] = (byte)119;
      byteArray2[2] = (byte) (-98);
      byteArray2[3] = (byte) (-98);
      byteArray2[4] = (byte)0;
      base64_0.encode(byteArray2, (int) (byte)0, (int) (byte) (-98));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      int int0 = 1;
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, 1, 5);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeBase64("AQA=");
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, true, true, (-1366));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1366
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)6;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode((String) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      bigInteger0.doubleValue();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String((byte[]) null);
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-730));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("qy@y!Z6eOP0LY");
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("qyyZ6eOP0LY", string0);
      
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode("");
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode("");
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(22, byteArray5.length);
      
      byte[] byteArray6 = base64_0.encode(byteArray4);
      base64_0.decode(byteArray4, (int) (byte)0, (-1614));
      BigInteger bigInteger0 = new BigInteger(byteArray6);
      byte[] byteArray7 = Base64.encodeInteger(bigInteger0);
      assertEquals(24, byteArray7.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)88;
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.decodeInteger(byteArray0);
      int int0 = 199;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(199, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [X\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, false);
      String string0 = "";
      Base64.decodeBase64("");
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)26;
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray2, false, true, 810);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray0, 0, 702);
//      try { 
        base64_0.encode((Object) "FxoAewEAAA==");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)0;
      base64_0.readResults(byteArray0, 0, 0);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-115);
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("OxyN", string0);
      
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)28);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte)59;
      byteArray1[2] = (byte)28;
      byteArray1[3] = (byte) (-115);
      byteArray1[4] = (byte) (-115);
      byteArray1[5] = (byte)39;
      String string1 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("HDscjY0n\uFFFD\u0018", string1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)111, (byte)65, (byte)65, (byte)61}, byteArray1);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray2.length);
      
      base64_0.decode(byteArray0);
      int int0 = base64_0.readResults(byteArray0, 0, (byte)0);
      assertEquals((-1), int0);
      
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-96);
      String string0 = base64_0.encodeToString(byteArray3);
      assertEquals("oA", string0);
      
      boolean boolean0 = Base64.isBase64("oA");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-39);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.valueOf((-1L));
      bigInteger0.and(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.divide(bigInteger2);
      bigInteger0.pow(237);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = null;
      int int0 = (-1792);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.decodeBase64("nvm*5D(duE");
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 24, 22);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)16, (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte byte0 = (byte) (-21);
      Base64.isBase64((byte) (-21));
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(23, byteArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AA==]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray1);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)16;
      byteArray2[3] = (byte) (-103);
      byteArray2[4] = (byte) (-24);
      byteArray2[5] = (byte)24;
      byteArray2[6] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      assertEquals(14, byteArray3.length);
      
      Base64.isBase64("");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray4.length);
      
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte) (-24);
      byteArray5[1] = (byte)24;
      byteArray5[2] = (byte)0;
      byteArray5[3] = (byte)24;
      byteArray5[4] = (byte) (-24);
      byteArray5[5] = (byte)0;
      byteArray5[6] = (byte)16;
      byte[] byteArray6 = Base64.discardWhitespace(byteArray5);
      assertArrayEquals(new byte[] {(byte) (-24), (byte)24, (byte)0, (byte)24, (byte) (-24), (byte)0, (byte)16}, byteArray6);
      assertNotSame(byteArray6, byteArray5);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Base64 base64_0 = new Base64((-3533));
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, false);
      base64_0.avail();
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-51);
      byteArray0[0] = (byte) (-51);
      Base64 base64_0 = new Base64((-829), byteArray0, false);
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigInteger0.pow((byte) (-51));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative exponent
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(1, byteArray0, true);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (-493), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -493
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)33;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("mTMABlwFIQ==", string0);
      
      Base64.isBase64((byte)92);
      Base64 base64_0 = new Base64((byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.bitCount();
      bigInteger0.divide(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      boolean boolean0 = Base64.isBase64("I-52");
      assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      String string1 = Base64.encodeBase64URLSafeString(byteArray3);
      assertEquals("", string1);
      
      byte[] byteArray4 = base64_0.decode(byteArray2);
      byte[] byteArray5 = Base64.decodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray5);
      assertEquals(1, byteArray5.length);
      
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "I-52");
      Base64.isBase64((byte)0);
      Base64.encodeBase64(byteArray4, false);
      byte[] byteArray6 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray6);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-63);
      Base64 base64_0 = new Base64(1041, byteArray0);
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(0, byteArray1.length);
  }
}
