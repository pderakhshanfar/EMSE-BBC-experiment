/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:23:46 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8317, mockRandom0);
      bigInteger0.bitLength();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(7);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      String string0 = base64_0.encodeToString(byteArray2);
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-57), byteArray0, true);
      Object object0 = base64_0.decode((Object) "ECH:%h");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8255);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8255, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(64);
      base64_1.decode(byteArray1, 76, 906);
      base64_1.decode(byteArray0, 9, 906);
      base64_1.encode(byteArray0, 94, (-2310));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8255);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8255, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(64);
      base64_1.decode(byteArray1, 94, 64);
      base64_1.decode(byteArray0, 9, 905);
      base64_1.encode(byteArray0, 94, (-2310));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8261);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8261, mockRandom0);
      bigInteger0.bitLength();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(9);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(64);
      base64_1.decode(byteArray1, 94, 64);
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, 1034, 8261);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8261);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8261, mockRandom0);
      bigInteger0.bitLength();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(9);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(64);
      base64_1.decode(byteArray1, 94, 64);
      base64_1.decode(byteArray0, 9, 906);
      base64_1.encode(byteArray0, 94, (-2310));
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8256, mockRandom0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      bigInteger0.bitLength();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(9);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_1.decode(byteArray1, 76, 8256);
      base64_1.encode(byteArray0, 8256, 1);
      base64_1.readResults(byteArray1, 1369, 9);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8261, mockRandom0);
      bigInteger0.bitLength();
      int int0 = 1;
      mockRandom0.longs();
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int1 = 9;
      Base64 base64_0 = new Base64(9);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      String string0 = base64_0.encodeToString(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray3);
      base64_0.decode((Object) string0);
      byte[] byteArray4 = new byte[4];
      bigInteger0.abs();
      // Undeclared exception!
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8261);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8261, mockRandom0);
      bigInteger0.bitLength();
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(9);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      String string0 = base64_0.encodeToString(byteArray2);
      Base64.encodeInteger(bigInteger1);
      base64_0.decode((Object) string0);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, true, false, 8257);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8261, mockRandom0);
      bigInteger0.bitLength();
      bigInteger0.toString(1);
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(9);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8254, mockRandom0);
      bigInteger0.bitLength();
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(9);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      String string0 = base64_0.encodeToString(byteArray2);
      Base64.encodeInteger(bigInteger1);
      Base64.decodeBase64(string0);
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8256, mockRandom0);
      bigInteger0.bitLength();
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(9);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      String string0 = base64_0.encodeToString(byteArray2);
      Base64.encodeInteger(bigInteger1);
      Base64.decodeBase64(string0);
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Random.setNextRandom(167);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)51;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Random.setNextRandom((-1425));
      Base64 base64_0 = new Base64((byte)9, byteArray2);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8261, mockRandom0);
      bigInteger0.bitLength();
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(9);
      bigInteger1.multiply(bigInteger0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encodeToString(byteArray2);
      bigInteger0.setBit(8257);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8261, mockRandom0);
      bigInteger0.bitLength();
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(1804);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      bigInteger0.setBit(8257);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.encodeToString(byteArray2);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(1073741824, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8261, mockRandom0);
      bigInteger0.bitLength();
      bigInteger0.bitLength();
      bigInteger0.not();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(61);
      base64_0.encode(byteArray1, 1101, 101);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8261, mockRandom0);
      bigInteger0.bitLength();
      bigInteger0.bitLength();
      bigInteger0.not();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(1804);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.encodeToString(byteArray2);
      base64_0.encode(byteArray2, 8257, 8261);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 8261;
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8261, mockRandom0);
      bigInteger0.bitLength();
      bigInteger0.bitLength();
      bigInteger0.not();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(1804);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)7;
      byteArray2[1] = (byte)65;
      byteArray2[2] = (byte)5;
      byteArray2[3] = (byte)89;
      byteArray2[4] = (byte)31;
      byteArray2[5] = (byte)37;
      byteArray2[6] = (byte)116;
      byteArray2[7] = (byte)92;
      byteArray2[8] = (byte) (-20);
      base64_0.decode(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      Base64.encodeBase64Chunked(byteArray3);
      // Undeclared exception!
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8187);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(2512, mockRandom0);
      bigInteger0.bitLength();
      bigInteger0.bitLength();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.probablePrime(2512, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64((-1177));
      base64_0.encode(byteArray0);
      int int0 = (-1);
      Base64 base64_1 = new Base64((-1));
      base64_1.encodeToString(byteArray2);
      Base64 base64_2 = null;
//      try {
        base64_2 = new Base64(2505, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwA=]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0, false, false, 26);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 1, 2985);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 26
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true, true, 8192);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)17;
      Base64 base64_0 = new Base64(8192, byteArray1, true);
//      try { 
        base64_0.encode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextInt();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)34;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8242, mockRandom0);
      bigInteger0.bitLength();
      mockRandom0.doubles((long) 8242);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(8242, mockRandom0);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(8242);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)83;
      byteArray2[1] = (byte) (-47);
      byteArray2[2] = (byte) (-59);
      byteArray2[3] = (byte)31;
      byteArray2[4] = (byte)84;
      base64_0.decode(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      Random.setNextRandom(0);
      Base64.encodeBase64(byteArray3, false, false, 8241);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      Base64.isBase64(byteArray0);
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Random.setNextRandom(1961);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 2394;
      Base64 base64_0 = new Base64(2394, (byte[]) null, false);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      byte[] byteArray0 = Base64.decodeBase64("]");
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.decode((byte[]) null);
      Object object0 = base64_0.decode((Object) "]");
      base64_0.encode(object0);
      base64_0.avail();
      base64_0.decode((byte[]) null);
      base64_0.avail();
      base64_0.encode(byteArray0, 0, (-2372));
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, (-2372), 2394);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-1454), byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte) (-19);
      byteArray1[2] = (byte)23;
      byteArray1[3] = (byte)22;
      byteArray1[4] = (byte) (-68);
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-161), (-480));
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, (-480), (-480));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64.isBase64((byte)125);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(559, byteArray0);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Invalid signum value
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)105;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-56), (byte)38, (byte)105}, byteArray1);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.andNot(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.max(bigInteger1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1, 101);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("lineSeperatormustnotcontainbase64characters=", string0);
      
      Base64.encodeBase64(byteArray0);
      base64_1.decode(byteArray0, 76, (-1690));
      base64_0.hasData();
      Base64 base64_2 = new Base64((-1690));
      byte[] byteArray1 = base64_2.decode(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte)34, (byte)25, (byte)51, (byte) (-6), (byte) (-72), (byte) (-29), (byte)103, (byte) (-20)}, byteArray2);
      assertEquals(8, byteArray2.length);
      
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((short)222, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_2 = new Base64(false);
      base64_2.encodeToString(byteArray2);
//      try { 
        base64_1.decode((Object) base64_2);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.shortValueExact();
      bigInteger1.remainder(bigInteger0);
      bigInteger0.andNot(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 1);
      base64_0.decode(byteArray0, 1, 101);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_1.decode(byteArray0, 76, (-1690));
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("bGluZVNlcGVyYXRvcm11c3Rub3Rjb250YWluYmFzZTY0Y2hhcmFjdGVycz0=", string0);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      Base64.decodeBase64("");
      boolean boolean1 = Base64.isBase64((byte)61);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true, 76);
      base64_1.decode(byteArray3, 8, 8);
      Base64 base64_2 = new Base64();
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals("YkdsdVpWTmxjR1Z5WVhSdmNtMTFjM1J1YjNSamIyNTBZV2x1WW1GelpUWTBZMmhoY21GamRHVnljejA9lv8", string0);
      
      Base64.decodeBase64("JB\"iWJ!lm)y3Ogfg95");
      base64_2.decode(byteArray3, 101, (-2889));
      //  // Unstable assertion: assertEquals(44, byteArray1.length);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64 base64_0 = new Base64((-746));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-89);
      base64_0.decode(byteArray0, (-2134), (-1213));
      Object object0 = new Object();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      base64_1.encode(byteArray1, 1865, (-2722));
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)70, (byte)66, (byte)82, (byte)85, (byte)86, (byte)75, (byte)101, (byte)110, (byte) (-106), (byte) (-1)}, byteArray1);
      
      boolean boolean0 = base64_1.hasData();
      //  // Unstable assertion: assertTrue(base64_1.isUrlSafe());
      //  // Unstable assertion: assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)57);
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)125, bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertEquals(37, byteArray1.length);
      
      boolean boolean1 = Base64.isBase64((byte)115);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64 base64_2 = new Base64();
      base64_2.encode(byteArray0, 1, 16);
      assertEquals(32, byteArray0.length);
      
      byte[] byteArray1 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      assertEquals(32, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      Base64.decodeBase64((String) null);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      base64_0.decode((byte[]) null, 1247, (-1690));
      base64_0.encodeToString((byte[]) null);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      Base64 base64_2 = new Base64((-1));
      byte[] byteArray1 = base64_1.decode((byte[]) null);
      assertNull(byteArray1);
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)120;
      byteArray2[1] = (byte)111;
      byteArray2[2] = (byte)109;
      byteArray2[3] = (byte) (-93);
      byteArray2[4] = (byte) (-72);
      byteArray2[5] = (byte) (-3);
      byteArray2[6] = (byte)0;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertArrayEquals(new byte[] {(byte)120, (byte)111, (byte)109, (byte) (-93), (byte) (-72), (byte) (-3), (byte)0}, byteArray3);
      assertEquals(7, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.remainder(bigInteger0);
      bigInteger0.andNot(bigInteger1);
      Base64 base64_0 = new Base64(61);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)123;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 1, (int) (byte)123);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64((-202));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      base64_0.decode(byteArray0, 0, (-44));
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte)84;
      byteArray1[9] = (byte)84;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte) (-89);
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte)84;
      byteArray1[6] = (byte)84;
      Object object0 = new Object();
      Base64 base64_1 = new Base64(false);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-89);
      byteArray2[1] = (byte) (-89);
      byteArray2[2] = (byte)84;
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      assertArrayEquals(new byte[] {(byte)86, (byte)70, (byte)81, (byte)61}, byteArray3);
      
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte) (-89);
      byteArray4[1] = (byte)84;
      byteArray4[2] = (byte)84;
      byteArray4[3] = (byte)45;
      byteArray4[4] = (byte) (-89);
      byteArray4[5] = (byte)84;
      byteArray4[6] = (byte)84;
      base64_1.encode(byteArray4, (-202), (-2722));
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[23];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_1 = new Base64(76);
      base64_1.decode(byteArray1, (int) (byte)0, 1240);
      //  // Unstable assertion: assertEquals(32, byteArray1.length);
      
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      String string0 = base64_1.encodeToString(byteArray2);
      //  // Unstable assertion: assertEquals("AAAAAAAAAAA=\uFFFD\uFFFD", string0);
      
      boolean boolean0 = base64_1.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_2 = new Base64((byte)0);
      byte[] byteArray3 = base64_2.decode(byteArray2);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
      //  // Unstable assertion: assertEquals(3, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64((-202));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-89);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 1, 278);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      boolean boolean0 = Base64.isBase64("-Bq{ZN\"");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(114, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(42, byteArray1.length);
      
      base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)31;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertEquals(37, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      Base64 base64_2 = new Base64();
      Object object0 = base64_1.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      assertSame(object1, object0);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)89;
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64.isBase64((byte) (-48));
      Random.setNextRandom((byte) (-48));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)9;
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)7, (byte)80}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 2846);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("");
      Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray1, (-202), (-202));
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64 base64_1 = new Base64(829, byteArray2, false);
      Base64.encodeBase64String(byteArray2);
      base64_1.encodeToString(byteArray1);
      base64_0.hasData();
      byte[] byteArray3 = new byte[0];
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      Base64.encodeBase64(byteArray4, false, false);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64((String) null);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[18];
      byteArray0[4] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 1329);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 18
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)80;
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)105;
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64(byteArray0, true, true, 8189);
      Random.setNextRandom(5);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString((byte[]) null);
      base64_0.avail();
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)7;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-100);
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-125);
      Base64.encodeBase64URLSafe(byteArray1);
      byteArray1[3] = (byte)114;
      base64_0.encode(byteArray1, 0, (int) (byte) (-100));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64.decodeBase64("|n'=|jy<");
      Base64.isBase64("|n'=|jy<");
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(654, (byte[]) null);
      base64_0.readResults((byte[]) null, 654, 654);
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      Base64.encodeBase64(byteArray0, true);
      byteArray0[2] = (byte)72;
      Base64.decodeInteger(byteArray0);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)40;
      base64_0.decode(byteArray0);
      base64_0.decode("org.apache.commons.codec.binary.Base64");
      base64_0.avail();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte) (-29);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger2);
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("|n'=|jy<");
      Base64.isBase64("|n'=|jy<");
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1, 0, 0);
      base64_0.encodeToString(byteArray0);
      bigInteger0.longValueExact();
      Base64.isBase64(byteArray1);
      base64_0.readResults(byteArray0, 0, 105);
      Base64.decodeBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, false);
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)34;
      byteArray2[1] = (byte)52;
      byteArray2[2] = (byte) (-69);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, false, true, (-1280));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1280
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)105;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)127;
      byteArray2[1] = (byte)7;
      byteArray2[2] = (byte)80;
      byteArray2[3] = (byte)105;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      assertArrayEquals(new byte[] {(byte)62}, byteArray3);
      
      byteArray2[4] = (byte) (-41);
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("fwdQadc=\r\n", string0);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)7, (byte)80, (byte) (-41), (byte)127, (byte)46, (byte)105}, byteArray1);
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray4.length);
      
      Base64.encodeBase64String(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(byteArray0, (-1), (-7));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)24;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (-554), (-30));
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte byte0 = (byte)0;
      Base64.encodeBase64((byte[]) null, true, true, (int) (byte)0);
      Base64 base64_0 = new Base64(10, (byte[]) null, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte1 = (byte)101;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.encodeBase64(byteArray0, false);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.intValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.mod(bigInteger1);
      byte byte0 = (byte) (-1);
      Base64.isBase64((byte) (-1));
      Base64 base64_1 = new Base64(false);
      base64_1.hasData();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, (-553));
      Base64.isBase64((byte)0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false, 76);
      base64_0.decode("KDtxq{}iD");
      Base64.encodeBase64(byteArray3, true, true);
      base64_1.encodeToString(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      int int0 = 1840700269;
      Base64 base64_2 = new Base64(1840700269, byteArray1, true);
      base64_2.avail();
      base64_1.encodeToString(byteArray1);
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray3, (int) (byte)0, 1486);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-89);
      boolean boolean0 = false;
      Base64 base64_1 = new Base64(0, byteArray0, false);
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray0, 0, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("|n'=|jy<");
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode("");
      Base64.encodeBase64(byteArray0, false);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte) (-35), 100);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -35
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64((-202));
      byte[] byteArray0 = new byte[2];
      Base64.decodeInteger(byteArray0);
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-89);
      base64_0.decode(byteArray0, 0, (-1));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte) (-89);
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte)84;
      byteArray1[6] = (byte)84;
      byteArray1[7] = (byte) (-27);
      byteArray1[8] = (byte)84;
      Base64.encodeBase64(byteArray1, true, false);
      Object object0 = base64_0.decode((Object) "|JQ D2M ");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(122, (byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, (int) (byte)84, (int) (byte)84);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray0, false, false, 84);
//      try { 
        base64_0.encode((Object) "sFRUVFRUVA==");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.remainder(bigInteger0);
      bigInteger0.andNot(bigInteger1);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 101);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64((-202));
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)84;
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-89);
      Base64 base64_1 = new Base64((-1647));
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_1.readResults(byteArray1, 76, (-1));
      base64_1.encode(byteArray1);
//      try { 
        base64_1.decode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64("");
      base64_0.isUrlSafe();
      Base64.isBase64("");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)16;
      base64_0.decode(byteArray1, (int) (byte)34, (-1));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte byte0 = (byte)84;
      Base64.isBase64((byte)84);
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(4578, (byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 107, 4016);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString((-1494));
      bigInteger0.bitCount();
      bigInteger0.toString(0);
      bigInteger0.intValue();
      bigInteger0.toString();
      bigInteger0.bitLength();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.intValueExact();
      bigInteger0.mod(bigInteger1);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 64);
      Base64.isBase64((byte) (-6));
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, false, 76);
      byte[] byteArray4 = base64_0.decode("0");
      Base64.encodeBase64(byteArray4, false, false);
      base64_0.encodeToString(byteArray1);
      Base64.isArrayByteBase64(byteArray2);
      base64_0.avail();
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)0;
      base64_0.encodeToString(byteArray5);
      base64_0.encode(byteArray3, 0, 0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.isBase64("<]Se^=,");
      base64_0.decode((Object) "<]Se^=,");
      Base64.isBase64("<]Se^=,");
      Base64.encodeBase64((byte[]) null, false, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.flipBit(76);
      bigInteger0.signum();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString((byte[]) null);
      base64_0.isUrlSafe();
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray1);
      base64_0.hasData();
      base64_0.decode(byteArray0, (-92), 0);
      Base64.decodeInteger(byteArray0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1, 0, 0);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      base64_0.avail();
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      String string0 = "uw";
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      base64_0.decode(byteArray0, 2180, (-3008));
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[3] = (byte)25;
      Base64.encodeBase64URLSafe(byteArray1);
      byteArray0[4] = (byte)0;
      base64_0.readResults(byteArray0, (byte)1, (byte) (-97));
      boolean boolean1 = true;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte) (-16));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of -16
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)109;
      byteArray0[0] = (byte)109;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64.isBase64(byteArray1);
      int int0 = 82;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(82, byteArray2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [bQ==]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.clearBit(0);
      bigInteger0.min(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      base64_0.hasData();
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      base64_0.readResults(byteArray0, 49, (byte)1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      boolean boolean0 = false;
      int int0 = 0;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)70;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.compareTo(bigInteger0);
      bigInteger1.toString(0);
      bigInteger0.toString();
      bigInteger1.equals("4422");
      bigInteger1.max(bigInteger0);
      bigInteger1.signum();
      bigInteger1.subtract(bigInteger0);
      bigInteger0.compareTo(bigInteger1);
      bigInteger0.not();
      bigInteger1.shortValueExact();
      bigInteger1.bitLength();
      bigInteger1.setBit((byte)17);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      base64_0.encodeToString(byteArray1);
      base64_0.isUrlSafe();
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      base64_0.readResults(byteArray2, 654, 0);
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      Base64.isArrayByteBase64(byteArray3);
      Base64.encodeBase64(byteArray4);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.remainder(bigInteger0);
      bigInteger0.andNot(bigInteger1);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1221);
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray0, (-1731), (-1731));
      base64_0.encode(byteArray0);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)115);
      Base64 base64_0 = new Base64((-814), byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)115;
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte)60;
      byteArray1[4] = (byte)60;
      byteArray1[5] = (byte)60;
      base64_0.readResults(byteArray0, (byte)115, (byte)60);
      base64_0.decode((String) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      byteArray1[6] = (byte)60;
      base64_0.encodeToString(byteArray1);
      base64_0.isUrlSafe();
      Base64.isBase64("PA==");
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-40);
      byteArray0[0] = (byte) (-40);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte) (-40), byteArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [2A==]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)76;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-932), byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\u0000G\u0000\u0000L]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-82);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64((-202));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-89);
      base64_0.decode(byteArray0, 0, (-1));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte) (-89);
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte)84;
      byteArray1[6] = (byte)84;
      byteArray1[7] = (byte) (-27);
      byteArray1[8] = (byte)84;
      Base64.encodeBase64(byteArray1, true, false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("|n'=|jy<");
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)40;
      base64_0.decode(byteArray0);
      base64_0.decode("org.apache.commons.codec.binary.Base64");
      base64_0.avail();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.divideAndRemainder(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64(false);
      int int0 = (-128);
      Base64.encodeBase64((byte[]) null, false, false, (-128));
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)54;
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)21;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64(0);
      base64_0.decode(byteArray1);
      base64_0.decode("");
      Base64.decodeBase64("AABCABU");
//      try { 
        base64_0.encode((Object) "AABCABU");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)81;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)0;
      byte byte0 = (byte)70;
      byteArray0[7] = (byte)70;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)0, byteArray1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AC4zmQAfAEY]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)58;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[0];
      int int0 = 1918;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 1356, 1918);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1356
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }
}
