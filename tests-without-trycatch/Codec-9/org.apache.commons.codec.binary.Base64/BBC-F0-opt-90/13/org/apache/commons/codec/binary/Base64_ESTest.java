/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 10:56:13 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8244, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8244, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(8244);
      int int0 = Base64.PEM_CHUNK_SIZE;
      bigInteger1.xor(bigInteger0);
      base64_0.decode(byteArray0, 379, 379);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1817, 87);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1817
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(30);
      Base64 base64_1 = new Base64();
      base64_1.encode((byte[]) null);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.add(bigInteger1);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, 88);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (1872) than the specified maxium size of 88
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8244, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8244, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      mockRandom0.nextInt(8244);
      Base64 base64_0 = new Base64(8244);
      base64_0.readResults(byteArray0, 8244, 8244);
      base64_0.decode(byteArray0, 64, 64);
      base64_0.encode(byteArray0, 87, (-3294));
      base64_0.avail();
      Base64.isBase64((byte)60);
      base64_0.encode(byteArray0, 52, 1961);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(91);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 8192);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.decodeBase64("6jU}?dWryD.;N/");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(90);
      BigInteger bigInteger1 = BigInteger.TEN;
      base64_0.decode(byteArray0);
      bigInteger1.shortValueExact();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 8192);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)115;
      byteArray4[1] = (byte)2;
      byteArray4[2] = (byte)5;
      byteArray4[3] = (byte)94;
      byteArray4[4] = (byte)20;
      byteArray4[5] = (byte)97;
      byteArray4[6] = (byte)19;
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(92);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.shortValueExact();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 8192);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      byte[] byteArray4 = base64_0.encode(byteArray1);
      // Undeclared exception!
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64 base64_0 = new Base64(8192);
      bigInteger0.not();
      base64_0.encode(byteArray0, 121, 121);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-75);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte)122;
      base64_0.encode(byteArray1, (int) (byte) (-80), (int) (byte) (-75));
      Base64.decodeInteger(byteArray1);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64 base64_0 = new Base64(8192);
      bigInteger0.not();
      base64_0.encode(byteArray0, 86, 86);
      byte[] byteArray1 = new byte[4];
      Base64.isBase64("=<|~f8K|~r");
      byteArray1[0] = (byte) (-75);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)1;
      base64_0.encode(byteArray1, (int) (byte) (-80), (int) (byte) (-75));
      Base64.isBase64(byteArray1);
      Base64.encodeInteger(bigInteger1);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64 base64_0 = new Base64(8192);
      bigInteger0.not();
      base64_0.encode(byteArray0, 86, 86);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-75);
      Base64.isBase64(byteArray1);
      base64_0.readResults(byteArray0, 164, 86);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64 base64_0 = new Base64(8192);
      bigInteger0.not();
      base64_0.encode(byteArray0, 86, 86);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-75);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)1;
      base64_0.encode(byteArray1, (int) (byte) (-80), (int) (byte) (-75));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = Integer.MAX_VALUE;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(Integer.MAX_VALUE, mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(46L);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      mockRandom0.setSeed(8192);
      MockRandom mockRandom1 = new MockRandom();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-3);
      Base64.encodeBase64URLSafe(byteArray0);
      MockRandom mockRandom0 = new MockRandom(46L);
      BigInteger bigInteger0 = new BigInteger(1192, mockRandom0);
      mockRandom0.nextGaussian();
      mockRandom0.ints((long) (byte)0, (-845), (int) (byte)0);
      bigInteger0.bitLength();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte) (-3));
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 0, 2183);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 196
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)39;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)50);
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
//      try { 
        base64_1.encode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-79);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)6);
      assertArrayEquals(new byte[] {(byte)66, (byte)112, (byte)87, (byte)120}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 0, 64);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-20), (byte) (-24)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)91;
      Base64 base64_0 = new Base64(16, byteArray0);
      Base64 base64_1 = new Base64(true);
      base64_1.readResults(byteArray0, (-1), 94);
      assertTrue(base64_1.isUrlSafe());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(28, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shortValueExact();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte) (-82);
      Base64.discardWhitespace(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)20);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[4];
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)13;
      base64_0.encode(byteArray1, (int) (byte)114, (-1));
      Base64.decodeInteger(byteArray0);
      base64_0.decode((byte[]) null, (int) (byte)122, (-1));
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, (byte)120, (byte)13);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.bitCount();
      Base64.isBase64("l{3ur=&oovJ");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte) (-5);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-51);
      byteArray1[5] = (byte)11;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, byteArray1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [A\u0006\uFFFD\u0000\uFFFD\u000B]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, 66);
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)126;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte)33, byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)1, 709);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-1);
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.or(bigInteger1);
      Base64.isBase64("32x2LGTMa'D/,");
      Base64.isBase64((byte)125);
      Base64 base64_1 = new Base64(true);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.isBase64((byte)1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_1 = new Base64((byte)1);
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray1, (int) (byte)1, 76);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 14
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[8];
      byte byte0 = (byte)77;
      byteArray1[0] = (byte)77;
      byte byte1 = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)79;
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte) (-111);
      byteArray1[5] = (byte) (-1);
      byte byte2 = (byte)1;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)121;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, (int) (byte)1, 175);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      Base64.isBase64((byte)12);
      byte[] byteArray1 = Base64.decodeBase64("UTF-8");
      Base64.encodeBase64(byteArray1, true, false);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)12;
      byteArray2[1] = (byte)12;
      Base64 base64_0 = new Base64((byte)12, byteArray2, true);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 1, 66);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(4);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, 4, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)120;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.max(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.or(bigInteger2);
      Base64.isBase64("");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)120;
      Base64.encodeBase64URLSafe(byteArray1);
      MockRandom mockRandom0 = new MockRandom(46L);
      BigInteger bigInteger3 = new BigInteger(1172, mockRandom0);
      bigInteger3.toByteArray();
      mockRandom0.ints((long) (byte)7, (-845), (int) (byte)120);
      Base64.encodeInteger(bigInteger3);
      Base64.toIntegerBytes(bigInteger3);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64((byte[]) null, true, true);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64("C'");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      Base64.decodeBase64("k0ZRXePi{2Uwe$H]");
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)120;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-74);
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte)120;
      byteArray1[4] = (byte)120;
      byteArray1[5] = (byte)120;
      byteArray1[6] = (byte)120;
      byteArray1[7] = (byte)1;
      Base64.decodeInteger(byteArray1);
      byteArray0[2] = (byte)7;
      byte[] byteArray2 = new byte[0];
      base64_0.encode(byteArray2);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)120;
      Base64.encodeBase64(byteArray2, true, false);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      Base64.isBase64(":(7s6K4'i9!'^");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeInteger(bigInteger2);
      Base64.toIntegerBytes(bigInteger2);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)120;
      Base64.decodeBase64("Fej|Ct;oW.{2ho");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)7;
      Base64.encodeBase64(byteArray1, true, true);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, 66);
      base64_0.encode(byteArray0, 2908, (-2757));
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)64;
      byteArray2[3] = (byte) (-1);
      Base64.encodeBase64(byteArray2, false, false);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64.isBase64((byte)12);
      Base64 base64_0 = new Base64(false);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      Object object1 = base64_0.decode(object0);
      base64_0.decode(object1);
      Object object2 = base64_0.encode(object0);
      base64_0.encode(object2);
      base64_0.decode(object0);
      base64_0.decode(object1);
      byte[] byteArray0 = new byte[0];
      Base64 base64_1 = new Base64(76, byteArray0);
      // Undeclared exception!
//      try { 
        base64_1.encode(object1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      Base64.isBase64((byte)12);
      Base64 base64_0 = new Base64(true);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      base64_0.decode(object2);
      base64_0.decode(object1);
      Base64 base64_1 = new Base64((-106), byteArray0);
      Object object3 = base64_1.encode(object2);
      base64_1.encode(object3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_0 = new Base64(1);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)7;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray1);
      byteArray0[3] = (byte) (-30);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray1, (int) (byte)120, (int) (byte) (-13));
      base64_0.encode(byteArray2, (-2315), (int) (byte)120);
      byte[] byteArray3 = new byte[15];
      byteArray3[0] = (byte)7;
      byteArray3[1] = (byte)7;
      byteArray3[2] = (byte) (-13);
      byteArray3[3] = (byte)0;
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.isBase64(byteArray1);
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64((-3720), byteArray0);
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(76, (-1), mockRandom0);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger1.or(bigInteger2);
      bigInteger1.mod(bigInteger0);
      Base64.isBase64("");
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray1);
      Base64.discardWhitespace(byteArray0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64.isBase64((byte) (-37));
      byte[] byteArray0 = new byte[5];
      base64_0.readResults(byteArray0, (byte) (-37), (byte) (-37));
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-37);
      base64_0.encode(byteArray0, (int) (byte)96, (-993));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.hasData();
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64((byte)121);
      Random.setNextRandom((byte) (-37));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      BigInteger.valueOf(2110L);
      byte byte0 = (byte)0;
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
//      try { 
        base64_1.decode((byte[]) null, 76, 64);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-37);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-37);
      byteArray1[1] = (byte) (-37);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64((byte) (-37), byteArray1);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1350, (byte[]) null);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      base64_0.decode(byteArray2);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray2, 1350, 1350);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1350
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)121;
      byteArray0[0] = (byte)121;
      byte byte1 = (byte)62;
      base64_0.encodeToString((byte[]) null);
      byteArray0[1] = (byte)62;
      byte byte2 = (byte)29;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64((String) null);
      byteArray0[2] = (byte)29;
      base64_0.decode(byteArray0);
      Base64.isBase64((byte)121);
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)73;
      byteArray0[0] = (byte)73;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64.isBase64((byte)73);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64((byte) (-1));
      Base64.encodeBase64(byteArray1, false, true);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 60);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)7;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[1];
      base64_0.encode(byteArray1);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)106;
      base64_0.readResults(byteArray0, 1, 0);
      Base64.isBase64("AHgHAAAA");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, (-2758), 75);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, true, 69);
      base64_0.encode(byteArray2, (int) (byte) (-30), (-1));
      Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeBase64("^VQ35d0kA\"/");
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(123, (byte[]) null);
      base64_0.encode((byte[]) null);
      int int0 = 39;
      Base64.encodeBase64String((byte[]) null);
//      try { 
        base64_0.encode((Object) "kw|u|cRPH[bE!");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      base64_0.encode((byte[]) null);
      base64_0.decode((Object) "kw|u|cRPH[bE!");
      Object object0 = base64_0.decode((Object) "kw|u|cRPH[bE!");
      base64_0.decode(object0);
      Base64 base64_1 = new Base64(39);
      // Undeclared exception!
//      try { 
        base64_1.decode((byte[]) null, 39, 64);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)7;
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)106;
      base64_0.readResults(byteArray0, 1, 0);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.isUrlSafe();
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byte[] byteArray1 = new byte[0];
      base64_0.readResults(byteArray1, (byte) (-15), 101);
      Base64.isBase64("");
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, (-170), (byte)0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2, true, true, 64);
      Base64.decodeInteger(byteArray3);
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte) (-70);
      Base64.encodeBase64(byteArray0, false, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)7;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1);
      byteArray0[3] = (byte) (-30);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray1, (int) (byte)120, (int) (byte) (-13));
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64.isBase64((byte) (-37));
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)7;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)106;
      base64_0.readResults(byteArray0, 1, 0);
      Base64.isBase64("AHgHAAAA");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, (-2758), 75);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, true, 69);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64String(byteArray4);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-1);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      base64_0.decode(byteArray1);
      Base64.isBase64((byte)0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.encode((byte[]) null);
      base64_0.readResults((byte[]) null, 0, (-561));
      Base64.isBase64("kM$^DUL$Y");
      base64_0.readResults((byte[]) null, 1, 77);
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      base64_0.decode(byteArray0, (-1105), (-1));
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = base64_1.encode(byteArray0);
      Base64 base64_2 = new Base64();
      Base64.encodeBase64(byteArray1, true, false);
      base64_2.readResults(byteArray0, (-23), (byte)120);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      bigInteger0.isProbablePrime(2497);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.signum();
      base64_0.decode(byteArray0, 1415, (-23));
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, true, false, (int) (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray0, 84, 8174);
      byte[] byteArray1 = new byte[5];
      Base64.encodeBase64(byteArray1);
      base64_0.readResults(byteArray0, 98, 1);
      Base64.isBase64((byte)0);
      base64_0.encode(byteArray1, 33, 0);
      base64_0.readResults(byteArray0, (-4531), (-1084));
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0, false);
      base64_0.isUrlSafe();
      base64_0.avail();
      base64_0.decode("AAAAAAA");
      Random.setNextRandom(1296);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64.isBase64((byte) (-37));
      byte[] byteArray0 = new byte[5];
      base64_0.readResults(byteArray0, (byte) (-37), (byte) (-37));
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-37);
      base64_0.encode(byteArray0, (int) (byte)96, (-993));
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64.encodeBase64(byteArray0, true, false);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64.isBase64((byte) (-37));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-37);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-37);
      byteArray1[1] = (byte) (-37);
      byteArray1[2] = (byte)96;
      byteArray1[3] = (byte) (-37);
      byteArray1[4] = (byte) (-37);
      byteArray1[5] = (byte) (-37);
      byteArray1[6] = (byte) (-51);
      byteArray1[7] = (byte) (-37);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      base64_0.hasData();
      base64_0.encode(byteArray3, 1, (int) (byte) (-37));
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)24;
      byteArray4[1] = (byte) (-37);
      byteArray4[2] = (byte) (-37);
      byteArray4[3] = (byte) (-37);
      byteArray4[4] = (byte)24;
      byteArray4[5] = (byte)96;
      byteArray4[6] = (byte) (-51);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray4, (byte)96, (byte) (-37));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-27);
      byteArray0[8] = (byte)0;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[2];
      base64_0.decode(byteArray1);
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.readResults(byteArray1, 0, (-1249));
      base64_0.decode("");
      base64_0.avail();
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray2, (int) (byte) (-108), 43);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -108
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.add(bigInteger0);
      bigInteger1.bitCount();
      bigInteger0.negate();
      bigInteger1.doubleValue();
      bigInteger1.toString();
      bigInteger1.xor(bigInteger0);
      bigInteger1.floatValue();
      bigInteger1.mod(bigInteger0);
      bigInteger0.or(bigInteger1);
      bigInteger0.shiftLeft(0);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.add(bigInteger2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.bitCount();
      bigInteger0.shiftLeft((-1));
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(24, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AQ==]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte byte0 = (byte) (-1);
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byte byte1 = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      int int0 = (-143);
      Base64.decodeInteger(byteArray0);
      int int1 = (-1937);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64.isBase64((byte) (-14));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-14);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(396, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [g\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64(byteArray1, true);
      Object object0 = base64_1.decode((Object) "");
      base64_0.decode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(object0);
      base64_0.isUrlSafe();
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false, false);
      base64_0.decode((byte[]) null);
      int int0 = (-302);
      base64_0.decode((byte[]) null, 0, (-302));
      base64_0.encode((byte[]) null);
      base64_0.readResults((byte[]) null, (-3246), 0);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)7;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)106;
      base64_0.readResults(byteArray0, 1, 0);
      Base64.isBase64("AHgHAAAA");
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      
      base64_0.readResults(byteArray0, (-2758), 75);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, false, false, (int) (byte)7);
      Base64.decodeInteger(byteArray3);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte) (-15);
      String string0 = Base64.encodeBase64String(byteArray4);
      assertEquals("8Q==", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)99;
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("YxUqJ~w4sj~]");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray2, false);
      int int0 = 4168;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 109);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true, true);
      int int0 = (-2956);
      Base64 base64_0 = new Base64((-2956), (byte[]) null, false);
      base64_0.decode((byte[]) null, (-2956), (-2956));
      Base64.encodeBase64((byte[]) null, true, false, 76);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64(921);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-101);
      Base64.decodeBase64(byteArray0);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-63);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)122, (byte) (-101), (byte)77, (byte)0, (byte)1, (byte)0, (byte) (-63)}, byteArray0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)27;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)27;
      byteArray2[1] = (byte)12;
      byteArray2[2] = (byte)12;
      Base64.isBase64(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_0 = new Base64((-3720), byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.or(bigInteger0);
      bigInteger0.mod(bigInteger1);
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray4.length);
      
      Base64.isBase64((byte)12);
      Base64.encodeBase64(byteArray2, false);
      base64_0.decode("");
      base64_0.readResults(byteArray3, (byte)12, 2316);
      base64_0.hasData();
      base64_0.isUrlSafe();
      byte[] byteArray5 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte)68, (byte)66, (byte)115}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.signum();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.isProbablePrime((-701));
      int int0 = (-1);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigInteger0.modInverse(bigInteger1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger: modulus not positive
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(0, (byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      bigInteger0.doubleValue();
      Base64.encodeInteger(bigInteger0);
      bigInteger2.modPow(bigInteger0, bigInteger1);
      bigInteger2.longValue();
      bigInteger2.longValueExact();
      bigInteger2.shiftLeft(76);
      bigInteger0.divideAndRemainder(bigInteger1);
      int int0 = 78;
      Base64.encodeInteger(bigInteger2);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 78, 78);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)26;
      Base64.encodeBase64(byteArray0);
      byte byte0 = (byte) (-104);
      Base64.encodeBase64URLSafeString(byteArray0);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      
      byteArray0[1] = (byte)62;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      byteArray0[2] = (byte)29;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64((byte)121);
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)20;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)66, (byte)81, (byte)61}, byteArray4);
      
      Object object0 = base64_0.decode((Object) "ABQ=");
      base64_0.decode(object0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray1, false, true, 64);
      base64_0.encodeToString(byteArray1);
      base64_0.decode(byteArray0);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-52);
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)64;
      byte byte1 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray2, 1, 66);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 16
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      base64_0.encode((byte[]) null);
      Object object0 = base64_0.decode((Object) "kw|u|cRPH[bE!");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object1, object0);
      
      base64_0.decode((byte[]) null, 39, 0);
      base64_0.encodeToString((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      Base64 base64_0 = new Base64(2299, byteArray0);
      Base64 base64_1 = new Base64(2299, byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray0, 2299, 0);
//      try { 
        base64_1.decode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode((byte[]) null, (-1763), (-1));
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64(10);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte) (-78);
      byteArray0[8] = (byte)95;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64.isBase64((byte) (-37));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte) (-37);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-37);
      Base64.discardWhitespace(byteArray1);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)7;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray1, true);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
//      try { 
        base64_0.encode((Object) "]");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-3292), byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.decode((Object) "");
      Base64.encodeBase64(byteArray0, true, false, 64);
      base64_0.readResults(byteArray0, 4, 1222);
      base64_0.readResults(byteArray0, (-3292), (-3292));
      Base64.isBase64((byte) (-1));
      Base64.isBase64((byte) (-1));
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1);
      Base64.isBase64("");
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte) (-10);
      byteArray0[8] = (byte)102;
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, false, false);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (-990), (int) (byte)35);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -990
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-119);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(4, (byte[]) null);
      Base64.isBase64("");
      byte[] byteArray1 = base64_0.decode("");
      base64_0.decode(byteArray1, (int) (byte)120, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)77;
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(true);
      Object object0 = new Object();
//      try { 
        base64_1.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("_wAjVAA", string0);
      
      base64_0.readResults(byteArray0, 79, (-4573));
      Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray0, (byte) (-1), (-1084));
      Base64.isBase64((byte)35);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)35;
      byteArray1[6] = (byte) (-1);
      base64_0.readResults(byteArray1, (byte)84, (byte)0);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0, false);
      base64_0.isUrlSafe();
      base64_0.avail();
      byte[] byteArray2 = base64_0.decode("VR>");
      assertArrayEquals(new byte[] {(byte)85}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }
}
