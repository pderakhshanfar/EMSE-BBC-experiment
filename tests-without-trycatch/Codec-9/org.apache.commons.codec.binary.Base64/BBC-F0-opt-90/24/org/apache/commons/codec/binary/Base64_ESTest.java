/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:11:22 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[8];
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8286, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      bigInteger0.equals(base64_0);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[8];
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8286, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray2, 76, 64);
      base64_1.encode(byteArray2, 637, (-852));
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 23, 23);
      Base64.isBase64(byteArray1);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertFalse(boolean0);
      
      base64_0.encode(byteArray1, 23, (-1));
      assertEquals(42, byteArray1.length);
      assertEquals(28, byteArray0.length);
      
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[8];
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8216, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      BigInteger bigInteger1 = BigInteger.TEN;
      base64_0.decode(byteArray4);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, true, true, 8216);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[8];
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8250, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeInteger(byteArray4);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[2];
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8186, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextGaussian();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      mockRandom0.nextLong();
      base64_0.decode(byteArray3);
      Base64.decodeInteger(byteArray4);
      base64_0.decode(byteArray2);
      // Undeclared exception!
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[2];
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8186, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextGaussian();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[5];
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8168, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8168, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      // Undeclared exception!
      base64_0.encodeToString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)101;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((-861), byteArray1, false);
      Object object0 = base64_0.decode((Object) "pIFl");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, false, true, 11);
      base64_0.encode((byte[]) null, (-943), (-943));
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, 3461, (-943));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)85;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)10);
      assertArrayEquals(new byte[] {(byte)81, (byte)66, (byte)107, (byte)75, (byte)67, (byte)108, (byte)85}, byteArray1);
      
      boolean boolean0 = Base64.isBase64((byte)93);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("YjNKbllYQmhZMmhsWTI5dGJXOXVjMk52WkdWalltbHVZWEo1VTNSeWFXNW5WWFJwYkdjOVBRQ1M=", string0);
      
      Base64 base64_0 = new Base64(6, byteArray3);
      base64_0.encode(byteArray1, 6, 6);
      Base64.encodeBase64(byteArray3, false, false);
      base64_0.encodeToString(byteArray1);
      String string1 = base64_0.encodeToString(byteArray2);
      //  // Unstable assertion: assertEquals("YjNK\u02BA\uFFFD)bllY\u02BA\uFFFD)QmhZ\u02BA\uFFFD)Mmhs\u02BA\uFFFD)WTI5\u02BA\uFFFD)dGJX\u02BA\uFFFD)OXVj\u02BA\uFFFD)Mk52\u02BA\uFFFD)WkdW\u02BA\uFFFD)allt\u02BA\uFFFD)bHVZ\u02BA\uFFFD)WEo1\u02BA\uFFFD)VTNS\u02BA\uFFFD)eWFX\u02BA\uFFFD)NW5W\u02BA\uFFFD)WFJw\u02BA\uFFFD)Ykdj\u02BA\uFFFD)OVBR\u02BA\uFFFD)Q1M=\u02BA\uFFFD)", string1);
      
      base64_0.decode((Object) ": ");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-54), (byte) (-70), (byte) (-93), (byte)41}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte) (-9);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-7);
      byteArray1[1] = (byte) (-9);
      byteArray1[2] = (byte) (-9);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64(24, byteArray2);
      byte[] byteArray3 = new byte[20];
      byteArray3[0] = (byte) (-110);
      byteArray3[1] = (byte) (-7);
      byteArray3[2] = (byte) (-7);
      byteArray3[3] = (byte) (-7);
      byteArray3[4] = (byte) (-9);
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte) (-7);
      byteArray3[7] = (byte)112;
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1081, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)19;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-79);
      byteArray1[3] = (byte) (-48);
      byteArray1[4] = (byte) (-111);
      byteArray1[5] = (byte)9;
      byteArray1[6] = (byte)55;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 1, 1);
      base64_0.decode(byteArray0, 1, (-1617));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray0, (-1241), (-1241));
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray1, 4808, 4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray1, 20, 20);
      assertEquals(42, byteArray1.length);
      
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Base64 base64_0 = new Base64(1073741824, byteArray3, true);
      Base64.encodeBase64(byteArray2, true, false);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray3, 3577, 464);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3577
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      int int0 = 20;
      base64_0.decode(byteArray1, 20, 20);
//      try { 
        base64_0.encode((Object) "org.apache.commons.codec.binary.StringUtils");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)79;
      byteArray0[7] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input arrag too bi, the output array wouldbefbigger (");
      byte[] byteArray1 = new byte[8];
      byteArray1[1] = (byte)110;
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)110);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 32
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)96;
      byteArray0[8] = (byte) (-60);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte) (-61));
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too bi, the output array wouldGbefbigger (");
      byte[] byteArray1 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray1[1] = (byte)110;
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)110);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 33
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64(5);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        base64_1.decode((byte[]) null, (-1131), 6133);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((String) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-113);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64String(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64.decodeBase64("");
      byte[] byteArray0 = Base64.decodeBase64("Input array too bi, the output array wouldGbefbigger (");
      byte[] byteArray1 = new byte[8];
      byteArray1[4] = (byte)2;
      byteArray1[1] = (byte)2;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (int) (byte)2, (int) (byte)2);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(5);
      base64_0.encode(byteArray0, 6133, (-1));
      int int0 = Base64.MIME_CHUNK_SIZE;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte)63;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)35;
      byteArray1[7] = (byte)66;
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-63);
      byteArray2[1] = (byte)21;
      byteArray2[2] = (byte)15;
      Base64.decodeInteger(byteArray1);
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64String(byteArray2);
      Base64.decodeBase64(byteArray2);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)124;
      byte[] byteArray1 = Base64.decodeBase64("`z|w&Q0e");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64String(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64(byteArray2, false);
      Base64.isBase64((byte)124);
      Base64 base64_0 = new Base64(true);
      base64_0.decode("endRMA==");
      Base64.encodeBase64(byteArray2, false, false, 17);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)124;
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      base64_0.decode(object0);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_1 = new Base64(true);
      base64_1.decode((Object) "");
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-47);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)1;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(true);
      base64_0.decode((Object) "AAAAAAAAAA");
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64("AAAAAAAAAA");
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      Base64.encodeInteger(bigInteger0);
      base64_1.isUrlSafe();
      base64_0.decode(byteArray2, 64, 64);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      byte byte0 = (byte)0;
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = new byte[8];
      byteArray1[4] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(10, byteArray2, false);
      base64_0.decode(byteArray2, 2066, (int) (byte) (-1));
      Base64 base64_1 = new Base64();
      base64_0.encodeToString(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      Base64.encodeBase64(byteArray0, false, false, 93);
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte)124;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeBase64(byteArray2);
      Base64 base64_1 = new Base64((byte)124, byteArray2);
      base64_1.decode((String) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_1.encode((byte[]) null, 41, 76);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      base64_0.encode(byteArray0, 98, (int) (byte) (-1));
      byte[] byteArray1 = new byte[1];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      byteArray1[0] = (byte)3;
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray2 = new byte[0];
      base64_0.decode(byteArray2);
      Base64.isBase64("encodeInteger called with null parameter");
      byte[] byteArray3 = new byte[4];
      Base64.toIntegerBytes(bigInteger0);
      byteArray3[0] = (byte)3;
      byteArray3[1] = (byte)3;
      byteArray3[2] = (byte)3;
      byteArray3[3] = (byte)3;
      Base64.encodeBase64String(byteArray3);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, (int) (byte)3, 4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAA=", string0);
      
      Base64.decodeBase64((String) null);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1);
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray4 = Base64.decodeBase64(byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray4.length);
      
      String string0 = Base64.encodeBase64String(byteArray3);
      //  // Unstable assertion: assertEquals("YjNKbllYQmhZMmhsWTI5dGJXOXVjMk52WkdWalltbHVZWEo1VTNSeWFXNW5WWFJwYkdjOVBRZjU=", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.toString((-645));
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.decode("7pNjg]h\"Uy{cl%p");
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.subtract(bigInteger1);
      bigInteger1.modInverse(bigInteger0);
      bigInteger1.toByteArray();
      bigInteger1.pow(75);
      bigInteger0.modInverse(bigInteger1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray2);
      
      base64_0.readResults(byteArray0, 4, 295);
      byte[] byteArray3 = Base64.decodeBase64("");
      boolean boolean0 = Base64.isBase64(byteArray0);
      boolean boolean1 = Base64.isBase64(byteArray1);
      assertFalse(boolean1 == boolean0);
      
      base64_0.readResults(byteArray0, 4, (-645));
      assertEquals(4, byteArray0.length);
      
      Base64.decodeBase64("7pNjg]h\"Uy{cl%p");
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, false);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray1);
      assertEquals(8, byteArray5.length);
      
      base64_0.readResults(byteArray1, 4, 75);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-109), (byte)99, (byte) (-126), (byte)21, (byte)50, (byte)114, (byte)90}, byteArray1);
      
      Base64.encodeBase64URLSafe(byteArray4);
      boolean boolean2 = base64_0.isUrlSafe();
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)23;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "");
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64.isBase64((byte)51);
      base64_0.decode((String) null);
      Base64.encodeBase64((byte[]) null, true, true, 3111);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64("`z|w&Q0e");
      boolean boolean0 = true;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray2, (int) (byte)0, 20);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-47);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)1;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(true);
      base64_0.decode((Object) "AAAAAAAAAA");
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      Base64.isBase64((byte)119);
      base64_0.decode("S");
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, true, true, (-1230));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1230
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      base64_0.decode((String) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = null;
      base64_0.encode((byte[]) null);
      Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)0;
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      base64_0.encodeToString(byteArray1);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode(byteArray0, (-1), (-1));
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray2);
      base64_0.decode(byteArray0, 8192, 1);
      Base64.isBase64(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64String(byteArray2);
      Base64 base64_0 = new Base64((byte)95);
      base64_0.encodeToString(byteArray0);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 64);
      base64_0.isUrlSafe();
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray3);
      byte[] byteArray6 = new byte[2];
      byteArray6[0] = (byte)0;
      byteArray6[1] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray6);
      Base64.decodeBase64(byteArray4);
      Base64.encodeBase64String(byteArray5);
      base64_0.readResults(byteArray3, (-3163), (-1));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte byte0 = (byte)83;
      byte byte1 = (byte) (-94);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((byte)79, byteArray0);
      base64_0.readResults(byteArray0, 111, 1);
      byte byte2 = (byte)104;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte byte3 = (byte)95;
      byte byte4 = (byte)69;
      byte[] byteArray3 = null;
      Base64.encodeBase64String((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, false, false, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.decodeBase64("");
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false);
      int int0 = 0;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 86, (int) (byte)124);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((byte)83, byteArray0);
      base64_0.readResults(byteArray0, (byte)83, (byte)83);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64String(byteArray2);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray1, false, true, 5589);
      base64_0.isUrlSafe();
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)83;
      byteArray3[1] = (byte) (-94);
      byteArray3[2] = (byte)95;
      byteArray3[3] = (byte)69;
      byteArray3[4] = (byte)104;
      byteArray3[5] = (byte)95;
      Base64.discardWhitespace(byteArray3);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray3, true, true, 64);
      Base64.encodeBase64(byteArray1, true, true, 8192);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)124;
      byteArray0[1] = (byte)124;
      byte[] byteArray1 = Base64.decodeBase64("`z|w&Q0e");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray1, true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 0, 86);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = new byte[1];
      base64_0.decode((Object) "AA");
      byteArray3[0] = (byte)0;
      byte[] byteArray4 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.isArrayByteBase64(byteArray3);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 0);
      Base64 base64_0 = new Base64(1715);
      base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64((-1), byteArray1, false);
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray0, 20, 48);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 20
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      Base64 base64_0 = new Base64(2233, byteArray0, false);
      Base64.isBase64("tVu.k)uBdKsQ(_`I*");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte)12;
      byteArray1[7] = (byte)12;
      byteArray1[8] = (byte)12;
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigInteger0.testBit((-4901));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative bit address
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = new byte[1];
      base64_0.decode((Object) "AA");
      byteArray3[0] = (byte)0;
      base64_0.encode(byteArray3, (int) (byte)0, 91);
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)0;
      Base64.encodeBase64(byteArray1, false);
      Base64.isBase64((byte)19);
      base64_0.decode("org.apache.commons.codec.DecoderException");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)124;
      String string0 = "`z|w&Q0e";
      byte[] byteArray1 = Base64.decodeBase64("`z|w&Q0e");
      Base64.encodeBase64(byteArray1, true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 0, 86);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null, true, false);
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null);
      base64_0.encode(byteArray0, (-1435), (-1435));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafeString(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = new byte[1];
      Object object0 = new Object();
      byteArray3[0] = (byte)0;
      int int0 = 91;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray3, (int) (byte)0, 91);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64((-1775));
      byte[] byteArray0 = new byte[8];
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 123);
      Base64 base64_1 = new Base64(2592);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, (int) (byte)52, 60);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 52
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)38;
      byteArray2[1] = (byte)107;
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray2[2] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("");
      Base64.encodeBase64(byteArray2, true);
      byteArray2[3] = (byte) (-113);
      base64_0.encode(byteArray2, 0, (-588));
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      Base64.isBase64((byte) (-1));
      base64_0.decode("SmA<%1%m'eh[N");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.compareTo(bigInteger1);
      bigInteger0.equals((Object) null);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.xor(bigInteger0);
      bigInteger2.flipBit(1);
      bigInteger2.xor(bigInteger0);
      bigInteger0.or(bigInteger2);
      byte[] byteArray0 = bigInteger0.toByteArray();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[0];
      bigInteger0.or(bigInteger1);
      Base64 base64_0 = new Base64((-179), byteArray2);
      base64_0.decode(byteArray1, 1, (-179));
      base64_0.encode(byteArray2);
      base64_0.decode(byteArray1);
      Base64.encodeBase64String(byteArray0);
      base64_0.hasData();
      base64_0.readResults(byteArray1, 1, 1);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        bigInteger0.testBit((-830));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative bit address
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = new byte[1];
      base64_0.decode((Object) "AA");
      byteArray3[0] = (byte)0;
      base64_0.encode(byteArray3, (int) (byte)0, 91);
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray4);
      Base64.encodeBase64(byteArray4, false);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 2592);
      Base64 base64_0 = new Base64((byte)35);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-1);
      base64_0.decode(byteArray1, 1358, 0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-116);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)0);
      base64_0.readResults(byteArray0, 0, 2744);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("HAAA6HeM");
      base64_0.hasData();
      base64_0.encode(byteArray0, (int) (byte)0, 0);
      Base64.isBase64("HAAA6HeM");
      Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.decodeBase64("");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-38);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byteArray0[3] = (byte)0;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      base64_0.encode(byteArray3, (-1), 0);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)66;
      byte[] byteArray4 = base64_0.encode(byteArray0);
      Base64.decodeBase64("");
      Base64.encodeBase64Chunked(byteArray4);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)61;
      byteArray0[3] = (byte)61;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)0, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0000=]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 2067);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.compareTo(bigInteger1);
      bigInteger0.equals((Object) null);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.xor(bigInteger0);
      bigInteger2.flipBit(1);
      bigInteger2.xor(bigInteger0);
      bigInteger0.or(bigInteger2);
      byte[] byteArray0 = bigInteger0.toByteArray();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[0];
      bigInteger0.or(bigInteger1);
      Base64 base64_0 = new Base64((-179), byteArray2);
      base64_0.decode(byteArray1, 1, (-179));
      base64_0.encode(byteArray2);
      base64_0.decode(byteArray1);
      Base64.encodeBase64String(byteArray0);
      base64_0.hasData();
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-28);
      byteArray2[1] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("R");
      base64_0.decode("R");
      base64_0.decode(byteArray2);
      Base64.encodeBase64(byteArray0);
      byteArray2[2] = (byte) (-28);
      byteArray2[3] = (byte) (-28);
      base64_0.decode(byteArray2, 2368, 288);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      // Undeclared exception!
//      try { 
        bigInteger0.add((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = null;
      base64_0.encode((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-100);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (-767), (-767));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      bigInteger0.divide(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.isBase64("/");
      Base64.isArrayByteBase64(byteArray2);
      Base64.isBase64(byteArray3);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)86;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-9);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-9);
      byteArray1[1] = (byte) (-9);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)13, (int) (byte) (-9));
      Base64.encodeBase64(byteArray1, false, false);
      Base64.decodeBase64("81>]>pPQ={Cb{oG1");
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-9);
      byteArray2[1] = (byte)13;
      byteArray2[2] = (byte)90;
      byteArray2[3] = (byte)13;
      byteArray2[4] = (byte) (-49);
      byteArray2[5] = (byte) (-9);
      byteArray2[6] = (byte) (-9);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, false, true, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64((-1775));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      base64_0.decode(byteArray0, (-1775), (-1775));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)0, 0);
      Base64.encodeBase64Chunked(byteArray1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)19;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      base64_0.encodeToString(byteArray3);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode(byteArray0, (int) (byte)49, (int) (byte)19);
      Base64.encodeBase64Chunked(byteArray3);
      Base64.isBase64(byteArray2);
      base64_0.decode(byteArray4, (int) (byte)0, 0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64(241);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-32);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte) (-94);
      byteArray1[3] = (byte)81;
      byteArray1[4] = (byte)83;
      base64_0.readResults(byteArray1, 6023, (byte) (-94));
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)104;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode("");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)124;
      byteArray3[2] = (byte)95;
      Base64.encodeBase64String(byteArray2);
      byteArray3[3] = (byte)69;
      byteArray3[4] = (byte)0;
      base64_0.encodeToString(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, false, (int) (byte)95);
      base64_0.isUrlSafe();
      byte[] byteArray5 = Base64.discardWhitespace(byteArray3);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64URLSafe(byteArray5);
      Base64.decodeBase64(byteArray4);
      Base64.encodeBase64String(byteArray4);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-86);
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64(4085);
      byte[] byteArray0 = new byte[1];
      Object object0 = new Object();
      Base64.decodeBase64("|=~Gj:}_(tT*^nE");
      Base64.decodeInteger(byteArray0);
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Base64 base64_0 = new Base64(5251);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-69);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      base64_0.encodeToString(byteArray1);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-63);
      byteArray1[1] = (byte)0;
      Base64.encodeBase64String(byteArray1);
      byteArray1[2] = (byte) (-78);
      base64_0.encode(byteArray1, 1963, (int) (byte) (-63));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      int int0 = 2255;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)123;
      byteArray0[0] = (byte)123;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      byte byte3 = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      byte byte4 = (byte)109;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(2255, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [{\u0000\u0000O\uFFFDm\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)87;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(20, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [YA\uFFFD\uFFFD\uFFFD\u0006vW]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Base64 base64_0 = new Base64(123);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-47);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)12;
      byte byte1 = (byte)43;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\u0010\t\uFFFD\f+\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)118;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-2684), byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000a\u0001\u0090v]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-4279), byteArray0, true);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)61, (byte)61}, byteArray1);
      
      byte[] byteArray2 = new byte[0];
      base64_0.encode(byteArray2, (-1), (-1));
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(byteArray2);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length BigInteger
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }
}
