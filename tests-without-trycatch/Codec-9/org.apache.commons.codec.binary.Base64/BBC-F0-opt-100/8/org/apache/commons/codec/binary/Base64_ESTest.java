/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:15:30 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1406, byteArray0, true);
      Object object0 = base64_0.decode((Object) "org.apache.co-mons.codec.binary.StO=ngUtils");
      Object object1 = base64_0.decode(object0);
      // Undeclared exception!
//      try { 
        base64_0.encode(object1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[146];
      Base64 base64_0 = new Base64(6, byteArray0, false);
      base64_0.encode(byteArray0, 9, 9);
      base64_0.encode(byteArray0, 9, 42);
      base64_0.encode(byteArray0, 44, 6);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 6, 1218);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 146
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[133];
      Base64 base64_0 = new Base64(6, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, false, true);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-115);
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte) (-61);
      byte byte0 = (byte)113;
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[136];
      Base64 base64_0 = new Base64(9, byteArray0, true);
      Object object0 = base64_0.decode((Object) "V';'KwHb4,cV|trI");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      Object object3 = base64_0.encode(object2);
      // Undeclared exception!
      base64_0.decode(object3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[136];
      Base64 base64_0 = new Base64(9, byteArray0, true);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 9, 9);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[69];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_1 = new Base64(10);
      base64_0.encode(byteArray3, 10, 64);
      // Undeclared exception!
      Base64.decodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-2183), byteArray0, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)71;
      byteArray1[2] = (byte)7;
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[69];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, 5156, 5156);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_1 = new Base64(10);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[69];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_1 = new Base64(10);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray4 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray0);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[123];
      Base64 base64_0 = new Base64(6, byteArray0, false);
      base64_0.encode(byteArray0, 9, 9);
      base64_0.readResults(byteArray0, 9, 1);
      Base64.isBase64("kPojdrtm9OETZY");
      Random.setNextRandom(64);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[72];
      Base64 base64_0 = new Base64(12, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[72];
      boolean boolean0 = true;
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, 12, 1);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-7);
      byteArray1[3] = (byte)27;
      byteArray1[4] = (byte)55;
      byteArray1[5] = (byte)51;
      byteArray1[7] = (byte) (-95);
      byteArray1[8] = (byte)0;
      base64_0.encode(byteArray1, (-3722), (int) (byte) (-20));
      base64_0.encode(byteArray0);
//      try { 
        base64_0.encode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[72];
      Base64 base64_0 = new Base64(12, byteArray0, true);
      base64_0.encode(byteArray0, 12, 1);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-7);
      byteArray1[2] = (byte) (-20);
      byteArray1[3] = (byte)27;
      byteArray1[4] = (byte)55;
      byteArray1[5] = (byte)51;
      byteArray1[6] = (byte)55;
      byteArray1[7] = (byte) (-95);
      byteArray1[8] = (byte)0;
      base64_0.encode(byteArray1, (-3722), (int) (byte) (-20));
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[109];
      Base64 base64_0 = new Base64(11, byteArray0, false);
      base64_0.encode(byteArray0, 11, 11);
      base64_0.encode(byteArray0, 11, (-358));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[109];
      Base64 base64_0 = new Base64(17, byteArray0, true);
      base64_0.encode(byteArray0, 11, 11);
      base64_0.encode(byteArray0, 11, (-358));
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, 11, 11);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[109];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      base64_0.encode(byteArray0, 9, 9);
      base64_0.encode(byteArray0, 9, (-376));
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, 6, (-1323));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[14];
      byteArray0[8] = (byte)123;
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)123);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 14
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(68);
      base64_0.decode(byteArray0, 1, 4);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[72];
      int int0 = 12;
      Base64 base64_0 = new Base64(12, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[72];
      Base64 base64_0 = new Base64(12, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_1 = new Base64(10);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 0, 66);
      base64_0.readResults(byteArray0, 0, 66);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_1 = new Base64(10);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray4 = base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray2, false, false, 10);
      Base64.encodeBase64(byteArray2, true);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64(byteArray4);
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.isBase64((byte) (-11));
      Base64.isBase64((byte)61);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-11);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_1 = new Base64(502);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      base64_1.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      Base64 base64_0 = new Base64(10, byteArray0, false);
      base64_0.decode("");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      base64_0.encode(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      Base64 base64_1 = new Base64(64);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray3, 64, 890);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 230
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_1 = new Base64(33);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray1);
      boolean boolean0 = Base64.isBase64((byte) (-90));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      base64_0.encode(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
      assertEquals(888, byteArray3.length);
      
      Base64 base64_1 = new Base64(33);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray1);
      byte[] byteArray5 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(1, byteArray1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)20;
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)36;
      byte byte1 = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)85;
      byte byte2 = (byte)101;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)1;
      byte byte3 = (byte)105;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte)55;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)7, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0014$\u0007Ue\u0001iZ7]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-1);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.remainder(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      int int0 = base64_0.readResults(byteArray1, (byte) (-27), (-2942));
      assertEquals(1, byteArray1.length);
      assertEquals(0, int0);
      
      Base64.isBase64("");
      base64_0.avail();
      base64_0.decode((Object) "`|XcjVT$_0@8+v?2");
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(56);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.modInverse(bigInteger1);
      base64_0.decode(byteArray0, 0, 315);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      
      Base64.isBase64("");
      int int0 = base64_0.avail();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray4 = base64_0.encode(byteArray3);
      byte[] byteArray5 = Base64.encodeBase64(byteArray2, true);
      Base64 base64_1 = new Base64(14);
      Base64.encodeBase64(byteArray0);
      base64_1.readResults(byteArray4, 64, 64);
      byte[] byteArray6 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray4);
      base64_1.decode(byteArray5, 10, 10);
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      boolean boolean0 = false;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray2);
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)12;
      byte byte0 = (byte)123;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, true, true, 65);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (234) than the specified maxium size of 65
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64();
      int int0 = 105;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 10, 105);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 16
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)19;
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray0, 0, 1684);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 4, 2074);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 16
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64(56);
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 56, 56);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 10, (-2792));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 64);
      assertEquals(24, byteArray1.length);
      
      Base64.isBase64((byte) (-35));
      Base64.isBase64((byte)106);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-3754L));
      Base64 base64_0 = new Base64(744, (byte[]) null, true);
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      boolean boolean0 = Base64.isBase64((byte)81);
      assertTrue(boolean0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(56);
      base64_0.decode(byteArray0, 0, 315);
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((byte)9);
      base64_0.readResults(byteArray0, (byte)9, 1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)85;
      byteArray1[4] = (byte)9;
      base64_0.decode(byteArray1, (int) (byte)9, (-109));
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertSame(byteArray2, byteArray0);
      
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64(404);
      Base64 base64_2 = new Base64(1);
      int int1 = base64_2.readResults(byteArray3, 1, 64);
      assertFalse(base64_2.isUrlSafe());
      assertEquals(1, byteArray3.length);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)85}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)3;
      byte byte0 = (byte)63;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)94;
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1);
      base64_0.decode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom((byte)24);
      // Undeclared exception!
//      try { 
        mockRandom0.doubles((-789L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // size must be non-negative
//         //
//         verifyException("java.util.Random", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64(10, byteArray0, false);
      base64_0.decode(byteArray0, 65, (-1751));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf(492L);
      base64_0.encodeToString(byteArray2);
      Base64.toIntegerBytes(bigInteger1);
      base64_0.isUrlSafe();
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64(12);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.bitCount();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger1.divide(bigInteger2);
      bigInteger0.gcd(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      byteArray0[0] = (byte) (-19);
      base64_0.encode(byteArray0, (int) (byte) (-19), (int) (byte) (-19));
      BigInteger bigInteger3 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger3);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-19);
      byteArray1[1] = (byte) (-19);
      byteArray1[2] = (byte) (-19);
      byteArray1[3] = (byte) (-19);
      byteArray1[4] = (byte) (-19);
      byteArray1[5] = (byte) (-19);
      byteArray1[6] = (byte)9;
      boolean boolean0 = true;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte) (-19);
      byteArray2[2] = (byte) (-19);
      byteArray2[3] = (byte) (-19);
      byteArray2[4] = (byte)9;
      byteArray2[5] = (byte) (-19);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray2, (byte) (-19), (byte) (-19));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-99);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [{8\uFFFD\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      byte byte1 = (byte) (-48);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)9;
      Base64 base64_0 = new Base64((-2737));
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)1, 404);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64.isBase64("");
      Base64 base64_0 = new Base64(9, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode((Object) "");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte)59);
      Base64.isBase64((byte)59);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-16);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      Base64.isBase64("pG");
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64((-2660), byteArray0, true);
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)31);
      Base64.encodeBase64(byteArray0);
      base64_0.decode((Object) "pG");
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)31);
      Base64.isBase64((byte)83);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)55;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, 2226);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 2599;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(false);
      boolean boolean0 = true;
      Base64 base64_1 = new Base64(1, (byte[]) null, true);
      // Undeclared exception!
//      try { 
        base64_1.encode((byte[]) null, 8188, 2599);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64(2599);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((byte[]) null);
      Base64 base64_1 = new Base64((-1951), (byte[]) null, false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true, 64);
      Base64.encodeBase64((byte[]) null);
      Base64.isBase64(byteArray2);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = new byte[0];
      base64_0.decode(byteArray3);
      base64_0.decode(">+Io/+^(KK");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-117));
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.readResults(byteArray0, (byte) (-44), (byte) (-44));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 115);
      Base64.encodeBase64(byteArray1);
      Base64.isBase64(byteArray2);
      byte[] byteArray3 = new byte[11];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte) (-44);
      byteArray3[2] = (byte)1;
      byteArray3[3] = (byte) (-44);
      byteArray3[4] = (byte) (-48);
      Base64.discardWhitespace(byteArray3);
      base64_0.decode(byteArray3);
      base64_0.decode((String) null);
      Base64.isBase64((byte)44);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64(2599, (byte[]) null, true);
      base64_0.hasData();
      base64_0.encode((byte[]) null);
      base64_0.readResults((byte[]) null, 2599, 2599);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(115, byteArray1, false);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, (int) (byte)68);
      Base64.encodeBase64(byteArray3);
      Base64.isBase64(byteArray3);
      Base64.discardWhitespace(byteArray3);
      base64_0.decode(byteArray3);
      base64_0.decode(")F`]=_<%_");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(57);
      base64_0.avail();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)82;
      base64_0.decode(byteArray0, 6, (-204));
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte)55;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, true);
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf((-45L));
      base64_0.encodeToString(byteArray3);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      base64_0.decode(byteArray1, 20, 712);
      Base64.isBase64("6LY=2}");
      Base64.encodeBase64URLSafeString(byteArray4);
      base64_0.decode("4km");
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64("0w");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64.isBase64((byte)71);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      Base64.encodeBase64(byteArray0, true, true);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)71;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)71, (int) (byte)0);
      byteArray0[5] = (byte)71;
      Base64.isBase64("");
      base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger.valueOf(0L);
      base64_0.encodeToString(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray0, 0, 85);
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = base64_0.decode("");
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64String(byteArray1);
      base64_0.decode((Object) "");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, (-4108));
      base64_0.encode(byteArray0, (-4108), (-4108));
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 536;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(536, (byte[]) null, true);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ONE;
      bigInteger2.xor(bigInteger3);
      bigInteger2.intValue();
      bigInteger0.toByteArray();
      int int0 = 115;
      BigInteger bigInteger4 = bigInteger0.add(bigInteger1);
      bigInteger2.isProbablePrime(0);
      bigInteger1.modPow(bigInteger2, bigInteger3);
      bigInteger0.equals(bigInteger4);
      bigInteger0.max(bigInteger2);
      Base64 base64_0 = new Base64(115, byteArray0, false);
      bigInteger0.modInverse(bigInteger1);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1);
      base64_0.encodeToString(byteArray1);
//      try { 
        base64_0.encode((Object) bigInteger1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      Object object0 = base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      Object object1 = base64_0.decode(object0);
      Object object2 = base64_0.decode(object1);
      Object object3 = base64_0.encode(object2);
      Object object4 = base64_0.encode(object3);
      base64_0.encode(object4);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.readResults(byteArray0, (byte)0, 0);
      base64_0.decode(object1);
      base64_0.decode(byteArray0);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64(byteArray3, false, false, (int) (byte)92);
      Base64.encodeBase64(byteArray3, true, true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      Base64.isBase64("pG");
      byteArray0[2] = (byte) (-22);
      Base64 base64_1 = new Base64(2257, byteArray0, true);
      Object object0 = base64_1.decode((Object) ": ");
      base64_0.decode(object0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false, 1);
      Base64.encodeBase64(byteArray3, true, true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, 113);
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64((byte) (-1));
      Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray2);
      Base64.encodeBase64(byteArray1, true, true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-1164), (byte[]) null, false);
      base64_0.decode((byte[]) null);
      Base64 base64_1 = new Base64(true);
      Object object0 = new Object();
//      try { 
        base64_1.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64(57);
      base64_0.avail();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)81;
      byte byte0 = (byte) (-22);
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64(6, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [)Q\u0000\u0000\u0000\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte)0;
      Base64.decodeBase64("Pygcw");
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.or(bigInteger1);
      Base64.isBase64("Pygcw");
      Base64 base64_1 = new Base64(false);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64((byte)94);
      Object object0 = new Object();
//      try { 
        base64_1.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64String(byteArray1);
      base64_0.decode((Object) "");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-50);
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte) (-52);
      Base64.encodeBase64(byteArray2);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 3268, 72);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3268
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-3192), byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode("oG)_mJ_3s v>O^");
      Base64 base64_1 = new Base64(false);
//      try { 
        base64_1.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-1);
      base64_0.decode(byteArray0);
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.decodeBase64("");
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.mod(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64(57);
      base64_0.avail();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)81;
      base64_0.decode(byteArray0, 6, (-204));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte)55;
      byteArray1[3] = (byte)55;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, true);
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf((-45L));
      base64_0.encodeToString(byteArray3);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray4, 0, (int) (byte)41);
      Base64.isBase64("EIEey[1LBi5Y");
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode("4km");
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64("");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
      
      bigInteger0.max(bigInteger1);
      bigInteger1.nextProbablePrime();
      BigInteger bigInteger3 = BigInteger.ONE;
      bigInteger2.xor(bigInteger3);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)109;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64(byteArray1);
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64(byteArray2);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.mod(bigInteger1);
      Base64.encodeInteger(bigInteger1);
      Base64.isBase64("");
      Base64 base64_1 = new Base64(true);
      Base64.isBase64((byte)4);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      Base64.isBase64("pG");
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      base64_0.readResults(byteArray0, 608, (-1645));
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode(byteArray0);
      base64_0.readResults(byteArray0, (byte)29, (byte) (-22));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64((byte[]) null, true, true, (-3524));
      Base64.isBase64("&:wz:wr;y6EFP;");
      Base64.decodeBase64("&:wz:wr;y6EFP;");
      base64_1.decode("<'DkjsvXu:XBEx1");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)23;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64(byteArray2);
      Base64.decodeInteger(byteArray2);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        bigInteger0.mod((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)63;
      base64_0.encode(byteArray0, 0, (int) (byte) (-28));
      base64_0.isUrlSafe();
      Base64.isBase64((byte)125);
      Base64.isBase64((byte) (-41));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)23;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(15, byteArray1, false);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray2, (int) (byte) (-116), (int) (byte)0);
      Base64.encodeBase64(byteArray0, false, false, 15);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)23;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      Base64.encodeBase64(byteArray3);
      Base64.decodeBase64("ocI");
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(byteArray1);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length BigInteger
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)1;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      Base64.isBase64("pG");
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      base64_0.readResults(byteArray0, 608, (-1645));
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, false, true, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(476, byteArray0);
      base64_0.readResults(byteArray0, 476, 476);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)67;
      byteArray1[7] = (byte) (-106);
      byteArray1[8] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 2599;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(2599, (byte[]) null, true);
      base64_0.hasData();
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      base64_0.encodeToString(byteArray0);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)0;
      base64_0.encode(byteArray0);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)0;
      Base64.decodeBase64(byteArray0);
      byteArray0[7] = (byte)116;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)95;
      byteArray2[1] = (byte)116;
      byteArray2[2] = (byte)95;
      byteArray2[3] = (byte) (-72);
      byteArray2[4] = (byte)75;
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byte byte0 = (byte) (-28);
      byteArray1[2] = (byte) (-28);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)63;
      base64_0.encode(byteArray1, 0, (int) (byte) (-28));
      base64_0.encode(byteArray0);
      bigInteger0.nextProbablePrime();
      base64_0.encodeToString(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = (byte)71;
      Base64.isBase64((byte)71);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      Base64.encodeBase64(byteArray0, true, true);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)71;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byteArray0[4] = (byte)55;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, (int) (byte)71, (int) (byte)55);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 71
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = (byte) (-51);
      Base64.isBase64((byte) (-51));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-51);
      Base64 base64_0 = new Base64(244, byteArray0);
      base64_0.decode(byteArray0);
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = (byte) (-31);
      Base64.isBase64((byte) (-31));
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-31);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-31);
      byteArray1[1] = (byte) (-31);
      byteArray1[2] = (byte) (-31);
      Base64.encodeBase64URLSafeString(byteArray1);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-122);
      int int0 = 52;
      base64_0.readResults(byteArray0, 52, (-1837));
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-122);
      byteArray2[1] = (byte) (-122);
      byteArray2[2] = (byte) (-122);
      base64_0.encodeToString(byteArray2);
      base64_0.decode(byteArray1, 70, (int) (byte) (-122));
      byteArray0[0] = (byte) (-122);
      base64_0.encode(byteArray0, 0, (int) (byte) (-122));
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)65;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(5493, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD\u0000\u0000z\u0000\u0001A]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64(57);
      base64_0.avail();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-70);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 68);
      String string0 = "]=XS7#";
      byte[] byteArray2 = Base64.decodeBase64("]=XS7#");
      Base64 base64_0 = new Base64(68, byteArray1, false);
      base64_0.readResults(byteArray1, 68, (-1796));
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray2, 68, 68);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 68
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)23;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(15, byteArray1, false);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 15);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)23;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      Base64.encodeBase64(byteArray2);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(byteArray1);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length BigInteger
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode(" {S$G4'J\"R]T");
      base64_0.avail();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0, true, true, 113);
      Base64.isBase64("2Z>(KZ>[");
      Base64.decodeBase64("2Z>(KZ>[");
      base64_0.decode("");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)119;
      Base64.encodeBase64(byteArray0, false, false, (int) (byte)27);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Base64.isBase64("1B|S");
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
//      try { 
        base64_0.encode((Object) "1B|S");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64URLSafe((byte[]) null);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte) (-82);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode("E^z!R4O|");
      Object object0 = new Object();
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64(3004);
      byte[] byteArray0 = new byte[6];
      Base64.encodeBase64String(byteArray0);
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)57;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, true, (-2372));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of -2372
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Base64 base64_0 = new Base64((-1157));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-122);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte) (-48);
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.mod(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)23;
      byteArray0[0] = (byte)23;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)107;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0017\u0000k]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      base64_0.encode(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ONE;
      bigInteger2.xor(bigInteger3);
      bigInteger2.intValue();
      bigInteger0.toByteArray();
      BigInteger bigInteger4 = bigInteger0.add(bigInteger1);
      bigInteger2.isProbablePrime(0);
      bigInteger0.equals(bigInteger4);
      bigInteger0.max(bigInteger2);
      Base64 base64_0 = new Base64(115, byteArray0, false);
      bigInteger0.modInverse(bigInteger1);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1);
//      try { 
        base64_0.encode((Object) bigInteger1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Base64 base64_0 = new Base64(78);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)67, (byte)103, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
  }
}
