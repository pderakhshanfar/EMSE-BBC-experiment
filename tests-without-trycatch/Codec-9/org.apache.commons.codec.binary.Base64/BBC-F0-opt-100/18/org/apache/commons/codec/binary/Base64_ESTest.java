/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:12:06 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-85);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)123;
      Base64 base64_0 = new Base64(30, byteArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(3848, byteArray0, false);
      base64_0.encode(byteArray0, (int) (byte)124, 0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Base64.isBase64("");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2569), byteArray0, true);
      byte[] byteArray1 = new byte[0];
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)57;
      byteArray0[7] = (byte)54;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[2] = (byte)113;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)83;
      byteArray0[5] = (byte)85;
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("@17#JD@<P<>Ohs3Y!");
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode("T9ASVK");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8236, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8236);
      base64_0.encode(byteArray0, (int) (byte)8, (int) (byte)8);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      base64_0.encode(byteArray0, 8164, (int) (byte) (-17));
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, (-154), 114);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderE~ception");
      base64_0.encode(byteArray0, 8, 8);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, (-1892), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8247, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64String(byteArray2);
      // Undeclared exception!
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-3202), byteArray0);
      byte[] byteArray1 = new byte[5];
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8277, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8277);
      Base64 base64_1 = new Base64(64);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      Base64.encodeBase64(byteArray2, true);
      // Undeclared exception!
      base64_0.encode(byteArray2, 76, 2833);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64(4449, (byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 773, 103);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8273, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encodeToString(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(49, byteArray0);
      byte[] byteArray1 = new byte[5];
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(38, byteArray0);
      Object object0 = base64_0.decode((Object) "/]~({K3B");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 22, 4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-1), byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [9\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64.encodeBase64(byteArray0, false, false, 64);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64.encodeBase64(byteArray0, true, true, 10);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, false, (-510));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-4955), byteArray0, false);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64.isBase64((byte)121);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64.isBase64((byte) (-110));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-652));
      base64_0.decode(byteArray0, 1, 8);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64(2695);
      byte[] byteArray0 = new byte[5];
      base64_0.decode(byteArray0, (int) (byte) (-114), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)72;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 315);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(5);
      base64_0.decode(byteArray0, 0, 1048);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      base64_0.decode(byteArray0, (int) (byte)75, (-2569));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      base64_0.decode((Object) ") than the specified maxium size of ");
      base64_0.decode(byteArray0, 2912, 2912);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2857);
      BigInteger bigInteger0 = new BigInteger(2857, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(84);
      base64_0.encode(byteArray0, 65, 65);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8236, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8236);
      base64_0.encode(byteArray0, (int) (byte)8, (int) (byte)8);
      base64_0.encode(byteArray0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 1, (int) (byte)1);
      base64_0.encode(byteArray0, 78, (-1367));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-4955), byteArray0, false);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64(5);
//      try { 
        base64_0.encode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64.isBase64("DD4AzQAA8g==\u0001\u0001");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)32;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)9;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-24));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -24
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64(121);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64((byte) (-85), byteArray0);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Object object0 = base64_0.decode((Object) "+W");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(88);
      Object object0 = base64_0.decode((Object) ") than the specified maxium size of ");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64.isBase64((byte)124);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-102);
      Base64 base64_0 = new Base64(2857, byteArray0, true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, 45);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(847L);
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8236, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64.decodeBase64("{\"b");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("ISO-8859-1");
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 4, 4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(847L);
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8236, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      String string0 = Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(6, byteArray0);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(30, byteArray0);
      base64_0.decode(byteArray0);
      base64_0.readResults(byteArray0, (-1691), 125);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)0, 13);
      base64_0.readResults(byteArray0, 1, 13);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(9, byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64("(_/ !w");
      base64_0.readResults(byteArray1, 0, (byte)116);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1717986918);
      BigInteger bigInteger0 = new BigInteger(1717986918, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(52, byteArray0);
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      base64_0.encode(byteArray0, 12, (-1));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(9, byteArray0, true);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(3050, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(1495, (byte[]) null);
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)81, (byte)111, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("@17#JD@<P<>Ohs3Y!");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)49, (byte)55, (byte)74, (byte)68, (byte)80, (byte)79, (byte)104, (byte)115, (byte)51, (byte)81}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1599);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8236, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8236);
      base64_0.encode(byteArray0, (-1), (-1));
      base64_0.encode(byteArray0, (int) (byte) (-1), 1869);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1368, byteArray0.length);
  }
}
