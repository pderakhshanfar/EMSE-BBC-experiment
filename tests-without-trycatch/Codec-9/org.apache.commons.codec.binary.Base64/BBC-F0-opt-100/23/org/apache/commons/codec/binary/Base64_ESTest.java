/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:11:15 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3084, 30, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(30);
      bigInteger0.toString(3084);
      Base64.decodeBase64("11898073078863953614536516169150914969092948558932814274966155510787948492158195977717391114236181849252704289015999225645559509777189986919529277344510366134582360931842510679240611054100072956851026950650699748885791656458194273041794496351127153073620229333301539327326482367582536187330129850632829842721548102313601185093832406225573936053210545580159872096359221608804105384379143689495540899568564768229921000474398533665171917287296604585192431212547112190730753150323829424605320795750933866353109730727638673518029092643824970435447892140534889073642507674484499052008274535694521140531127949933439618241463686852394492825196938564710805748851300497981287556465125130567188658988342005398386375928607883756061105075858634951099733978605191446567631151789604140397195250217222333022922947551063471584190726467391441270281322406614340809549500315247774310905666058789620592642123238766619225847224337740677932298239240061");
      Base64 base64_0 = new Base64((-1358));
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)122;
      Base64.encodeBase64(byteArray0, false, false, 10);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int0 = 1;
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 1, 7);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)96;
      byteArray1[1] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, (-4458), (-1586));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(1805, 1805, mockRandom1);
      bigInteger1.toString(1805);
      bigInteger1.setBit(1401);
      Base64.decodeBase64("1143173577244318698761314252265746693356725169732371565482164023903853475066264551334336757432768080116330514678341056489360679676567013583990600944467181614254933570325522347631784220406333670863747527729063279683492016262022283271253589672704878584501478549323963360460083945471605123395265128460891761675593664468882627072679380918812044217188504471751894427637194242744847644401098127312413137999913726265043081836795898229872797676648404247301254941248699415468159179930183779801161200674180060610418273838813333416824770106203637553315647");
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1092, 45, mockRandom0);
      bigInteger0.toString(45);
      bigInteger0.setBit(102);
      byte[] byteArray0 = Base64.decodeBase64("26529268146267920691305545140891751807613162360436461567653897874005553317248366725263466978379028865741927497043232564597324392449141783500930709804436391087533434062692889387111203641327920028115848001620584401984475446550756933939932251471742809883903399518808621078340633615368962932278895839254773153785080046045544562295513");
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64 base64_0 = new Base64(true);
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64(byteArray0);
      base64_0.decode(byteArray0, 45, 48);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1407, 1805, mockRandom0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)99;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray1, (byte)99, 3960);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1073, 45, mockRandom0);
      bigInteger0.toString(45);
      bigInteger0.setBit(102);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      mockRandom0.doubles((long) 45);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.readResults(byteArray1, 102, 2302);
      base64_0.encode(byteArray0, 4, 45);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, 364);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 180
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64((byte)15, byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)18;
      byteArray1[8] = (byte)1;
      Base64.encodeBase64(byteArray1, true, true, 64);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 76);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64((byte)15, byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)18;
      byteArray1[4] = (byte)1;
      Base64.encodeBase64(byteArray1, true, true, 64);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, (int) (byte)1, 76);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[0] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0, false);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(true);
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Random.setNextRandom(1428);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray1, (int) (byte)1, 25);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.isBase64("M$jbD");
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, 48);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 17
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode("");
      base64_0.encode(byteArray0, (-1043), (-1043));
      base64_0.hasData();
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode("");
      base64_0.encode(byteArray0, (-1043), (-1043));
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray1, (-1329), (-1329));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)110;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)83;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)32, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFDn S]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Random.setNextRandom(1);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)58);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((-1682), byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte) (-99);
      byteArray1[2] = (byte)57;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      byte byte0 = (byte)0;
      Base64 base64_1 = new Base64(76, (byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      byte byte1 = (byte)96;
      // Undeclared exception!
//      try { 
        base64_1.encode((byte[]) null, 76, (int) (byte)96);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)53;
      byteArray0[2] = (byte)53;
      byte byte2 = (byte)2;
      byteArray0[3] = (byte)2;
      byte byte3 = (byte) (-48);
      byteArray0[4] = (byte) (-48);
      byte byte4 = (byte) (-43);
      byteArray0[5] = (byte) (-43);
      byte byte5 = (byte) (-37);
      byteArray0[6] = (byte) (-37);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.shiftRight((byte)103);
      byte byte6 = (byte)106;
      Base64.isBase64((byte)106);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)2, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [g\u00005\u0002\uFFFD\uFFFD\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64("");
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64((String) null);
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-12);
      Base64 base64_0 = new Base64((byte) (-12), byteArray0);
      base64_0.decode(byteArray0, (-3686), (int) (byte) (-12));
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.isBase64((byte)0);
      base64_0.avail();
      Base64 base64_2 = new Base64((byte)0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray2, false, true, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.signum();
      bigInteger0.bitCount();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.isArrayByteBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isBase64((byte)61);
      Base64.isBase64("Y}V%*9Rg");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.signum();
      bigInteger0.bitCount();
      Base64.encodeBase64(byteArray1);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray1, false, true, 0);
      Base64 base64_0 = new Base64();
      base64_0.decode("lineSeperator must not contain base64 characters: [");
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, true, (-3993));
      base64_0.readResults(byteArray4, (-1), 18);
      base64_0.decode(byteArray3, 0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(80, byteArray0, false);
      base64_0.decode((Object) ") than the specified maxium size of ");
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = base64_1.decode(byteArray0);
      base64_0.decode(byteArray1);
      Base64.isBase64(") than the specified maxium size of ");
      Base64.isBase64(byteArray1);
      base64_1.encodeToString(byteArray0);
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray0, 1642, 80);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1642
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.modInverse(bigInteger1);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger.probablePrime(2499, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, (-12), 2499);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      int int0 = 167;
      Base64 base64_0 = new Base64(167, (byte[]) null);
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      Base64 base64_0 = new Base64((-1), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.isBase64((byte) (-4));
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encode(byteArray0, 0, (int) (byte) (-4));
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray3, true, false, (int) (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[5] = (byte)82;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.negate();
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      boolean boolean0 = Base64.isBase64("AQAB/wD/");
      byte[] byteArray5 = base64_0.decode(byteArray4);
      boolean boolean1 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Base64.isBase64(byteArray0);
      byte[] byteArray6 = Base64.encodeBase64(byteArray3, true, true, 91);
      base64_0.readResults(byteArray1, (-2702), 8192);
      byte[] byteArray7 = Base64.discardWhitespace(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray7);
      
      String string0 = base64_0.encodeToString(byteArray6);
      //  // Unstable assertion: assertEquals("Q2cAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64.decodeBase64("Ry#{?wMgax");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      base64_0.decode((Object) "Ry#{?wMgax");
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)114;
      byteArray0[1] = (byte)114;
      byte byte1 = (byte)54;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.equals("Ry#{?wMgax");
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      bigInteger0.bitLength();
      Base64.encodeBase64(byteArray1, false, false, 76);
      byteArray0[2] = (byte)54;
      byte byte2 = (byte) (-106);
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigInteger0.modInverse(bigInteger1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger: modulus not positive
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      BigInteger bigInteger3 = BigInteger.TEN;
      bigInteger2.negate();
      Base64.toIntegerBytes(bigInteger3);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("");
      Base64 base64_2 = new Base64(7);
      base64_2.decode((byte[]) null);
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64("");
      Base64 base64_0 = new Base64(true);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      //  // Unstable assertion: assertEquals("QUFBQS93PT0", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.decodeInteger(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)47, (byte)119, (byte)61, (byte)61, (byte)0, (byte)10}, byteArray3);
      
      Base64.encodeBase64(byteArray2);
      Base64 base64_1 = new Base64();
      base64_1.avail();
      Base64.discardWhitespace(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.negate();
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray5);
      
      Base64.isBase64("6VL//wD/AAAAAAAAAAAAAAAA");
      byte[] byteArray6 = base64_0.decode(byteArray2);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64(byteArray3);
      byte[] byteArray7 = new byte[0];
      Base64.decodeInteger(byteArray7);
      Base64.encodeBase64(byteArray1);
      base64_0.avail();
      byte[] byteArray8 = Base64.discardWhitespace(byteArray6);
      assertEquals(26, byteArray2.length);
      assertEquals(18, byteArray8.length);
      
      boolean boolean2 = Base64.isArrayByteBase64(byteArray4);
      assertTrue(boolean2 == boolean1);
      
      base64_0.decode(byteArray4, 1385, (int) (byte) (-1));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.signum();
      bigInteger0.bitCount();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray3);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray3);
      
      Base64.encodeBase64((byte[]) null, true, false, 1263);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      byte[] byteArray4 = base64_1.decode(byteArray1);
      assertSame(byteArray4, byteArray1);
      
      byte[] byteArray5 = base64_1.encode((byte[]) null);
      assertNull(byteArray5);
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray2, false, false, 463);
      assertEquals(0, byteArray6.length);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)72;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)123);
      int int0 = Base64.MIME_CHUNK_SIZE;
      base64_0.decode("");
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)83, (byte)69, (byte)103, (byte)65, (byte)83, (byte)69, (byte)104, (byte)73, (byte)0, (byte)10}, byteArray2);
      
      boolean boolean1 = Base64.isBase64("");
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-12);
      Base64 base64_0 = new Base64((byte) (-12), byteArray0);
      base64_0.decode(byteArray0, (-3686), (int) (byte) (-12));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.readResults(byteArray1, 62, (-1));
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom(2L);
      BigInteger bigInteger1 = new BigInteger(76, (byte)0, mockRandom0);
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = bigInteger2.negate();
      Base64.toIntegerBytes(bigInteger3);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger4);
      Base64.isBase64("");
      bigInteger4.not();
      byte[] byteArray4 = base64_0.decode(byteArray0);
      base64_0.hasData();
      Base64.isBase64(byteArray2);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray4);
      base64_0.avail();
      Base64.discardWhitespace(byteArray1);
      Base64.isArrayByteBase64(byteArray3);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.isBase64((byte)51);
      base64_0.avail();
      Base64 base64_1 = new Base64(96);
      Base64.decodeInteger(byteArray3);
      base64_1.decode("NV");
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Base64.isBase64("AVL//wAB");
      byte[] byteArray4 = base64_0.decode(byteArray3);
      //  // Unstable assertion: assertEquals(14, byteArray3.length);
      //  // Unstable assertion: assertEquals(10, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)86, (byte)76, (byte)47, (byte)47, (byte)119, (byte)65, (byte)66, (byte)0, (byte)10}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0, 2195, 0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray2, false, false, 55);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, 0, 2195);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(14, byteArray2.length);
      
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.negate();
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray4);
      
      boolean boolean0 = Base64.isBase64(byteArray3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)0;
      boolean boolean0 = Base64.isBase64("vB.Un");
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-37);
      byteArray1[1] = (byte) (-37);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)49;
      byteArray1[4] = (byte)96;
      byteArray1[5] = (byte) (-37);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-21);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      boolean boolean1 = base64_0.hasData();
      boolean boolean2 = Base64.isBase64(byteArray2);
      assertFalse(boolean2 == boolean0);
      
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      base64_0.avail();
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      assertNotSame(byteArray2, byteArray4);
      
      boolean boolean3 = Base64.isArrayByteBase64(byteArray3);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new byte[] {(byte)89, (byte)65, (byte)65, (byte)65}, byteArray3);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      Base64 base64_0 = new Base64((-1), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.isBase64((byte)96);
      base64_0.readResults(byteArray1, 1520, 7);
      base64_0.avail();
      Base64.isBase64("");
      base64_0.decode((String) null);
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64();
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray1 = Base64.decodeBase64("");
      assertEquals(0, byteArray1.length);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-4);
      byteArray0[2] = (byte) (-4);
      Base64 base64_0 = new Base64((-1), byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      byte byte0 = (byte)49;
      Base64.decodeBase64((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.signum();
      bigInteger0.bitCount();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-12);
      Base64 base64_0 = new Base64((byte) (-12), byteArray0);
      base64_0.decode(byteArray0, (-3686), (int) (byte) (-12));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.readResults(byteArray1, 62, (-1));
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_2 = new Base64(false);
      base64_2.decode(byteArray1);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64.isBase64((byte) (-59));
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-59);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-59);
      byteArray1[1] = (byte) (-59);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 1151);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.isBase64("");
      Base64 base64_1 = new Base64(true);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, true);
      assertEquals(18, byteArray5.length);
      
      byte[] byteArray6 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertEquals(37, byteArray6.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray4);
      byte[] byteArray7 = Base64.discardWhitespace(byteArray4);
      assertArrayEquals(new byte[] {(byte)101, (byte)71, (byte)78, (byte)86, (byte)81, (byte)81, (byte)61, (byte)61}, byteArray3);
      assertEquals(12, byteArray7.length);
      
      Base64.isBase64((byte)4);
      Base64.isBase64((byte) (-1));
      boolean boolean1 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(boolean1 == boolean0);
      
      base64_0.readResults(byteArray2, 1151, (byte) (-59));
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray8 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray8.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64.isBase64("nl)S7U2ZT~\"(FjJ?ZZ");
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64("nl)S7U2ZT~\"(FjJ?ZZ");
      Base64.isArrayByteBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isBase64((byte)0);
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.negate();
      Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray3);
      assertEquals(4, byteArray3.length);
      
      Base64.isBase64("AVL//wAB");
      byte[] byteArray4 = base64_0.decode(byteArray1);
      assertEquals(6, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)82, (byte) (-1), (byte) (-1), (byte)0, (byte)1}, byteArray4);
      
      boolean boolean0 = base64_0.hasData();
      boolean boolean1 = Base64.isBase64(byteArray2);
      assertEquals(14, byteArray2.length);
      
      Base64.isBase64((byte) (-1));
      boolean boolean2 = Base64.isBase64((byte)45);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = Base64.isBase64("iqGf`=g< uxn [$^t");
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64("");
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_0.avail();
      byte[] byteArray3 = new byte[4];
      byteArray1[7] = (byte) (-98);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      Base64.discardWhitespace(byteArray3);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)47, (byte)119, (byte)61, (byte) (-98)}, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64(3056);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)0;
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.decode((String) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      Base64 base64_0 = new Base64((-1), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.isBase64((byte)96);
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)96);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 0, 1785);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.negate();
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray5);
      assertEquals(4, byteArray5.length);
      
      Base64.isBase64("AVL//wAB");
      byte[] byteArray6 = base64_0.decode(byteArray2);
      boolean boolean0 = base64_0.hasData();
      boolean boolean1 = Base64.isBase64(byteArray3);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray7 = new byte[0];
      Base64.decodeInteger(byteArray7);
      Base64.encodeBase64(byteArray1);
      base64_0.avail();
      byte[] byteArray8 = Base64.discardWhitespace(byteArray6);
      assertEquals(6, byteArray8.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)82, (byte) (-1), (byte) (-1), (byte)0, (byte)1}, byteArray8);
      
      boolean boolean2 = Base64.isArrayByteBase64(byteArray4);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-44);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.intValue();
      bigInteger0.not();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.add(bigInteger1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte) (-44)}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)99, (byte)116, (byte)81, (byte)61, (byte)0, (byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-116);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)117}, byteArray1);
      
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, 0, 244);
      //  // Unstable assertion: assertEquals((-1), int0);
      
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("CtBkZoxoAAAA\u0000\n", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
      
      String string1 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("Q3RCa1pveG9BQUFB", string1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      //  // Unstable assertion: assertEquals(16, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("~q?fl:EZ/,gWKU");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode((Object) "qflEZ_gWKQ");
      base64_0.hasData();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, false, false, 64);
      BigInteger bigInteger1 = BigInteger.valueOf((-4307L));
      bigInteger0.remainder(bigInteger1);
      base64_0.decode((byte[]) null);
      base64_0.decode((byte[]) null, 0, 0);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.pow(0);
      bigInteger0.intValue();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-81);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)78;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)3;
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("AQCvAE4AAw", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.isBase64((byte) (-59));
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      Base64.encodeBase64(byteArray0, false, false, 1151);
      byteArray0[2] = (byte) (-59);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-59);
      byteArray2[1] = (byte) (-59);
      byteArray2[2] = (byte) (-59);
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray2[3] = (byte) (-59);
      byteArray2[4] = (byte) (-59);
      base64_0.encode(byteArray0, 0, (int) (byte) (-59));
      byteArray2[5] = (byte) (-59);
      byteArray2[6] = (byte) (-59);
      Base64.encodeBase64(byteArray2);
      base64_0.decode(byteArray1);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, false, true, (int) (byte) (-59));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of -59
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-1);
      Base64 base64_0 = new Base64(1208, byteArray0, true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)67, (byte)116, (byte)95, (byte)119}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64("");
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      assertEquals(10, byteArray2.length);
      
      byte[] byteArray3 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertEquals(37, byteArray3.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)47, (byte)119, (byte)61, (byte)61}, byteArray4);
      
      Base64.isBase64((byte)4);
      Base64.isBase64((byte) (-96));
      boolean boolean1 = Base64.isBase64("");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64 base64_1 = new Base64(64, (byte[]) null, false);
      Object object0 = new Object();
//      try { 
        base64_1.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)109;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)25}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)6);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AA", string0);
      
      String string1 = Base64.encodeBase64String(byteArray0);
      assertEquals("AA==", string1);
      
      Base64.isBase64((byte)0);
      base64_0.readResults(byteArray1, 0, 1329);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)43;
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(3490, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD`.p+]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      Base64 base64_0 = new Base64((-1), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)68, (byte)56, (byte)0, (byte)10}, byteArray1);
      
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.isBase64((byte)96);
      base64_0.readResults(byteArray0, (byte)0, 0);
      base64_0.avail();
      Base64.isBase64("");
      byte[] byteArray2 = base64_0.decode("+TSOoHq\"wbvu\"Em*;m+");
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(11, byteArray2.length);
      
      Base64.isArrayByteBase64(byteArray0);
      boolean boolean0 = Base64.isBase64("+TSOoHq\"wbvu\"Em*;m+");
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(504, byteArray0);
      base64_0.readResults(byteArray0, (byte)0, 504);
      base64_0.encodeToString(byteArray0);
      base64_0.decode("GjW");
      base64_0.decode("");
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode("");
      base64_0.encodeToString(byteArray0);
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(0, 1335, mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // bitLength < 2
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_0 = new Base64(52, (byte[]) null);
      base64_0.decode((byte[]) null);
      base64_0.readResults((byte[]) null, 52, 52);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)121;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)102, (byte)115, (byte)99, (byte)49, (byte)103, (byte)65, (byte)65, (byte)101, (byte)81}, byteArray1);
      
      Base64.decodeBase64("");
      base64_0.avail();
      base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)49;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.signum();
      bigInteger0.bitCount();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)49);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.decode(byteArray1);
      base64_0.encode(byteArray2);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, (-330));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -330
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)84;
      int int0 = base64_0.readResults(byteArray0, 0, (byte)32);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Object object0 = base64_0.decode((Object) "3`zxZt");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.decode(object1);
      Object object3 = base64_0.decode(object2);
      Object object4 = base64_0.decode(object3);
      assertSame(object4, object3);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(object4, object2);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)35;
      Base64 base64_0 = new Base64(1200, byteArray0, true);
      base64_0.decode(byteArray0, 0, (int) (byte)0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte)6;
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.decodeBase64("8uXJZ\"0b#y<.0^m");
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-27), (byte) (-55), (byte)103, (byte)70, (byte) (-14), (byte) (-46)}, byteArray1);
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      byteArray0[2] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64("p-?;R-1");
      assertEquals(3, byteArray2.length);
      
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-14);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-14);
      byteArray3[3] = (byte)83;
      byteArray3[4] = (byte) (-14);
      String string0 = Base64.encodeBase64String(byteArray3);
      assertEquals("AADyU/I=", string0);
      
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)18;
      base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)94;
      byte byte1 = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte) (-112), byteArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AV6Q]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)65;
      byteArray0[2] = (byte)65;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.divide(bigInteger0);
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigInteger2.min(bigInteger3);
      BigInteger bigInteger4 = Base64.decodeInteger(byteArray0);
      // Undeclared exception!
//      try { 
        bigInteger4.mod(bigInteger2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger: modulus not positive
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte) (-47);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = 3103;
      Base64 base64_0 = new Base64(3103);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)91;
      Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)0, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [6\uFFFD\u0000\u0001\u0000[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-10);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (-1699), (int) (byte)1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1699
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(72, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0001\uFFFDj\u0011\u0001N\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(80, byteArray0, false);
      Object object0 = base64_0.decode((Object) ") than the specified maxium size of ");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }
}
