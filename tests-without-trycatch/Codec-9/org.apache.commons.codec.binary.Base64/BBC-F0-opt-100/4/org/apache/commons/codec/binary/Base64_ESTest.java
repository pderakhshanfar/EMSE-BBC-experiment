/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:14:52 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2436, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-577));
      base64_0.decode(byteArray0, 0, 445);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2436, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(2436);
      base64_0.decode(byteArray0, 385, 2436);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2425, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0, 385, 2425);
      assertEquals(408, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Base64 base64_0 = new Base64((-277));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64(false);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)62);
      String string0 = base64_1.encodeToString(byteArray1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 2345;
      BigInteger bigInteger0 = BigInteger.probablePrime(2345, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      String string0 = "org.apache.commons.codec.binary.Base64";
      Base64.isBase64(string0);
      int int1 = 21;
      Base64 base64_0 = new Base64(int1);
      base64_0.encode(byteArray0, int1, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)122);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      String string0 = base64_0.encodeToString(byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals("AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      base64_0.encode((byte[]) null, (-1), (-1));
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, (-1), (-359));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[8] = (byte)29;
      Base64 base64_0 = new Base64((byte)29, byteArray0, false);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AB0dAAAAAAAdAAAAAAAAAAAAAAAA\u0000\u001D\u001D\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AA==\u0000\u001D\u001D\u0000\u0000\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(52, byteArray1.length);
      
      Base64.isBase64("");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      assertEquals(37, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 10);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64("");
      Base64.discardWhitespace(byteArray1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, false, true, (-88));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (104) than the specified maxium size of -88
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)29);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)29, byteArray1);
      base64_0.encode(byteArray1, (int) (byte)29, (-1));
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, (-194), 96);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)122;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-4), (byte)0, (byte) (-48), (byte)68, (byte) (-1), (byte)122}, byteArray1);
      assertEquals(8, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, false, 5);
      int int0 = (-1);
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)95;
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = Base64.decodeBase64(") than the specified maxium size of ");
      assertEquals(21, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64("");
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte) (-121);
      byteArray1[3] = (byte)50;
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte) (-115);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(43, byteArray1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\t\uFFFD\uFFFD20\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64(1908874353, byteArray0);
      Object object0 = base64_0.decode((Object) ") than the specified maxium size of ");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false);
      MockRandom mockRandom0 = new MockRandom(2L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.isBase64((byte)61);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 61);
      assertArrayEquals(new byte[] {(byte)80, (byte)84, (byte)48}, byteArray1);
      
      Base64 base64_0 = new Base64((byte)61);
      base64_0.decode((Object) "UTF-16BE");
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)61;
      byteArray2[1] = (byte)61;
      byteArray2[2] = (byte)61;
      byteArray2[3] = (byte)61;
      byteArray2[4] = (byte)61;
      byteArray2[5] = (byte)61;
      byteArray2[6] = (byte)61;
      byteArray2[7] = (byte)61;
      byteArray2[8] = (byte)61;
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      Base64 base64_1 = new Base64();
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray0, 0, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Base64.isBase64((byte)9);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.binary.StringUtils");
      byte byte0 = (byte)34;
      Base64.isBase64((byte)34);
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64.isBase64((byte)126);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)126;
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 1, (int) (byte)126);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)92;
      byteArray1[2] = (byte)47;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(true);
      Object object0 = base64_1.decode((Object) "encodeInteger called with null parameter");
      base64_0.encode(object0);
      Random.setNextRandom((byte)0);
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_1 = new Base64(3648);
      base64_1.decode("]");
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 1, 8164);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 37
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray1, true, false);
      Base64.isBase64(" `]HAB5O");
      Base64.encodeBase64(byteArray2, true, true);
      base64_0.hasData();
      base64_0.encodeToString(byteArray2);
      MockRandom mockRandom0 = new MockRandom((-3071L));
      BigInteger bigInteger0 = BigInteger.probablePrime(64, mockRandom0);
      bigInteger0.shiftRight((byte)0);
      Base64.isBase64("}}");
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.compareTo(bigInteger1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      base64_0.avail();
      Base64.discardWhitespace(byteArray3);
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64((-1782));
      base64_0.encode((byte[]) null, (-1782), (-1782));
      base64_0.decode(")XJF}*rml;]pKC`$");
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(114, (byte[]) null, true);
      Base64.encodeBase64((byte[]) null, false);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 75, 114);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64.isBase64((byte)122);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64(byteArray0, false);
      int int0 = 1;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, 1, (int) (byte)122);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = (byte)0;
      Base64 base64_0 = new Base64((byte)0, (byte[]) null, false);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, (int) (byte)0, 477);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, true, (-2176));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Base64.encodeBase64(byteArray0, true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)48;
      base64_0.encode(byteArray0, 107, (int) (byte) (-75));
      String string0 = null;
      base64_0.decode((String) null);
      BigInteger bigInteger1 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-42);
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte) (-62);
      byteArray1[5] = (byte)9;
      byteArray1[6] = (byte)4;
      base64_0.readResults(byteArray1, (byte) (-42), (byte) (-42));
      base64_0.encode(byteArray1);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64.isBase64((byte)122);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64.encodeBase64(byteArray0, true);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)122;
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-60);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)122;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)122;
      byteArray2[6] = (byte)122;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)0;
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)41;
      Base64 base64_0 = new Base64((byte)125);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 118);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)48;
      base64_0.encode(byteArray0, 107, (int) (byte) (-75));
      // Undeclared exception!
//      try { 
        bigInteger0.divideAndRemainder((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64 base64_0 = new Base64((-1782));
      base64_0.encode((byte[]) null, (-1782), (-1782));
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.isBase64(")XJF}*rml;]pKC`$");
      Base64.encodeBase64((byte[]) null, true, true);
      base64_0.hasData();
      base64_0.encodeToString((byte[]) null);
      MockRandom mockRandom0 = new MockRandom(76);
      Base64.isBase64(")XJF}*rml;]pKC`$");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.compareTo(bigInteger0);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_1 = new Base64(5, (byte[]) null, false);
      base64_0.avail();
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64(": ");
      base64_1.hasData();
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      base64_1.encodeToString(byteArray1);
      MockRandom mockRandom0 = new MockRandom(10L);
      BigInteger.probablePrime(76, mockRandom0);
      mockRandom0.longs();
      mockRandom0.longs(1L, 4L, (long) 76);
      Base64.isBase64("QUFBQUFBPT0=\uFFFD\n");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger2.flipBit(8192);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger2);
      Base64 base64_2 = new Base64((-4285), byteArray0, false);
      Base64.decodeBase64(byteArray2);
      base64_2.avail();
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.isBase64("3\"/smI'YN])");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.hasData();
      base64_0.encodeToString(byteArray0);
      MockRandom mockRandom0 = new MockRandom((byte)0);
      Base64.isBase64("AAA\uFFFD\n");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.compareTo(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(5, byteArray0, true);
      base64_1.avail();
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64.isBase64("_g]ebjC");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)23;
      Base64 base64_0 = new Base64((-3854), byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)17);
      base64_0.decode("_g]ebjC");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.compareTo(bigInteger1);
      bigInteger0.min(bigInteger1);
      bigInteger0.negate();
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.getLowestSetBit();
      base64_0.encode(byteArray0, 0, 1325);
      base64_0.avail();
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("rZgF.?uK'=z$A=");
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(41);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray2);
      BigInteger bigInteger2 = new BigInteger(byteArray1);
      BigInteger bigInteger3 = bigInteger2.subtract(bigInteger1);
      base64_0.decode(byteArray2, (-90), 64);
      Base64 base64_1 = new Base64(41);
      Base64.encodeBase64(byteArray0, false);
      Base64.toIntegerBytes(bigInteger3);
      Base64.isBase64((byte)18);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64.isBase64("_g]ebjC");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)23;
      Base64 base64_0 = new Base64((-3854), byteArray0, false);
      Base64.encodeBase64(byteArray0, false, false, (int) (byte)17);
      base64_0.decode("_g]ebjC");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      bigInteger0.negate();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.getLowestSetBit();
      base64_0.encode(byteArray0, 0, 1325);
      base64_0.hasData();
      base64_0.hasData();
      Base64.isBase64(byteArray1);
//      try { 
        base64_0.encode((Object) bigInteger2);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64(": ");
      base64_0.hasData();
      Base64.decodeBase64((String) null);
      Base64 base64_1 = new Base64(false);
      base64_1.encodeToString(byteArray0);
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
//      try { 
        BigInteger.probablePrime((byte) (-92), mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // bitLength < 2
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64((-1782));
      base64_0.encode((byte[]) null, (-1782), (-1782));
      base64_0.decode(")XJF}*rml;]pKC`$");
      Base64.decodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(true);
      Base64 base64_2 = new Base64(64, (byte[]) null, true);
      base64_2.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.multiply(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64.encodeBase64((byte[]) null, true);
      Base64.toIntegerBytes(bigInteger1);
      Base64.isBase64((byte)88);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64.isBase64((byte)122);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.isBase64("");
      base64_0.hasData();
      byte[] byteArray2 = Base64.decodeBase64("");
      base64_0.encodeToString(byteArray2);
      MockRandom mockRandom0 = new MockRandom(64);
      BigInteger bigInteger0 = BigInteger.probablePrime(775, mockRandom0);
      mockRandom0.longs((long) (byte)122, (-192L), (-1L));
      Base64.isBase64(")R6>z65K9oyP`");
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger2.compareTo(bigInteger0);
      Base64.encodeInteger(bigInteger2);
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64((byte)0, byteArray1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AAAAAAAA\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.isBase64("3\"/smI'YN])");
      base64_0.encode(byteArray2, (int) (byte)0, (int) (byte)0);
      Object object0 = base64_0.decode((Object) "3\"/smI'YN])");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      String string0 = "";
      base64_0.decode("");
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64((byte)0, byteArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AAA=\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64((-1782));
      base64_0.encode((byte[]) null, (-1782), (-1782));
      base64_0.decode(")XJF}*rml;]pKC`$");
      base64_0.decode("S])E+/4usglcZ\"U/+?");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.intValueExact();
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64(byteArray0, true);
      base64_0.hasData();
      base64_0.encodeToString((byte[]) null);
      MockRandom mockRandom0 = new MockRandom((-1782));
      BigInteger bigInteger1 = BigInteger.probablePrime(64, mockRandom0);
      bigInteger1.longValue();
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte) (-15));
      base64_0.encode(byteArray1, 0, (int) (byte) (-15));
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(64);
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = bigInteger1.flipBit(64);
      bigInteger2.or(bigInteger0);
      bigInteger2.toString();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      Base64 base64_1 = new Base64(9);
      base64_1.encodeToString(byteArray3);
      base64_1.encodeToString(byteArray2);
      Object object0 = base64_1.decode((Object) "");
      base64_1.decode(object0);
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64((-1782));
      base64_0.encode((byte[]) null, (-1782), (-1782));
      byte[] byteArray0 = base64_0.decode(")XJF}*rml;]pKC`$");
      base64_0.decode("S])E+/4usglcZ\"U/+?");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64(byteArray1, true);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2, true, false, 76);
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64((byte[]) null, true, true, 264);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(76, (byte[]) null, true);
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 2142, 264);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.isBase64("3\"/smI'YN])");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.hasData();
      base64_0.encodeToString(byteArray0);
      MockRandom mockRandom0 = new MockRandom((-1928L));
      BigInteger bigInteger0 = BigInteger.probablePrime(64, mockRandom0);
      Base64.isBase64("");
      bigInteger0.compareTo(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, 92, (-442));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)31;
      Base64 base64_1 = new Base64((-442), byteArray1);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      String string0 = "!vzK<Q0Qg0S[TzRRL";
      Base64.isBase64("encodeInteger called with null parameter");
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(byteArray1);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length BigInteger
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)90;
      byteArray2[1] = (byte)1;
      byteArray2[3] = (byte)76;
      byteArray0[3] = (byte)76;
      Base64.isBase64("!vzK<Q0Qg0S[TzRRL");
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.avail();
      Base64.encodeBase64(byteArray1, true);
      Base64.encodeInteger(bigInteger1);
      Base64.decodeBase64(byteArray1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("rZgF.?uK'=z$A=");
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(41);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray2);
      BigInteger bigInteger2 = new BigInteger(byteArray1);
      bigInteger2.subtract(bigInteger1);
      base64_0.decode(byteArray2, (-90), (-147));
      Base64 base64_1 = new Base64((-147));
      byte[] byteArray3 = base64_1.decode(byteArray2);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.avail();
      Base64.decodeInteger(byteArray3);
      Base64.encodeBase64(byteArray0, false, false, 76);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(2917, (byte[]) null, false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)125;
      byteArray1[3] = (byte) (-90);
      byteArray1[4] = (byte) (-118);
      byteArray1[5] = (byte) (-59);
      byteArray1[6] = (byte) (-41);
      base64_0.encodeToString(byteArray1);
      base64_0.decode("");
      byteArray1[7] = (byte) (-86);
      byteArray1[8] = (byte) (-7);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, false, false, (-1201));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of -1201
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)1;
      Base64.decodeBase64(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      base64_0.avail();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.doubleValue();
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger1.multiply(bigInteger0);
      // Undeclared exception!
//      try { 
        bigInteger2.flipBit((byte) (-118));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative bit address
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.isBase64(": ");
      base64_1.hasData();
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      base64_0.encodeToString(byteArray1);
      MockRandom mockRandom0 = new MockRandom(76);
      BigInteger.probablePrime(76, mockRandom0);
      // Undeclared exception!
//      try { 
        mockRandom0.longs((-1L), (long) (byte)0, (long) 76);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // size must be non-negative
//         //
//         verifyException("java.util.Random", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64((-1782));
      base64_0.encode((byte[]) null, (-1782), (-1782));
      byte[] byteArray0 = base64_0.decode(")XJF}*rml;]pKC`$");
      base64_0.decode("S])E+/4usglcZ\"U/+?");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64(byteArray1, true);
      base64_0.encode(byteArray1, 5833, (-1782));
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.decode(byteArray2);
      Object object0 = new Object();
      Object object1 = new Object();
//      try { 
        base64_0.decode(object1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-15);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.isBase64("<Pr?#u)c4]h-d5wUQ");
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.remainder(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      bigInteger0.toString();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.gcd(bigInteger2);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)1;
      byteArray3[3] = (byte)1;
      byteArray3[4] = (byte)1;
      byteArray3[5] = (byte)1;
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)0;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1, false, false, 80);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0);
      base64_0.readResults(byteArray1, 1548, 561);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      Base64.encodeBase64(byteArray0, true);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-15);
      int int0 = 0;
      base64_0.encode(byteArray0, (int) (byte)1, 0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.pow(76);
      Base64.isBase64("<Pr?#u)c4]h-d5wUQ");
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(2043);
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray0, (-2085), (int) (byte)0);
      base64_0.decode(byteArray1);
      Base64.isBase64("");
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray2);
      Base64.encodeInteger(bigInteger0);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)27, (int) (byte)50);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 27
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64(2043);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      base64_0.decode(byteArray1);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)0;
      Base64.decodeBase64(":K5Maev$L>ZxBgD,nS");
      byteArray0[8] = (byte) (-55);
      base64_0.decode(byteArray0, 0, 0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)102;
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64.isArrayByteBase64(byteArray2);
      base64_0.avail();
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray2 = null;
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)124;
      boolean boolean0 = false;
      base64_0.decode(byteArray0, 0, 0);
      Base64.encodeBase64(byteArray0, false);
      String string0 = "";
      base64_0.decode((Object) "");
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(byteArray1);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length BigInteger
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      Base64.encodeBase64(byteArray0, true);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-15);
      base64_0.encode(byteArray0, (int) (byte)1, 0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.pow(76);
      Base64.isBase64("<Pr?#u)c4]h-d5wUQ");
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
//      try { 
        bigInteger0.flipBit((byte) (-15));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative bit address
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-89);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.isBase64("3\"/smI'YN])");
      base64_0.hasData();
      base64_0.encodeToString(byteArray0);
      MockRandom mockRandom0 = new MockRandom((-1928L));
      BigInteger bigInteger0 = BigInteger.probablePrime(64, mockRandom0);
      mockRandom0.longs(0L, (-440L), (long) (byte) (-98));
      Base64.isBase64("");
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.compareTo(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte byte0 = (byte) (-90);
      Base64.isBase64((byte) (-90));
      byte[] byteArray0 = null;
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-77);
      byteArray0[8] = (byte)0;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
//      try { 
        base64_0.decode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-1);
      base64_0.readResults(byteArray0, (byte) (-1), (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (-2176));
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray2);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      int int0 = 0;
      base64_0.decode(byteArray1, (-2176), 0);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte byte0 = (byte)122;
      Base64.isBase64((byte)122);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      // Undeclared exception!
//      try { 
        bigInteger0.flipBit((-586));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative bit address
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((-1568), byteArray0);
      String string0 = "";
      Base64.isBase64("");
      byte[] byteArray1 = new byte[8];
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, (-1568), (-1568));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(2043);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-55);
      base64_0.decode(byteArray0, 0, 0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)102;
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.avail();
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-40);
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[1] = (byte) (-62);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray0);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-119);
      byte byte0 = (byte)54;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-4771), byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFDz\u0000<\u01C96\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-1782);
      Base64 base64_0 = new Base64((-1782));
      byte[] byteArray0 = null;
      base64_0.encode((byte[]) null, (-1782), (-1782));
      base64_0.decode(")XJF}*rml;]pKC`$");
      base64_0.decode("S])E+/4usglcZ\"U/+?");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64(byteArray1, true);
      base64_0.encode(byteArray1, 5833, (-1782));
//      try { 
        base64_0.encode((Object) "S])E+/4usglcZ\"U/+?");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-82);
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "";
      Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-821));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-17);
      byteArray2[1] = (byte)0;
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.subtract(bigInteger1);
      byteArray2[2] = (byte) (-48);
      byteArray2[3] = (byte)31;
      byteArray2[4] = (byte) (-22);
      byteArray2[5] = (byte)0;
      base64_0.decode(byteArray2, 1, 19);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, false, false, (-65));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of -65
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, true, true, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (18) than the specified maxium size of 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)53;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64 base64_0 = new Base64(507, byteArray2);
      byte[] byteArray4 = Base64.decodeBase64(byteArray2);
      int int0 = base64_0.readResults(byteArray2, 507, 507);
      assertEquals(0, int0);
      
      base64_0.decode((Object) "");
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("", string0);
      
      Base64.encodeBase64(byteArray4, false);
      Base64.isArrayByteBase64(byteArray2);
      base64_0.decode((Object) "");
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray1, byteArray4);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-36);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(603, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [q\u0000\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-44);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)65, (byte)65, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)31;
      byteArray0[0] = (byte)31;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte)31, byteArray0);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals("2cq3AeUA", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte byte0 = (byte)76;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)124;
      byteArray1[3] = (byte)76;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, (-1), (int) (byte)76);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-2);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      int int0 = base64_0.readResults(byteArray0, (byte)0, (byte)24);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-107);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)66, (byte)47, (byte)55, (byte)101, (byte)86, (byte)13, (byte)10}, byteArray1);
      assertEquals(10, byteArray1.length);
  }
}
