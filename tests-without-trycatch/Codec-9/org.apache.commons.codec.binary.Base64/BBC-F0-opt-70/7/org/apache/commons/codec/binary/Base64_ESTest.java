/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:14:48 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-110);
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)32;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte) (-28), (byte)59, (byte)1, (byte) (-110), (byte)0, (byte)123, (byte)32}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((short)31520, bigInteger0.shortValue());
      assertEquals((byte)32, bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte) (-28), (byte)59, (byte)1, (byte) (-110), (byte)0, (byte)123, (byte)32}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertEquals((short)31520, bigInteger0.shortValue());
      assertEquals((byte)32, bigInteger0.byteValue());
      
      Base64 base64_1 = new Base64(false);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertFalse(base64_1.isUrlSafe());
      
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray0, (int) (byte)0, 123);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64((byte)93);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((-980), byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray1, 0, 0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      
      Object object0 = base64_0.decode((Object) "4[Yoz>v5/5$");
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertNotNull(object0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8253, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(1372, byteArray0.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(46);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(1372, byteArray0.length);
      //  // Unstable assertion: assertEquals(1916, byteArray1.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(1372, byteArray0.length);
      //  // Unstable assertion: assertEquals(1916, byteArray1.length);
      //  // Unstable assertion: assertEquals(2674, byteArray2.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(1372, byteArray0.length);
      //  // Unstable assertion: assertEquals(1916, byteArray1.length);
      //  // Unstable assertion: assertEquals(2674, byteArray2.length);
      //  // Unstable assertion: assertEquals(3732, byteArray3.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(1372, byteArray0.length);
      //  // Unstable assertion: assertEquals(1882, byteArray4.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray3);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertEquals(1372, byteArray0.length);
      //  // Unstable assertion: assertEquals(1916, byteArray1.length);
      //  // Unstable assertion: assertEquals(2674, byteArray2.length);
      //  // Unstable assertion: assertEquals(3732, byteArray3.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short) (-1526), bigInteger1.shortValue());
      
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8173, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1360, byteArray0.length);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(11);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1360, byteArray0.length);
      assertEquals(2270, byteArray1.length);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(1360, byteArray0.length);
      assertEquals(2270, byteArray1.length);
      assertEquals(3786, byteArray2.length);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(1360, byteArray0.length);
      assertEquals(2270, byteArray1.length);
      assertEquals(3786, byteArray2.length);
      assertEquals(6310, byteArray3.length);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = base64_0.decode(byteArray3);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotNull(byteArray4);
      assertEquals(1360, byteArray0.length);
      assertEquals(2270, byteArray1.length);
      assertEquals(3786, byteArray2.length);
      assertEquals(6310, byteArray3.length);
      assertEquals(3786, byteArray4.length);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8173, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-256), bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1360, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-256), bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64(32);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1360, byteArray0.length);
      assertEquals(1930, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(1360, byteArray0.length);
      assertEquals(1930, byteArray1.length);
      assertEquals(2738, byteArray2.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(1360, byteArray0.length);
      assertEquals(1816, byteArray3.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-256), bigInteger0.shortValue());
      
      Base64 base64_1 = new Base64(32);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertFalse(base64_1.isUrlSafe());
      
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(string0);
      assertEquals(1360, byteArray0.length);
      assertEquals(1930, byteArray1.length);
      assertEquals(2738, byteArray2.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      base64_1.encode(byteArray2, 76, 8173);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8173, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(1360, byteArray0.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64(11);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(1360, byteArray0.length);
      //  // Unstable assertion: assertEquals(2270, byteArray1.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(1360, byteArray0.length);
      //  // Unstable assertion: assertEquals(2270, byteArray1.length);
      //  // Unstable assertion: assertEquals(3786, byteArray2.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(1360, byteArray0.length);
      //  // Unstable assertion: assertEquals(2270, byteArray1.length);
      //  // Unstable assertion: assertEquals(3786, byteArray2.length);
      //  // Unstable assertion: assertEquals(6310, byteArray3.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64(byteArray3);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(1360, byteArray0.length);
      //  // Unstable assertion: assertEquals(2270, byteArray1.length);
      //  // Unstable assertion: assertEquals(3786, byteArray2.length);
      //  // Unstable assertion: assertEquals(6310, byteArray3.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      int int0 = base64_0.readResults(byteArray2, (-3), 42);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertEquals(1360, byteArray0.length);
      //  // Unstable assertion: assertEquals(2270, byteArray1.length);
      //  // Unstable assertion: assertEquals(3786, byteArray2.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals(1360, byteArray0.length);
      //  // Unstable assertion: assertEquals(2270, byteArray1.length);
      //  // Unstable assertion: assertEquals(3786, byteArray2.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(true);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertTrue(base64_1.isUrlSafe());
      
//      try { 
        base64_1.encode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8185, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1360, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 513, 211);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1360, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.decode((byte[]) null, 75, (-2617));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8185, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1360, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64(46);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = bigInteger0.toString(76);
      assertNotNull(string0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1360, byteArray0.length);
      assertEquals(1900, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(64);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(1360, byteArray0.length);
      assertEquals(1864, byteArray2.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_2 = new Base64();
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertNotNull(base64_2);
      assertFalse(base64_2.isUrlSafe());
      
      byte[] byteArray3 = base64_2.encode(byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(base64_0, base64_2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_2, base64_0);
      assertNotSame(base64_2, base64_1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(base64_0.equals((Object)base64_2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertEquals(1360, byteArray0.length);
      assertEquals(1900, byteArray1.length);
      assertEquals(2536, byteArray3.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_2.isUrlSafe());
      
      Base64 base64_3 = new Base64((-3387));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_3.equals((Object)base64_1));
      assertFalse(base64_3.equals((Object)base64_0));
      assertFalse(base64_3.equals((Object)base64_2));
      assertNotNull(base64_3);
      assertFalse(base64_3.isUrlSafe());
      
      byte[] byteArray4 = base64_3.encode(byteArray3);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(base64_0, base64_3);
      assertNotSame(base64_0, base64_2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_2, base64_3);
      assertNotSame(base64_2, base64_0);
      assertNotSame(base64_2, base64_1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(base64_3, base64_1);
      assertNotSame(base64_3, base64_0);
      assertNotSame(base64_3, base64_2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(base64_0.equals((Object)base64_3));
      assertFalse(base64_0.equals((Object)base64_2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_2.equals((Object)base64_3));
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(base64_3.equals((Object)base64_1));
      assertFalse(base64_3.equals((Object)base64_0));
      assertFalse(base64_3.equals((Object)base64_2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotNull(byteArray4);
      assertEquals(1360, byteArray0.length);
      assertEquals(1900, byteArray1.length);
      assertEquals(2536, byteArray3.length);
      assertEquals(3384, byteArray4.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_2.isUrlSafe());
      assertFalse(base64_3.isUrlSafe());
      
      // Undeclared exception!
      base64_2.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(3683, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)115, bigInteger0.byteValue());
      assertEquals((short)115, bigInteger0.shortValue());
      
      int int0 = bigInteger0.signum();
      assertEquals(1, int0);
      assertEquals((byte)115, bigInteger0.byteValue());
      assertEquals((short)115, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(612, byteArray0.length);
      assertEquals((byte)115, bigInteger0.byteValue());
      assertEquals((short)115, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64(true);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, 64, 3683);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(612, byteArray0.length);
      assertEquals((byte)115, bigInteger0.byteValue());
      assertEquals((short)115, bigInteger0.shortValue());
      assertTrue(base64_0.isUrlSafe());
      
      int int1 = base64_0.readResults(byteArray0, 28, 3683);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(int1 == int0);
      assertEquals(409, int1);
      assertEquals(612, byteArray0.length);
      assertEquals((byte)115, bigInteger0.byteValue());
      assertEquals((short)115, bigInteger0.shortValue());
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-70);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)14, (byte) (-48), (byte)14, (byte)8, (byte) (-70)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)68, (byte)116, (byte)65, (byte)79, (byte)67, (byte)76, (byte)111, (byte)61, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      byte[] byteArray2 = new byte[8];
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-4);
      byteArray2[1] = (byte)14;
      byteArray2[2] = (byte)14;
      byteArray2[3] = (byte)22;
      byteArray0[4] = (byte)101;
      byteArray2[5] = (byte) (-48);
      byteArray2[6] = (byte) (-48);
      byteArray2[7] = (byte) (-4);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, (int) (byte)14);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-4), (byte)14, (byte)14, (byte)22, (byte)0, (byte) (-48), (byte) (-48), (byte) (-4)}, byteArray2);
      //  // Unstable assertion: assertEquals(13, byteArray3.length);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-4), (byte)14, (byte)14, (byte)22, (byte)0, (byte) (-48), (byte) (-48), (byte) (-4)}, byteArray2);
      //  // Unstable assertion: assertEquals(13, byteArray3.length);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      //  // Unstable assertion: assertEquals((byte) (-4), bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-12036), bigInteger0.shortValue());
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-4), (byte)14, (byte)14, (byte)22, (byte)0, (byte) (-48), (byte) (-48), (byte) (-4)}, byteArray2);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(6394, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1064, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1064, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals(1064, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      Base64 base64_0 = new Base64(true);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 44, 2577);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1064
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64(36);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode((byte[]) null, 36, (-3551));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, 36, 36);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(6394, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1064, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      long long0 = mockRandom0.nextLong();
      assertEquals(200L, long0);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
      assertEquals(1064, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1064, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1809L);
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(3736, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(620, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64(true);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, 64, 3736);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(620, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(base64_0.isUrlSafe());
      
      int int0 = base64_0.avail();
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(415, int0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)57;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)68, (byte)107, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("");
      //  // Unstable assertion: assertTrue(boolean0);
      
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)57);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)68, (byte)107, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      int int0 = base64_0.readResults(byteArray1, (byte)0, (byte)0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)68, (byte)107, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64();
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(false);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertFalse(base64_1.isUrlSafe());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      Base64 base64_2 = new Base64(false);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertNotNull(base64_2);
      assertFalse(base64_2.isUrlSafe());
      
      int int0 = base64_2.readResults(byteArray0, 64, 64);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_2, base64_0);
      assertNotSame(base64_2, base64_1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(base64_2.isUrlSafe());
      
      base64_1.decode(byteArray1, 0, 64);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_1, base64_2);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(base64_1.isUrlSafe());
      
      Random.setNextRandom(76);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      Base64 base64_0 = new Base64(10, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.decodeBase64("@uup$Hdu&kL");
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-22), (byte)71, (byte)118, (byte) (-23), (byte)11}, byteArray2);
      assertEquals(6, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(14, byteArray3.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)37;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)68, (byte) (-70), (byte)37}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((short) (-17883), bigInteger0.shortValue());
      assertEquals((byte)37, bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)68, (byte) (-70), (byte)37}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte) (-70), (byte)37}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals((short) (-17883), bigInteger0.shortValue());
      assertEquals((byte)37, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)79, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(false);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      base64_1.decode(byteArray1, (int) (byte)0, (int) (byte)57);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)79, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)79, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte) (-6), (byte)10}, byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      
      Base64 base64_2 = new Base64();
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_1));
      //  // Unstable assertion: assertNotNull(base64_2);
      //  // Unstable assertion: assertFalse(base64_2.isUrlSafe());
      
//      try { 
        base64_2.decode((Object) bigInteger0);
//       //  fail("Expecting exception: Exception");
       // Unstable assertion
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte)9, (byte)105, (byte)30, (byte)34, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte)105, (byte)30, (byte)34, (byte)1}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(79);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      Object object0 = base64_0.decode((Object) "F");
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object0);
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(true);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertTrue(base64_1.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = base64_0.decode((byte[]) null);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(base64_0, base64_1);
      assertFalse(base64_0.equals((Object)base64_1));
      assertNull(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_2 = new Base64(true);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertNotNull(base64_2);
      assertTrue(base64_2.isUrlSafe());
      
      byte[] byteArray2 = base64_2.encode((byte[]) null);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(base64_2, base64_0);
      assertNotSame(base64_2, base64_1);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertNull(byteArray2);
      assertTrue(base64_2.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      assertNotNull(byteArray0);
      assertEquals(27, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      
      boolean boolean1 = Base64.isBase64((byte)101);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Base64 base64_0 = new Base64((byte)101);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      boolean boolean2 = Base64.isBase64(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      
      Base64 base64_1 = new Base64(true);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertTrue(base64_1.isUrlSafe());
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      assertEquals(66, byteArray3.length);
      
      byte[] byteArray4 = base64_0.decode(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-70), (byte)123}, byteArray4);
      assertEquals(27, byteArray0.length);
      assertEquals(3, byteArray4.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray3, true, false, (int) (byte)101);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertNotNull(byteArray5);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      assertEquals(66, byteArray3.length);
      assertEquals(92, byteArray5.length);
      
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray2, (int) (byte)101, 115);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 101
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      assertNotNull(byteArray0);
      assertEquals(27, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      
      boolean boolean1 = Base64.isBase64((byte)101);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64((byte)101);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertSame(bigInteger1, bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      
      boolean boolean2 = Base64.isBase64(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      
      boolean boolean3 = Base64.isBase64((byte)0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = Base64.isBase64((byte)61);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      byte[] byteArray4 = base64_0.encode(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertNotNull(byteArray4);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      assertEquals(66, byteArray4.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-6), (byte)10}, byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      
      base64_0.encode(byteArray1, (-4376), (-4376));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray3);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray3.length);
      
      base64_0.decode(byteArray1, 77, (-1));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray4);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray5);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray5.length);
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64(79);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      Object object0 = base64_0.decode((Object) "");
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object0);
      assertFalse(base64_0.isUrlSafe());
      
      Object object1 = base64_0.decode(object0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      assertFalse(base64_0.isUrlSafe());
      
      Object object2 = base64_0.encode(object1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(object0, object1);
      assertSame(object0, object2);
      assertSame(object1, object2);
      assertSame(object1, object0);
      assertSame(object2, object1);
      assertSame(object2, object0);
      assertNotNull(object2);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      assertNotNull(byteArray0);
      assertEquals(27, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      
      boolean boolean1 = Base64.isBase64((byte)101);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64((byte)101);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertSame(bigInteger1, bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      
      boolean boolean2 = Base64.isBase64(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      
      Base64 base64_1 = new Base64(true);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertTrue(base64_1.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertNotNull(byteArray4);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      assertEquals(66, byteArray4.length);
      
      byte[] byteArray5 = base64_0.decode(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-70), (byte)123}, byteArray5);
      assertEquals(27, byteArray0.length);
      assertEquals(3, byteArray5.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray6 = base64_1.encode(byteArray4);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray4, byteArray6);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertNotNull(byteArray6);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      assertEquals(66, byteArray4.length);
      assertEquals(92, byteArray6.length);
      assertTrue(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      assertNotNull(byteArray0);
      assertEquals(27, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      
      boolean boolean1 = Base64.isBase64((byte)101);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      String string0 = Base64.encodeBase64String(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals("b3JnYXBhY2hlY29tbW9uc2NvZGVjRGVjb2RlckV4Y2VwdGlv", string0);
      assertNotNull(string0);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(false);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray3 = base64_1.decode("org.apache.commons.codec.DecoderException");
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertEquals(27, byteArray3.length);
      assertFalse(base64_1.isUrlSafe());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertEquals(0, byteArray4.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_2 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertNotNull(base64_2);
      assertFalse(base64_2.isUrlSafe());
      
      // Undeclared exception!
//      try { 
        base64_2.decode(byteArray1, 0, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 36
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)114);
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.not();
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte) (-1), bigInteger1.byteValue());
      assertEquals((short) (-1), bigInteger1.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(4392, byteArray0, true);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)114;
      byteArray1[2] = (byte)114;
      byteArray1[3] = (byte)114;
      byteArray1[4] = (byte)114;
      byteArray1[5] = (byte)114;
      byteArray1[6] = (byte)114;
      byteArray1[7] = (byte)114;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)30;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)104, (byte)18, (byte)6, (byte)30}, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)104, (byte)18, (byte)6, (byte)30}, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)104, (byte)18, (byte)6, (byte)30}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)87, (byte)103, (byte)83, (byte)66, (byte)104, (byte)52, (byte)61, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)104, (byte)18, (byte)6, (byte)30}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)87, (byte)103, (byte)83, (byte)66, (byte)104, (byte)52, (byte)61, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)104, (byte)18, (byte)6, (byte)30}, byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertEquals(5, byteArray2.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)104, (byte)18, (byte)6, (byte)30}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)87, (byte)103, (byte)83, (byte)66, (byte)104, (byte)52, (byte)61, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertEquals((byte)30, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)1566, bigInteger1.shortValue());
      
      int int0 = base64_0.readResults(byteArray1, (byte)104, (byte)30);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)104, (byte)18, (byte)6, (byte)30}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)87, (byte)103, (byte)83, (byte)66, (byte)104, (byte)52, (byte)61, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)104, (byte)18, (byte)6, (byte)30}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)87, (byte)103, (byte)83, (byte)66, (byte)104, (byte)52, (byte)61, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)87, (byte)103, (byte)83, (byte)66, (byte)104, (byte)52, (byte)61, (byte) (-6)}, byteArray3);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertEquals(9, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      assertNotNull(byteArray0);
      assertEquals(27, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      
      boolean boolean1 = Base64.isBase64((byte)101);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64((byte)101);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertSame(bigInteger1, bigInteger2);
      assertSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      
      boolean boolean2 = Base64.isBase64(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      
      Base64 base64_1 = new Base64(false);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertFalse(base64_1.isUrlSafe());
      
      boolean boolean3 = Base64.isBase64(" U32':n|jS0-xFHzND");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotNull(byteArray4);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      assertEquals(66, byteArray4.length);
      
      byte[] byteArray5 = base64_0.decode(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertNotNull(byteArray5);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      assertEquals(36, byteArray5.length);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray5);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertNotNull(bigInteger3);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      assertEquals(36, byteArray5.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((short) (-10072), bigInteger3.shortValue());
      assertEquals((byte) (-88), bigInteger3.byteValue());
      
      int int0 = base64_0.readResults(byteArray4, 64, 64);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray5);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertEquals((-1), int0);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      assertEquals(66, byteArray4.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray6 = Base64.discardWhitespace(byteArray3);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray3);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray6);
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray6);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray6.length);
      assertEquals(0, byteArray3.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray7 = base64_0.encode(byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(base64_0, base64_1);
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(base64_0.equals((Object)base64_1));
      assertNotNull(byteArray7);
      assertEquals(27, byteArray0.length);
      assertEquals(50, byteArray7.length);
      assertEquals(36, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray8 = base64_1.decode(byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray8);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray8, byteArray4);
      assertNotSame(byteArray8, byteArray1);
      assertNotSame(byteArray8, byteArray0);
      assertNotSame(byteArray8, byteArray3);
      assertNotSame(byteArray8, byteArray6);
      assertNotSame(byteArray8, byteArray2);
      assertNotSame(byteArray8, byteArray5);
      assertNotSame(byteArray8, byteArray7);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray7));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray1));
      assertFalse(byteArray8.equals((Object)byteArray0));
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(byteArray8);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(27, byteArray8.length);
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      assertNotNull(byteArray0);
      assertEquals(27, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray1.length);
      assertEquals(48, byteArray2.length);
      
      boolean boolean1 = Base64.isBase64((byte)123);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64((byte)123);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)79;
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64((byte)0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger1.shortValue());
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger2.shortValue());
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      
      Base64 base64_1 = new Base64(true);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertTrue(base64_1.isUrlSafe());
      
      byte[] byteArray2 = new byte[6];
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)57;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)84, (byte)107, (byte)66, (byte)65, (byte)81, (byte)69, (byte)65, (byte) (-6), (byte)10}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)57, (byte)1, (byte)1, (byte)1, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      
      byte[] byteArray4 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)79, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-12)}, byteArray4);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
      //  // Unstable assertion: assertEquals(1, byteArray4.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray4);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger2);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertTrue(bigInteger3.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertNotNull(bigInteger3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)79, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-12)}, byteArray4);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
      //  // Unstable assertion: assertEquals(1, byteArray4.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger3.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger3.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      int int0 = base64_0.readResults(byteArray0, (byte)0, (-702));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)79, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)79, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-12)}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-12)}, byteArray5);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
      //  // Unstable assertion: assertEquals(1, byteArray4.length);
      //  // Unstable assertion: assertEquals(1, byteArray5.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray6 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)84, (byte)107, (byte)66, (byte)65, (byte)81, (byte)69, (byte)65}, byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)57, (byte)1, (byte)1, (byte)1, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(8, byteArray6.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)97;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)28, (byte) (-101), (byte) (-79), (byte)0, (byte) (-69), (byte)28, (byte)97, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Base64 base64_0 = new Base64(false);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)28, (byte) (-101), (byte) (-79), (byte)0, (byte) (-69), (byte)28, (byte)97, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)28, (byte) (-101), (byte) (-79), (byte)0, (byte) (-69), (byte)28, (byte)97, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)28, (byte) (-101), (byte) (-79), (byte)0, (byte) (-69), (byte)28, (byte)97, (byte)0}, byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)28, (byte) (-101), (byte) (-79), (byte)0, (byte) (-69), (byte)28, (byte)97, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)28, (byte) (-101), (byte) (-79), (byte)0, (byte) (-69), (byte)28, (byte)97, (byte)0}, byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      int int0 = base64_0.readResults(byteArray0, (byte)97, (byte) (-69));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)28, (byte) (-101), (byte) (-79), (byte)0, (byte) (-69), (byte)28, (byte)97, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = new byte[6];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte)32;
      byteArray3[1] = (byte)97;
      byteArray3[2] = (byte) (-101);
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte)32;
      byteArray3[5] = (byte)32;
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-101), (byte) (-1)}, byteArray4);
      assertArrayEquals(new byte[] {(byte)32, (byte)97, (byte) (-101), (byte) (-1), (byte)32, (byte)32}, byteArray3);
      assertEquals(3, byteArray4.length);
      assertEquals(6, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-116);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)72, (byte)111, (byte)119, (byte)61}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)72, (byte)111, (byte)119, (byte)61}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)83, (byte)71, (byte)57, (byte)51, (byte)80, (byte)81, (byte)61, (byte)61, (byte) (-6), (byte)10}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)72, (byte)111, (byte)119}, byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArray3.length);
      
      byte[] byteArray4 = Base64.decodeBase64("");
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, false, false, 102);
      //  // Unstable assertion: assertSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray5);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      
      byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray4);
      //  // Unstable assertion: assertSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertSame(byteArray4, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray6);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertEquals(0, byteArray6.length);
      
      byte[] byteArray7 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertNotNull(byteArray7);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)72, (byte)111, (byte)119, (byte)61}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)83, (byte)71, (byte)57, (byte)51, (byte)80, (byte)81, (byte)61, (byte)61, (byte) (-6), (byte)10}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)83, (byte)71, (byte)57, (byte)51, (byte)80, (byte)81, (byte)61, (byte)61, (byte) (-6)}, byteArray7);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertEquals(9, byteArray7.length);
      
      byte[] byteArray8 = new byte[4];
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray2));
      
      byteArray8[0] = (byte) (-116);
      byteArray8[1] = (byte) (-116);
      byteArray8[2] = (byte)87;
      byteArray8[3] = (byte)30;
      byte[] byteArray9 = Base64.encodeBase64(byteArray8, true, true, 1711);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray9);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray8));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotNull(byteArray9);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)106, (byte)73, (byte)120, (byte)88, (byte)72, (byte)103, (byte) (-6), (byte)10}, byteArray9);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte)87, (byte)30}, byteArray8);
      //  // Unstable assertion: assertEquals(8, byteArray9.length);
      //  // Unstable assertion: assertEquals(4, byteArray8.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray2 = Base64.decodeBase64("B");
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals("AAAAAAAA", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Base64 base64_0 = new Base64((byte)0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      Object object0 = base64_0.decode((Object) "B");
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object0);
      assertFalse(base64_0.isUrlSafe());
      
      Object object1 = base64_0.decode(object0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      assertFalse(base64_0.isUrlSafe());
      
      String string1 = bigInteger0.toString();
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, object1);
      assertNotSame(byteArray1, object0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)object1));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, object0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, object1);
      assertNotSame(byteArray3, object0);
      assertNotSame(byteArray3, byteArray1);
      assertSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, object1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray2.equals((Object)object0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)object1));
      assertFalse(byteArray3.equals((Object)object0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)object1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = base64_0.decode(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray4, object1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, object0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)object1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)object0));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray4.length);
      assertFalse(base64_0.isUrlSafe());
      
      int int0 = base64_0.avail();
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, object1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, object0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)object1));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = BigInteger.valueOf((byte)0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertNotNull(bigInteger2);
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, object1);
      assertNotSame(byteArray5, object0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray4, object1);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, object0);
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)object1));
      assertFalse(byteArray5.equals((Object)object0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray4.equals((Object)object1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)object0));
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertEquals(0, byteArray5.length);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray4.length);
      assertFalse(base64_0.isUrlSafe());
      
      String string2 = Base64.encodeBase64String(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("AAAAAAAA", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Base64 base64_1 = new Base64((-3396));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertFalse(base64_1.isUrlSafe());
      
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray5, (int) (byte)0, 886);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      Base64 base64_0 = new Base64((byte)72);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray2);
      
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 0, (int) (byte)72);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, true, 146);
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte)71;
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte)112;
      byteArray1[7] = (byte)15;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)52, (byte)0, (byte)78, (byte)71, (byte)7, (byte)12, (byte)112, (byte)15}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals((byte) (-87), bigInteger0.byteValue());
      assertEquals((short) (-11863), bigInteger0.shortValue());
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)112;
      byteArray2[1] = (byte)71;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)78;
      byteArray2[4] = (byte)7;
      byteArray2[5] = (byte)71;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)112;
      byteArray2[8] = (byte)112;
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)112, (byte)71, (byte)0, (byte)78, (byte)7, (byte)71, (byte)0, (byte)112, (byte)112}, byteArray2);
      assertEquals(9, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-6), (byte)10}, byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertTrue(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
      
      int int0 = base64_0.readResults(byteArray0, 150, (byte)0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-6), (byte)10}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-6)}, byteArray4);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertEquals(9, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = null;
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray2);
      
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-116);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)111, (byte)119, (byte)61}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Base64 base64_0 = new Base64(false);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)30;
      byteArray3[1] = (byte) (-116);
      byteArray3[2] = (byte) (-116);
      byteArray3[3] = (byte) (-116);
      byteArray3[4] = (byte) (-116);
      byteArray3[5] = (byte) (-116);
      byteArray3[6] = (byte) (-116);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116)}, byteArray3);
      assertEquals(14, byteArray4.length);
      assertEquals(7, byteArray3.length);
      
      byte[] byteArray5 = base64_0.decode(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray5.length);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)111, (byte)119, (byte)61}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals((byte) (-116), bigInteger1.byteValue());
      assertEquals((short)7820, bigInteger1.shortValue());
      
      int int0 = base64_0.readResults(byteArray1, (byte) (-116), (-3393));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)111, (byte)119, (byte)61}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray6 = Base64.discardWhitespace(byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertNotNull(byteArray6);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-116)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)111, (byte)119, (byte)61}, byteArray1);
      assertArrayEquals(new byte[] {(byte)72, (byte)111, (byte)119, (byte)61}, byteArray6);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Base64 base64_0 = new Base64();
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.decode((byte[]) null);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNull(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = base64_0.decode((byte[]) null);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNull(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray3);
      
      base64_0.encode((byte[]) null, 77, (-72));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isBase64((byte)2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)1;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("OQAASE8BAAA=", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)72, (byte)79, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Base64 base64_0 = new Base64((byte)1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.decode(": ");
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray4);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray1);
      assertSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray4, byteArray0);
      assertSame(byteArray4, byteArray1);
      assertSame(byteArray4, byteArray2);
      assertSame(byteArray4, byteArray3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray4.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray5 = new byte[2];
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)79;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray5);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)79}, byteArray5);
      assertEquals(2, byteArray5.length);
      
      boolean boolean1 = base64_0.hasData();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)1;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("OQAASE8BAAA=", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)72, (byte)79, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Base64 base64_0 = new Base64((byte)1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("OQAASE8BAAA", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)72, (byte)79, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)72, (byte)79, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(11, byteArray1.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)72, (byte)79, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((byte)115, bigInteger0.byteValue());
      assertEquals((short) (-2957), bigInteger0.shortValue());
      
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 1717986918);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-113);
      Base64 base64_0 = new Base64(91, byteArray0, false);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      
      int int0 = base64_0.readResults(byteArray0, (-2101), 2087);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte) (-31);
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte)17;
      byteArray1[4] = (byte)16;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-31), (byte)39, (byte)17, (byte)16}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      Object object0 = base64_0.decode((Object) "4@");
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotNull(object0);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = new byte[3];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)object0));
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals("EQcQjw==", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Object object1 = base64_0.decode((Object) "4@");
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(object1, object0);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      
      String string1 = Base64.encodeBase64String(byteArray0);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertTrue(string1.equals((Object)string0));
      assertEquals("EQcQjw==", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Object object2 = base64_0.decode(object1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      
      byteArray3[0] = (byte) (-113);
      byteArray3[1] = (byte)16;
      byteArray3[2] = (byte)7;
      int int1 = base64_0.readResults(byteArray3, (byte) (-113), 94);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray3, object1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, object2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, object0);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertTrue(int1 == int0);
      assertFalse(byteArray3.equals((Object)object1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)object2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)object0));
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)16, (byte)7}, byteArray3);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray3.length);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64((byte)17);
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64((byte)7);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = base64_0.avail();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = base64_0.encode(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray4, object0);
      assertNotSame(byteArray4, object2);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, object1);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)object0));
      assertFalse(byteArray4.equals((Object)object2));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)object1));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(12, byteArray4.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray0);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, object1);
      assertNotSame(byteArray5, object2);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, object0);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)object1));
      assertFalse(byteArray5.equals((Object)object2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)object0));
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)81, (byte)99, (byte)81, (byte)106, (byte)119, (byte)61, (byte)61}, byteArray5);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray5.length);
      
      int int3 = base64_0.avail();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)17, (byte)7, (byte)16, (byte) (-113)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)80, (byte)56, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)80, (byte)56, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertEquals(11, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)80, (byte)56, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertEquals(11, byteArray2.length);
      //  // Unstable assertion: assertEquals(16, byteArray3.length);
      
      Base64 base64_0 = new Base64(47);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      String string0 = base64_0.encodeToString(byteArray2);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals("UVZBNFFVRkJRVUU=\uFFFD\n", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)80, (byte)56, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertEquals(11, byteArray2.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray4);
      //  // Unstable assertion: assertEquals(1, byteArray4.length);
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      
      base64_0.decode(byteArray2, 85, 106);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)80, (byte)56, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertEquals(11, byteArray2.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("{|l%Y");
      //  // Unstable assertion: assertFalse(boolean0);
      
//      try { 
        base64_0.decode((Object) bigInteger0);
//       //  fail("Expecting exception: Exception");
       // Unstable assertion
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-39);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-39)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-39)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((short)6105, bigInteger0.shortValue());
      assertEquals((byte) (-39), bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-39)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte)57, (byte)107, (byte)61}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals((short)6105, bigInteger0.shortValue());
      assertEquals((byte) (-39), bigInteger0.byteValue());
      
      int int0 = base64_0.readResults(byteArray0, (byte) (-39), 0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-39)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("F9k=", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-39)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-39)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      base64_0.decode(byteArray0, (-3621), 0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)23, (byte) (-39)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)23;
      int int1 = base64_0.readResults(byteArray2, (-3621), (byte)23);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-39)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)23}, byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 0, (-3621));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)23, (byte) (-39)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      
      int int2 = (-1);
      byte byte0 = bigInteger1.byteValueExact();
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, byte0);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-39)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, (-3248), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-39);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-39)}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      int int0 = base64_0.readResults(byteArray0, (byte) (-39), 0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-39)}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 8192);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-39)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)78, (byte)107, (byte)61, (byte) (-6), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)1;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("OQAASE8BAAA=", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)72, (byte)79, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Base64 base64_0 = new Base64((byte)1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 1717986918);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = null;
      int int0 = 94;
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true, true, 15);
      assertNull(byteArray1);
      
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 94, 15);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = Base64.isBase64((byte)46);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)46;
      byteArray1[3] = (byte)46;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)46, (byte)46}, byteArray1);
      assertArrayEquals(new byte[] {(byte)76, (byte)103, (byte)65, (byte)117, (byte)76, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(8, byteArray2.length);
      
      Base64 base64_0 = new Base64(1908874353, byteArray1, true);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)46, (byte)46}, byteArray1);
      assertEquals(4, byteArray1.length);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)46;
      byteArray3[3] = (byte)46;
      byteArray3[4] = (byte)46;
      byteArray3[5] = (byte)46;
      byteArray3[6] = (byte)0;
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)46, (byte)46, (byte)46, (byte)46, (byte)0}, byteArray3);
      assertEquals(0, byteArray4.length);
      assertEquals(7, byteArray3.length);
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)46, (byte)46}, byteArray1);
      assertEquals(4, byteArray1.length);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      Base64 base64_0 = new Base64();
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(11, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(11, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray4.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray5 = base64_0.decode(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray5.length);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = "";
      byte[] byteArray6 = base64_0.decode("");
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray0);
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertNotNull(byteArray6);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertEquals(0, byteArray6.length);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      int int0 = bigInteger0.intValue();
      assertEquals(10, int0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      byte[] byteArray7 = bigInteger0.toByteArray();
      assertNotSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, byteArray5);
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertNotNull(byteArray7);
      assertArrayEquals(new byte[] {(byte)10}, byteArray7);
      assertEquals(1, byteArray7.length);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      int int1 = bigInteger0.intValue();
      assertTrue(int1 == int0);
      assertEquals(10, int1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      double double0 = bigInteger0.doubleValue();
      assertEquals(10.0, double0, 0.01);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigInteger0.equals(object0);
      assertFalse(boolean0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      int int2 = bigInteger0.bitLength();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, int2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      int int3 = bigInteger0.intValue();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(10, int3);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      
      byte[] byteArray8 = Base64.encodeInteger(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray8, byteArray7);
      assertNotSame(byteArray8, byteArray1);
      assertNotSame(byteArray8, byteArray4);
      assertNotSame(byteArray8, byteArray2);
      assertNotSame(byteArray8, byteArray0);
      assertNotSame(byteArray8, byteArray6);
      assertNotSame(byteArray8, byteArray3);
      assertNotSame(byteArray8, byteArray5);
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(byteArray8.equals((Object)byteArray1));
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertFalse(byteArray8.equals((Object)byteArray0));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertNotNull(byteArray8);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray8);
      assertEquals(4, byteArray8.length);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray5);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray8);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray6);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray7);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray8));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray6));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray7));
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray5.length);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
//      try { 
        bigInteger1.modInverse(bigInteger1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger not invertible.
//         //
//         verifyException("java.math.MutableBigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.divideAndRemainder(bigInteger0);
      bigInteger0.or(bigInteger1);
      base64_0.encodeToString(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64.isBase64(byteArray0);
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.isBase64("abeN~7[-$$CKg./7u");
      base64_0.encodeToString(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)10);
      base64_0.isUrlSafe();
      base64_0.decode((byte[]) null);
      base64_0.isUrlSafe();
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray2);
      assertEquals(4, byteArray2.length);
      
      base64_0.encode(byteArray1, 182, 310);
      assertEquals(0, byteArray1.length);
      
      boolean boolean1 = Base64.isBase64((byte)101);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.divideAndRemainder(bigInteger0);
//      try { 
        base64_0.decode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.isBase64((byte)101);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((byte)101);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.getLowestSetBit();
      bigInteger0.add(bigInteger1);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray4);
      bigInteger0.doubleValue();
      base64_0.decode((Object) "9VEIJO}");
      bigInteger0.toString();
      Base64.decodeBase64(byteArray1);
      byte[] byteArray5 = base64_0.decode(byteArray2);
      //  // Unstable assertion: assertEquals(3, byteArray5.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)45, (byte)103, (byte)111}, byteArray5);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
      
      bigInteger0.negate();
      BigInteger.valueOf(0L);
      byte[] byteArray6 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray6.length);
      
      Base64.encodeBase64String(byteArray4);
      Base64.decodeBase64("");
      boolean boolean0 = base64_0.isUrlSafe();
      boolean boolean1 = Base64.isArrayByteBase64(byteArray3);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Base64.encodeBase64URLSafe(byteArray4);
      base64_0.decode(byteArray3, (int) (byte)101, 0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((-1738));
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
      
      base64_0.decode(byteArray0, (-1), (-2766));
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64((byte)0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)103;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(1778);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      base64_0.encode(byteArray0, 81, (-694));
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.isBase64((byte) (-16));
      Base64.isBase64("(%-jnJ51p.t");
      Base64 base64_0 = new Base64((byte) (-16));
      byte[] byteArray0 = base64_0.decode("(%-jnJ51p.t");
      base64_0.hasData();
      byte[] byteArray1 = new byte[7];
      Base64.encodeBase64(byteArray0, false, false, 64);
      byteArray1[0] = (byte) (-16);
      Base64.encodeBase64Chunked(byteArray1);
      byteArray1[1] = (byte) (-16);
      byteArray1[2] = (byte) (-16);
      byteArray1[3] = (byte) (-16);
      byteArray1[4] = (byte) (-16);
      byteArray1[5] = (byte) (-16);
      byteArray1[6] = (byte) (-16);
      Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
//      try { 
        base64_0.encode((Object) "(%-jnJ51p.t");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-1);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-518), byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD\u0000\u0000\u0000j\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 4462;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(4462, (byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64((byte[]) null, false);
      int int1 = 98;
      base64_0.readResults((byte[]) null, (-4625), 98);
      base64_0.hasData();
      base64_0.isUrlSafe();
      String string0 = "m3Z:J]tn)";
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, (-540), 98);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((byte)79);
      base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      bigInteger0.floatValue();
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)57);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-27);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-27));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -27
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.and(bigInteger1);
      bigInteger0.longValueExact();
      bigInteger0.toString(152);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray1);
      boolean boolean0 = Base64.isBase64("10");
      assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      
      base64_0.decode(byteArray1, 0, 0);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray3.length);
      
      base64_0.decode((Object) "&K#Ki2~v@V");
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)0;
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      assertEquals(0, byteArray5.length);
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray2, false);
      byte[] byteArray7 = Base64.decodeBase64(byteArray6);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray6);
      assertNotSame(byteArray6, byteArray7);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      boolean boolean0 = Base64.isBase64((byte)101);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((byte)101);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.add(bigInteger1);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray4);
      bigInteger0.doubleValue();
      base64_0.decode((Object) "9VEIJO}");
      bigInteger0.toString();
      Base64.decodeBase64(byteArray1);
      byte[] byteArray5 = base64_0.decode(byteArray2);
      assertEquals(36, byteArray5.length);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      bigInteger0.negate();
      BigInteger.valueOf(0L);
      Base64.discardWhitespace(byteArray2);
      String string0 = Base64.encodeBase64String(byteArray4);
      assertEquals("", string0);
      
      Base64.decodeBase64("");
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1 == boolean0);
      
      Base64.isArrayByteBase64(byteArray3);
      byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray4);
      assertSame(byteArray4, byteArray3);
      assertSame(byteArray3, byteArray6);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-39);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      int int0 = (-3621);
      base64_0.readResults(byteArray0, (byte) (-39), 0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, (-3621), 0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, 741);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("0\" 9pwGwRpTp");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      String string0 = "yo*D25\"\"4#{y";
      Base64.decodeBase64("yo*D25\"\"4#{y");
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      boolean boolean0 = true;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)110;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.doubleValue();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertEquals(4, byteArray2.length);
      
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "iPX");
      int int0 = base64_0.readResults(byteArray1, 2551, (byte)68);
      assertEquals((-1), int0);
      
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-45);
      byteArray3[2] = (byte)68;
      byteArray3[3] = (byte)68;
      byte[] byteArray4 = base64_0.decode(byteArray3);
      assertArrayEquals(new byte[] {(byte)12}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-103);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)104, (byte)115, (byte)98, (byte)90, (byte)54, (byte)90}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[2];
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("BwBW7gA", string0);
      
      Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      byteArray1[0] = (byte) (-18);
      byteArray1[1] = (byte)7;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)86, (byte) (-18), (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(5, byteArray3.length);
      
      base64_0.encodeToString(byteArray1);
      base64_0.decode((String) null);
      base64_0.avail();
      byte[] byteArray4 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)55, (byte)103, (byte)99, (byte)61, (byte)0, (byte)10}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)1;
      byteArray0[2] = (byte)1;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-2476));
      String string0 = "";
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.decodeInteger(byteArray1);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)0;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-2487), byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFDnhc\uFFFD\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(1, (byte[]) null);
      base64_0.decode((byte[]) null);
      base64_0.decode((byte[]) null);
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)108;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte)52, (byte)73, (byte)65, (byte)76, (byte)49, (byte)82, (byte)115}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)91;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte) (-39);
      base64_0.decode(byteArray0, (int) (byte)0, (-1));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-74);
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64(byteArray1);
      base64_0.avail();
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64("LJ.&u!7Qh+u}+ w<V5");
      Base64.encodeBase64String(byteArray1);
      String string0 = "";
      base64_0.encode(byteArray1);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = new byte[3];
      int int0 = 0;
      base64_0.encode(byteArray2, 0, 0);
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)118;
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      byteArray2[2] = (byte)25;
      byte[] byteArray4 = base64_0.encode(byteArray2);
      Base64.encodeBase64String(byteArray4);
      Base64.encodeBase64(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray3);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.andNot(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.isUrlSafe();
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)92;
      Base64 base64_0 = new Base64(1, byteArray0, true);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("zoAAXA", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("+P,Kw;");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-20);
      byteArray2[3] = (byte) (-79);
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte) (-128);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("_wDssQEA_4A", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.divideAndRemainder(bigInteger0);
      bigInteger0.or(bigInteger1);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      boolean boolean0 = Base64.isBase64(byteArray0);
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray4);
      boolean boolean1 = Base64.isBase64("abeN~7[-$$CKg./7u");
      base64_0.encodeToString(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray0);
      boolean boolean2 = Base64.isBase64((byte)10);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = base64_0.isUrlSafe();
      assertTrue(boolean3 == boolean1);
      
      base64_0.decode((byte[]) null);
      Base64.encodeBase64String(byteArray2);
      int int0 = base64_0.readResults((byte[]) null, (byte)10, (-1481));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)20;
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }
}
