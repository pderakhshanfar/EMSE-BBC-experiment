/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:14:39 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[103];
      Base64 base64_0 = new Base64(6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray2);
      Base64.discardWhitespace(byteArray0);
      Object object0 = base64_0.decode((Object) string0);
      // Undeclared exception!
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[103];
      Base64 base64_0 = new Base64(6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64String(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[120];
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64(64);
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      base64_1.encode(byteArray2, 9, 8191);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[119];
      int int0 = 9;
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64(64);
      int int1 = 12;
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[103];
      Base64 base64_0 = new Base64(6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64String(byteArray2);
      base64_0.decode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, true, false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[122];
      Base64 base64_0 = new Base64(6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[85];
      Base64 base64_0 = new Base64(6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64.decodeInteger(byteArray3);
      Base64.discardWhitespace(byteArray1);
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[85];
      int int0 = 6;
      Base64 base64_0 = new Base64(6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[105];
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[89];
      Base64 base64_0 = new Base64(9, byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray1, 0, 34);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)108;
      Base64.isBase64(byteArray2);
      base64_0.decode(byteArray1, (int) (byte)108, (int) (byte)108);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[88];
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1, 1, 9);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(9, byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray2, 0, 76);
      base64_0.readResults(byteArray1, 0, 0);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, (-1), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[88];
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[88];
      Base64 base64_0 = new Base64(9, byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray1, 7684, (-1481));
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray1, 64, 76);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[88];
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[88];
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[79];
      Base64 base64_0 = new Base64(11, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(11);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = new byte[20];
      base64_0.decode(byteArray2);
      byteArray3[0] = (byte) (-128);
      byteArray3[1] = (byte) (-128);
      Base64.encodeBase64(byteArray3);
      base64_1.encode(byteArray1, 1, 950);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(9, byteArray0);
      base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.valueOf((-1L));
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray1, 70, 9);
      base64_0.encode(byteArray1);
      base64_0.decode(byteArray2, 0, 1550);
      Random.setNextRandom(0);
      Base64.encodeBase64(byteArray0, true, true, 461);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[79];
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeBase64(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[70];
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(35);
      base64_0.encode(byteArray0, 64, 3);
      base64_0.readResults(byteArray0, 3, 26);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[79];
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64 base64_1 = new Base64(9);
      base64_1.encodeToString(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(9, byteArray0);
      Object object0 = base64_0.decode((Object) "_/@5NwJDS_7K`|");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[55];
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.isBase64(byteArray2);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[72];
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64String(byteArray2);
      Base64.isBase64(byteArray2);
      Base64.decodeInteger(byteArray1);
      Base64.decodeInteger(byteArray2);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)43;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)52, (byte)87, (byte)43}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[55];
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray1);
      Random.setNextRandom(9);
      base64_0.encode(byteArray0, 86, 9);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)59;
      Base64.isBase64(byteArray0);
      int int0 = (-1);
      Base64 base64_0 = new Base64((-1), byteArray0);
      base64_0.readResults(byteArray0, 35, 88);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode(byteArray0, 1740, (-2204));
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64(byteArray0, false, false, 379);
      base64_0.encode(byteArray2);
      base64_0.encode(byteArray1);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[30];
      int int0 = 9;
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode("");
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, 97, 97);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 190
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)61;
      base64_0.decode(byteArray0, (int) (byte)1, 52);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true, true, 10);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apachecomons.codec.DecoderException");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(17);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 1, 567);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 26
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[30];
      Base64 base64_0 = new Base64(9, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1, 97, 97);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = (byte)62;
      Base64.isBase64((byte)61);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)62;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)62, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=>]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(76);
      base64_1.encode(byteArray0, 64, (-4539));
      // Undeclared exception!
//      try { 
        base64_1.readResults(byteArray0, (-1305), (-4539));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[21];
      Base64 base64_1 = new Base64(20, byteArray0);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
      assertEquals(100, byteArray3.length);
      
      base64_1.encode(byteArray2, 82, 3947);
      int int0 = base64_1.readResults(byteArray2, 3947, 8);
      assertEquals((-1), int0);
      assertEquals(21, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apachecomons.codec.DecoderException");
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 10, 3365);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 27
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-5);
      Base64 base64_0 = new Base64(101, byteArray0, false);
      base64_0.encode(byteArray0, (-2525), (int) (byte) (-77));
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(byteArray1, (-1676), (int) (byte) (-77));
      Base64 base64_1 = new Base64((byte) (-77), byteArray1, false);
      // Undeclared exception!
//      try { 
        base64_1.encodeToString(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[2] = (byte)123;
      Base64 base64_0 = new Base64(1460, byteArray0, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(24, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64.decodeBase64("org.apachecomons.codec.DecoderException");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)127;
      Base64.discardWhitespace(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)127);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)62;
      Base64 base64_0 = new Base64((-473), byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      assertEquals(12, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("", string0);
      
      base64_0.decode(byteArray0, 0, 9);
      Base64.decodeBase64((String) null);
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64(2746);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte)103;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1, (int) (byte)103);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64(76);
      Base64 base64_2 = new Base64((-1859), byteArray1, true);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)97;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)59;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)81;
      byteArray2[6] = (byte)15;
      base64_2.encode(byteArray1);
      byteArray2[7] = (byte) (-1);
      // Undeclared exception!
//      try { 
        base64_2.encode(byteArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "Parameter supplied to Base64 decode is not a byte[] or a String";
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 1433, 1433);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)55;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(26);
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = (-2337);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-32);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1, (int) (byte) (-32), 0);
      base64_0.decode(byteArray0);
      base64_0.decode((byte[]) null);
      base64_0.readResults(byteArray0, 2842, (byte)9);
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)9);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1, (int) (byte)7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      int int0 = 3908;
      Base64 base64_0 = new Base64(3908);
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray1 = new byte[7];
      Base64.encodeBase64(byteArray1, false, false);
      byteArray1[0] = (byte)57;
      byteArray1[1] = (byte)46;
      byte byte0 = (byte)22;
      base64_0.encodeToString((byte[]) null);
      byteArray1[2] = (byte)22;
      base64_0.encode((byte[]) null);
      byteArray1[3] = (byte)20;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte) (-119);
      byteArray1[6] = (byte)71;
      Base64.decodeBase64(byteArray1);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)7;
      byteArray0[5] = (byte) (-21);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-32);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1, (int) (byte) (-32), 0);
      base64_0.readResults(byteArray0, 2842, (byte)9);
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)9);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1, (int) (byte)7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.flipBit(1385);
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(boolean0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger2 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger2);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("`K7X<b:X");
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)43, (byte) (-75), (byte) (-37)}, byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitCount();
      BigInteger bigInteger1 = bigInteger0.flipBit(39);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)103, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64.isBase64((byte) (-1));
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 11;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(11, byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode(byteArray2);
      Base64.encodeBase64(byteArray2, true, true, 3926);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-21);
      Base64.isBase64(byteArray0);
      Base64 base64_1 = new Base64();
      Base64.decodeBase64((String) null);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_2 = new Base64(76, byteArray0);
      // Undeclared exception!
//      try { 
        base64_2.decode(byteArray0, 1, 7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertEquals(42, byteArray3.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      base64_1.readResults(byteArray0, 11, (byte)9);
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte) (-1);
      byteArray5[1] = (byte)31;
      byteArray5[2] = (byte)70;
      byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)95, (byte)120, (byte)57, (byte)71}, byteArray6);
      
      byte[] byteArray7 = base64_0.encode(byteArray4);
      //  // Unstable assertion: assertEquals(82, byteArray7.length);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.flipBit(1385);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64((byte[]) null, false, false);
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)69;
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)94;
      base64_0.decode((String) null);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-114);
      byteArray1[1] = (byte) (-114);
      byteArray1[2] = (byte) (-114);
      byteArray1[3] = (byte)59;
      byteArray1[4] = (byte)94;
      byteArray1[5] = (byte) (-114);
      byteArray1[6] = (byte)1;
      base64_0.readResults(byteArray1, (byte) (-114), (byte)1);
      boolean boolean0 = Base64.isBase64("o`g\"");
      assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      base64_0.encode((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray3.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray4 = base64_0.decode(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)1, (byte)94, (byte)0, (byte)0, (byte)0}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-118);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.toString((int) (byte) (-1));
      bigInteger0.bitCount();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      int int0 = bigInteger2.intValue();
      //  // Unstable assertion: assertEquals(182, int0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      int int1 = base64_0.readResults(byteArray3, (byte) (-118), 18);
      //  // Unstable assertion: assertEquals(0, int1);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)100, (byte)72, (byte)83, (byte)75, (byte)105, (byte)118, (byte)43, (byte)75, (byte)0, (byte)62}, byteArray2);
      //  // Unstable assertion: assertEquals(14, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray1, (-1), (-184));
      byte[] byteArray3 = Base64.decodeBase64("");
      String string0 = Base64.encodeBase64String(byteArray3);
      assertEquals("", string0);
      
      base64_0.encode(byteArray1, (-1), 343);
      assertSame(byteArray1, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, false);
      assertSame(byteArray3, byteArray4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.decodeBase64("");
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[3];
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      bigInteger0.bitLength();
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte) (-79);
      byteArray1[2] = (byte) (-66);
      base64_0.decode(byteArray1, 1268, (int) (byte) (-66));
      int int0 = base64_0.readResults(byteArray1, (byte)78, (byte) (-66));
      //  // Unstable assertion: assertEquals((-1), int0);
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      Base64 base64_1 = new Base64(true);
      base64_1.readResults(byteArray4, (byte) (-66), 2784);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)86, (byte)72, (byte)74, (byte)72, (byte)75, (byte)119, (byte)65, (byte)45}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-96);
      byteArray0[0] = (byte) (-96);
      byte byte1 = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)7;
      byteArray0[5] = (byte) (-32);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      String string0 = null;
      Base64.decodeBase64((String) null);
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, (int) (byte)0, 8186);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.intValue();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = new byte[7];
      byteArray2[2] = (byte)20;
      byteArray2[5] = (byte) (-118);
      byteArray2[6] = (byte)34;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.isBase64(byteArray0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte) (-74);
      byteArray5[1] = (byte)34;
      byteArray5[2] = (byte)62;
      byte[] byteArray6 = Base64.encodeBase64(byteArray5, true, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)116, (byte)105, (byte)73, (byte)43, (byte)0, (byte)62}, byteArray6);
      
      base64_0.encode(byteArray3);
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray7 = base64_0.decode(byteArray4);
      //  // Unstable assertion: assertEquals(7, byteArray7.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray7);
      //  // Unstable assertion: assertEquals(12, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)31;
      byteArray2[1] = (byte)9;
      byteArray2[2] = (byte) (-54);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray3 = new byte[0];
      Base64.isBase64(byteArray3);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      Base64 base64_1 = new Base64(false);
      base64_0.readResults(byteArray4, 64, (byte)9);
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray4);
      assertEquals(3, byteArray5.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)56, (byte)111}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte) (-91);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)30;
      base64_0.readResults(byteArray1, (byte)77, 3048);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = new byte[0];
      base64_0.decode(byteArray3);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      Base64 base64_1 = new Base64();
      Object object0 = base64_1.decode((Object) "sx~G~i!w65(L$M's as");
      bigInteger0.equals(object0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray2);
      Base64.decodeBase64(byteArray2);
      Random.setNextRandom((-2020));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-32);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0);
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1, (int) (byte) (-32), 0);
      base64_0.readResults(byteArray0, 2842, (byte)9);
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)9);
      base64_0.encode(byteArray0, (-1), 119);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.shortValueExact();
      Base64.isArrayByteBase64(byteArray2);
      Base64.isArrayByteBase64(byteArray0);
//      try { 
        base64_0.decode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      String string0 = "";
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)62;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-501), byteArray0, true);
      boolean boolean1 = true;
      base64_0.decode(byteArray0, 365, (-889));
      byte[] byteArray1 = new byte[2];
      Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray0, 0, 9);
      base64_0.decode((String) null);
      base64_0.readResults(byteArray0, 121, (-4292));
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = new byte[3];
      byte byte0 = (byte)78;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      byte byte1 = (byte) (-66);
      base64_0.decode(byteArray2, 0, (-1));
      base64_0.readResults(byteArray1, (byte) (-66), 0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64((byte)78, byteArray2);
      base64_1.isUrlSafe();
      Base64 base64_2 = new Base64(false);
      Object object0 = new Object();
//      try { 
        base64_2.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64(97);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-109);
      byte byte0 = (byte)95;
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray1, 865, (-1));
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      Base64.encodeBase64(byteArray2);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      bigInteger0.shortValueExact();
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)32;
      Base64.isArrayByteBase64(byteArray3);
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)32;
      byteArray4[1] = (byte)32;
      byteArray4[2] = (byte)32;
      byteArray4[3] = (byte)32;
      byteArray4[4] = (byte)32;
      byteArray4[5] = (byte)32;
      byteArray4[6] = (byte)32;
      byteArray4[7] = (byte)32;
      Base64.isArrayByteBase64(byteArray4);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
      base64_0.isUrlSafe();
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte)32;
      byteArray5[1] = (byte)32;
      byteArray5[2] = (byte)32;
      Base64.isBase64(byteArray5);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-32);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1, (int) (byte) (-32), 0);
      base64_0.readResults(byteArray0, 2842, (byte)9);
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)9);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1, 8);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64(20);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)79;
      Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byte[] byteArray3 = new byte[5];
      byteArray1[0] = (byte) (-51);
      byteArray3[1] = (byte) (-51);
      byteArray3[2] = (byte)87;
      byteArray3[3] = (byte) (-57);
      byteArray3[4] = (byte)79;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray4);
      // Undeclared exception!
//      try { 
        bigInteger0.shortValueExact();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger out of short range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-32);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1, (int) (byte) (-32), 0);
      base64_0.readResults(byteArray0, 2842, (byte)9);
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)9);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      base64_0.encode(byteArray0);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)126;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      byteArray0[3] = (byte)10;
      Base64.isBase64((byte)120);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-115);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 99);
      Base64 base64_0 = new Base64(32);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte) (-43);
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte) (-6);
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte) (-94);
      Base64.encodeBase64URLSafe(byteArray1);
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.decodeBase64(byteArray0);
      base64_0.decode((Object) "SDQ$Wl^]");
      Base64.isBase64((byte)14);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)57;
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64String(byteArray1);
      byteArray0[5] = (byte)94;
      Base64.decodeBase64(byteArray0);
      byteArray0[6] = (byte)14;
      base64_0.readResults(byteArray0, (byte) (-117), 381);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      base64_0.avail();
      Object object0 = base64_0.decode((Object) "/=X");
      base64_0.encode(object0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray1 = Base64.decodeBase64("");
      int int0 = 51;
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(51, (byte[]) null, false);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((-567L), 0L);
      mockRandom0.nextInt();
      BigInteger.probablePrime(64, mockRandom0);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(byteArray1);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length BigInteger
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      String string0 = "";
      Base64.decodeBase64("");
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-66);
      base64_0.decode(byteArray0, 1268, (int) (byte) (-66));
      base64_0.readResults(byteArray0, (byte)78, (byte) (-66));
      base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
//      try { 
        base64_0.encode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-118);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.intValue();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)66, (byte)48, (byte)106, (byte)121, (byte)75, (byte)75, (byte)0, (byte)62}, byteArray2);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray3, (byte)116, (byte) (-118));
      byte[] byteArray5 = new byte[8];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte) (-118);
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte) (-113);
      byteArray5[6] = (byte)69;
      byteArray5[7] = (byte)0;
      byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray5);
      //  // Unstable assertion: assertEquals(11, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("", string0);
      
      base64_0.encode(byteArray0, 5434, (-578));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      Base64.encodeBase64(byteArray0, false, false, 64);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)31;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[5] = (byte)100;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byteArray0[6] = (byte) (-1);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (-1), 54);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-99);
      base64_0.encodeToString(byteArray0);
//      try { 
        base64_0.encode((Object) "xMlrESHvL");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-32);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1, (int) (byte) (-32), 0);
      base64_0.readResults(byteArray0, 2842, (byte)9);
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)9);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (-1), 119);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray1, false, false);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-739);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byte byte0 = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)78;
      byte byte1 = (byte)112;
      byteArray0[4] = (byte)112;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-739), byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000Z\uFFFDNp]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      boolean boolean0 = base64_0.hasData();
      assertTrue(base64_0.isUrlSafe());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(97);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)119;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)31;
      byte[] byteArray3 = base64_0.encode(byteArray2);
      boolean boolean0 = Base64.isBase64(byteArray3);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)72, (byte)119, (byte)61, (byte)61, (byte)0, (byte)62}, byteArray3);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)0;
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      base64_0.decode("");
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-38);
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)94;
      base64_0.readResults(byteArray0, 120, (byte)0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger.valueOf((-1752L));
      // Undeclared exception!
//      try { 
        bigInteger0.byteValueExact();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger out of byte range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)62;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-501), byteArray0, true);
      boolean boolean1 = false;
      String string0 = null;
      int int0 = 121;
      int int1 = (-4292);
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, 9);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)93;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("Aq0zUo>WhFemG");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-14);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("Aq0zUo>WhFemG");
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-83), (byte)51, (byte)82, (byte) (-123), (byte) (-95), (byte)21, (byte) (-23), (byte) (-122)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)94;
      Base64.encodeBase64(byteArray0, true);
      Base64.isBase64((byte) (-79));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-79);
      byteArray1[2] = (byte) (-79);
      byteArray1[3] = (byte) (-79);
      base64_0.encode(byteArray1, (int) (byte) (-79), 0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64(20);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)79;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)84, (byte)119, (byte)61, (byte)61}, byteArray2);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      assertSame(byteArray3, byteArray0);
      
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte) (-51);
      byteArray4[2] = (byte)59;
      byte[] byteArray5 = base64_0.decode(byteArray4);
      assertEquals(0, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = Base64.decodeBase64("D+1");
      assertArrayEquals(new byte[] {(byte)15, (byte) (-19)}, byteArray0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-106);
      byteArray1[3] = (byte) (-90);
      byteArray1[4] = (byte) (-109);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      boolean boolean0 = Base64.isBase64("D+1");
      assertTrue(boolean0);
      
      byteArray2[1] = (byte) (-9);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-1);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertEquals(0, byteArray3.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("APcA_w", string0);
      
      byte[] byteArray4 = Base64.decodeBase64("APcA_w");
      assertEquals(4, byteArray4.length);
      
      Base64.encodeBase64(byteArray3, false, false, (int) (byte) (-90));
      Base64.decodeBase64(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64(byteArray1, true);
      assertEquals(10, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.flipBit(1385);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.decodeBase64("");
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("(dX.FPd(;uSJe-*5J");
      Base64 base64_0 = new Base64(1562);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      int int0 = 83;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, true, true, (-1358));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of -1358
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)53;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(1, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\uFFFD\u00005]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64((-4699));
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(958, byteArray0, true);
      Base64 base64_1 = new Base64(0, byteArray0);
//      try { 
        base64_1.encode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, true, false, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-121);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)51, (byte)89, (byte)99, (byte)61, (byte)13, (byte)10}, byteArray1);
      
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shiftRight((-1668));
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray2.length);
      
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray3 = base64_0.decode("AoX8GssvvpT");
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray4);
      
      byte[] byteArray5 = new byte[7];
      Base64.encodeBase64(byteArray3, false, false);
      byteArray5[0] = (byte) (-35);
      byteArray5[1] = (byte) (-121);
      byteArray5[2] = (byte) (-35);
      byteArray5[3] = (byte) (-121);
      byteArray5[4] = (byte) (-35);
      byteArray5[5] = (byte) (-121);
      byteArray5[6] = (byte) (-1);
      boolean boolean0 = Base64.isBase64(byteArray5);
      assertFalse(boolean0);
      
      base64_0.encode(byteArray3);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-123), (byte) (-4), (byte)26, (byte) (-53), (byte)47, (byte) (-66), (byte) (-108)}, byteArray3);
      assertEquals(8, byteArray3.length);
      
      int int0 = base64_0.readResults(byteArray0, (byte) (-1), 15);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
      
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertEquals(0, byteArray2.length);
      
      Base64.isBase64("");
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertEquals(6, byteArray3.length);
      assertNotSame(byteArray3, byteArray1);
      
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray4);
      byte[] byteArray5 = base64_0.decode("");
      assertEquals(0, byteArray5.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-81);
      byte byte0 = (byte)41;
//      try { 
        base64_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }
}
