/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:14:39 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      Base64 base64_1 = new Base64(944);
      Base64 base64_2 = new Base64(true);
      base64_2.encode(byteArray0, 5, 5);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)105;
      byteArray1[3] = (byte)108;
      byteArray1[4] = (byte) (-102);
      byteArray1[5] = (byte)122;
      byteArray1[6] = (byte)16;
      base64_2.encode(byteArray1, (int) (byte)16, (int) (byte) (-102));
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      int int0 = 5;
      Base64 base64_0 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray3);
      // Undeclared exception!
      base64_0.decode(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 5, 5);
      base64_0.encode(byteArray1, 5, (-1345));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray3);
      base64_0.decode((Object) string0);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray4, true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeBase64("");
      String string0 = base64_0.encodeToString(byteArray3);
      base64_0.decode((Object) string0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray3);
      base64_0.decode((Object) string0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      Base64 base64_0 = new Base64(5);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray1, 5, 5);
      base64_0.encode(byteArray0, (-1330), (-1330));
      base64_0.readResults(byteArray1, 5, 5);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[45];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      Base64 base64_0 = new Base64(5);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray1, 5, 5);
      base64_0.readResults(byteArray1, 5, 5);
      base64_0.encode(byteArray1, 5, (-788));
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = (-1800);
      Random.setNextRandom((-1800));
      Base64 base64_0 = new Base64((-1800));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-8);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)24;
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = null;
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode((byte[]) null, (-3289), (-1800));
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, (byte)24, 2783);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-643), byteArray0);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      Base64.decodeInteger(byteArray0);
      Object object1 = base64_0.decode(object0);
      // Undeclared exception!
//      try { 
        base64_0.encode(object1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      Base64 base64_0 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64 base64_0 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      String string0 = base64_0.encodeToString(byteArray3);
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(2);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray2, 2, 2);
      base64_0.encode(byteArray2, 2, (-401));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(5);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray1, 5, 5);
      base64_0.encode(byteArray1, 5, (-444));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64 base64_0 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(6, byteArray0, false);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      base64_1.isUrlSafe();
      byte[] byteArray3 = base64_1.encode(byteArray2);
      String string0 = base64_1.encodeToString(byteArray3);
      // Undeclared exception!
      base64_1.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray1, 5, 5);
      base64_0.encode(byteArray1, 5, (-444));
      base64_0.encode(byteArray0, 5, (-2720));
      Random.setNextRandom((-1));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)101;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray1, 5, 5);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64(5);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray1, 5, 5);
      base64_0.encode(byteArray0, 1009, (-3351));
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(36);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-94);
      byte byte0 = (byte) (-5);
      byteArray1[1] = (byte) (-5);
      byteArray1[2] = (byte)125;
      byteArray1[3] = (byte)80;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, 0, 6038);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(1908874353, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      base64_0.decode(byteArray2, 120, 120);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)9;
      byteArray3[1] = (byte)6;
      byteArray3[2] = (byte)88;
      byteArray3[3] = (byte)6;
      byteArray3[4] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.isArrayByteBase64(byteArray3);
      base64_0.isUrlSafe();
      Base64 base64_1 = new Base64();
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte) (-100);
      byteArray4[1] = (byte)88;
      byteArray4[2] = (byte)6;
      byteArray4[4] = (byte)88;
      base64_1.encode(byteArray4);
      byte[] byteArray5 = Base64.encodeBase64(byteArray2, false);
      Base64 base64_2 = new Base64();
      base64_0.encodeToString(byteArray5);
      base64_0.hasData();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(5);
      base64_0.encode(byteArray1, 5, 5);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(5);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray1, 5, 5);
      base64_0.decode(byteArray1, 2854, (-1091));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray1, 5, 5);
      base64_0.encode(byteArray1, 2854, (-23));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray0, 5, 5);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.isUrlSafe();
      Base64 base64_1 = new Base64(5);
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray1, 5, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 39
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64((byte[]) null, true, true, 1);
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      Random.setNextRandom(2137);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-22);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[2];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      Base64 base64_1 = new Base64((byte)0);
      byte[] byteArray3 = new byte[13];
      byteArray3[9] = (byte)0;
      Base64.isBase64((byte)123);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray0, 5, 5);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.isUrlSafe();
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray2, 5, 274);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 169
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.isBase64((byte)122);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = base64_0.decode("org.apache.commons.codec.EncoderException");
      base64_0.decode(byteArray0, (int) (byte)122, 404);
      Base64 base64_1 = new Base64((byte)122, byteArray1);
      base64_1.decode(byteArray2);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)122;
      byteArray3[1] = (byte)122;
      byteArray3[2] = (byte)122;
      byteArray3[3] = (byte)32;
      byteArray3[4] = (byte)122;
      byteArray3[5] = (byte)122;
      byteArray3[6] = (byte)122;
      byteArray3[0] = (byte)122;
      byteArray3[0] = (byte)122;
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-27);
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray2, (int) (byte) (-27), (int) (byte)34);
      Base64 base64_1 = new Base64(58);
      base64_1.isUrlSafe();
      byte[] byteArray3 = base64_0.encode(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      Base64 base64_2 = new Base64();
      base64_0.encodeToString(byteArray1);
      base64_2.hasData();
      Base64.decodeInteger(byteArray4);
      base64_1.hasData();
//      try { 
        base64_1.decode((Object) base64_2);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64(44);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-20);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64 base64_1 = new Base64((-1), byteArray1, true);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-28);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte) (-1);
      // Undeclared exception!
//      try { 
        base64_1.encodeToString(byteArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      Base64 base64_1 = new Base64((-717), byteArray0, true);
      byte[] byteArray1 = base64_1.decode("N/+Sz|N m+:H k+ds7");
      int int0 = 1;
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray0, 5, 5);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.isUrlSafe();
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray2);
      base64_0.hasData();
      Base64.decodeInteger(byteArray3);
      assertEquals(234, byteArray3.length);
      
      boolean boolean0 = base64_1.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64(35);
      base64_0.encode(byteArray1, (-43), (-43));
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray2.length);
      assertSame(byteArray0, byteArray1);
      
      boolean boolean1 = base64_0.hasData();
      boolean boolean2 = Base64.isBase64((byte)85);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = (byte)112;
      Base64.isBase64((byte)112);
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, (int) (byte)112, 75);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Random.setNextRandom((-1159));
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)1;
      byte byte0 = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-32);
      int int0 = 2;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 2, (int) (byte)73);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(2629, byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      assertEquals(27, byteArray1.length);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte) (-7);
      base64_0.decode(byteArray2, 1, (int) (byte)1);
      Base64 base64_1 = new Base64(8162);
      base64_1.decode(byteArray2);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertEquals(6, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      base64_0.decode(byteArray2, 5, 5);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.encode(byteArray1, 0, 76);
      base64_0.isUrlSafe();
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray3, false);
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64(1063, byteArray1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AAAA\u0000\u0000\u0000\u0000\u0000\u0000AAAA\u0000\u0000\u0000\u0000\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray1, 5, 5);
      assertEquals(10, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray0, (-58), 0);
      boolean boolean1 = base64_1.isUrlSafe();
      assertTrue(boolean1 == boolean0);
      
      base64_0.encode(byteArray0);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      assertEquals(14, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)25;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)85, (byte)5}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64((-116));
      byte[] byteArray0 = new byte[0];
      base64_0.decode(byteArray0);
      byte[] byteArray1 = new byte[3];
      byte[] byteArray2 = Base64.decodeBase64("h/)rwGj=odbs+.");
      byteArray1[0] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 531);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      assertEquals(8, byteArray3.length);
      assertEquals((short) (-4070), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("orgapachecommonscodecEncoderExceptio", string0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)20;
      byteArray3[1] = (byte)125;
      byteArray3[2] = (byte)5;
      byteArray3[3] = (byte)12;
      byteArray3[4] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray3, true);
      base64_0.encode(byteArray2, (int) (byte)1, (int) (byte)5);
      boolean boolean1 = base64_0.isUrlSafe();
      assertTrue(boolean1 == boolean0);
      
      base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true);
      assertEquals(50, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64((-116));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      base64_0.decode(byteArray0, 17, (int) (byte)0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64 base64_0 = new Base64((-116));
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)61;
      Base64.isBase64((byte) (-4));
      boolean boolean0 = Base64.isBase64("1cgZKq*=[qAA{~");
      boolean boolean1 = Base64.isBase64((byte)61);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 10);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)120, (byte)119, (byte)71, (byte)122, (byte)48}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 1431655765;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1431655765, (byte[]) null);
      String string0 = "DP<1)\\";
      Base64.encodeBase64((byte[]) null);
      Base64.isBase64("DP<1)");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.decodeBase64((byte[]) null);
      base64_0.encode((byte[]) null);
      bigInteger0.longValueExact();
      Base64.decodeBase64((byte[]) null);
      bigInteger0.intValueExact();
      Base64.encodeBase64URLSafe((byte[]) null);
      bigInteger0.pow(76);
      Base64.encodeInteger(bigInteger0);
      base64_0.hasData();
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      base64_0.encodeToString(byteArray0);
      byteArray0[0] = (byte) (-60);
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(8, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(7, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64("AAAAAAA=");
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[3] = (byte)58;
      bigInteger0.getLowestSetBit();
      byteArray0[4] = (byte)23;
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      assertEquals("Cg", string0);
      
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray4 = base64_0.decode("");
      bigInteger0.negate();
      byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
      base64_0.readResults(byteArray0, (byte)81, (byte) (-60));
      base64_0.decode(byteArray4);
      base64_0.encode(byteArray5, (-415), (int) (byte) (-60));
      assertEquals(0, byteArray5.length);
      
      base64_0.decode((Object) "xAAAAAA");
      byte[] byteArray6 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray6);
      
      byte[] byteArray7 = base64_0.decode("AAAAAAA=");
      assertEquals(5, byteArray7.length);
      
      base64_0.decode((String) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      int int0 = 5;
      byte[] byteArray1 = null;
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64(44);
      base64_0.encode(byteArray1, (-43), (-43));
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(0, byteArray3.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64((-277));
      Base64 base64_1 = new Base64((-43));
      base64_1.encodeToString(byteArray0);
      Base64.decodeBase64(byteArray1);
      base64_1.encode(byteArray1, 775, (-277));
      base64_1.isUrlSafe();
      byte[] byteArray2 = base64_1.encode(byteArray1);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray3 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      base64_0.decode(byteArray2, 1, 5);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertEquals(19, byteArray3.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      bigInteger0.signum();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.or(bigInteger0);
      Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_1 = new Base64(true);
      Base64 base64_2 = new Base64(true);
      byte[] byteArray5 = base64_2.decode(byteArray4);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      
      byte[] byteArray6 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertEquals(21, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1209, (-926));
      base64_0.decode(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)107;
      byteArray2[2] = (byte) (-7);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)107;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-7);
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte) (-7);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.decodeInteger(byteArray3);
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray1);
      boolean boolean1 = Base64.isBase64("");
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)107;
      Base64.isBase64(byteArray2);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)107;
      byteArray3[3] = (byte)107;
      byteArray3[4] = (byte)35;
      byteArray3[5] = (byte)1;
      base64_0.readResults(byteArray3, (byte)107, 9);
      byte[] byteArray4 = base64_0.encode(byteArray0);
      int int0 = base64_0.readResults(byteArray4, 0, 1);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)10}, byteArray4);
      
      byte[] byteArray5 = Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64((-116));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_1 = new Base64((-116), byteArray0, false);
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray0, (int) (byte)0, 120);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-68);
      byteArray0[0] = (byte) (-68);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-68), byteArray0);
      base64_0.encode(byteArray0, (int) (byte) (-68), (int) (byte) (-68));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.signum();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.isProbablePrime((byte) (-68));
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.toIntegerBytes(bigInteger2);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray1, (byte) (-68), (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_1 = new Base64(993);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 1, 44);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray0, 1, 0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.isArrayByteBase64(byteArray2);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAA\u0000\u0000", string0);
      
      int int0 = base64_0.readResults(byteArray0, 0, 6);
      assertEquals((-1), int0);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertTrue(boolean0);
      
      int int1 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.nextProbablePrime();
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      BigInteger bigInteger2 = bigInteger1.min(bigInteger0);
      BigInteger bigInteger3 = BigInteger.TEN;
      bigInteger2.gcd(bigInteger1);
      byte[] byteArray3 = Base64.decodeBase64("AAA\u0000\u0000");
      assertEquals(2, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65}, byteArray1);
      assertEquals(6, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64((-116));
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.decodeBase64("h/)rwGj=odbs+.");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)107;
      base64_0.decode(byteArray0, (int) (byte)107, (-116));
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {(byte) (-121), (byte) (-6), (byte) (-16), (byte)26}, byteArray1);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-113);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-113);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertEquals(12, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte) (-68), byteArray0);
      base64_0.encode(byteArray0, (int) (byte) (-68), (int) (byte) (-68));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.signum();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger2);
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-68)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[2] = (byte)48;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.doubleValue();
      bigInteger1.signum();
      bigInteger0.or(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray2);
      assertEquals((short)48, bigInteger2.shortValue());
      assertArrayEquals(new byte[] {(byte)43, (byte)65, (byte)65, (byte)119}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64((-116));
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      base64_0.readResults((byte[]) null, 1, (-826));
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      base64_0.decode(byteArray2, 1, 5);
      assertEquals(22, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      base64_0.encode(byteArray3, 0, 1);
      base64_0.isUrlSafe();
      base64_0.encode(byteArray1);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray5);
      
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64.isBase64((byte)107);
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64("");
      byte[] byteArray2 = new byte[4];
      Base64.encodeBase64(byteArray1, true, true, 2070);
      byteArray2[0] = (byte)107;
      byteArray2[1] = (byte)107;
      byteArray2[2] = (byte)107;
      byteArray2[3] = (byte)107;
      Base64.decodeBase64(byteArray2);
      base64_0.decode(byteArray0, (int) (byte)107, 0);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      assertFalse(byteArray3.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[2] = (byte)48;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.signum();
      bigInteger0.or(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertEquals(1, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64((-116));
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, (-116), 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(54, byteArray0, true);
      byte[] byteArray1 = new byte[3];
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      base64_0.decode(byteArray1, 1550, 1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      Base64.encodeBase64Chunked(byteArray4);
      Base64 base64_1 = new Base64();
//      try { 
        base64_1.decode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)0, (-1));
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      base64_0.decode(byteArray2, 1, 5);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertEquals(19, byteArray3.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray4);
      //  // Unstable assertion: assertEquals("AAA\u0000\u0000\u0000\u0000", string0);
      
      int int0 = base64_0.readResults(byteArray1, 2622, (-532));
      //  // Unstable assertion: assertEquals((-1), int0);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray2);
      //  // Unstable assertion: assertEquals(22, byteArray2.length);
      //  // Unstable assertion: assertFalse(boolean1);
      
      int int1 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger0.min(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.gcd(bigInteger2);
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(1, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(54, byteArray0, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.signum();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_1 = new Base64(false);
      base64_1.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64.isBase64((byte)107);
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (int) (byte)107, 0);
      Base64.encodeBase64(byteArray1, false, false, (-3570));
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, (-4094), (int) (byte)107);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4094
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)60;
      Base64 base64_0 = new Base64((-1262), byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray0, (byte)60, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.shiftRight((-3513));
      bigInteger1.remainder(bigInteger0);
      bigInteger1.divide(bigInteger0);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.isBase64((byte)2);
      Object object0 = base64_0.decode((Object) "IAI8");
      base64_0.decode(object0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64((String) null);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray3, 0, (int) (byte)60);
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)2;
      byteArray4[1] = (byte)60;
      base64_0.readResults(byteArray2, 0, (byte)60);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.readResults(byteArray3, 0, 0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 54;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(54, byteArray0, true);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = base64_0.encode(byteArray1);
      int int1 = 1;
      Base64.encodeBase64(byteArray2, true);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, 1550, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1550
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Object object0 = base64_0.decode((Object) "%ilx2t[{ULHo");
      base64_0.encode(object0);
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = base64_0.decode(".OI,]*u");
      byteArray0[3] = (byte) (-53);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.shiftLeft((byte) (-53));
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.mod(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.multiply(bigInteger1);
      // Undeclared exception!
//      try { 
        bigInteger0.remainder(bigInteger2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger divide by zero
//         //
//         verifyException("java.math.MutableBigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-17);
      byteArray0[0] = (byte) (-17);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-24);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(88, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD\u0000\uFFFDV\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64(44, byteArray0, true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, (-43), (-43));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)60;
      Base64 base64_0 = new Base64((-1262), byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray0, (byte)60, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.shiftRight((-3513));
      bigInteger1.remainder(bigInteger0);
      bigInteger1.divide(bigInteger0);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0);
      Base64.isBase64((byte)2);
      Object object0 = base64_0.decode((Object) "IAI8");
      base64_0.decode(object0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64((String) null);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray2, 0, (int) (byte)60);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)2;
      byteArray3[1] = (byte)60;
      byteArray3[2] = (byte)32;
      byteArray3[3] = (byte)32;
      byteArray3[4] = (byte)0;
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-89);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, true, true, (int) (byte) (-89));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -89
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64(1582, (byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.setBit(64);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64((byte[]) null);
      base64_0.readResults((byte[]) null, 0, 0);
      base64_0.encode((byte[]) null, 0, 0);
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-70), byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte) (-1));
      base64_0.readResults(byteArray1, (-179), 0);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte) (-125));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64((byte) (-125), byteArray0);
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      base64_0.encodeToString(byteArray1);
      base64_0.decode((Object) "");
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.decodeInteger(byteArray4);
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte) (-125);
      Base64.encodeBase64(byteArray5, false, true, 2251);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.decode("");
      base64_0.decode("fExn");
      Base64.encodeBase64(byteArray0, false, false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64.isBase64((byte)107);
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (int) (byte)107, 0);
      base64_0.readResults(byteArray0, 0, (byte)107);
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64((-116));
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.decodeBase64("h/)rwGj=odbs+.");
      assertArrayEquals(new byte[] {(byte) (-121), (byte) (-6), (byte) (-16), (byte)26}, byteArray1);
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)107;
      base64_0.decode(byteArray0, (int) (byte)107, (-116));
      base64_0.decode("X5bzoe' ");
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.decodeBase64("X5bzoe' ");
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-77);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)51;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("WH0FMw", string0);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)88;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)125;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)125;
      byteArray1[6] = (byte)51;
      byteArray1[7] = (byte)88;
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte)95, (byte)117}, byteArray2);
      assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-46);
      Base64 base64_0 = new Base64(1, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 80);
      Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray1, 0, (-1));
      base64_0.decode(byteArray1, (int) (byte) (-46), (-1));
      int int0 = base64_0.readResults(byteArray0, (byte)0, (byte)28);
      assertEquals(0, int0);
      
      base64_0.decode(byteArray0, (int) (byte) (-1), (int) (byte)0);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("/wAAHNI=", string0);
      
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(14, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)65, (byte)65, (byte)72, (byte)78, (byte)73, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, 373, 64);
      assertEquals(0, int0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      boolean boolean0 = true;
      int int0 = (-1734);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (-1734));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      BigInteger bigInteger1 = null;
//      try {
        bigInteger1 = new BigInteger(byteArray2);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length BigInteger
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)0;
      base64_0.encode(byteArray0, 874, 0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 76);
      byteArray0[4] = (byte)77;
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray1, 53, (-100));
      byte[] byteArray2 = new byte[1];
      Base64.encodeBase64Chunked(byteArray2);
      byte byte0 = (byte)0;
      byteArray2[0] = (byte)0;
      int int0 = (-323);
//      try { 
        base64_0.encode((Object) "iwBhAE0=");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)108;
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)70, (byte)106, (byte)68, (byte)65, (byte)65, (byte)69, (byte)79}, byteArray1);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)34;
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)1;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      boolean boolean0 = true;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)1, byteArray1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [IgAB]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-127);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-127);
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte)83;
      byteArray1[3] = (byte) (-11);
      byteArray1[4] = (byte)70;
      byteArray1[5] = (byte) (-59);
      byteArray1[6] = (byte) (-22);
      byteArray1[7] = (byte)96;
      byteArray1[8] = (byte) (-127);
      Base64.encodeBase64(byteArray1, false);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("6gBgRlOB", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.isBase64((byte) (-109));
      Base64 base64_0 = new Base64(457);
      base64_0.encode(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte) (-109);
      byteArray1[2] = (byte) (-109);
      byteArray1[3] = (byte) (-109);
      byteArray1[4] = (byte) (-109);
      byteArray1[5] = (byte) (-109);
      byteArray1[6] = (byte) (-109);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byteArray1[7] = (byte) (-109);
      byteArray1[8] = (byte) (-109);
      bigInteger0.equals("");
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.xor(bigInteger0);
      bigInteger1.pow(76);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      base64_0.decode(byteArray2, (int) (byte) (-109), 0);
      base64_0.decode(byteArray1);
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)127;
      Base64 base64_0 = new Base64(2622, byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray1, 0, (int) (byte)0);
      byte[] byteArray2 = base64_0.decode("EK#nIoIMDZ1Rtl");
      Base64.isArrayByteBase64(byteArray0);
      base64_0.decode(byteArray2, 0, 88);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger((-4081), (java.util.Random) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // numBits must be non-negative
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValue();
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.min(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      base64_0.decode((Object) "");
      base64_0.isUrlSafe();
      Base64.isBase64((byte) (-107));
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false, 1110);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64.isBase64(",AF?xF");
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray0, (-2161), (byte) (-68));
      base64_0.encode(byteArray0);
      int int0 = 1981;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-68));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -68
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)48;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.signum();
      bigInteger0.or(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = (-3222);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-30);
      byteArray0[0] = (byte) (-30);
      byte byte1 = (byte)26;
      byteArray0[1] = (byte)26;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64((-3222), byteArray0);
      base64_0.isUrlSafe();
      Base64.isBase64((byte) (-30));
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)0;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.avail();
      Base64.encodeBase64(byteArray2, true, true);
      int int0 = (-1);
      Base64 base64_1 = new Base64();
//      try { 
        base64_0.encode((Object) "QUFBPQ0K");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("AAAAAAAAAAA", string0);
      
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte) (-113);
      String string1 = base64_0.encodeToString(byteArray0);
      assertEquals("AOL__wAAcI8\r\n", string1);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString((byte[]) null);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      Base64.encodeBase64((byte[]) null);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false);
      base64_0.decode((byte[]) null, (-156), (-156));
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray0, false, true);
      Object object0 = base64_0.decode((Object) "");
      Base64.encodeBase64(byteArray0, true);
      base64_0.encode(object0);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(0, byteArray1);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // signum-magnitude mismatch
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }
}
