/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:13:50 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[112];
      Base64.isBase64((byte)5);
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      base64_0.encode(byteArray0, 0, (int) (byte)5);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.encode(byteArray1, 0, 76);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, (int) (byte)5, 2514);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 152
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[79];
      Base64.isBase64((byte)5);
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, 0, (int) (byte)5);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.encode(byteArray1, 0, 76);
      base64_0.encode(byteArray0, (int) (byte)5, (-4526));
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[73];
      Base64.isBase64((byte)5);
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      boolean boolean0 = true;
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[2] = (byte)9;
      Base64.isBase64((byte)9);
      Base64 base64_0 = new Base64((byte)9, byteArray0, false);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      Base64.isBase64((byte)5);
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[2] = (byte)9;
      Base64.isBase64((byte)9);
      Base64 base64_0 = new Base64((byte)9, byteArray0, false);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeBase64("el)`W<Iu3");
      base64_0.encode(byteArray3);
      // Undeclared exception!
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, (-678), (-678));
      base64_0.readResults(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1, (int) (byte)5);
      base64_0.encode(byteArray0, (-706), (-706));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1, 1);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, (-694), (-694));
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, true, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[2] = (byte)5;
      Base64.isBase64((byte)5);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)5;
      Base64 base64_0 = new Base64((byte)5, byteArray1, false);
      base64_0.encode(byteArray0, (int) (byte)5, (int) (byte)5);
      base64_0.encode(byteArray1, 639, (-393));
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, (-706), (-706));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[2] = (byte)5;
      Base64.isBase64((byte)5);
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.getLowestSetBit();
      Base64.encodeInteger(bigInteger0);
      Object object0 = new Object();
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2, (int) (byte)5, 76);
      Base64.isBase64("g`jA");
      base64_0.encode(byteArray2);
      Object object1 = new Object();
//      try { 
        base64_0.decode(object1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[2] = (byte)5;
      Base64.isBase64((byte)5);
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Object object0 = new Object();
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2, (int) (byte)5, 76);
      Base64.isBase64("gQjA");
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 64, (-706));
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, (-706), (-706));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[2] = (byte)14;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, (int) (byte)14, 726);
      Base64.encodeBase64(byteArray0, false, false, 64);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[2] = (byte)5;
      Base64.isBase64((byte)5);
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Object object0 = new Object();
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2, (int) (byte)5, 76);
      Base64.isBase64("g`jA");
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[2] = (byte)5;
      Base64.isBase64((byte)5);
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.decode((Object) "s)#{Ol,");
      byte[] byteArray3 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray3, (int) (byte)5, 76);
      base64_0.decode(byteArray0, (int) (byte)5, 1687);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64((byte)5);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.decodeInteger(byteArray4);
      base64_0.encode(byteArray4, 1687, 2551);
      // Undeclared exception!
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[2] = (byte)5;
      Base64.isBase64((byte)5);
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)5;
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      base64_0.decode((Object) "s)#{Ol,");
      byte[] byteArray4 = base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray4, (int) (byte)5, 76);
      base64_0.decode(byteArray0, (int) (byte)5, 1687);
      Base64.isBase64("gSjA");
      byte[] byteArray5 = base64_0.encode(byteArray4);
      Base64.decodeInteger(byteArray5);
      byte[] byteArray6 = Base64.discardWhitespace(byteArray5);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray6);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[2] = (byte)5;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)5);
      base64_0.decode(byteArray1, 11, 45);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray0, (int) (byte)5, (int) (byte)5);
      base64_1.avail();
      Base64.isBase64("org.apache.commons.codec.DecoderException");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[2] = (byte)5;
      boolean boolean0 = Base64.isBase64("s)#{Ol,");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.decode((Object) "s)#{Ol,");
      byte[] byteArray3 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray3, (int) (byte)5, 2897);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      base64_0.decode(byteArray2, 2783, (-1));
      byte[] byteArray5 = base64_0.encode(byteArray4);
      assertEquals(15895, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(1);
      base64_0.decode(byteArray1, 1, 2147483620);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)9);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, (int) (byte)9);
      assertEquals(0, byteArray2.length);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(true);
      int int0 = (-1161);
      Base64 base64_1 = new Base64(3, byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)86;
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte) (-83);
      base64_0.decode(byteArray0);
      byteArray1[3] = (byte)18;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)124;
      byteArray1[6] = (byte) (-75);
      byteArray1[7] = (byte) (-16);
      // Undeclared exception!
//      try { 
        base64_1.encodeToString(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.decodeBase64("2EF`A94pX~QwNo");
      byte[] byteArray2 = null;
      Base64 base64_0 = new Base64(53, byteArray0, false);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, 0, 106);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64.isBase64((byte) (-124));
      Base64.isBase64("UTF-8");
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray2 = Base64.decodeBase64("UTF-8");
      base64_0.encode(byteArray2);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)5;
      Base64.isBase64(byteArray0);
      Base64.isBase64("s)#{Ol~,");
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      Base64 base64_1 = new Base64((-1));
      Base64 base64_2 = new Base64((byte)5);
      // Undeclared exception!
//      try { 
        base64_2.encode(byteArray0, (int) (byte)5, 76);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.decodeBase64("UTF-16BE");
      byte[] byteArray2 = null;
      Base64 base64_0 = new Base64(53, byteArray0, false);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, 0, 106);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.isBase64((byte)96);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      bigInteger0.bitCount();
      Base64.encodeBase64(byteArray1, false, true, 6);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = "Parameter supplied to Base64 encode is not a byte[]";
      Base64 base64_0 = new Base64(360, byteArray0, false);
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 encode is not a byte[]");
      // Undeclared exception!
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (-639), (-2825));
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, (byte)13, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("%@/LYnCu@((A)2qj");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.isBase64("1^");
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)5, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD'
//         // \uFFFD6\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)13;
      byteArray1[4] = (byte)13;
      byteArray1[5] = (byte)13;
      byteArray1[6] = (byte)13;
      byteArray1[7] = (byte)13;
      byteArray1[8] = (byte)13;
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(386, byteArray2, true);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64((byte) (-1), (byte[]) null);
      Base64.decodeBase64((String) null);
      base64_0.encode((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      base64_0.readResults((byte[]) null, 2705, 91);
      byte[] byteArray0 = base64_0.decode("G;SutmXy4?>NG");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.hasData();
      base64_0.encodeToString(byteArray1);
      Base64.decodeBase64("G;SutmXy4?>NG");
      Base64.isBase64("PB gmdZ+)GrknwMf?\"");
      base64_0.encode((byte[]) null, (-4085), 91);
//      try { 
        base64_0.encode((Object) "PB gmdZ+)GrknwMf?\"");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)52;
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.isBase64("s)#{Ol~d%");
      Base64 base64_0 = new Base64((-464), byteArray2, false);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.xor(bigInteger0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, false, false, 593);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray1);
      Base64.decodeBase64("P_lr_$Zq6[6 l$_48!^");
      Base64.isBase64("w'+JPCqs9");
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0, false, true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.toString();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)5;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)5);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeBase64("8sg]OCAqFw`,4");
      Base64.isBase64("Tldsi/'rIb?d");
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray2);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (int) (byte)37, (-1286));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 49);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray1);
      Base64.decodeBase64("ZFr\"vru!`9");
      Base64.isBase64("5d!$91.}M");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      base64_0.avail();
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64 base64_0 = new Base64(292);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, 1468);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64.decodeBase64((String) null);
      base64_0.encode((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      base64_0.readResults((byte[]) null, (-751), (-751));
      base64_0.decode((String) null);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.hasData();
      base64_0.encodeToString((byte[]) null);
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.isBase64((byte)112);
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64.isBase64((byte)120);
      byte[] byteArray0 = Base64.decodeBase64("oCD,XuXV`D");
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 56);
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64("^3");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shiftLeft((-1082));
      bigInteger0.floatValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.not();
      bigInteger1.negate();
      // Undeclared exception!
//      try { 
        bigInteger2.pow((-460));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative exponent
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64.isBase64((byte)107);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)107;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.readResults(byteArray0, (-1036), (-1036));
//      try { 
        base64_0.encode((Object) ") than the specified maxium size of ");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64String(byteArray1);
      base64_0.readResults(byteArray0, (-1364), (-22));
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.decode(byteArray1, 1, 1);
      base64_0.readResults(byteArray0, (-107), 1);
      base64_0.readResults((byte[]) null, 1499, 2208);
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isBase64((byte) (-1));
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-1353), (byte[]) null, false);
      base64_0.encode((byte[]) null, (-1353), (-1353));
      base64_0.hasData();
      base64_0.decode((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Object object0 = new Object();
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-1324);
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      Base64 base64_0 = new Base64((-1324), (byte[]) null, false);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 50, 317);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)5;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.isBase64("s)#{Ol~,p");
      Base64 base64_0 = new Base64((byte)5, byteArray1, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      bigInteger0.shortValueExact();
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, false, false, 14);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (54) than the specified maxium size of 14
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64((-1353), (byte[]) null, false);
      base64_0.encode((byte[]) null, (-1353), (-1353));
      base64_0.decode((byte[]) null, (-1353), (-1353));
      base64_0.decode((byte[]) null);
      base64_0.avail();
      Base64.encodeBase64((byte[]) null, false, true, 76);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.avail();
      base64_0.decode((byte[]) null, (-4075), 0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("%@#/LYnCu@((A)2Lqj");
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = base64_0.decode("%@#/LYnCu@((A)2Lqj");
      Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.hasData();
      base64_0.decode(byteArray1);
      Base64.decodeBase64(byteArray2);
      Base64.isBase64("UTF-8");
      Object object0 = new Object();
      base64_0.decode((Object) "UTF-8");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.shiftLeft(2400);
      Base64.toIntegerBytes(bigInteger1);
      Base64.isBase64((byte) (-63));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      Base64 base64_0 = new Base64((byte)24);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.isBase64("GAAAAA==");
      Base64 base64_1 = new Base64(5, byteArray0, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_1.encode(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.andNot(bigInteger1);
//      try { 
        base64_0.encode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64("^3");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(120);
      bigInteger0.floatValue();
      BigInteger bigInteger2 = bigInteger1.not();
      bigInteger2.add(bigInteger0);
      bigInteger1.negate();
      // Undeclared exception!
//      try { 
        bigInteger1.pow((-460));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative exponent
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64("ZFr\"vru!`9");
      base64_0.decode(byteArray3);
      base64_0.decode(byteArray1);
      Base64.encodeBase64String(byteArray3);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger1);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray4 = base64_0.decode(",");
      base64_0.decode(byteArray2, (-586), 64);
      Base64.isBase64(byteArray4);
      base64_0.encode(byteArray1);
      byte[] byteArray5 = new byte[8];
      byteArray5[0] = (byte) (-79);
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte) (-74);
      Base64.isBase64("");
      base64_0.encode(byteArray5);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64((-1335), (byte[]) null, false);
      base64_0.encode((byte[]) null, (-1335), (-1335));
      base64_0.decode((byte[]) null, (-1335), (-1335));
      base64_0.decode((byte[]) null);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, (-1), 66);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64();
      String string0 = "ZFr\"vru!`9";
      byte[] byteArray3 = Base64.decodeBase64("ZFr\"vru!`9");
      base64_0.decode(byteArray3);
      base64_0.decode(byteArray1);
      Base64.encodeBase64String(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray2);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 90);
      Base64 base64_1 = new Base64(true);
      base64_1.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      int int0 = 0;
      base64_0.readResults(byteArray1, 0, 0);
//      try { 
        base64_0.encode((Object) base64_1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.isBase64((byte)61);
      Base64 base64_0 = new Base64((byte) (-91));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)76;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-107));
      Base64.encodeBase64(byteArray0, true, false, 1908874353);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[4] = (byte)58;
      Object object0 = base64_0.decode((Object) "3uJK%)n?U\"e]e4");
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)13;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.hasData();
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)34;
      Base64.encodeBase64String(byteArray2);
      Base64.isBase64((byte) (-123));
      Base64.isBase64("Ig==");
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      Base64.decodeInteger(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-127);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.isUrlSafe();
      Base64.isBase64("AP9GOwAAgQ");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte byte0 = (byte)0;
      Base64.encodeBase64String(byteArray1);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.isBase64("");
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-5078), byteArray1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [cjy//wAAAA==]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64((-1335), (byte[]) null, false);
      base64_0.encode((byte[]) null, (-1335), (-1335));
      base64_0.decode((byte[]) null, (-1335), (-1335));
      base64_0.decode((byte[]) null);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.decode("");
      base64_0.encode(byteArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 0;
      Base64.decodeBase64((String) null);
      int int1 = (-751);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.decodeBase64((byte[]) null);
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.avail();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      base64_0.readResults(byteArray0, 0, 1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)92;
      byteArray1[5] = (byte)123;
      base64_0.decode("$a:0=ODd|{");
      byteArray1[6] = (byte)123;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, 10, 1476);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(false);
      base64_1.isUrlSafe();
      Base64.encodeBase64(byteArray2, false);
      Base64.decodeBase64("SGx$yDs1pK");
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)92;
      byteArray3[1] = (byte)123;
      byteArray3[2] = (byte)123;
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64(1082);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)114;
      base64_0.decode(byteArray0, (int) (byte)31, (-832));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)27;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode(byteArray0, (-2355), (int) (byte)0);
      base64_0.decode((Object) "");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("");
      byte[] byteArray3 = base64_0.decode(byteArray0);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      Base64.isBase64((byte)27);
      Base64.isArrayByteBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = (-1509);
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-1509), (byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked((byte[]) null);
      int int1 = (-1);
      Base64.encodeBase64(byteArray1, true);
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        bigInteger0.mod(bigInteger1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger: modulus not positive
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64.decodeBase64((String) null);
      base64_0.encode((byte[]) null);
      base64_0.readResults((byte[]) null, (-751), (-751));
      base64_0.decode((String) null);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.hasData();
      base64_0.decode((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)23;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false, (int) (byte)65);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, byteArray3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [VVZNd1dBPT0=\uFFFD\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = Base64.decodeBase64("ZFr\"vru!`9");
      base64_0.decode(byteArray3);
      base64_0.decode(byteArray1);
      Base64.encodeBase64String(byteArray3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray4 = base64_0.decode(",");
      base64_0.decode(byteArray2, (-586), 61);
      Base64.isBase64(byteArray4);
      base64_0.encode(byteArray1);
      byte[] byteArray5 = new byte[8];
      byteArray5[0] = (byte) (-79);
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte) (-74);
      byteArray5[3] = (byte) (-44);
      byteArray5[4] = (byte) (-26);
      byteArray5[5] = (byte)25;
      byteArray5[6] = (byte) (-33);
      byteArray5[7] = (byte) (-53);
      Base64.decodeBase64(byteArray5);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(584, byteArray0);
      byte[] byteArray1 = new byte[3];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray1[0] = (byte)63;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)63;
      base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)63);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      base64_0.readResults(byteArray2, 0, 0);
      int int0 = 1;
//      try { 
        base64_0.encode((Object) "AD8=\u0000?");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValue();
      bigInteger0.bitCount();
      bigInteger0.not();
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      boolean boolean0 = false;
      bigInteger2.getLowestSetBit();
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray0);
      Object object0 = new Object();
      bigInteger1.equals(object0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray2);
      String string0 = "";
      Base64.toIntegerBytes(bigInteger2);
//      try { 
        base64_0.decode((Object) bigInteger1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)123;
      byteArray0[2] = (byte)123;
      Base64.isBase64(byteArray0);
      Base64.decodeBase64((String) null);
      Base64.decodeBase64("");
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)81;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.isBase64("");
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)0, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [%\u0000\uFFFD\u0000\u0000\uFFFD,\u0000Q]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64((-1335), (byte[]) null, false);
      base64_0.encode((byte[]) null, (-1335), (-1335));
      base64_0.decode((byte[]) null, (-1335), (-1335));
      base64_0.decode((byte[]) null);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_0.decode("");
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-1);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)58;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)83;
      base64_0.readResults(byteArray0, (byte)83, (-74));
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byteArray1[0] = (byte)0;
      byte[] byteArray3 = base64_0.decode(byteArray1);
      Base64.isBase64((byte) (-1));
      Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray2, 0, 0);
      base64_0.decode(byteArray3);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)103;
      byteArray2[2] = (byte)101;
      byteArray2[3] = (byte) (-5);
      byteArray2[4] = (byte)111;
      byteArray2[5] = (byte)68;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)69;
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true, (-1));
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64String(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray3, 1058, 0);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray3);
      int int0 = 122;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray3, 0, 122);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shiftLeft(95);
      bigInteger0.floatValue();
      BigInteger bigInteger1 = bigInteger0.not();
      bigInteger0.add(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.negate();
      bigInteger2.pow(0);
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.shortValueExact();
      Base64 base64_0 = new Base64(true);
      Base64.encodeInteger(bigInteger1);
      base64_0.decode("");
      Base64.toIntegerBytes(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte)119;
      byte byte0 = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)1;
      byte byte1 = (byte) (-1);
      // Undeclared exception!
//      try { 
        bigInteger0.shortValueExact();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger out of short range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("%@#/LYnCu@((A)2Lqj");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = null;
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray1, 13, 0);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      int int0 = 285;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, 285);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64((-1588), (byte[]) null, true);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      base64_0.readResults((byte[]) null, (-1706), 869);
      base64_0.encodeToString((byte[]) null);
      base64_0.avail();
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte) (-1);
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray1);
//      try { 
        base64_0.encode((Object) "Y2p5Ly93QUFBQT09");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64((-343));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)54);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64.decodeBase64("cM[U");
      Base64.isBase64("cM[U");
      Base64.decodeBase64("3|5kA%/McQl&=-:7O");
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.avail();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      base64_0.readResults(byteArray0, 0, 1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)92;
      byteArray1[5] = (byte)123;
      byteArray1[6] = (byte)123;
      byteArray1[7] = (byte)0;
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, (int) (byte)92, (int) (byte)92);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 92
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(2647, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFD)\uFFFDs\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)62;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-15);
      byteArray1[1] = (byte) (-84);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-84);
      byteArray1[4] = (byte)0;
      Base64.decodeInteger(byteArray1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)81;
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.toString();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64("1");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      
      byte[] byteArray3 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray3);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(120, byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 90, 21);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 90
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte byte0 = (byte)100;
      Base64.isBase64((byte)100);
      Base64 base64_0 = new Base64(86);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte)100;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      base64_0.readResults(byteArray0, 0, (-985));
      base64_0.readResults(byteArray0, (byte)1, (-1369));
      byteArray0[0] = (byte)1;
      base64_0.readResults(byteArray0, (byte)1, 0);
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger("-1iDB", (-1));
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Radix out of range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(73);
      Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray1 = Base64.decodeBase64("");
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)71, (byte)107, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(2018, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [s]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }
}
