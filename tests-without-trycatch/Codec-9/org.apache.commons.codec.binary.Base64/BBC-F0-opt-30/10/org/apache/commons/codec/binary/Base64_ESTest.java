/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:15:41 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64URLSafeString(byteArray0);
      MockRandom mockRandom0 = new MockRandom((byte)116);
      BigInteger bigInteger0 = new BigInteger(2214, (byte)116, mockRandom0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.compareTo(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(2214);
      Base64.discardWhitespace(byteArray1);
//      try { 
        base64_0.encode((Object) mockRandom0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.flipBit(61);
      bigInteger0.gcd(bigInteger1);
      Base64 base64_0 = new Base64(true);
      bigInteger0.longValueExact();
      bigInteger0.intValue();
      base64_0.decode(byteArray0, 0, 38);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.gcd(bigInteger1);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64((byte)125);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      Base64.encodeBase64URLSafeString(byteArray0);
      MockRandom mockRandom0 = new MockRandom(102L);
      BigInteger bigInteger0 = new BigInteger(2271, 87, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.compareTo(bigInteger0);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64(396);
      bigInteger1.compareTo(bigInteger0);
      base64_0.encode(byteArray1);
      base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = new Base64(15);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 15, 46);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 30
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-14);
      base64_0.encode(byteArray0, (int) (byte) (-29), (int) (byte) (-14));
      base64_0.hasData();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte)79;
      byteArray1[3] = (byte)124;
      byteArray1[4] = (byte)102;
      Base64.decodeInteger(byteArray1);
      Base64.isBase64(byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, 8192, (byte)84);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-14);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("$");
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Paametbr suplied to Base64 enhode is not a byte[]");
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 5, 15);
      Base64.isArrayByteBase64(byteArray0);
      int int0 = 1796;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 15, 1796);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 29
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 5, 15);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 15, 1788);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 30
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.floatValue();
      bigInteger1.gcd(bigInteger0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String(byteArray0);
      bigInteger0.longValueExact();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte)17;
      byteArray1[4] = (byte) (-3);
      byteArray1[5] = (byte) (-115);
      base64_0.decode(byteArray1, 1670, (-801));
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)4;
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 5, 15);
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 15, 1763);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 30
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = "X";
      byte[] byteArray1 = Base64.decodeBase64("X");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((-3502), byteArray2);
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      Base64.decodeBase64((String) null);
      Base64.isBase64((byte)118);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 70, 70);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64(1188);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      base64_0.encodeToString(byteArray0);
      base64_0.hasData();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-104);
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte) (-104);
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)6);
      Random.setNextRandom((byte) (-104));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte byte0 = (byte)10;
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)10;
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 15, (int) (byte) (-104));
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, 49, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.floatValue();
      bigInteger0.gcd(bigInteger1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.isBase64((byte)118);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)10;
      Base64.encodeBase64URLSafeString(byteArray0);
      MockRandom mockRandom0 = new MockRandom((byte)116);
      BigInteger bigInteger0 = new BigInteger(2178, (byte)94, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.compareTo(bigInteger1);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(1464);
      base64_0.decode(byteArray1, 0, (int) (byte)10);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.floatValue();
      bigInteger0.gcd(bigInteger1);
      Base64 base64_0 = new Base64(false);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("QVE9PQ==", string0);
      
      bigInteger0.longValueExact();
      base64_0.decode(byteArray0, 0, 38);
      Base64 base64_1 = new Base64(true);
      base64_1.encodeToString(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.gcd(bigInteger0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      bigInteger0.longValueExact();
      // Undeclared exception!
//      try { 
        base64_0.decode((byte[]) null, 64, 122);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)10);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)10;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte)10;
      byteArray2[3] = (byte)10;
      byteArray2[4] = (byte)10;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)111, (byte)75, (byte)67, (byte)103, (byte)111, (byte)65, (byte)0, (byte) (-1)}, byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.gcd(bigInteger1);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray0);
      bigInteger0.longValueExact();
      base64_0.decode(byteArray0, 1, 11);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray1);
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_1 = new Base64((byte)63, byteArray0);
      Base64 base64_2 = new Base64(false);
      // Undeclared exception!
//      try { 
        base64_2.decode(byteArray0, 0, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)44;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64(byteArray1, true, true);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)0;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte) (-1);
      byteArray3[3] = (byte)11;
      byteArray3[4] = (byte) (-33);
      byteArray3[5] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray3);
      Base64 base64_0 = new Base64(37, byteArray2, false);
      Base64.encodeBase64URLSafe(byteArray3);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)35;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.DecoderException");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = base64_0.decode((Object) "biMAAA");
      bigInteger0.equals(object0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = new byte[6];
      byteArray4[1] = (byte)110;
      byteArray4[4] = (byte)35;
      Base64.encodeBase64(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray3);
      Base64.isArrayByteBase64(byteArray4);
      base64_0.isUrlSafe();
      Base64.isBase64(byteArray5);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)44;
      Base64.encodeBase64URLSafeString(byteArray0);
      MockRandom mockRandom0 = new MockRandom((byte)6);
      BigInteger bigInteger0 = new BigInteger(58, (-4286), mockRandom0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((byte)6);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)62;
      byteArray2[1] = (byte)44;
      byteArray2[2] = (byte)44;
      byteArray2[3] = (byte)6;
      byteArray2[4] = (byte) (-1);
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)62;
      byteArray0[2] = (byte)62;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64 base64_1 = new Base64(false);
//      try { 
        base64_1.decode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte)94;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AP8-LNQGdF4", string0);
      
      MockRandom mockRandom0 = new MockRandom((-1092L));
      BigInteger bigInteger0 = new BigInteger(491, (byte) (-44), mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(84, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)47;
      byte byte0 = (byte)54;
      byteArray0[3] = (byte)54;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = new byte[8];
      bigInteger0.intValue();
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray2[0] = (byte)47;
      byteArray2[1] = (byte)47;
      byteArray2[2] = (byte)6;
      byteArray2[3] = (byte)47;
      byteArray2[4] = (byte)47;
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64(10);
      base64_0.encodeToString(byteArray0);
      Base64 base64_1 = new Base64(18, byteArray1, true);
      Base64.decodeInteger(byteArray1);
      boolean boolean0 = base64_1.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-104);
      boolean boolean0 = true;
      Base64.encodeBase64((byte[]) null, false, true, 67);
      Base64 base64_0 = new Base64((-917), (byte[]) null);
      base64_0.encode((byte[]) null);
      String string0 = "";
      byte[] byteArray1 = base64_0.decode("");
      Base64.discardWhitespace(byteArray1);
      base64_0.avail();
      String string1 = "";
      base64_0.decode((Object) "");
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("AAAAAA", string0);
      
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isArrayByteBase64(byteArray3);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, true, 616);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)6}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64((String) null);
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, true, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("=b");
      Base64.encodeBase64(byteArray0, false, false, 105);
      base64_0.encode((byte[]) null);
      base64_0.decode((String) null);
      base64_0.avail();
      Base64.encodeBase64URLSafe((byte[]) null);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      Object object2 = new Object();
//      try { 
        base64_0.encode(object2);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-88);
      Base64.encodeBase64Chunked(byteArray0);
      String string0 = null;
      base64_0.decode((String) null);
      Base64.discardWhitespace(byteArray0);
      base64_0.avail();
      String string1 = "";
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      Object object1 = new Object();
//      try { 
        base64_0.decode(object1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64((String) null);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      byteArray0[0] = (byte)0;
      Base64.isBase64("=b");
      Base64.encodeBase64(byteArray0, false, false, 105);
      base64_0.encode((byte[]) null);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)22;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)22;
      byteArray1[4] = (byte)84;
      byteArray1[5] = (byte)120;
      byteArray1[6] = (byte) (-10);
      byteArray1[7] = (byte)120;
      byteArray1[8] = (byte)120;
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("eFQwFlR49nh4", string0);
      
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)1;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte)29}, byteArray2);
      assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-1);
      Base64 base64_0 = new Base64(38, byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, (int) (byte) (-1), (int) (byte) (-102));
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)40);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray2, 38, (int) (byte) (-109));
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger("?gn~x*hP&qGC", (byte) (-1));
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Radix out of range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64((String) null);
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, true, false);
      byteArray0[0] = (byte)0;
      Base64.isBase64("=b");
      Base64.encodeBase64(byteArray0, false, false, 105);
      base64_0.encode((byte[]) null);
      base64_0.decode((String) null);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-88);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)67, (byte)111, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray2.length);
      
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.not();
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      String string0 = Base64.encodeBase64String(byteArray3);
      assertEquals("", string0);
      
      base64_0.decode(byteArray3, (-176), (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(1, byteArray1.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(1046, byteArray2);
      base64_0.decode("");
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertTrue(boolean0);
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-88);
      byteArray1[2] = (byte)7;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[2] = (byte) (-88);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.avail();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.not();
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      Base64.encodeBase64(byteArray3, false);
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray1, (int) (byte) (-84), 0);
      Base64 base64_1 = new Base64(44, byteArray1);
//      try { 
        base64_1.decode((Object) base64_0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)110;
      base64_0.encode(byteArray1, (int) (byte)110, (-1059));
      Base64.decodeInteger(byteArray1);
      base64_0.avail();
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.isUrlSafe();
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64((-1313));
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)76;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)65, (byte)11}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-15);
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)127;
      byteArray0[3] = (byte)127;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("cS3\"");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.add(bigInteger1);
      BigInteger.valueOf(2356L);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode((Object) "cS3\"");
      base64_0.decode("cS3\"");
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray3);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      base64_0.encode((byte[]) null);
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray0, 64, (int) (byte) (-57));
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false, true);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)127;
      byteArray0[3] = (byte)127;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("6v{v");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.add(bigInteger1);
      BigInteger.valueOf(2356L);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode((Object) "6v{v");
      base64_0.decode("6v{v");
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)54;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = new byte[8];
      bigInteger0.intValue();
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray2[0] = (byte)47;
      byteArray2[1] = (byte)47;
      byteArray2[2] = (byte)6;
      byteArray2[3] = (byte)47;
      byteArray2[4] = (byte)47;
      byteArray2[5] = (byte)54;
      Base64.encodeBase64((byte[]) null, false);
      Base64.decodeBase64("");
      Base64.isBase64((byte)54);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("");
      base64_0.decode("Io+G0*x1pKi7e\"+H:");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-104);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 0, 15);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_1.encodeToString(byteArray2);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)102;
      Base64.decodeBase64("4~XH9=aEy'E~ vSR,");
      Base64.isBase64((byte)75);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("E} wbbt");
      Base64 base64_0 = new Base64((byte)0);
      base64_0.decode("4~XH9=aEy'E~ vSR,");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((byte)1, byteArray0);
      bigInteger0.toString();
      base64_0.decode(byteArray1);
      bigInteger1.and(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      Base64 base64_0 = new Base64((byte)51);
      base64_0.decode("#Xu{~x0}}u72");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-37);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.not();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64(byteArray2, false);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64((-1337));
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64 base64_0 = new Base64((-1337));
      Base64 base64_1 = new Base64((-1337));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-104);
      base64_1.decode(byteArray0, (int) (byte) (-104), (-422));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      Base64 base64_0 = new Base64((byte)0);
      base64_0.readResults(byteArray0, (byte)0, (byte)102);
      base64_0.readResults(byteArray0, 1, (-616));
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (-3067), 1796);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3067
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("");
      byte[] byteArray0 = null;
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((byte)1, byteArray0);
      bigInteger0.toString();
      base64_0.decode(byteArray1);
      bigInteger1.and(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64("");
      Base64.isBase64((byte) (-88));
      Base64.encodeInteger(bigInteger1);
      Base64.isBase64("");
      base64_0.decode("");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-59);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)44;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((byte)44, byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.decode("AACVLA==");
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte)14;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      String string0 = null;
      Base64.decodeBase64((String) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = null;
//      try {
        bigInteger1 = new BigInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64.isBase64("hV6Q@Y~ycbYgu3KM-");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      Base64.encodeBase64(byteArray0, true, true);
      byteArray0[1] = (byte) (-57);
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)78, (-1288));
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-2661), byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [*\u0002c\uFFFD\uFFFD\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)127;
      byteArray0[3] = (byte)127;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("cS3\"");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.add(bigInteger1);
      BigInteger.valueOf(2356L);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode((Object) "cS3\"");
      base64_0.decode("cS3\"");
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64((-2989));
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, true, false, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)59;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte) (-39), (int) (byte)59);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -39
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64(1151, (byte[]) null, false);
      base64_0.encodeToString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.multiply(bigInteger1);
      bigInteger0.remainder(bigInteger1);
      bigInteger0.toByteArray();
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64((String) null);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64(byteArray0, false);
      byteArray0[0] = (byte)93;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)93, (int) (byte)93);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 93
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(65, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [0]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-118);
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byte byte1 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)60;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, true, true, (-1932));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1932
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64.decodeBase64("]Og#]JRJ.HB5^S");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(2709, byteArray1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [NA==\u0000\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)77;
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)54;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = new byte[8];
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray2[0] = (byte)47;
      byteArray2[1] = (byte)47;
      byteArray2[2] = (byte)6;
      byteArray2[3] = (byte)47;
      byteArray2[4] = (byte)47;
      byteArray2[5] = (byte)54;
      byteArray2[6] = (byte)54;
      byteArray2[7] = (byte)54;
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-22);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte) (-115));
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.divide(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      base64_0.hasData();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      Base64.encodeBase64(byteArray2, false, false, 0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64.isBase64((byte)45);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.longValueExact();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.isProbablePrime(0);
      bigInteger0.modInverse(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.shortValueExact();
      // Undeclared exception!
//      try { 
        bigInteger0.remainder(bigInteger2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger divide by zero
//         //
//         verifyException("java.math.MutableBigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)105;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(0, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\u0000\uFFFDi]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      base64_0.decode((Object) "$'eA!,!H3-");
      byte byte0 = (byte)79;
      byteArray0[0] = (byte)79;
      int int0 = 0;
      base64_0.readResults(byteArray0, 0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shortValueExact();
      BigInteger bigInteger1 = bigInteger0.flipBit(3138);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[1] = (byte)0;
      base64_0.readResults(byteArray0, (-655), 3109);
      bigInteger0.isProbablePrime((byte)79);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)0);
      Base64.encodeBase64(byteArray1, false, false);
      bigInteger0.remainder(bigInteger1);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte byte0 = (byte)77;
      Base64.isBase64((byte)77);
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((byte)77, (byte[]) null, true);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 1, 1340);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)86;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-110);
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-34);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64();
      String string0 = "d|E]pHyH";
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64("d|E]pHyH");
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-24);
      byteArray2[1] = (byte)115;
      byteArray2[2] = (byte)98;
      base64_0.encodeToString(byteArray1);
      byteArray2[3] = (byte)63;
      base64_0.readResults(byteArray2, 0, 0);
//      try { 
        base64_0.encode((Object) "d|E]pHyH");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      int int0 = (-10);
      Base64 base64_0 = new Base64((-10), byteArray0);
      boolean boolean0 = false;
      String string1 = "%TQT";
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.compareTo(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      bigInteger1.equals(bigInteger0);
      bigInteger0.compareTo(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("%TQT");
      // Undeclared exception!
//      try { 
        bigInteger2.modInverse(bigInteger0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger not invertible.
//         //
//         verifyException("java.math.MutableBigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte) (-1), byteArray2, true);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray3);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      
      base64_0.hasData();
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, byteArray2.length);
  }
}
