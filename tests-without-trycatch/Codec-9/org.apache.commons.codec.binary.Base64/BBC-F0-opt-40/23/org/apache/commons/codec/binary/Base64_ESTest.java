/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:11:07 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(968, mockRandom0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(64);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 64, 968);
      base64_0.encode(byteArray0, 940, (-15));
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray0, 0, 64);
      base64_0.readResults(byteArray0, 940, 1717986918);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(968, mockRandom0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(64);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(968);
      base64_0.encode(byteArray0, 64, 968);
      base64_0.encode(byteArray0, 940, (-15));
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64();
      base64_0.encode(byteArray0, (-15), 64);
      base64_1.decode(byteArray1);
      Random.setNextRandom(2963);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, (-2440), 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(981, mockRandom0);
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(76);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(981);
      base64_0.encode(byteArray0, 76, 981);
      base64_0.encode(byteArray0, 940, (-15));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)9;
      Base64.decodeBase64("");
      byteArray1[4] = (byte)4;
      base64_0.encode(byteArray1, 76, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 984;
      BigInteger bigInteger0 = new BigInteger(984, mockRandom0);
      int int1 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(76);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(989, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(52);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1005, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(52);
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)76;
      byte byte0 = (byte)1;
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1005, mockRandom0);
      int int0 = 52;
      BigInteger bigInteger1 = bigInteger0.pow(52);
      int int1 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(64);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(984, mockRandom0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(64);
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom(671L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(1543, mockRandom0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      bigInteger0.doubleValue();
      BigInteger bigInteger1 = bigInteger0.pow(23);
      bigInteger1.signum();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1023, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.pow(76);
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      base64_0.decode(byteArray0, 1, 1);
      base64_0.decode(byteArray0, 1, 525);
      assertEquals(12468, byteArray0.length);
      
      bigInteger2.equals(bigInteger0);
      base64_0.readResults(byteArray0, 525, 0);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(984, mockRandom0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(64);
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(1031, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.pow(76);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger2);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(byteArray0, 1031, 1031);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(1353, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(1L);
      BigInteger bigInteger0 = new BigInteger(984, mockRandom0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(64);
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-61);
      byteArray1[2] = (byte) (-61);
      byteArray1[3] = (byte) (-33);
      byteArray1[4] = (byte) (-83);
      byteArray1[5] = (byte)61;
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)25;
      base64_1.encode(byteArray0, (-3395), (-329));
      // Undeclared exception!
//      try { 
        base64_1.readResults((byte[]) null, 4343, 64);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 6);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.isBase64((byte)1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(76);
      BigInteger bigInteger0 = new BigInteger(5701, mockRandom1);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray0);
      base64_0.decode(byteArray0, 111, 5701);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(76);
      BigInteger bigInteger0 = new BigInteger(5701, mockRandom1);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      base64_0.decode(byteArray0, 772, 772);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-1);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1023, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.pow(76);
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1023, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.pow(76);
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      base64_0.encode(byteArray0, 1023, 118);
      base64_0.avail();
      Base64.isBase64((byte)1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(1023);
      BigInteger bigInteger0 = new BigInteger(5701, mockRandom1);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.pow(64);
      bigInteger2.signum();
      // Undeclared exception!
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1023, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.pow(76);
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      // Undeclared exception!
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1023, mockRandom0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.pow(76);
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      // Undeclared exception!
      base64_0.encode(byteArray0, 1, 1023);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1023, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray0);
      bigInteger2.or(bigInteger3);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 383);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 1, 1023);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 230
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1023, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.pow(76);
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1023, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divide(bigInteger1);
      bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.pow(76);
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      // Undeclared exception!
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.isBase64("}xh=kb,K[b]B^FCp?");
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(1023, mockRandom0);
      bigInteger1.nextProbablePrime();
      BigInteger bigInteger2 = bigInteger1.pow(1023);
      mockRandom0.nextGaussian();
      int int0 = Base64.MIME_CHUNK_SIZE;
      // Undeclared exception!
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1023, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.pow(76);
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      // Undeclared exception!
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)91;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode(byteArray2, 1, (int) (byte) (-39));
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1023, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(76);
      bigInteger0.signum();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, false, false, 2380);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (17062) than the specified maxium size of 2380
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64 base64_0 = new Base64(62, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)125;
      byteArray1[5] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)125);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isBase64((byte)16);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-5);
      base64_0.readResults(byteArray1, (byte)0, (byte) (-5));
      Base64 base64_1 = new Base64(76);
      // Undeclared exception!
//      try { 
        base64_1.encode(byteArray1, (int) (byte)0, 60);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte) (-18);
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)0;
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64((byte) (-28));
      Base64.isBase64((byte)51);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)51);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-98);
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)99;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[19];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte) (-50);
      byteArray1[2] = (byte) (-50);
      byteArray1[3] = (byte) (-98);
      byteArray1[4] = (byte)99;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-50);
      byteArray1[8] = (byte) (-50);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray2, (int) (byte)0, 94);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 28
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64.isBase64("iE{lznLhn{~v>t$HeX'");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-15);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.abs();
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      bigInteger1.floatValue();
      base64_0.decode((Object) "iE{lznLhn{~v>t$HeX'");
      Base64.encodeInteger(bigInteger1);
      Base64.decodeBase64("AAAA8Q==");
      Base64.encodeBase64(byteArray2, true);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-98);
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null);
      base64_0.encode(byteArray0, (int) (byte)0, (-804));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-102);
      byteArray2[1] = (byte) (-84);
      byteArray2[2] = (byte)121;
      byteArray2[3] = (byte)24;
      byteArray2[4] = (byte)9;
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)123);
      Base64.isBase64((byte)18);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray1, (byte)123, 119);
      base64_0.encode(byteArray0, 0, (-798));
      Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64(byteArray1, true);
      Base64.isBase64("");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-1965), byteArray2, true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64.isBase64("iE{lznLhn{~v>t$HeX'");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isBase64((byte)1);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, (byte)1, (byte)1);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 3150);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64.isBase64("iE{lznLhn{~v>t$HeX'");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)13;
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)9;
      byteArray4[1] = (byte)30;
      byteArray4[2] = (byte)53;
      byteArray4[3] = (byte)30;
      byteArray4[4] = (byte)30;
      byteArray4[5] = (byte)30;
      Base64.isBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[2];
      Object object0 = base64_0.decode((Object) "0R'[");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      int int0 = 113;
      int int1 = 1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-91);
      byteArray2[6] = (byte) (-91);
      byteArray2[7] = (byte) (-91);
      Base64.encodeBase64(byteArray2, true);
      base64_0.encode(byteArray1, 1, 113);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64.isBase64((byte)61);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, true, false, (-1878));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of -1878
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)61;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)71;
      Base64.isBase64((byte)1);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)71;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte)61;
      byteArray1[4] = (byte)71;
      byteArray1[5] = (byte)61;
      byteArray1[6] = (byte)71;
      byteArray1[7] = (byte)71;
      byteArray1[8] = (byte)61;
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)61);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isBase64((byte) (-19));
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)32;
      base64_0.readResults(byteArray1, (byte)32, 61);
      base64_0.encode(byteArray1, (-3300), 0);
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64 base64_0 = new Base64(925, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)121;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 1968);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-98);
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-21);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      base64_0.readResults(byteArray3, 4637, (byte) (-21));
      base64_0.encode(byteArray1, (-1), (-3258));
      base64_0.readResults(byteArray0, 20, (byte)0);
      Base64.encodeBase64(byteArray2, true, false);
      Base64.encodeBase64(byteArray4, false);
      Base64.encodeBase64String(byteArray4);
      Base64.isBase64(byteArray3);
      byte[] byteArray5 = new byte[9];
      byteArray5[0] = (byte) (-98);
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte) (-98);
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte) (-50);
      byteArray5[5] = (byte)32;
      byteArray5[6] = (byte)99;
      byteArray5[7] = (byte) (-21);
      byteArray5[8] = (byte)99;
      base64_0.decode(byteArray5, 2178, 754);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-98);
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)4;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.subtract(bigInteger2);
      bigInteger0.or(bigInteger1);
      bigInteger0.shiftRight((byte) (-98));
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.readResults(byteArray2, (byte)0, (byte) (-50));
      Base64.isBase64(byteArray0);
      base64_0.encode(byteArray3, (int) (byte)0, (-1945));
      Base64.encodeBase64(byteArray3, false, false);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true);
      Base64.encodeBase64String(byteArray4);
      Base64.isBase64(byteArray4);
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray1, (byte)99, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      int int0 = 113;
      int int1 = 1;
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 1, 113);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)71;
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)1);
      base64_0.decode(byteArray0, 1880, (int) (byte)0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte)71;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)58;
      byteArray1[7] = (byte)1;
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64(byteArray1);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64.isBase64((byte)121);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)121;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)121;
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(8192);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 8176);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64.isBase64("iE{lznLhn{~v>t$HeX'");
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_1 = new Base64(false);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.decode((byte[]) null);
      Base64 base64_2 = new Base64(2555);
      base64_2.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      Base64.isBase64("iE{lznLhn{~v>t$HeX'");
      Base64.encodeBase64URLSafeString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)84;
      byteArray2[1] = (byte)84;
      byteArray2[2] = (byte)84;
      byteArray2[3] = (byte)84;
      byteArray2[4] = (byte)84;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode(byteArray3);
      Base64 base64_1 = new Base64(15);
      base64_1.encode(byteArray1);
      Base64.encodeBase64(byteArray1, false);
      Base64.isBase64("AAAAAAAAAA==");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)84;
      Base64.encodeBase64String((byte[]) null);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      Base64.encodeBase64Chunked((byte[]) null);
      bigInteger2.gcd(bigInteger1);
      bigInteger2.equals(bigInteger1);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64.isBase64((byte)121);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)121;
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)71);
      Base64.isBase64((byte)121);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)14, (int) (byte)0);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)84;
      byte[] byteArray1 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode("j!>=0Xn*Kw6");
      Base64.decodeInteger(byteArray2);
      Base64.isBase64("Ecqb=K,^/+t");
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      base64_0.decode(byteArray0);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)76;
      Base64.encodeBase64(byteArray0, false, false, 3834);
      byte[] byteArray1 = new byte[1];
      base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      byteArray1[0] = (byte) (-20);
      byte[] byteArray2 = new byte[5];
      byteArray2[1] = (byte) (-20);
      byteArray2[3] = (byte) (-20);
      byteArray2[4] = (byte) (-20);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      base64_0.hasData();
      base64_0.decode(byteArray0, 93, 0);
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-95);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, (int) (byte)100, (-493));
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.decodeInteger(byteArray1);
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64((-493), byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [d\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-98);
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, (int) (byte)0);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.decodeBase64(byteArray3);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray4 = base64_0.decode(byteArray0);
      base64_0.decode("4,@;v&QX2d@(");
      Base64.decodeInteger(byteArray4);
      Base64.isBase64(": ");
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, true, false, 3834);
      Base64 base64_0 = new Base64(false);
      base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      Base64.encodeBase64(byteArray0, false);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)84;
      Base64.encodeBase64String((byte[]) null);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode("j!>=0Xn*Kw6");
      Base64.decodeInteger(byteArray2);
      Base64.isBase64("");
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64((byte[]) null, true);
      Base64.isBase64((byte)1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 53;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(53, (byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      boolean boolean0 = false;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, 76);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 296, 53);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-98);
      Base64.decodeBase64((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger1.subtract(bigInteger2);
      bigInteger2.or(bigInteger1);
      bigInteger0.shiftRight((-1));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger3);
      Base64.isBase64((byte) (-13));
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-50);
      byteArray2[1] = (byte) (-50);
      byteArray2[2] = (byte)4;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      Base64.isBase64(byteArray2);
      base64_0.encode((byte[]) null, (-1), (int) (byte)0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64String(byteArray3);
      Base64.isBase64(byteArray1);
      Base64.isBase64((byte)4);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64.isBase64("iE{lznLhn{~v>t$HeX'");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-15);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      bigInteger1.floatValue();
      base64_0.decode((Object) "iE{lznLhn{~v>t$HeX'");
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64(2661, byteArray2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [=\uFFFD\u0699\uFFFD^\uFFFD\u02E9\uFFFDX\uFFFDv\uFFFD\u0001j\u01FA\uFFFD\u05DC\uFFFD\u05E2\uFFFDz-i\uFFFD\uFFFDz\uFFFD\uFFFDJ\uFFFD\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)76;
      Base64.encodeBase64(byteArray0, false, false, 3834);
      byte[] byteArray1 = new byte[1];
      base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      byteArray1[0] = (byte) (-20);
      byte[] byteArray2 = new byte[5];
      byteArray2[1] = (byte) (-20);
      byteArray2[3] = (byte) (-20);
      byteArray2[4] = (byte) (-20);
      Base64.encodeBase64(byteArray2, false);
      base64_0.hasData();
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)14;
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)14);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)84;
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
//      try { 
        base64_1.decode((byte[]) null, (-493), 64);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      base64_0.encode(byteArray0, (int) (byte) (-20), (int) (byte) (-20));
      byte[] byteArray1 = new byte[5];
      Base64.isBase64(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      bigInteger2.not();
      Base64.decodeInteger(byteArray1);
      Base64 base64_1 = new Base64(1, byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      Base64 base64_2 = new Base64(false);
      base64_2.decode(byteArray3, 64, (-1));
      base64_0.encode(byteArray0, 0, (-1));
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_1.readResults(byteArray2, 8, 0);
      Base64.isBase64((byte) (-12));
      base64_1.hasData();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-52);
      byte byte0 = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)106;
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)106;
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      bigInteger0.intValueExact();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.and(bigInteger1);
      bigInteger0.not();
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)65, byteArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [IsxBuUTmag==]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.decodeBase64("f(.X");
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      base64_0.hasData();
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[2];
      Base64.isBase64("");
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      base64_0.decode(byteArray2);
      byteArray1[1] = (byte)0;
      Base64.discardWhitespace(byteArray1);
      base64_0.isUrlSafe();
      byte[] byteArray3 = Base64.decodeBase64("");
      Base64.isArrayByteBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)107;
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte)0;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray3, true, false, (int) (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      base64_0.encode(byteArray0, (int) (byte) (-20), (int) (byte) (-20));
      byte[] byteArray1 = new byte[5];
      Base64 base64_1 = new Base64(false);
      Object object0 = new Object();
//      try { 
        base64_1.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.or(bigInteger1);
      bigInteger0.shiftRight((byte) (-98));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte) (-31));
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray1);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64("");
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.discardWhitespace(byteArray0);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray0);
      base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray2);
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)0;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-98);
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.subtract(bigInteger2);
      bigInteger0.or(bigInteger1);
      bigInteger0.shiftRight((byte) (-98));
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64(byteArray0);
      base64_0.encode(byteArray1, (int) (byte)0, (-1945));
      Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64String(byteArray2);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-15);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("|\"AXS");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.floatValue();
      bigInteger0.bitLength();
      BigInteger bigInteger2 = bigInteger0.not();
      BigInteger bigInteger3 = bigInteger1.max(bigInteger0);
      bigInteger2.equals("Input array too big, the output array would be bigger (");
      Base64.toIntegerBytes(bigInteger3);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-104);
      Base64 base64_0 = new Base64(243, byteArray0, false);
      assertFalse(base64_0.isUrlSafe());
      
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 2093, 2093);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2093
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)56;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte)0;
      Base64.isBase64(byteArray1);
      Base64.decodeBase64("=F{>^1JB6z1k");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64.isBase64("iE{lznLhn{~v>t$HeX'");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-15);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("iE{lznLhn{~v>t$HeX'");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)100;
      byteArray1[4] = (byte)0;
      Base64.encodeBase64(byteArray1, true, true);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.floatValue();
      bigInteger1.bitLength();
      bigInteger0.not();
      bigInteger0.max(bigInteger1);
      bigInteger0.equals("iE{lznLhn{~v>t$HeX'");
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)7;
      Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray2);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray1, true);
      Base64.isBase64("$W<");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1, byteArray0);
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)14;
      byteArray1[0] = (byte)14;
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      byteArray0[0] = (byte) (-20);
      base64_0.encode(byteArray0, (int) (byte) (-20), (int) (byte) (-20));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte) (-20);
      byteArray1[3] = (byte) (-20);
      byteArray1[4] = (byte) (-20);
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)14;
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)14);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.avail();
      Base64.encodeBase64(byteArray1);
      base64_0.encodeToString(byteArray0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-103);
      Base64 base64_0 = new Base64(3190, byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Object object0 = new Object();
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.encode(byteArray1, (-439), (-439));
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-119);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((-1428), byteArray0, false);
      base64_0.decode((Object) "\"");
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.or(bigInteger1);
      bigInteger0.shiftRight((byte) (-98));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray1);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64((-10));
      Base64.encodeBase64String((byte[]) null);
      String string0 = "";
      Base64 base64_1 = new Base64((-2179));
//      try { 
        base64_1.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = base64_0.decode(byteArray2);
      base64_0.hasData();
      byte[] byteArray4 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray0);
      bigInteger2.bitCount();
      bigInteger1.doubleValue();
      bigInteger1.toString();
      bigInteger0.and(bigInteger2);
      bigInteger1.modInverse(bigInteger0);
      bigInteger0.max(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Object object0 = base64_0.decode((Object) ") than the specified maxium size of ");
      base64_0.decode(object0);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray3);
      base64_0.readResults(byteArray3, (-1439), 0);
      Base64.isBase64((byte)115);
      base64_0.readResults(byteArray1, 8, (byte)115);
      byte[] byteArray6 = base64_0.decode(") than the specified maxium size of ");
      Base64.encodeBase64URLSafe(byteArray5);
      byte[] byteArray7 = Base64.encodeBase64(byteArray3, true, false);
      Base64.encodeBase64(byteArray7, false, true);
      Base64.encodeBase64String(byteArray6);
      Base64.encodeBase64URLSafeString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte)115;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-1022), byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0001\u0000\"\uFFFDTn\uFFFDMs]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)68;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.readResults(byteArray1, 0, (byte)0);
      byte[] byteArray2 = base64_0.decode("");
      byte[] byteArray3 = base64_0.decode("");
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray2, false, false, (int) (byte) (-1));
      Base64.encodeBase64(byteArray3, false);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, (int) (byte)68, (int) (byte)27);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 68
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.decodeBase64("f(.X");
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      base64_0.hasData();
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[2];
      Base64.isBase64("");
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      base64_0.decode(byteArray2);
      byteArray1[1] = (byte)0;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray3);
      base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)30;
      byteArray0[8] = (byte)20;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-1), byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000\u0000\uFFFDCBQ\u000B\u001E\u0014]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64((-4837));
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      byteArray0[0] = (byte)97;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      bigInteger0.intValue();
      base64_0.decode(byteArray0);
      base64_0.isUrlSafe();
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 113, 113);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 113
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64((-1767));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte byte0 = (byte)20;
      byteArray0[1] = (byte)20;
      base64_0.encode(byteArray0, 47, 0);
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[2] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.longValue();
      Base64.encodeInteger(bigInteger0);
      String string0 = "";
      Base64.isBase64("");
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        BigInteger.probablePrime(1187, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = (-6154);
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-6154), (byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      int int1 = 12;
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger((-6154), (byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-47);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      bigInteger0.signum();
      bigInteger0.isProbablePrime(0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.equals(") than the specified maxium size of ");
      Base64.encodeBase64URLSafe(byteArray0);
      bigInteger0.intValue();
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)100;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.encode(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("", string0);
      
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray2, false, false, (-1364));
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(6, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)90, (byte)65}, byteArray3);
      
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray1);
      base64_0.decode("");
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)39;
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte)107;
      byteArray1[3] = (byte) (-118);
      byteArray1[4] = (byte) (-118);
      base64_0.readResults(byteArray1, 0, 22);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("hQEeAA", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)101;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64((String) null);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-95);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      int int0 = 22;
      base64_0.decode(byteArray0, (int) (byte)100, (-493));
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.abs();
      bigInteger0.floatValue();
//      try { 
        base64_0.decode((Object) bigInteger0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      Object object1 = new Object();
      Base64.encodeBase64String(byteArray1);
//      try { 
        base64_0.encode(object1);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }
}
