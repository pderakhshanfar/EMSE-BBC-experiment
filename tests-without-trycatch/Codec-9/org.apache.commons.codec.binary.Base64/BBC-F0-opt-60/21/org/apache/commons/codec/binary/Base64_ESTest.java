/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:10:35 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[40];
      int int0 = 5;
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_1 = new Base64((-13), byteArray0, true);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[40];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64((-13), byteArray0, true);
      base64_1.encode(byteArray2);
      // Undeclared exception!
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[40];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64((-13), byteArray0, false);
      base64_1.readResults(byteArray1, (-446), 76);
      byte[] byteArray3 = base64_1.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(64, byteArray0, false);
      Base64.isBase64("");
      byte[] byteArray3 = base64_1.encode(byteArray2);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(123, byteArray0, false);
      int int0 = 1755;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte) (-90);
      byteArray1[3] = (byte) (-45);
      byteArray1[4] = (byte) (-1);
      // Undeclared exception!
//      try { 
        base64_0.encodeToString(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[96];
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.encode(byteArray0, 62, 5);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0, 5, 62);
      base64_0.encode(byteArray0, 5, 62);
      base64_0.encode(byteArray0, 5, 62);
      Base64.encodeBase64(byteArray0, true);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 62, 1682);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 128
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[96];
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.encode(byteArray0, 62, 5);
      base64_0.encode(byteArray0, 5, 62);
      base64_0.encode(byteArray0, 5, 62);
      base64_0.encode(byteArray0, (-4004), (-4004));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[96];
      int int0 = 5;
      Base64 base64_0 = new Base64(5, byteArray0);
      Object object0 = base64_0.decode((Object) "fV>cnG7#u1-]kZr}{T");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      // Undeclared exception!
      base64_0.encode(object2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      Base64 base64_0 = new Base64(5);
      base64_0.encode(byteArray0, 5, 5);
      base64_0.readResults(byteArray0, 5, 5);
      base64_0.encode(byteArray0, 76, (-4004));
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, 101, (-2011));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      Base64 base64_0 = new Base64(38, byteArray0);
      base64_0.encode(byteArray0, 38, 1);
      base64_0.encode(byteArray0, 1, (-1038));
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(0, byteArray0, false);
      base64_1.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      Base64 base64_0 = new Base64(5, byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0, 5, 5);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray0, 5, 50);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte) (-116);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.isBase64(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.encode(byteArray0, 5, 5);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte) (-94);
      byteArray1[2] = (byte)32;
      Base64.encodeBase64(byteArray0, false);
      byteArray1[3] = (byte) (-72);
      byteArray1[4] = (byte) (-127);
      base64_0.encode(byteArray1, 884, (int) (byte) (-94));
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[50];
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.encode(byteArray0, (-1490), (-528));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[55];
      Base64 base64_0 = new Base64(5);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      base64_0.encode(byteArray3, 5, 5);
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.encode(byteArray3);
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      Base64.encodeBase64Chunked(byteArray3);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, 4, (int) (byte)118);
      Base64.isBase64(byteArray0);
      Base64 base64_1 = new Base64(false);
      Object object0 = new Object();
//      try { 
        base64_1.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.encode(byteArray1, 5, 8156);
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray3);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      Base64 base64_0 = new Base64(5, byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      base64_0.encode(byteArray2);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[14] = (byte)127;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 1, 64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 26
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-3081), byteArray0, false);
      Object object0 = base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      Object object1 = base64_0.decode(object0);
      // Undeclared exception!
//      try { 
        base64_0.encode(object1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      int int0 = (-1328);
      int int1 = 5;
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray1, true, false, 22);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (132) than the specified maxium size of 22
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray0, 5, (-1328));
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)6;
      Base64.encodeBase64(byteArray0, false, false, (int) (byte)6);
      BigInteger bigInteger0 = BigInteger.ZERO;
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)106;
      byteArray0[0] = (byte)106;
      byte byte1 = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)15;
      Base64.isArrayByteBase64(byteArray0);
//      try { 
        base64_0.encode((Object) "Input array too big, the output array would be bigger (");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-8);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("u;QSwbR:_tyRNG]");
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 3, 3);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.isBase64((byte)61);
      Base64 base64_1 = new Base64(64);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)53;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)87;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)87);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray2, 1, 2309);
      base64_0.readResults(byteArray2, 1, 2309);
      base64_0.encode(byteArray2, (int) (byte)87, (int) (byte)87);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1, false);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)2;
      byteArray2[1] = (byte)45;
      byteArray2[2] = (byte) (-95);
      byteArray2[3] = (byte) (-43);
      byteArray2[4] = (byte) (-74);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)21;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)87;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray2, 14, 2309);
      base64_0.encode(byteArray0, (int) (byte)87, 255);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1113), byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("u;QSwbR:_tyRNG]");
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.discardWhitespace(byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, 0, 2270);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)87;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray2, 1, 2289);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)47;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64((byte)9);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.discardWhitespace(byteArray2);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray3, (int) (byte)9, 69);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 43
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      Base64.isBase64("p{OSSF4/0ae)]89S5");
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)0;
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte)59;
      byteArray1[2] = (byte) (-46);
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte) (-6);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)42;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)42;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)57;
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      Base64 base64_0 = new Base64(57, byteArray0);
      base64_0.encode(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-88);
      byteArray0[0] = (byte) (-1);
      byteArray0[3] = (byte) (-86);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)126;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray1, true);
      Base64.isBase64((byte) (-64));
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[13];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)122;
      byteArray1[5] = (byte)122;
      byteArray1[7] = (byte)122;
      byteArray1[7] = (byte)122;
      byteArray1[8] = (byte)122;
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)122);
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte)105);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)122;
      byteArray1[5] = (byte)122;
      byteArray1[6] = (byte)122;
      byteArray1[7] = (byte)122;
      byteArray1[8] = (byte)122;
      Base64.decodeInteger(byteArray1);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)122);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(68, (byte[]) null, true);
      // Undeclared exception!
//      try { 
        base64_1.decode(byteArray2, 1, (int) (byte)38);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 12
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray0[0] = (byte)126;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.isBase64((byte)126);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray3, 0, 0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte byte0 = (byte)58;
      Base64.isBase64((byte)58);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-469), byteArray0);
      // Undeclared exception!
//      try { 
        Base64.isBase64((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-97);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte)53;
      Base64.isBase64((byte)87);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 8188, 74);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8188
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, (-967));
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64 base64_0 = new Base64((-2498), (byte[]) null, true);
      // Undeclared exception!
//      try { 
        base64_0.encode((byte[]) null, 1073741824, 1073741824);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte byte0 = (byte)0;
      byte byte1 = (byte)53;
      byte byte2 = (byte)0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)8);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64(8165, (byte[]) null, true);
      base64_0.avail();
      Base64.decodeBase64((String) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shiftLeft(64);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      base64_0.decode(byteArray0);
      byteArray0[2] = (byte)53;
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)59;
      byteArray1[2] = (byte) (-46);
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte) (-6);
      byteArray1[5] = (byte)23;
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray1, true);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ZERO;
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-88);
      byteArray0[0] = (byte) (-1);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)104;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.discardWhitespace(byteArray3);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
//      try { 
        Base64.toIntegerBytes((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, (-967));
      Base64 base64_0 = new Base64(true);
      base64_0.readResults((byte[]) null, (byte) (-96), 56);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)87;
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
//      try { 
        Base64.discardWhitespace((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)0;
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-46);
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte) (-6);
      byteArray1[5] = (byte)23;
      Base64.isBase64(byteArray1);
      base64_0.decode((Object) "Uds*AlAraxtX$");
      Base64.isBase64(byteArray1);
      base64_0.encode(byteArray1, (int) (byte)0, 3520);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.nextProbablePrime();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true, (-967));
      Base64 base64_0 = new Base64(true);
      base64_0.encode((byte[]) null, (-112), (-1068));
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(76);
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = bigInteger1.shiftRight(76);
      BigInteger bigInteger4 = BigInteger.ZERO;
      bigInteger4.subtract(bigInteger3);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1113), byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      Base64.isBase64((byte)76);
      base64_0.decode("ISO-8859-1");
      Base64 base64_1 = new Base64(64, byteArray2);
      base64_1.decode("ISO-8859-1");
      Base64.isBase64(byteArray1);
      base64_1.hasData();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, (-967));
      Base64 base64_0 = new Base64(true);
      base64_0.encode((byte[]) null, (-112), (-1068));
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(76);
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = bigInteger1.shiftRight(76);
      BigInteger bigInteger4 = BigInteger.ZERO;
      bigInteger4.subtract(bigInteger3);
      // Undeclared exception!
//      try { 
        base64_0.readResults((byte[]) null, 4941, 53);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte) (-1);
      Base64 base64_0 = new Base64((-3265), byteArray0, true);
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray0, 1973, (int) (byte)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)0;
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-46);
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte) (-6);
      byteArray1[5] = (byte)23;
      Base64.isBase64(byteArray1);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 3520);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-48);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-34);
      byteArray3[3] = (byte) (-48);
      byteArray3[4] = (byte) (-48);
      byteArray3[5] = (byte) (-34);
      byteArray3[6] = (byte)70;
      byteArray3[7] = (byte) (-48);
      Base64.encodeBase64(byteArray3, true);
      byteArray2[2] = (byte) (-34);
      base64_0.decode(byteArray1);
      byteArray2[3] = (byte) (-48);
      byteArray2[4] = (byte) (-34);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-11);
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0, false);
      Base64.isBase64((byte)26);
      base64_0.decode("org.apache.commons.codec.binary.StringUtils");
      base64_0.decode("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-81);
      Base64.decodeInteger(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64((byte) (-1), (byte[]) null, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte)122;
      Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
//      try { 
        base64_1.decode((byte[]) null, (-1106), 36);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)104;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String((byte[]) null);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true, 497);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false, (int) (byte) (-86));
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)104;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-48);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_1 = new Base64(2465);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(byteArray1, (int) (byte) (-48), (int) (byte) (-48));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)0;
      Base64.decodeBase64("yC>-+}\"rL{");
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ZERO;
      base64_0.decode(" l-np");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)0;
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte) (-1);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64String(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray1, true, true, 353);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, (-967));
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-112), (-2784));
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.shiftLeft(95);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.shiftRight(325);
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigInteger1.subtract(bigInteger2);
      // Undeclared exception!
//      try { 
        base64_0.readResults(byteArray0, (-2784), (-967));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64((byte) (-11), byteArray1, false);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1, true, false);
      Base64.encodeBase64((byte[]) null, false, true);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = null;
      Base64.encodeBase64String(byteArray1);
      // Undeclared exception!
//      try { 
        Base64.isArrayByteBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 2704;
      Base64 base64_0 = new Base64(2704);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Object object0 = null;
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)43;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 44);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 2, (-3043));
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("Yaj_qgArAAA");
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-31);
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-11);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(46);
      // Undeclared exception!
//      try { 
        base64_0.encode(byteArray0, 94, (int) (byte)1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 94
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[2];
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byteArray1[0] = (byte)1;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = null;
//      try {
        base64_1 = new Base64(64, byteArray2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AQA=\r
//         // ]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray1, true);
      // Undeclared exception!
//      try { 
        Base64.isBase64((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64((-3229), (byte[]) null, false);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.decode((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.decodeBase64("mG)/HQ\"XM@cYGt:");
      base64_0.encode((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = bigInteger0.setBit(64);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = base64_0.decode("pPWK\"2gJ=fg");
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[0];
      bigInteger0.multiply(bigInteger1);
      bigInteger0.abs();
      bigInteger0.intValue();
      Base64.decodeBase64(byteArray2);
      Base64.encodeBase64String(byteArray2);
      bigInteger0.longValue();
      Base64.isBase64((byte)23);
      Base64.isBase64((byte)103);
      base64_0.decode(byteArray0, (int) (byte)23, 106);
      Base64.encodeBase64((byte[]) null, true, true, 497);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)0;
      Base64 base64_0 = new Base64(1, byteArray0, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)99;
      base64_0.encode(byteArray0, 1, 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-43);
      byteArray0[8] = (byte)88;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64String((byte[]) null);
      Base64.isArrayByteBase64(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64(byteArray3, false, false, 62);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)75;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      int int0 = 0;
      Object object0 = base64_0.decode((Object) "j");
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)110;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)104);
      Base64.isBase64("yDj%4(>Pp2lt");
      Base64.encodeBase64URLSafe(byteArray0);
      Object object0 = new Object();
//      try { 
        base64_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.decodeBase64("");
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64(550);
      base64_0.hasData();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)5;
      byte[] byteArray1 = Base64.decodeBase64("81}HM[`Jd|5");
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.encodeToString(byteArray1);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64URLSafe(byteArray1);
      int int0 = 1;
      // Undeclared exception!
//      try { 
        base64_0.decode(byteArray0, (-1), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64((-3229), (byte[]) null, true);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.decode((byte[]) null);
      byte[] byteArray0 = Base64.decodeBase64("mG)/HQ\"XM@cYGt:");
      base64_0.encode((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = bigInteger0.setBit(64);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = base64_0.decode("pPWK\"2gJ=fg");
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = new byte[0];
      bigInteger0.multiply(bigInteger1);
      bigInteger0.abs();
      bigInteger0.intValue();
      Base64.decodeBase64(byteArray3);
      Base64.encodeBase64String(byteArray3);
      bigInteger0.longValue();
      Base64.isBase64((byte)23);
      Base64.isBase64((byte)117);
      base64_0.decode(byteArray1, (int) (byte)23, 106);
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray2);
      Object object0 = new Object();
//      try { 
        base64_0.decode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64.isBase64((byte) (-77));
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-77);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte) (-20);
      byteArray1[3] = (byte) (-20);
      byteArray1[4] = (byte) (-20);
      byteArray1[5] = (byte) (-77);
      byteArray1[6] = (byte) (-20);
      byteArray1[7] = (byte)32;
      byteArray1[8] = (byte) (-77);
      Base64.encodeBase64URLSafe(byteArray1);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)1;
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.decodeBase64(":ht");
      String string0 = "";
      base64_0.readResults(byteArray2, (byte) (-77), (byte) (-77));
//      try { 
        base64_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64((-1981));
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0, true, false, 64);
      base64_0.encodeToString(byteArray1);
      base64_0.decode(byteArray0);
      base64_0.avail();
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64.isBase64((byte)112);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte)112, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [ppppp]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)0;
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-46);
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte) (-6);
      byteArray1[5] = (byte)23;
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-3009), byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.toByteArray();
      bigInteger0.intValueExact();
      bigInteger0.bitLength();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(byteArray0, 0, 0);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-109);
      byteArray2[1] = (byte)91;
      byteArray2[2] = (byte)124;
      byteArray2[3] = (byte)55;
      byteArray2[4] = (byte)43;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray2, false, false, (int) (byte) (-109));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (10) than the specified maxium size of -109
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-39);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((byte) (-39), byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\uFFFDlI\uFFFD\uFFFD\uFFFD]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
//      try { 
        Base64.encodeInteger((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // encodeInteger called with null parameter
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)122;
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)100;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(5626, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [z_\u0000\uFFFD7\u0000d]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-81);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      Base64.encodeBase64((byte[]) null, true);
      Base64.isBase64(byteArray1);
      base64_0.decode("QO-5.LDB`.`d9o5");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("");
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.decodeBase64("");
      base64_0.avail();
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      base64_0.decode(object1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1113), byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = new byte[2];
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byteArray1[0] = (byte)1;
      Base64.encodeBase64(byteArray1, true, false);
      BigInteger bigInteger1 = bigInteger0.not();
      byteArray1[1] = (byte) (-19);
      Base64.encodeBase64URLSafeString(byteArray1);
      bigInteger0.shiftRight(23);
      base64_0.encode(byteArray1);
      BigInteger bigInteger2 = BigInteger.valueOf((byte) (-19));
      Base64.isArrayByteBase64(byteArray1);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("Q2c9PQ==");
      bigInteger1.shiftLeft((byte)1);
      base64_0.decode("");
      base64_0.isUrlSafe();
      // Undeclared exception!
//      try { 
        bigInteger1.modInverse(bigInteger2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // BigInteger: modulus not positive
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false, 1266);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64.isBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      base64_0.readResults(byteArray1, (-1475), 1835);
//      try { 
        base64_0.encode((Object) "'s=h</|`})+!\"r>gl");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)1;
      // Undeclared exception!
//      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Input array too big, the output array would be bigger (14) than the specified maxium size of 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)33;
      byteArray0[0] = (byte)33;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      bigInteger0.intValueExact();
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
//      try { 
        bigInteger0.setBit((-1305));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Negative bit address
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      boolean boolean0 = false;
      base64_0.readResults((byte[]) null, (-626), 0);
      // Undeclared exception!
//      try { 
        Base64.decodeInteger((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)88;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64((-1), byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [\u0000X]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int0 = 1202;
      Base64 base64_0 = null;
//      try {
        base64_0 = new Base64(1202, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeperator must not contain base64 characters: [AQ==]
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1, (int) (byte) (-99), (int) (byte) (-99));
      MockRandom mockRandom0 = new MockRandom((byte)0);
      BigInteger bigInteger0 = new BigInteger(2657, 55, mockRandom0);
//      try { 
        base64_0.decode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base64 decode is not a byte[] or a String
//         //
//         verifyException("org.apache.commons.codec.binary.Base64", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)0;
      Base64 base64_0 = new Base64(1, byteArray0, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)99;
      Base64.encodeBase64(byteArray1, false, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(14, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      assertArrayEquals(new byte[] {(byte)89, (byte)119}, byteArray3);
      assertEquals(2, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64 base64_0 = new Base64(77);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals(10, byteArray1.length);
      
      byteArray0[3] = (byte)76;
      int int0 = base64_0.readResults(byteArray0, (-900), (-2477));
      assertEquals(0, int0);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-1);
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("AP8=\r\n", string0);
  }
}
