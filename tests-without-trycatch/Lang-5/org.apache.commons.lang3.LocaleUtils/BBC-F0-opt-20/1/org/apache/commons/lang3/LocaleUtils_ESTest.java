/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 10:25:24 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang3.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.US;
      Locale locale1 = new Locale("-*}J}", "-*}J}", ";QMu (2~");
      List<Locale> list0 = LocaleUtils.localeLookupList(locale1, locale0);
      assertEquals(4, list0.size());
      assertTrue(list0.contains(locale0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocaleUtils.languagesByCountry("7IJy<Nfdk@qcs");
      LocaleUtils.availableLocaleSet();
      LocaleUtils.countriesByLanguage("7IJy<Nfdk@qcs");
      Locale locale0 = new Locale("7IJy<Nfdk@qcs");
      Locale locale1 = Locale.JAPANESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.forLanguageTag(">'q]afX3cW3?lJwX_");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale0.hasExtensions();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      locale0.getDisplayCountry(locale1);
      LocaleUtils.localeLookupList(locale0);
      LocaleUtils localeUtils0 = new LocaleUtils();
      Locale locale2 = Locale.FRANCE;
      LocaleUtils.localeLookupList(locale2);
      LocaleUtils.countriesByLanguage((String) null);
      List<Locale> list2 = LocaleUtils.languagesByCountry("");
      LocaleUtils.localeLookupList(locale1, locale0);
      LocaleUtils.localeLookupList(locale0);
      LocaleUtils.localeLookupList(locale0, locale1);
      List<Locale> list3 = LocaleUtils.availableLocaleList();
      assertFalse(list3.equals((Object)list2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = new Locale("7IJy<Nfdk@qcs");
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
//      try { 
        LocaleUtils.toLocale("jh_OCQWy^\"EA)p. [J2");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid locale format: jh_OCQWy^\"EA)p. [J2
//         //
//         verifyException("org.apache.commons.lang3.LocaleUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
//      try { 
        LocaleUtils.toLocale("jh_OQs");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid locale format: jh_OQs
//         //
//         verifyException("org.apache.commons.lang3.LocaleUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("jh_OP");
      assertEquals("jh", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
//      try { 
        LocaleUtils.toLocale("jh_Oy^A)p 2");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid locale format: jh_Oy^A)p 2
//         //
//         verifyException("org.apache.commons.lang3.LocaleUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
//      try { 
        LocaleUtils.toLocale("vy_,q/qS75:r;tLe=^=");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid locale format: vy_,q/qS75:r;tLe=^=
//         //
//         verifyException("org.apache.commons.lang3.LocaleUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("no__/");
      assertEquals("/", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("jh_OT_w");
      assertEquals("jh_OT_w", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
//      try { 
        LocaleUtils.toLocale("aoh$");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid locale format: aoh$
//         //
//         verifyException("org.apache.commons.lang3.LocaleUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("cs");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        LocaleUtils.toLocale("c0&RsuC:Se$");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid locale format: c0&RsuC:Se$
//         //
//         verifyException("org.apache.commons.lang3.LocaleUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        LocaleUtils.toLocale("5rTNZ\"gTIN 7Y{");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid locale format: 5rTNZ\"gTIN 7Y{
//         //
//         verifyException("org.apache.commons.lang3.LocaleUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        LocaleUtils.toLocale("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid locale format: 
//         //
//         verifyException("org.apache.commons.lang3.LocaleUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
      List<Locale> list0 = LocaleUtils.localeLookupList((Locale) null, locale0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        LocaleUtils.toLocale("org.apache.commons.lang3.LocaleUtils$SyncAvoid");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid locale format: org.apache.commons.lang3.LocaleUtils$SyncAvoid
//         //
//         verifyException("org.apache.commons.lang3.LocaleUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
  }
}
