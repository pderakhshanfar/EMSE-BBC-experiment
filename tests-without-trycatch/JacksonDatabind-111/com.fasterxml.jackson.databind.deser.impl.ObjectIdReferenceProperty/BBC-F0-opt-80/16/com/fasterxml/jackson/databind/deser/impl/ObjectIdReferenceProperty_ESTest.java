/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 12:22:37 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import java.io.IOException;
import java.io.PipedInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.util.ArrayList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectIdReferenceProperty_ESTest extends ObjectIdReferenceProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, arrayList0, propertyMetadata0);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 123, (Object) null, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, objectIdReferenceProperty0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("UjldzpsyI?J\"ZG", "UjldzpsyI?J\"ZG");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "UjldzpsyI?J\"ZG", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "UjldzpsyI?J\"ZG", propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.assignIndex(0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, arrayList0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.assignIndex(1);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-527), objectIdInfo0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      Class<ChronoLocalDate>[] classArray0 = (Class<ChronoLocalDate>[]) Array.newInstance(Class.class, 1);
      objectIdReferenceProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withNullProvider((NullValueProvider) null);
      assertEquals("", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<PipedInputStream> class0 = PipedInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleModule simpleModule0 = new SimpleModule("HE5xN\u0003,a8;hSg@u");
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = Integer.getInteger("HE5xN\u0003,a8;hSg@u", 827);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "Trying to resolve a forward reference with id [");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, simpleModule0, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, objectIdInfo0);
      SettableBeanProperty settableBeanProperty1 = objectIdReferenceProperty0.withNullProvider((NullValueProvider) null);
      assertFalse(settableBeanProperty1.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, arrayList0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      objectIdReferenceProperty0.assignIndex(0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withNullProvider(jsonDeserializer0);
      assertNull(settableBeanProperty0.getManagedReferenceName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, arrayList0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.assignIndex(1);
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withNullProvider(dOMDeserializer_NodeDeserializer0);
      assertFalse(settableBeanProperty0.isVirtual());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, arrayList0, propertyMetadata0);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      Integer integer0 = new Integer(1163);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1163, integer0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withName(propertyName0);
      assertFalse(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, arrayList0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("UjldzpsyI?J\"ZG", "UjldzpsyI?J\"ZG");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "UjldzpsyI?J\"ZG", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "UjldzpsyI?J\"ZG", propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.assignIndex(0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withName(propertyName0);
      assertNotSame(objectIdReferenceProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, arrayList0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.assignIndex(1);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withName(propertyName0);
      assertNotSame(objectIdReferenceProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", true, collectionLikeType0);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-551), resolvedRecursiveType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      AnnotatedMember annotatedMember0 = objectIdReferenceProperty0.getMember();
      assertNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, arrayList0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      int int0 = objectIdReferenceProperty0.getCreatorIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", true, collectionLikeType0);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-551), resolvedRecursiveType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      int int0 = objectIdReferenceProperty0.getCreatorIndex();
      assertEquals((-551), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-7), propertyMetadata0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, objectIdInfo0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(false);
      // Undeclared exception!
//      try { 
        objectIdReferenceProperty0.setAndReturn((Object) null, booleanNode0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "] that wasn't previously seen as unresolved.", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, asPropertyTypeDeserializer0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, (ObjectIdInfo) null);
      Locale locale0 = Locale.ITALIAN;
      Chronology chronology0 = Chronology.ofLocale(locale0);
      ChronoLocalDate chronoLocalDate0 = chronology0.dateNow();
      // Undeclared exception!
//      try { 
        objectIdReferenceProperty0.set((Object) null, chronoLocalDate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", true, collectionLikeType0);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-551), resolvedRecursiveType0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[9];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        objectIdReferenceProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, collectionLikeType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, (TypeBindings) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, classNameIdResolver0, "k//uiGex#EUw:}FE", true, arrayType0, jsonTypeInfo_As0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 500, simpleAbstractTypeResolver0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      // Undeclared exception!
//      try { 
        objectIdReferenceProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, simpleObjectIdResolver0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-5), class0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleModule simpleModule0 = new SimpleModule();
//      try { 
        objectIdReferenceProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, simpleModule0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ReadableObjectId readableObjectId0 = defaultDeserializationContext_Impl0.findObjectId(objectIdGenerators_IntSequenceGenerator0, objectIdGenerators_IntSequenceGenerator0, simpleObjectIdResolver0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, classNameIdResolver0, "JSON", false, resolvedRecursiveType0, jsonTypeInfo_As0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 500, readableObjectId0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      // Undeclared exception!
//      try { 
        objectIdReferenceProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, objectIdGenerators_IntSequenceGenerator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 123, (Object) null, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
//      try { 
        objectIdReferenceProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, defaultSerializerProvider_Impl0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdReferenceProperty objectIdReferenceProperty0 = null;
//      try {
        objectIdReferenceProperty0 = new ObjectIdReferenceProperty((ObjectIdReferenceProperty) null, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = null;
//      try {
        objectIdReferenceProperty0 = new ObjectIdReferenceProperty((ObjectIdReferenceProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("(CTRL-CHAR, code ");
      Class<BooleanNode> class0 = BooleanNode.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = null;
//      try {
        objectIdReferenceProperty0 = new ObjectIdReferenceProperty((SettableBeanProperty) null, objectIdInfo0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", true, collectionLikeType0);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-551), resolvedRecursiveType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
//      try { 
        objectIdReferenceProperty0.set(creatorProperty0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '1rg0cbtkS\u00059HTJ'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ReadableObjectId readableObjectId0 = defaultDeserializationContext_Impl0.findObjectId(objectIdGenerators_IntSequenceGenerator0, objectIdGenerators_IntSequenceGenerator0, simpleObjectIdResolver0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, classNameIdResolver0, "JSON", false, resolvedRecursiveType0, jsonTypeInfo_As0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 500, readableObjectId0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-551), resolvedRecursiveType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      JsonLocation jsonLocation0 = jsonParser0.getTokenLocation();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, (-551));
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ReadableObjectId readableObjectId0 = defaultDeserializationContext_Impl0.findObjectId(objectIdGenerators_IntSequenceGenerator0, objectIdGenerators_IntSequenceGenerator0, simpleObjectIdResolver0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "JSON", jsonLocation0, readableObjectId0);
      ObjectIdReferenceProperty.PropertyReferring objectIdReferenceProperty_PropertyReferring0 = new ObjectIdReferenceProperty.PropertyReferring(objectIdReferenceProperty0, unresolvedForwardReference0, class0, propertyName0);
      // Undeclared exception!
//      try { 
        objectIdReferenceProperty_PropertyReferring0.handleResolvedForwardReference("1rg0cbtkS\u00059HTJ", propertyName0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Trying to resolve a forward reference with id [1rg0cbtkS\u00059HTJ] that wasn't previously seen as unresolved.
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty$PropertyReferring", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2733), objectIdGenerators_IntSequenceGenerator0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      objectIdReferenceProperty0.fixAccess((DeserializationConfig) null);
      assertFalse(objectIdReferenceProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 114);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2733), objectIdGenerators_IntSequenceGenerator0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, coreXMLDeserializers_Std0, coreXMLDeserializers_Std0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty1.withValueDeserializer(coreXMLDeserializers_Std0);
      assertSame(settableBeanProperty0, objectIdReferenceProperty1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", true, collectionLikeType0);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-551), resolvedRecursiveType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = objectIdReferenceProperty0.getAnnotation(class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-7), propertyMetadata0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(false);
//      try { 
        objectIdReferenceProperty0.setAndReturn((Object) null, booleanNode0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("1rg0cbtkS\u00059HTJ", "1rg0cbtkS\u00059HTJ");
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "1rg0cbtkS\u00059HTJ", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, arrayList0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      int int0 = objectIdReferenceProperty0.getCreatorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2733), objectIdGenerators_IntSequenceGenerator0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        objectIdReferenceProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-815));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      PropertyName propertyName0 = PropertyName.construct(":w2]]L#<#C'^Y{AB");
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, referenceType0, (TypeResolutionContext) null, annotationMap0, (-815));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, referenceType0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      AnnotatedMember annotatedMember0 = objectIdReferenceProperty0.getMember();
      assertSame(annotatedParameter0, annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "SqdS(oG@'bJn$T", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-551), resolvedRecursiveType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonLocation jsonLocation0 = jsonParser0.getCurrentLocation();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ReadableObjectId readableObjectId0 = defaultDeserializationContext_Impl0.findObjectId(objectIdGenerators_IntSequenceGenerator0, objectIdGenerators_IntSequenceGenerator0, simpleObjectIdResolver0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "JSON", jsonLocation0, readableObjectId0);
      ObjectIdReferenceProperty.PropertyReferring objectIdReferenceProperty_PropertyReferring0 = new ObjectIdReferenceProperty.PropertyReferring(objectIdReferenceProperty0, unresolvedForwardReference0, class0, propertyName0);
//      try { 
        objectIdReferenceProperty_PropertyReferring0.handleResolvedForwardReference(objectIdGenerators_IntSequenceGenerator0, typeFactory0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }
}
