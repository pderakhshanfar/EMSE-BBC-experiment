/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 11:00:56 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.time.chrono.HijrahEra;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(10);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 10, propertyMetadata0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      creatorProperty0.withNullProvider(nioPathDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "27z'N4HE97bh4y", false, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, integer0, (PropertyMetadata) null);
      HijrahEra hijrahEra0 = HijrahEra.AH;
      creatorProperty0.assignIndex(0);
      JsonDeserializer<PipedInputStream> jsonDeserializer0 = (JsonDeserializer<PipedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      System.setCurrentTimeMillis(0L);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      PropertyName propertyName1 = PropertyName.construct("']", "H4Rb1=NgF0");
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName1);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
      assertEquals("']", settableBeanProperty1.getName());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1285);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1285, propertyName0, (PropertyMetadata) null);
      creatorProperty0.assignIndex(1285);
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      creatorProperty0.withNullProvider(dOMDeserializer_NodeDeserializer0);
//      try { 
        creatorProperty0.set(annotationMap0, annotationMap0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2));
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName1 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      TextNode textNode0 = jsonNodeFactory0.textNode("I3.Y86,tg9");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, textNode0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
//      try { 
        creatorProperty1.set(valueInstantiator_Base0, settableBeanProperty0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2));
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getWithArgsCreator();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, annotationMap0, 2345);
      AnnotatedParameter annotatedParameter1 = annotatedParameter0.withAnnotations(annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter1, 2345, placeholderForType0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter1, 451, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<PipedInputStream> jsonDeserializer0 = (JsonDeserializer<PipedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
//      try { 
        creatorProperty0.inject((DeserializationContext) null, "E*rW7iwY$0/CCM ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Object> class0 = Object.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<NamedType> class1 = NamedType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("OYk/{wdYj+|Y%f%$9^R");
      Integer integer0 = new Integer(0);
      Integer integer1 = Integer.getInteger("hUez_(;,GK65/", integer0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withIndex(integer1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, annotatedParameter0, 0, typeResolutionContext_Basic0, propertyMetadata2);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-17));
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-17), (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
//      try { 
        creatorProperty0.set((Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, javaType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType1, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), object0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1403));
      Integer integer1 = new Integer((-1403));
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.NON_PRIVATE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility3 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility3);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      objectMapper1.disableDefaultTyping();
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), objectMapper1, propertyMetadata0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer1 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, jsonDeserializer1, jsonDeserializer1);
      creatorProperty3.setFallbackSetter(settableBeanProperty0);
      HijrahEra hijrahEra0 = HijrahEra.AH;
//      try { 
        creatorProperty3.setAndReturn(integer0, hijrahEra0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(31);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 31, (Object) null, (PropertyMetadata) null);
      Class<MinimalClassNameIdResolver>[] classArray0 = (Class<MinimalClassNameIdResolver>[]) Array.newInstance(Class.class, 7);
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      classArray0[0] = class0;
      Class<MinimalClassNameIdResolver> class1 = MinimalClassNameIdResolver.class;
      classArray0[1] = class1;
      Class<MinimalClassNameIdResolver> class2 = MinimalClassNameIdResolver.class;
      classArray0[2] = class2;
      Class<MinimalClassNameIdResolver> class3 = MinimalClassNameIdResolver.class;
      classArray0[3] = class3;
      Class<MinimalClassNameIdResolver> class4 = MinimalClassNameIdResolver.class;
      classArray0[4] = class4;
      Class<MinimalClassNameIdResolver> class5 = MinimalClassNameIdResolver.class;
      classArray0[5] = class5;
      Class<MinimalClassNameIdResolver> class6 = MinimalClassNameIdResolver.class;
      classArray0[6] = class6;
      creatorProperty0.setViews(classArray0);
      Class<Annotation> class7 = Annotation.class;
      creatorProperty0.getAnnotation(class7);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(31, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(541);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 541, valueInstantiator_Base0, (PropertyMetadata) null);
      JsonDeserializer<MinimalClassNameIdResolver> jsonDeserializer0 = (JsonDeserializer<MinimalClassNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      JsonDeserializer<NamedType> jsonDeserializer1 = (JsonDeserializer<NamedType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertEquals(541, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(483);
      propertyName0.withSimpleName(": ");
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 483, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, jsonDeserializer0, jsonDeserializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(561);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4401, (Object) null, (PropertyMetadata) null);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      System.setCurrentTimeMillis(561);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '#temporary-name' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(483);
      AnnotationMap annotationMap0 = new AnnotationMap();
      annotationMap0.toString();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 483, (Object) null, (PropertyMetadata) null);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(483);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      Boolean boolean0 = Boolean.valueOf((String) null);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withRequired(boolean0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata3 = propertyMetadata2.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 483, object0, propertyMetadata3);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      annotationMap0.annotations();
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, propertyMetadata2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(483);
      AnnotationMap annotationMap0 = new AnnotationMap();
      annotationMap0.toString();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 483, (Object) null, (PropertyMetadata) null);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(483);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      Boolean boolean0 = Boolean.valueOf((String) null);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withRequired(boolean0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata3 = propertyMetadata2.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 483, object0, propertyMetadata3);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      annotationMap0.annotations();
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(483);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class0 = Annotation.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      annotationMap0.annotations();
      Integer integer0 = new Integer(2);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2417), integer0, (PropertyMetadata) null);
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, booleanNode0, propertyMetadata0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, annotationMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(531);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, 407, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      placeholderForType0.isThrowable();
      Class<NamedType>[] classArray0 = (Class<NamedType>[]) Array.newInstance(Class.class, 4);
      Class<NamedType> class0 = NamedType.class;
      classArray0[0] = class0;
      Class<NamedType> class1 = NamedType.class;
      classArray0[1] = class1;
      Class<NamedType> class2 = NamedType.class;
      classArray0[2] = class2;
      Class<NamedType> class3 = NamedType.class;
      classArray0[3] = class3;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      creatorProperty1.fixAccess((DeserializationConfig) null);
      assertEquals(407, creatorProperty1.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(407, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(536);
      AnnotationMap annotationMap0 = new AnnotationMap();
      propertyName0.withSimpleName("com.fasterxml.jackson.databind.ser.SerializerFactory");
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 536, placeholderForType0, (PropertyMetadata) null);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      creatorProperty0.setViews(classArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonDeserializer<HijrahEra> jsonDeserializer0 = (JsonDeserializer<HijrahEra>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(536, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HijrahEra> class0 = HijrahEra.class;
      Class<String> class1 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(793);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      propertyMetadata0.withIndex(integer0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      jsonNodeFactory0.textNode("@}{2[FF6[./qw");
      Float float0 = new Float((double) 793);
      jsonNodeFactory0.numberNode(float0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.findParents("*,'{l#mI4Pmb (W");
      Double double0 = new Double((-2458));
      PropertyName propertyName0 = PropertyName.construct("*,'{l#mI4Pmb (W");
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 793, (Object) null, propertyMetadata1);
      JsonDeserializer<JsonNode> jsonDeserializer0 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      creatorProperty0.withNullProvider(nioPathDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonDeserializer<JsonNode> jsonDeserializer1 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(793, creatorProperty2.getCreatorIndex());
      assertNotSame(settableBeanProperty0, creatorProperty2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("'; in|ect id (");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(555);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "'; in|ect id (", false, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 555, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty2.set(propertyMetadata0, annotationMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(531);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      annotationMap0.annotations();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 531, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-454), propertyName0, (PropertyMetadata) null);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3507);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "27z'N4HE97bh4y", false, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(3507);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3507, integer0, (PropertyMetadata) null);
      HijrahEra hijrahEra0 = HijrahEra.AH;
      creatorProperty0.assignIndex(3507);
      JsonDeserializer<PipedInputStream> jsonDeserializer0 = (JsonDeserializer<PipedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      System.setCurrentTimeMillis(0L);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals(3507, settableBeanProperty1.getCreatorIndex());
      
      JsonDeserializer<PipedInputStream> jsonDeserializer1 = (JsonDeserializer<PipedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty2 = settableBeanProperty0.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty2.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3507);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "27z'N4HE97bh4y", false, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName.construct("27z'N4HE97bh4y");
      Integer integer0 = new Integer(3507);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3507, integer0, (PropertyMetadata) null);
      HijrahEra hijrahEra0 = HijrahEra.AH;
      creatorProperty0._ignorable = true;
      JsonDeserializer<PipedInputStream> jsonDeserializer0 = (JsonDeserializer<PipedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(3507, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.isIgnorable());
      
      creatorProperty0.isIgnorable();
      assertEquals(3507, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      SimpleType simpleType2 = SimpleType.constructUnsafe(class0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType2, (TypeResolutionContext) null, annotationMap0, 0);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, object0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      AnnotatedMember annotatedMember0 = creatorProperty2.getMember();
      assertNotNull(annotatedMember0);
      assertEquals(0, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "[", true, simpleType1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus1.getMetadata();
      Boolean boolean0 = Boolean.valueOf(true);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1009, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Integer integer0 = new Integer(1009);
      creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
//      try { 
        creatorProperty0.set(simpleType0, "[");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Boolean boolean0 = Boolean.TRUE;
      Integer.getInteger("vdhB`KL `i]1UMeK", (-1403));
      PropertyName propertyName1 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty2 = null;
//      try {
        creatorProperty2 = new CreatorProperty((CreatorProperty) null, propertyName1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMetadata();
      Integer integer0 = new Integer((-1403));
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0, jsonTypeInfo_As0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 8, "ny]VMsmaT>!38", propertyMetadata0);
      classNameIdResolver0.idFromBaseType();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withName(propertyName0);
      assertEquals(8, creatorProperty2.getCreatorIndex());
      
      creatorProperty0.getMember();
      settableBeanProperty0.withNullProvider((NullValueProvider) null);
      System.setCurrentTimeMillis(8);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("1$5", "1$5");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "", false, placeholderForType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      Integer integer0 = new Integer(0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl1, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '1$5' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("1$5", "1$5");
      TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "1$5", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TextNode.valueOf("'");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      IOContext iOContext0 = new IOContext(bufferRecycler0, hijrahEra0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader(1057);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      HashMap<Annotation, ObjectIdResolver> hashMap0 = new HashMap<Annotation, ObjectIdResolver>();
      ObjectReader objectReader1 = objectReader0.withAttributes(hashMap0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectReader objectReader2 = objectReader1.withoutFeatures(jsonParser_FeatureArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = '.';
      charArray0[2] = '5';
      charArray0[3] = 'f';
      charArray0[4] = '*';
      charArray0[5] = 'Q';
      charArray0[6] = 'F';
      charArray0[7] = '}';
      charArray0[8] = '|';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, pipedReader0, objectReader2, charsToNameCanonicalizer0, charArray0, 33, 0, true);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
//      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, annotationMap0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '1$5'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      MapType mapType1 = mapType0.withTypeHandler((Object) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", false, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Integer integer0 = new Integer(894);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      // Undeclared exception!
//      try { 
        creatorProperty1.findInjectableValue((DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, hijrahEra0, propertyMetadata0);
      beanProperty_Bogus0.getWrapperName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory1);
      // Undeclared exception!
//      try { 
        creatorProperty1.setAndReturn((Object) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1403));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, asArrayTypeDeserializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1403));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      creatorProperty1.getCreatorIndex();
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1422), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1422));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.setFallbackSetter(creatorProperty1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, typeFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HijrahEra> class0 = HijrahEra.class;
      Class<String> class1 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(793);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      propertyMetadata0.withIndex(integer0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      jsonNodeFactory0.textNode("@}{2[FF6[./qw");
      Float float0 = new Float((double) 793);
      jsonNodeFactory0.numberNode(float0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.findParents("*,'{l#mI4Pmb (W");
      Double double0 = new Double((-2458));
      PropertyName propertyName0 = PropertyName.construct("*,'{l#mI4Pmb (W");
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 793, (Object) null, propertyMetadata1);
      JsonDeserializer<JsonNode> jsonDeserializer0 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonDeserializer<JsonNode> jsonDeserializer1 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(793, creatorProperty2.getCreatorIndex());
      assertNotSame(settableBeanProperty0, creatorProperty2);
      
      creatorProperty0.setFallbackSetter(creatorProperty2);
      assertNotSame(creatorProperty2, settableBeanProperty0);
      assertEquals(793, creatorProperty2.getCreatorIndex());
      assertEquals(793, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<JsonNode> jsonDeserializer0 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      arrayNode0.traverse();
      creatorProperty0.getCreatorIndex();
      JsonDeserializer<TextNode> jsonDeserializer1 = (JsonDeserializer<TextNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      JsonDeserializer<TextNode> jsonDeserializer2 = (JsonDeserializer<TextNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty3.withValueDeserializer(jsonDeserializer2);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      creatorProperty3.fixAccess((DeserializationConfig) null);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1403));
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.fixAccess((DeserializationConfig) null);
      creatorProperty1.isIgnorable();
      assertEquals((-1403), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("1$5", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      creatorProperty0.getCreatorIndex();
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(539, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(539, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("1$5", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      creatorProperty0.getCreatorIndex();
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals(539, settableBeanProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      simpleType0.toCanonical();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      asArrayTypeDeserializer0.getDefaultImpl();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1382), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1382));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Class<Integer> class1 = Integer.class;
      classNameIdResolver0.idFromValueAndType(arrayNode0, class1);
      JsonDeserializer<JsonNode> jsonDeserializer0 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1382), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      Class<String> class1 = String.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), classNameIdResolver0, propertyMetadata0);
      JsonDeserializer<MinimalClassNameIdResolver> jsonDeserializer0 = (JsonDeserializer<MinimalClassNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<HijrahEra> jsonDeserializer1 = (JsonDeserializer<HijrahEra>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer1);
      creatorProperty0.withName(propertyName0);
      JsonParser jsonParser0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = "Qo:cImkLz\"z8t;Au";
      SimpleModule simpleModule0 = new SimpleModule("Qo:cImkLz\"z8t;Au");
      Class<Integer> class2 = Integer.class;
      // Undeclared exception!
//      try { 
        simpleModule0.addKeyDeserializer(class2, (KeyDeserializer) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass `null` as key deserializer
//         //
//         verifyException("com.fasterxml.jackson.databind.module.SimpleModule", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<Integer> class0 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0, (JavaType) referenceType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ").", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(referenceType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, object0, (PropertyMetadata) null);
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertEquals(539, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(516);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 516, placeholderForType0, (PropertyMetadata) null);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(516, settableBeanProperty0.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      simpleType0.toCanonical();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      asArrayTypeDeserializer0.getDefaultImpl();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("");
      assertEquals("", settableBeanProperty0.getName());
      
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1403));
      PropertyMetadata.construct(boolean0, "uSY#5|8y+", integer0, "uSY#5|8y+");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      JsonNodeFactory jsonNodeFactory1 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory1);
      Class<Integer> class1 = Integer.class;
      simpleType1.withValueHandler(class0);
      classNameIdResolver0.idFromValueAndType(arrayNode0, class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      TextNode textNode0 = new TextNode("");
      creatorProperty0.withName(propertyName0);
      arrayNode0.objectNode();
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      assertEquals((-1403), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("1$5", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory1);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      MapType mapType1 = mapType0.withTypeHandler((Object) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", false, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl1, mapType1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HijrahEra> class0 = HijrahEra.class;
      Class<String> class1 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(793);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata2 = propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 793, class0, propertyMetadata2);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.getInjectableValueId();
      int int0 = new Integer(793);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      TextNode textNode0 = jsonNodeFactory0.textNode("@}{2[FF6[./qw");
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0);
      List<JsonNode> list0 = arrayNode1.findParents("*,'{l#mI4Pmb (W");
      List<JsonNode> list1 = arrayNode0.findParents("@}{2[FF6[./qw", list0);
      ArrayNode arrayNode2 = new ArrayNode(jsonNodeFactory0, list1);
      Double double0 = new Double((-2458));
      ValueNode valueNode0 = arrayNode2.numberNode(double0);
//      try { 
        creatorProperty1.set(textNode0, valueNode0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      MapType mapType1 = mapType0.withTypeHandler((Object) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", false, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
//      try { 
        creatorProperty1.set("", referenceType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      MapType mapType1 = mapType0.withTypeHandler((Object) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":9", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      arrayNode0.traverse();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      Class<Integer> class2 = Integer.class;
      FromStringDeserializer.findDeserializer(class2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertEquals(539, creatorProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1403));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      creatorProperty0.toString();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, typeFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getInjectableValueId();
      assertEquals(539, creatorProperty1.getCreatorIndex());
      
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id 'null']", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), typeFactory0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.withName(propertyName0);
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals((-1403), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<Integer> class0 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      MapType mapType1 = mapType0.withTypeHandler((Object) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty1.getAnnotation(class2);
      creatorProperty1.getInjectableValueId();
      creatorProperty1.markAsIgnorable();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DefaultDeserializationContext.Impl) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      simpleType0.toCanonical();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      asArrayTypeDeserializer0.getDefaultImpl();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1403));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Byte byte0 = new Byte((byte)0);
      jsonNodeFactory0.numberNode(byte0);
      Class<Integer> class1 = Integer.class;
      classNameIdResolver0.idFromValueAndType(arrayNode0, class1);
      creatorProperty1.isIgnorable();
//      try { 
        creatorProperty1.setAndReturn(typeFactory0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      simpleType0.toCanonical();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), asWrapperTypeDeserializer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, deserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, deserializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      MapType mapType1 = mapType0.withTypeHandler((Object) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty1.getAnnotation(class2);
      creatorProperty1.getInjectableValueId();
      assertEquals(539, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      MapType mapType1 = mapType0.withTypeHandler((Object) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      arrayNode0.traverse();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      TextNode textNode0 = new TextNode(":@");
      creatorProperty0.withName(propertyName0);
      // Undeclared exception!
//      try { 
        arrayNode0.objectNode();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "1$5", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(539);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty1.getMember();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("1$5", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "1$5", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory1);
      creatorProperty0.getMember();
      assertEquals(539, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      MapType mapType1 = mapType0.withTypeHandler((Object) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals(539, creatorProperty1.getCreatorIndex());
      
      creatorProperty0.getMember();
      assertEquals(539, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      simpleType0.toCanonical();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      Class<?> class1 = asArrayTypeDeserializer0.getDefaultImpl();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1403));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class1, valueInstantiator_Base0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TextNode.valueOf("ny]VMsmaT>!38");
//      try { 
        creatorProperty1.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, jsonNodeFactory0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      simpleType0.toCanonical();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      asArrayTypeDeserializer0.getDefaultImpl();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1403));
      PropertyMetadata.construct(boolean0, "uSY#5|8y+", integer0, "uSY#5|8y+");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Class<Integer> class1 = Integer.class;
      classNameIdResolver0.idFromValueAndType(arrayNode0, class1);
//      try { 
        creatorProperty1.setAndReturn(typeFactory0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(539);
      Class<JsonNode> class1 = JsonNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) referenceType0, (JavaType) placeholderForType0);
      MapType mapType1 = mapType0.withTypeHandler((Object) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, ":@", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 539, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      JsonParser jsonParser0 = arrayNode0.traverse();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TextNode textNode0 = new TextNode(":@");
//      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, textNode0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HijrahEra> class0 = HijrahEra.class;
      Class<String> class1 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(793);
      propertyMetadata0.withIndex(integer0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 793, class0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.getInjectableValueId();
      creatorProperty0.getCreatorIndex();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      String string0 = "@}{2[FF6[./q\\w";
      jsonNodeFactory0.textNode("@}{2[FF6[./qw");
      int int0 = (-2458);
      ArrayNode arrayNode0 = null;
//      try {
        arrayNode0 = new ArrayNode(jsonNodeFactory0, (-2458));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -2458
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<HijrahEra> class0 = HijrahEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      simpleType0.toCanonical();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "ny]VMsmaT>!38", false, simpleType0);
      asArrayTypeDeserializer0.getDefaultImpl();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1403), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertEquals((-1403), creatorProperty1.getCreatorIndex());
      
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1403));
      PropertyMetadata.construct(boolean0, "uSY#5|8y+", integer0, "uSY#5|8y+");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Class<Integer> class1 = Integer.class;
      classNameIdResolver0.idFromValueAndType(arrayNode0, class1);
      Class<PipedInputStream> class2 = PipedInputStream.class;
      FromStringDeserializer.findDeserializer(class2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-1403), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, arrayType0, (TypeResolutionContext) null, annotationMap0, (-155));
      AnnotatedParameter annotatedParameter1 = annotatedParameter0.withAnnotations(annotationMap0);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("Rgy$%s)c");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType1, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter1, (-155), object0, propertyMetadata1);
      JsonDeserializer<TextNode> jsonDeserializer0 = (JsonDeserializer<TextNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getCreatorIndex();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializationContext deserializationContext0 = null;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, (ConfigOverrides) null);
      // Undeclared exception!
//      try { 
        basicClassIntrospector0.forDeserializationWithBuilder(deserializationConfig0, javaType0, deserializationConfig0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
//      }
  }
}
