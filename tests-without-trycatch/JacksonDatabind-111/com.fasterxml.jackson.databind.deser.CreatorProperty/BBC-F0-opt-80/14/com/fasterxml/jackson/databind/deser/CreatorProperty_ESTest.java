/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 10:59:12 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.net.URISyntaxException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 828, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(828, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      int int0 = 726;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 726, annotationMap0, propertyMetadata0);
      creatorProperty0._propertyIndex = 726;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0._fallbackSetter = settableBeanProperty0;
//      try { 
        creatorProperty0.set((Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '@JsonUnwrapped'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-405), annotationMap0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 451, (Object) null, propertyMetadata0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals((-405), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("4", "4");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("4");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "4", true, mapLikeType1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      jsonFactory1.createParser((Reader) null);
      SimpleModule simpleModule0 = new SimpleModule("JSON", (Version) null);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1554), simpleModule1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.assignIndex(0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.withName(propertyName0);
      assertEquals((-1554), creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1127), propertyName0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.isIgnorable();
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class0 = Integer.TYPE;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      JavaType javaType0 = TypeFactory.unknownType();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1383, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.set((Object) null, propertyMetadata0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider(jsonDeserializer0);
      propertyMetadata2.withDescription("com.fasterxml.jackson.core.format.DataFormatMatcher");
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals(1, settableBeanProperty1.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      PropertyName propertyName2 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 2, propertyMetadata0, propertyMetadata0);
      creatorProperty0.setFallbackSetter((SettableBeanProperty) null);
      valueInstantiator_Base0.getDefaultCreator();
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType1, annotatedClass0, annotationMap0, 2);
      annotatedClass0.getAnnotation(class1);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName2, mapLikeType0, propertyName1, asWrapperTypeDeserializer0, annotations0, annotatedParameter0, 2, (Object) null, propertyMetadata0);
      Class<Annotation> class2 = Annotation.class;
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName1);
      assertEquals(2, creatorProperty2.getCreatorIndex());
      
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty3.getAnnotation(class2);
      assertEquals(2, creatorProperty3.getCreatorIndex());
      
      creatorProperty2.getAnnotation(class1);
      assertEquals(2, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      JavaType javaType0 = TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, (TypeResolutionContext) null, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, annotatedParameter0, 1736, (Object) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals(1736, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      asWrapperTypeDeserializer0.toString();
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata1);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.assignIndex(1);
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withNullProvider(jsonDeserializer0);
      settableBeanProperty0.fixAccess((DeserializationConfig) null);
      settableBeanProperty0.isIgnorable();
      assertEquals(1, settableBeanProperty0.getPropertyIndex());
      
      settableBeanProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertSame(creatorProperty1, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapLikeType0, (PropertyName) null, (TypeDeserializer) null, annotations0, (AnnotatedParameter) null, (-2056), (Object) null, propertyMetadata0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(759);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, placeholderForType0, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, (TypeResolutionContext) null, annotationMap0, 1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1, mapLikeType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      // Undeclared exception!
//      try { 
        creatorProperty2.setAndReturn(annotationMap0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<Integer> class1 = Integer.TYPE;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotations0, (AnnotatedParameter) null, 2041, propertyMetadata0, propertyMetadata0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis(2870L);
      PropertyName propertyName0 = new PropertyName("[creator property, name '");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[creator property, name '", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((byte)0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "[creator property, name '", integer0, "[creator property, name '");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, annotatedParameter0, (byte) (-8), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getMember();
      creatorProperty0.isIgnorable();
      AnnotatedMember annotatedMember0 = creatorProperty2.getMember();
      assertNotNull(annotatedMember0);
      assertEquals((-8), creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("'");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializationConfig deserializationConfig0 = null;
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<Integer> class1 = Integer.TYPE;
      Class<String> class2 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (List<JavaType>) null);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("'");
      typeBindings1.findBoundType("Odb_]Eh|3:f");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      AbstractDeserializer abstractDeserializer0 = beanDeserializerBuilder0.buildAbstract();
      abstractDeserializer0.findBackReference("A8xvqHR}[Qd");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotations0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      LinkedList<PropertyName> linkedList0 = new LinkedList<PropertyName>();
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property ''' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("'");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      int int0 = 0;
      TypeDeserializer typeDeserializer0 = null;
      Class<Integer> class1 = Integer.TYPE;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotations0, (AnnotatedParameter) null, 0, propertyName0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      creatorProperty0.getCreatorIndex();
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonFactory1.configure(jsonParser_Feature0, true);
//      try { 
        MockURI.URI("JSON", "", "=^3A'I84n", "'", "JSON");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: JSON://=%5E3A'I84n?'#JSON
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName.construct("'", "'");
      PropertyName propertyName0 = PropertyName.construct("'");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<Integer> class1 = Integer.TYPE;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotations0, (AnnotatedParameter) null, 2, class1, propertyMetadata0);
      LinkedList<PropertyName> linkedList0 = new LinkedList<PropertyName>();
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, jsonDeserializer0, jsonDeserializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      PropertyName propertyName3 = PropertyName.construct("", "-H_p");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.toString();
      propertyName3.withNamespace("");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("-H_p");
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider(jsonDeserializer0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      assertSame(creatorProperty1, settableBeanProperty0);
      assertEquals(1, creatorProperty1.getCreatorIndex());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      Class<CreatorProperty> class1 = CreatorProperty.class;
      NamedType namedType0 = new NamedType(class1);
      // Undeclared exception!
//      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, deserializationContext0, namedType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("qG", "qG");
      PropertyName propertyName1 = PropertyName.construct("qG");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<Integer> class1 = Integer.TYPE;
      PropertyName propertyName2 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, (TypeDeserializer) null, annotations0, (AnnotatedParameter) null, (-2080), propertyName2, propertyMetadata0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2._fallbackSetter = (SettableBeanProperty) creatorProperty0;
      // Undeclared exception!
//      try { 
        creatorProperty2.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("'", "'");
      PropertyName propertyName1 = PropertyName.construct("'");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType1, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<Integer> class1 = Integer.TYPE;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, (TypeDeserializer) null, annotations0, (AnnotatedParameter) null, 2, class1, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName((String) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName1);
//      try { 
        creatorProperty0.setAndReturn(creatorProperty1, creatorProperty2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("4", "4");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType0, (TypeIdResolver) null, "4", true, mapLikeType0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, collectionLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName1);
      pOJOPropertyBuilder0.getConstructorParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 2, "4", propertyMetadata0);
      creatorProperty0.setFallbackSetter(creatorProperty0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName.construct("'", "'");
      PropertyName propertyName0 = PropertyName.construct("'");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType1, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<Integer> class1 = Integer.TYPE;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType1, propertyName0, (TypeDeserializer) null, annotations0, (AnnotatedParameter) null, 2, class1, propertyMetadata0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      Class<FloatNode> class3 = FloatNode.class;
      deserializerFactoryConfig1.deserializers();
      beanDeserializerFactory0._findCustomTreeNodeDeserializer(class3, (DeserializationConfig) null, basicBeanDescription0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("4", "4");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("4");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "4", true, mapLikeType1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      jsonFactory1.createParser((Reader) null);
      SimpleModule simpleModule0 = new SimpleModule("JSON", (Version) null);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1554), simpleModule1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.withName(propertyName0);
      assertEquals((-1554), creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "-g8&H+6ov.k", true, (JavaType) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "lry=b~2]nf~x=S5LMX)");
      PropertyName propertyName1 = propertyName0.withSimpleName((String) null);
      Class<Integer> class0 = Integer.TYPE;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, class0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 2, propertyMetadata0, propertyMetadata0);
      creatorProperty0.setFallbackSetter((SettableBeanProperty) null);
      assertEquals(2, creatorProperty0.getCreatorIndex());
      
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, typeFactory0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName.construct("'", "'");
      PropertyName propertyName0 = PropertyName.construct("'");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType1, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<Integer> class1 = Integer.TYPE;
      basicBeanDescription0.findDeserializationConverter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType1, propertyName0, (TypeDeserializer) null, annotations0, (AnnotatedParameter) null, 2, class1, propertyMetadata0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName.construct("mS^gYNgj3OpZwH", "mS^gYNgj3OpZwH");
      PropertyName propertyName0 = new PropertyName("mS^gYNgj3OpZwH", "mS^gYNgj3OpZwH");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType1, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      valueInstantiator_Base0.getWithArgsCreator();
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      Class<Integer> class1 = Integer.TYPE;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType1, propertyName0, (TypeDeserializer) null, annotations0, (AnnotatedParameter) null, 2, class1, propertyMetadata0);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PropertyName propertyName2 = propertyName1.internSimpleName();
      PropertyName propertyName3 = PropertyName.construct("", "-H_p");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.toString();
      propertyName3.withNamespace("");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("-H_p");
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.markAsIgnorable();
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider(jsonDeserializer0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      assertTrue(creatorProperty1.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName0.withSimpleName("");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonFactory jsonFactory0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      jsonFactory2.configure(jsonParser_Feature0, false);
      jsonFactory2.createParser((Reader) null);
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
//      try { 
        creatorProperty1.findInjectableValue((DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No fallback setter/field defined for creator property '");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "']");
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<JsonFormat.Feature> class0 = JsonFormat.Feature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "']", false, simpleType0);
      Class<InputStream> class1 = InputStream.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      creatorProperty0.withName(propertyName0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName0);
      creatorProperty0._fallbackSetter = settableBeanProperty0;
      creatorProperty0.getCreatorIndex();
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 6);
      Class<SimpleModule> class2 = SimpleModule.class;
      classArray0[0] = class2;
      Class<SimpleModule> class3 = SimpleModule.class;
      classArray0[1] = class3;
      Class<SimpleModule> class4 = SimpleModule.class;
      classArray0[2] = class4;
      Class<SimpleModule> class5 = SimpleModule.class;
      classArray0[3] = class5;
      Class<SimpleModule> class6 = SimpleModule.class;
      classArray0[4] = class6;
      Class<SimpleModule> class7 = SimpleModule.class;
      classArray0[5] = class7;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty2._viewMatcher = viewMatcher0;
      creatorProperty0.getCreatorIndex();
      int int0 = creatorProperty2.getCreatorIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      PropertyName propertyName1 = new PropertyName("", "");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, (-2), typeFactory0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, (NullValueProvider) null);
      creatorProperty2.getCreatorIndex();
      mapLikeType1.getSuperClass();
      CreatorProperty creatorProperty3 = new CreatorProperty(propertyName0, mapLikeType0, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, (-2), propertyMetadata0, propertyMetadata0);
//      try { 
        creatorProperty3.set(mapLikeType1, propertyName1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      PropertyName propertyName1 = new PropertyName("$kX]jhG2\"pWz&z ");
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.DEFAULT;
      propertyMetadata0.withNulls(nulls0, nulls1);
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 0, jsonFormat_Feature0, propertyMetadata1);
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, mapLikeType1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      PropertyName propertyName3 = PropertyName.construct("", "-H_p");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.toString();
      propertyName3.withNamespace("");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("-H_p");
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider(jsonDeserializer0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty1.isIgnorable();
//      try { 
        settableBeanProperty0.set(creatorProperty1, "");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName0.withSimpleName("']");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType1, propertyName0, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0._propertyIndex = 0;
      creatorProperty1.withNullProvider(jsonDeserializer0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      assertEquals(0, creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withNullProvider(jsonDeserializer0);
      settableBeanProperty0.fixAccess((DeserializationConfig) null);
      assertSame(settableBeanProperty0, creatorProperty1);
      assertEquals(1, settableBeanProperty0.getCreatorIndex());
      
      settableBeanProperty1.markAsIgnorable();
      assertTrue(settableBeanProperty1.isIgnorable());
      
      settableBeanProperty1.withName(propertyName0);
      assertTrue(settableBeanProperty1.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      jsonFactory3.createParser((Reader) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals(0, creatorProperty1.getCreatorIndex());
      
      Object object0 = creatorProperty0.getInjectableValueId();
      assertNotNull(object0);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "", true, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName0.withSimpleName("");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory0.disable(jsonParser_Feature0);
      jsonFactory0.createParser((Reader) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      // Undeclared exception!
//      try { 
        creatorProperty1.inject((DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.withSimpleName("']");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withNullProvider(jsonDeserializer0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
//      try { 
        settableBeanProperty0.setAndReturn(settableBeanProperty1, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.withSimpleName("']");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider(jsonDeserializer0);
      assertSame(creatorProperty1, settableBeanProperty0);
      assertEquals(1, creatorProperty1.getCreatorIndex());
      
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      assertSame(creatorProperty1, settableBeanProperty0);
      assertEquals(1, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializationConfig deserializationConfig0 = null;
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata1);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
//      try { 
        creatorProperty0.setAndReturn(jsonFormat_Feature0, propertyMetadata_MergeInfo0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      asWrapperTypeDeserializer0.toString();
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata1);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider(jsonDeserializer0);
      settableBeanProperty0.fixAccess((DeserializationConfig) null);
      settableBeanProperty0.isIgnorable();
      assertSame(settableBeanProperty0, creatorProperty1);
      assertEquals(1, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      Class<Object> class1 = Object.class;
      Boolean boolean0 = new Boolean(true);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "", true, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 0, propertyMetadata0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.inject((DeserializationContext) null, class1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata1);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = (CreatorProperty)creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider(jsonDeserializer0);
      creatorProperty2.fixAccess((DeserializationConfig) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
//      try { 
        creatorProperty2.inject(defaultDeserializationContext_Impl1, creatorProperty1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "", true, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      propertyName0.withSimpleName("");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      jsonFactory2.createParser((Reader) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName0, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, (-3301), "JSON", propertyMetadata1);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      // Undeclared exception!
//      try { 
        creatorProperty1.inject((DeserializationContext) null, propertyMetadata_MergeInfo0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      PropertyName propertyName3 = PropertyName.construct("", "-H_p");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.toString();
      PropertyName propertyName4 = propertyName3.withNamespace("");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("-H_p");
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName4, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, propertyName3, propertyMetadata2);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName4);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty2._valueDeserializer;
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, jsonDeserializer1, jsonDeserializer1);
      creatorProperty3.withValueDeserializer(jsonDeserializer1);
      creatorProperty1.withNullProvider(jsonDeserializer1);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty0.markAsIgnorable();
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = PropertyName.construct("-H_p", "-H_p");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      creatorProperty1.withNullProvider(jsonDeserializer0);
      assertEquals(1, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = PropertyName.construct("", "");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.withSimpleName("");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      creatorProperty0.getValueDeserializer();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonParser jsonParser0 = jsonFactory2.createParser((Reader) null);
//      try { 
        settableBeanProperty0.deserializeSetAndReturn(jsonParser0, (DeserializationContext) null, "");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      PropertyName propertyName2 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider(jsonDeserializer0);
      settableBeanProperty0.fixAccess((DeserializationConfig) null);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName1);
      assertEquals(1, settableBeanProperty1.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider(jsonDeserializer0);
      settableBeanProperty0.fixAccess((DeserializationConfig) null);
      String string0 = creatorProperty1.toString();
      assertEquals(1, creatorProperty1.getCreatorIndex());
      assertEquals("[creator property, name ''; inject id 'null']", string0);
      assertSame(creatorProperty1, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.withSimpleName("']");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider(jsonDeserializer0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      assertSame(creatorProperty1, settableBeanProperty0);
      assertEquals(1, creatorProperty1.getCreatorIndex());
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      asWrapperTypeDeserializer0.baseTypeName();
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withNullProvider(jsonDeserializer0);
      settableBeanProperty0.fixAccess((DeserializationConfig) null);
      settableBeanProperty1.markAsIgnorable();
      assertTrue(settableBeanProperty1.isIgnorable());
      
      creatorProperty0.getMember();
      assertEquals(1, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDefaultValue("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getMember();
      assertEquals(1, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.withSimpleName("']");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      propertyMetadata1.withDescription("K`<jTE09@IGS|0");
      PropertyName propertyName3 = new PropertyName("`8/zgMmI{h6Bw", "");
      Integer integer0 = new Integer((-343));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName3, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, (-343), integer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      assertEquals((-343), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.withSimpleName("']");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      Nulls nulls0 = Nulls.DEFAULT;
      Nulls nulls1 = Nulls.FAIL;
      propertyMetadata2.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider(jsonDeserializer0);
//      try { 
        settableBeanProperty0.set(mapLikeType0, propertyMetadata1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      propertyName0.internSimpleName();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      jsonFactory3.createParser((Reader) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      creatorProperty0.getInjectableValueId();
      // Undeclared exception!
//      try { 
        creatorProperty0.inject((DeserializationContext) null, jsonFactory1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.withNamespace("-H_p");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals(1, creatorProperty1.getCreatorIndex());
      
      creatorProperty0.getInjectableValueId();
      assertEquals(1, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      PropertyName propertyName3 = propertyName2.withSimpleName("']");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      PropertyMetadata propertyMetadata2 = propertyMetadata0.withDescription("Q_&V(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName3, mapLikeType1, propertyName1, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertSame(creatorProperty0, settableBeanProperty0);
      assertEquals(1, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.withSimpleName("']");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(jsonDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) null);
//      try { 
        settableBeanProperty0.deserializeSetAndReturn(jsonParser0, (DeserializationContext) null, "-H_p");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.withSimpleName("']");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      Nulls nulls0 = Nulls.DEFAULT;
      Nulls nulls1 = Nulls.FAIL;
      propertyMetadata2.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider(jsonDeserializer0);
//      try { 
        settableBeanProperty0.set(mapLikeType0, propertyMetadata1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withNamespace("-H_p");
      PropertyName propertyName2 = propertyName1.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType1, (TypeIdResolver) null, "-H_p", false, mapLikeType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      propertyName2.withSimpleName("']");
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("`8/zgMmI{h6Bw");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType1, propertyName2, asWrapperTypeDeserializer0, annotations0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata2);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(jsonDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) null);
//      try { 
        settableBeanProperty0.deserializeSetAndReturn(jsonParser0, (DeserializationContext) null, "-H_p");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }
}
