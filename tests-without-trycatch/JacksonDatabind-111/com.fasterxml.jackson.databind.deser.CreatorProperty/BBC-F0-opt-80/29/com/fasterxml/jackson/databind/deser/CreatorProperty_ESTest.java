/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 16:32:26 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.net.Proxy;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalField;
import java.util.HashMap;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = new Boolean("uGdd$4vmubCJlZG,;");
      Integer integer0 = new Integer(1324);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "d;.zksSuK!4MwaS5N", integer0, "n:o*K92poB2=Eg");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1324, propertyName1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals(1324, int0);
      
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0._propertyIndex = 1324;
      creatorProperty0.withNullProvider((NullValueProvider) null);
      placeholderForType0.getErasedSignature();
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      creatorProperty0._propertyIndex = 0;
      propertyMetadata1.withMergeInfo(propertyMetadata_MergeInfo0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(1324, settableBeanProperty0.getCreatorIndex());
      
      System.setCurrentTimeMillis(0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(1324, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = new Boolean("uGdd$4vmubCJlZG,;");
      Integer integer0 = new Integer(1324);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "d;.zksSuK!4MwaS5N", integer0, "n:o*K92poB2=Eg");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1324, propertyName1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.getCreatorIndex();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0._propertyIndex = 1324;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      placeholderForType0.getErasedSignature();
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      creatorProperty0._propertyIndex = 0;
      propertyMetadata1.withMergeInfo(propertyMetadata_MergeInfo0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.withNullProvider((NullValueProvider) null);
      String string0 = settableBeanProperty0.toString();
      assertEquals("[creator property, name '#temporary-name'; inject id '#temporary-name']", string0);
      
      SettableBeanProperty settableBeanProperty2 = settableBeanProperty1.withName(propertyName1);
      assertTrue(settableBeanProperty2.hasValueDeserializer());
      assertEquals(1324, settableBeanProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = new Boolean("uGdd$4vmubCJlZG,;");
      Integer integer0 = new Integer(1324);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "d;.zksSuK!4MwaS5N", integer0, "n:o*K92poB2=Eg");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1324, propertyName1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.getCreatorIndex();
      Class<Locale.LanguageRange>[] classArray0 = (Class<Locale.LanguageRange>[]) Array.newInstance(Class.class, 6);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      classArray0[0] = class0;
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      classArray0[1] = class1;
      Class<Locale.LanguageRange> class2 = Locale.LanguageRange.class;
      classArray0[2] = class2;
      Class<Locale.LanguageRange> class3 = Locale.LanguageRange.class;
      classArray0[3] = class3;
      Class<Locale.LanguageRange> class4 = Locale.LanguageRange.class;
      classArray0[4] = class4;
      Class<Locale.LanguageRange> class5 = Locale.LanguageRange.class;
      classArray0[5] = class5;
      creatorProperty0.setViews(classArray0);
      Class<Annotation> class6 = Annotation.class;
      creatorProperty0.getAnnotation(class6);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
//      try { 
        settableBeanProperty0.setAndReturn(class3, class2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = new Boolean("uGdd$4vmubCJlZG,;");
      Integer integer0 = new Integer(1324);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "d;.zksSuK!4MwaS5N", integer0, "n:o*K92poB2=Eg");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1324, propertyName1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals(1324, int0);
      
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0._propertyIndex = 1324;
      creatorProperty0.withNullProvider((NullValueProvider) null);
      placeholderForType0.getErasedSignature();
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      propertyMetadata1.withMergeInfo(propertyMetadata_MergeInfo0);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name '#temporary-name'; inject id '#temporary-name']", string0);
      
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(1324, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      creatorProperty0.withName(propertyName0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, placeholderForType0, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getAnnotation(class0);
      creatorProperty0.getInjectableValueId();
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "W6Z?ndd|z/q]mQ");
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.withName(propertyName0);
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals(1, settableBeanProperty0.getCreatorIndex());
      
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Boolean boolean0 = new Boolean("%ZtWY'dRO]@3{SGjcx");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 244, (Object) null, propertyMetadata1);
      creatorProperty0.toString();
      ChronoField chronoField0 = ChronoField.OFFSET_SECONDS;
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, chronoField0, propertyMetadata1);
      JsonDeserializer<ChronoLocalDate> jsonDeserializer0 = (JsonDeserializer<ChronoLocalDate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      creatorProperty3.toString();
      CreatorProperty creatorProperty4 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), annotationMap0, propertyMetadata0);
      CreatorProperty creatorProperty5 = new CreatorProperty(creatorProperty4, propertyName0);
      creatorProperty4.setFallbackSetter(creatorProperty5);
//      try { 
        creatorProperty4.set((Object) null, propertyMetadata0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "']");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1876));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1876), (Object) null, propertyMetadata0);
      propertyName0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      creatorProperty0.isVirtual();
      Object object0 = new Object();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), object0, propertyMetadata0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.assignIndex((byte) (-76));
      creatorProperty0.setFallbackSetter(creatorProperty2);
      LongNode longNode0 = new LongNode(1676L);
      Long.getLong("", 9223372036854775807L);
//      try { 
        creatorProperty0.setAndReturn(creatorProperty2, placeholderForType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1881));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1881), placeholderForType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext0, defaultDeserializationContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      Class<Object> class5 = Object.class;
      classArray0[4] = class5;
      Class<Object> class6 = Object.class;
      classArray0[5] = class6;
      Class<Object> class7 = Object.class;
      propertyMetadata0.withDefaultValue("");
      classArray0[6] = class7;
      Class<Object> class8 = Object.class;
      classArray0[7] = class8;
      creatorProperty0.setViews(classArray0);
      creatorProperty0.getAnnotation(class0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(2804, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      settableBeanProperty0.getAnnotation(class0);
      assertEquals(2804, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id 'null']", string0);
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      assertEquals(2804, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-952));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-952), (Object) null, propertyMetadata0);
      DeserializationContext deserializationContext0 = null;
      JsonParser jsonParser0 = null;
      JsonDeserializer<MinimalClassNameIdResolver> jsonDeserializer0 = (JsonDeserializer<MinimalClassNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, jsonDeserializer0, jsonDeserializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      coreXMLDeserializers_Std0.getValueType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "NqFB>EWjt!d5@Ol/H \"", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Boolean boolean0 = Boolean.valueOf("NqFB>EWjt!d5@Ol/H \"");
      Integer integer0 = new Integer(1720);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "d;.zksSuK!4MwaS5N");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, 1720, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.getCreatorIndex();
      creatorProperty0.withNullProvider(coreXMLDeserializers_Std0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(coreXMLDeserializers_Std0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class1, 0);
      LongNode longNode0 = LongNode.valueOf(0L);
      // Undeclared exception!
//      try { 
        settableBeanProperty0.setAndReturn(objectIdGenerators_IntSequenceGenerator0, longNode0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(28);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = beanDeserializerFactory0.constructBeanDeserializerBuilder(defaultDeserializationContext_Impl0, basicBeanDescription0);
      beanDeserializerBuilder0.getBuildMethod();
      JavaType javaType0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 28);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 28, beanDeserializerFactory0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      HashMap<Module, Annotation> hashMap0 = new HashMap<Module, Annotation>();
      ObjectReader objectReader2 = objectReader1.withAttributes(hashMap0);
      ObjectReader objectReader3 = objectReader2.withoutAttribute((Object) null);
      TextNode textNode0 = new TextNode("-3o8]B&c}nJ#%");
      JsonParser jsonParser0 = objectReader3.treeAsTokens(textNode0);
//      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1465));
      placeholderForType0.getContentType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleModule> class0 = SimpleModule.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) placeholderForType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1465));
      AnnotatedParameter annotatedParameter1 = annotatedParameter0.withAnnotations(annotationMap0);
      ChronoField chronoField0 = ChronoField.CLOCK_HOUR_OF_AMPM;
      Boolean boolean0 = Boolean.valueOf(false);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, " 6Ir{$+4.V}T=PA@hr", (Integer) null, "']");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter1, 0, chronoField0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      assertEquals(0, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1886));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      basicBeanDescription0.findSerializationConverter();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, annotationMap0, 8233);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1232), propertyMetadata0, propertyMetadata0);
      AnnotatedMember annotatedMember0 = creatorProperty0.getMember();
      assertNotNull(annotatedMember0);
      assertEquals((-1232), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1905));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1905), object0, propertyMetadata0);
      JsonDeserializer<Class<InputStream>> jsonDeserializer0 = (JsonDeserializer<Class<InputStream>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Nulls nulls0 = Nulls.SET;
      propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty2.getValueDeserializer();
      creatorProperty1.withValueDeserializer(jsonDeserializer1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("com.fasterxml.jackson.databind.deser.CreatorProperty");
      Version version0 = jsonFactory1.version();
      SimpleModule simpleModule0 = new SimpleModule("com.fasterxml.jackson.databind.jsontype.SubtypeResolver", version0);
//      try { 
        creatorProperty1.set((Object) null, simpleModule0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 753, (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(753, settableBeanProperty0.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      coreXMLDeserializers_Std0.getValueType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "~I]M2jG(-J&m0U", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean(false);
      classNameIdResolver0.idFromValue(typeFactory0);
      Integer integer0 = new Integer(1720);
      SimpleModule simpleModule0 = new SimpleModule();
      JsonSerializer<Annotation> jsonSerializer0 = (JsonSerializer<Annotation>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      JsonSerializer<Annotation> jsonSerializer1 = (JsonSerializer<Annotation>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis(1720);
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.toString();
      annotationMap0.toString();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "S", (Integer) null, "S");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1720, jsonSerializer1, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1._ignorable = true;
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, coreXMLDeserializers_Std0, coreXMLDeserializers_Std0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withNullProvider(coreXMLDeserializers_Std0);
      assertTrue(settableBeanProperty0.isIgnorable());
      assertEquals(1720, creatorProperty2.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1886));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1886), propertyMetadata0, propertyMetadata0);
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      Class<TemporalField> class0 = TemporalField.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType1, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, classNameIdResolver0, (String) null, true, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<DataInputStream> class1 = DataInputStream.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, 1, simpleType1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, true);
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'm';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 1, 1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl2, propertyMetadata0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1886));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1886), propertyName0, propertyMetadata0);
      JsonDeserializer<Proxy.Type> jsonDeserializer0 = (JsonDeserializer<Proxy.Type>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      LongNode longNode0 = new LongNode((-1886));
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1886));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, annotationMap0, 8233);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1232), propertyMetadata0, propertyMetadata0);
      assertEquals((-1232), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-18));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-18), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        creatorProperty1.set(object0, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2802);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '@JsonUnwrapped' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1886));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1886), (Object) null, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl1, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, propertyMetadata0, propertyMetadata0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(2, creatorProperty1.getCreatorIndex());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Object object0 = new Object();
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Object> class0 = Object.class;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, javaType0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std1.getAnnotation(class1);
      Class<SimpleModule> class2 = SimpleModule.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class2, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 191, "[creator property, name '", propertyMetadata0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        creatorProperty1.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, propertyMetadata0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      creatorProperty0.getMember();
      creatorProperty0.fixAccess((DeserializationConfig) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = 'Y';
      charArray0[2] = '~';
      charArray0[3] = 'e';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 2804, 1768);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, placeholderForType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, placeholderForType0);
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Std1.getContextAnnotation(class0);
//      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl2, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, placeholderForType0, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getAnnotation(class0);
      creatorProperty0.getInjectableValueId();
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      creatorProperty0.getMember();
      propertyName0.internSimpleName();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(2804, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1387);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1387, placeholderForType0, propertyMetadata0);
      creatorProperty0.getMember();
      Object object0 = new Object();
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      assertEquals(1387, settableBeanProperty0.getCreatorIndex());
      assertEquals("", settableBeanProperty0.getName());
      
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals(1387, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.getMember();
      Object object0 = new Object();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(2804, settableBeanProperty0.getCreatorIndex());
      assertNotSame(settableBeanProperty0, creatorProperty1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1905));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1905), (Object) null, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl1);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Integer integer0 = new Integer(180);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((String) null, (Object) integer0);
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std1);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
//      try { 
        creatorProperty0.findInjectableValue(deserializationContext0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '#temporary-name' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      creatorProperty0.getMember();
      PropertyName.construct("j[EB!LKh}FZ$~AC");
      Object object0 = new Object();
//      try { 
        creatorProperty0.set((Object) null, propertyName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      creatorProperty0.getMember();
      Object object0 = new Object();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.getInjectableValueId();
//      try { 
        creatorProperty0.setAndReturn(annotationMap0, propertyMetadata0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      Integer integer0 = new Integer(2804);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      settableBeanProperty0.withName(propertyName0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        placeholderForType0.getGenericSignature((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      int int0 = 2804;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      TypeDeserializer typeDeserializer0 = null;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, object0, propertyMetadata0);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, deserializerFactory0);
      SimpleModule simpleModule0 = new SimpleModule();
      // Undeclared exception!
//      try { 
        creatorProperty2.findInjectableValue(defaultDeserializationContext_Impl1, simpleModule0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      coreXMLDeserializers_Std0.getValueType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "~I]M2jG(-J&m0U", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean(false);
      classNameIdResolver0.idFromValue(typeFactory0);
      Integer integer0 = new Integer(1720);
      SimpleModule simpleModule0 = new SimpleModule();
      JsonSerializer<Annotation> jsonSerializer0 = (JsonSerializer<Annotation>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      JsonSerializer<Annotation> jsonSerializer1 = (JsonSerializer<Annotation>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis(1720);
      PropertyName propertyName0 = new PropertyName("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "S", (Integer) null, "S");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1720, jsonSerializer1, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, coreXMLDeserializers_Std0, coreXMLDeserializers_Std0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withNullProvider(coreXMLDeserializers_Std0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(1720, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Integer> class0 = Integer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "Property '%s' (type %s) has no injectable value id configured", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      annotationIntrospector0.findNameForDeserialization(annotatedField0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Property '%s' (type %s) has no injectable value id configured", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, (JavaType) null, (PropertyName) null, virtualAnnotatedMember0, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, (JavaType) null);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2245, proxy_Type0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      creatorProperty0.isIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName((PropertyName) null);
      assertEquals(2245, settableBeanProperty0.getCreatorIndex());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      asExternalTypeDeserializer0.getDefaultImpl();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext0, creatorProperty1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 55296);
      coreXMLDeserializers_Std0.getValueType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "(zSW~fc{c", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = new AnnotationMap();
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1720);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "NqFB>EWjt!d5@Ol/H \"", integer1, "");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, 0, typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.getCreatorIndex();
      creatorProperty1.withNullProvider(coreXMLDeserializers_Std0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      creatorProperty0.withNullProvider(coreXMLDeserializers_Std0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      creatorProperty1.withNullProvider(coreXMLDeserializers_Std0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(coreXMLDeserializers_Std0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      creatorProperty0.toString();
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = null;
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = new Integer(2804);
      Integer integer1 = new Integer((-2878));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "JNi;L//r!vv[Obl/y", integer1, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2878), propertyMetadata0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.getCreatorIndex();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = null;
      Version version0 = new Version(1715, (-2878), 2804, "JNi;L//r!vv[Obl/y", "JNi;L//r!vv[Obl/y", "JNi;L//r!vv[Obl/y");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)0;
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
//      try { 
        creatorProperty0.deserialize(jsonParserDelegate0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      coreXMLDeserializers_Std0.getValueType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "NqFB>EWjt!d5@Ol/H \"", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = new Integer(1720);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "d;.zksSuK!4MwaS5N");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, 1720, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.getCreatorIndex();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(coreXMLDeserializers_Std0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      creatorProperty1.withNullProvider(coreXMLDeserializers_Std0);
      Class<Annotation> class2 = Annotation.class;
      settableBeanProperty0.getAnnotation(class2);
      settableBeanProperty0.withNullProvider(coreXMLDeserializers_Std0);
      creatorProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
      // Undeclared exception!
//      try { 
        creatorProperty1.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = new Boolean("uGdd$4vmubCJlZG,;");
      Integer integer0 = new Integer(1324);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "d;.zksSuK!4MwaS5N", integer0, "n:o*K92poB2=Eg");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1324, propertyName1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals(1324, int0);
      
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0._propertyIndex = 1324;
      creatorProperty0.withNullProvider((NullValueProvider) null);
      placeholderForType0.getErasedSignature();
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      propertyMetadata1.withMergeInfo(propertyMetadata_MergeInfo0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(1324, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      Class<Annotation> class0 = Annotation.class;
      Integer integer0 = new Integer(940);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      creatorProperty0.getAnnotation(class0);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, propertyMetadata1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1886));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1886), (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      DeserializationContext deserializationContext0 = null;
      JsonParser jsonParser0 = null;
      LongNode longNode0 = new LongNode((-1886));
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, annotationMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Integer> class0 = Integer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "Property '%s' (type %s) has no injectable value id configured", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      annotationIntrospector0.findNameForDeserialization(annotatedField0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Property '%s' (type %s) has no injectable value id configured", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, (JavaType) null, (PropertyName) null, virtualAnnotatedMember0, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, (JavaType) null);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2245, proxy_Type0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals(2245, creatorProperty1.getCreatorIndex());
      
      creatorProperty0.setFallbackSetter(creatorProperty1);
      creatorProperty0.isIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName((PropertyName) null);
      assertEquals(2245, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      creatorProperty0.getMember();
      Object object0 = new Object();
      Class<Annotation> class0 = Annotation.class;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      creatorProperty0.getAnnotation(class0);
      Class<Annotation> class1 = Annotation.class;
      settableBeanProperty0.getAnnotation(class1);
      assertEquals(2804, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2777);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(1324);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "d;.zksSuK!4MwaS5N", integer0, "n:o*K92poB2=Eg");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1324, propertyName1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.getCreatorIndex();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      assertEquals(1324, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      creatorProperty0.getMember();
      creatorProperty0.markAsIgnorable();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      // Undeclared exception!
//      try { 
        Proxy.Type.valueOf("Can not write a field name, expecting a value");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant java.net.Proxy.Type.Can not write a field name, expecting a value
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = new Boolean("uGdd$4vmubCJlZG,;");
      Integer integer0 = new Integer(1324);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "d;.zksSuK!4MwaS5N", integer0, "n:o*K92poB2=Eg");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1324, propertyName1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.getCreatorIndex();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      settableBeanProperty0._managedReferenceName = "lE4]8L6@i5Eoe";
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      settableBeanProperty0.markAsIgnorable();
      assertTrue(settableBeanProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      creatorProperty0.getMember();
      Object object0 = new Object();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, propertyName1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2805);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2805, object0, propertyMetadata0);
      creatorProperty0.getMember();
      Nulls nulls0 = Nulls.SET;
      propertyMetadata0.withNulls(nulls0, nulls0);
      Object object1 = new Object();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      propertyMetadata0.withDescription("'; inject id '");
      creatorProperty1.isIgnorable();
      creatorProperty1.withName(propertyName0);
      creatorProperty1.isIgnorable();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.valueInstantiators();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl1, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      coreXMLDeserializers_Std0.getValueType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "~I]M2jG(-J&m0U", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = new Integer(1720);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "d;.zksSuK!4MwaS5N");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, 1720, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SimpleModule simpleModule0 = new SimpleModule();
      Class<Annotation> class1 = Annotation.class;
      JsonSerializer<Annotation> jsonSerializer0 = (JsonSerializer<Annotation>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.addSerializer((Class<? extends Annotation>) class1, jsonSerializer0);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule2 = simpleModule1.setSerializerModifier(beanSerializerModifier0);
      JsonSerializer<Annotation> jsonSerializer1 = (JsonSerializer<Annotation>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule3 = simpleModule2.addKeySerializer((Class<? extends Annotation>) class1, jsonSerializer1);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject((DeserializationContext) null, simpleModule3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = new Boolean("uGdd$4vmubCJlZG,;");
      Integer integer0 = new Integer(1324);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "d;.zksSuK!4MwaS5N", integer0, "n:o*K92poB2=Eg");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1324, propertyName1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals(1324, int0);
      
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(1324, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Nulls nulls0 = Nulls.DEFAULT;
      propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      creatorProperty0.getMember();
//      try { 
        creatorProperty0.setAndReturn(placeholderForType0, annotationMap0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      coreXMLDeserializers_Std0.getValueType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "~I]M2jG(-J&m0U", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = new Integer(1720);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "d;.zksSuK!4MwaS5N");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, 1720, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.getCreatorIndex();
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      creatorProperty1.withNullProvider(coreXMLDeserializers_Std0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(coreXMLDeserializers_Std0);
      assertEquals(1720, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2804);
      Class<String> class0 = String.class;
      placeholderForType0.isTypeOrSubTypeOf(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2804, (Object) null, propertyMetadata0);
      creatorProperty0.getInjectableValueId();
      assertEquals(2804, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("%25@ialS$w).W\"&^IB", "%25@ialS$w).W\"&^IB");
      JavaType javaType0 = TypeFactory.unknownType();
      Integer integer0 = new Integer(0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null, (Object) integer0, (Object) "%25@ialS$w).W\"&^IB");
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(arrayType0, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotationMap.merge(annotationMap1, annotationMap0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, 0, javaType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.getInjectableValueId();
      BeanDescription beanDescription0 = null;
      DeserializationContext deserializationContext0 = null;
      BeanDeserializerBuilder beanDeserializerBuilder0 = null;
//      try {
        beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, (DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder", e);
//      }
  }
}
