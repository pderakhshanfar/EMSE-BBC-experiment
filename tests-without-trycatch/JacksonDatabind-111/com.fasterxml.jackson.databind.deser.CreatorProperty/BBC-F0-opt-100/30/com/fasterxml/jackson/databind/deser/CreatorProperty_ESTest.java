/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 16:39:39 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.time.chrono.ChronoLocalDate;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(562);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Integer integer0 = new Integer(0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 894, integer0, propertyMetadata1);
      creatorProperty0.assignIndex(0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName((PropertyName) null);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName((PropertyName) null);
      assertEquals(894, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1436, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.assignIndex(1436);
      creatorProperty1.withSimpleName((String) null);
      System.setCurrentTimeMillis(2810L);
      creatorProperty1.withName((PropertyName) null);
      creatorProperty1.setFallbackSetter(creatorProperty0);
//      try { 
        creatorProperty1.set((Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3471));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3471), (Object) null, propertyMetadata0);
      propertyMetadata0.withIndex((Integer) null);
      Class<Locale.LanguageRange>[] classArray0 = (Class<Locale.LanguageRange>[]) Array.newInstance(Class.class, 0);
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals((-3471), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", false, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, placeholderForType0, propertyMetadata0);
      creatorProperty0.setFallbackSetter(creatorProperty0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.traverse((ObjectCodec) objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 585, (Reader) null, objectMapper0, charsToNameCanonicalizer0, (char[]) null, 15, 2, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(0, 1);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, deserializationContext0, "3Yj/V#M)WY/FSEqeh");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      String string0 = "[creator property, name '";
      PropertyName propertyName1 = propertyName0.withSimpleName("[creator property, name '");
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 646, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty3.setFallbackSetter(creatorProperty0);
      CreatorProperty creatorProperty4 = null;
//      try {
        creatorProperty4 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", false, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 126, (Object) null, propertyMetadata0);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty0.isIgnorable();
      JsonDeserializer<MapperFeature> jsonDeserializer1 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer1).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature1;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(jsonGenerator_Feature1);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
//      try { 
        settableBeanProperty0.deserializeAndSet(jsonParser0, deserializationContext0, jsonGenerator_Feature0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", false, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.AS_EMPTY;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 126, (Object) null, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("mHz?<!");
      creatorProperty1.setFallbackSetter(creatorProperty0);
      Class<Annotation> class2 = Annotation.class;
      settableBeanProperty0.getAnnotation(class2);
      creatorProperty0.isIgnorable();
      JsonDeserializer<MapperFeature> jsonDeserializer1 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer1).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(jsonGenerator_Feature3);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
//      try { 
        settableBeanProperty1.deserializeAndSet(jsonParser0, deserializationContext0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class0 = Annotation.class;
      annotationMap0.get(class0);
      JavaType javaType0 = typeFactory0.constructParametricType(class0, (JavaType[]) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(853);
      placeholderForType0.actualType();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 853, (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      Class<Annotation> class1 = Annotation.class;
      FromStringDeserializer.findDeserializer(class1);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "1E");
      PropertyName propertyName0 = null;
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, (TypeResolutionContext) null, annotationMap0, (-3325));
      mapLikeType0.withKeyType(javaType0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapLikeType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-843), mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty2.getAnnotation(class0);
      creatorProperty0.getMember();
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
//      try { 
        creatorProperty1.setAndReturn(javaType0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty0.toString();
//      try { 
        creatorProperty0.set(placeholderForType0, "Invalid custom escape definitions; custom escape not found for character code 0x");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(562);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Integer integer0 = new Integer(0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 894, integer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.withName((PropertyName) null);
      assertEquals(894, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-251), annotationMap0, propertyMetadata0);
      Object object0 = new Object();
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, (PropertyName) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, typeFactory0, propertyMetadata0);
      DeserializationContext deserializationContext0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory0.configure(jsonFactory_Feature0, true);
      MockFile mockFile0 = new MockFile("JSON", "|");
      File file0 = MockFile.createTempFile("JSON", "JSON", (File) mockFile0);
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      // Undeclared exception!
//      try { 
        creatorProperty1.deserializeAndSet(jsonParser0, (DeserializationContext) null, placeholderForType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(576);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions* custom es,ape not'Xound for character code 0x", false, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Vector<PropertyName> vector0 = new Vector<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 576, vector0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      // Undeclared exception!
//      try { 
        creatorProperty2.set((Object) null, typeFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Invalid custom escape definitions; custom escape not found for character code 0x");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, typeFactory0, propertyMetadata0);
      DeserializationContext deserializationContext0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory0.configure(jsonFactory_Feature0, true);
      MockFile mockFile0 = new MockFile("JSON", "|");
      MockFile.createTempFile("JSON", "JSON", (File) mockFile0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(referenceType0);
      // Undeclared exception!
//      try { 
        creatorProperty1.setAndReturn(asPropertyTypeDeserializer0, objectIdResolver0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      placeholderForType0.actualType();
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 26, integer0, propertyMetadata1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      File file0 = MockFile.createTempFile("JSON", "JSON");
      JsonParser jsonParser0 = jsonFactory1.createParser(file0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
//      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParserSequence0, defaultDeserializationContext_Impl2, annotationMap0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '@JsonUnwrapped'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", false, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, typeFactory0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '\"';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 585, 585);
//      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, annotationMap0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-29));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "Failed to find default constructor of class ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, (-29), "", propertyMetadata0);
      JsonDeserializer<JsonDeserializer<Annotation>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<Annotation>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      int int0 = creatorProperty2.getCreatorIndex();
      assertEquals((-29), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, typeFactory0, propertyMetadata1);
      JsonDeserializer<ReferenceType> jsonDeserializer0 = (JsonDeserializer<ReferenceType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(585, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockThaiBuddhistDate.now();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), simpleObjectIdResolver0, propertyMetadata0);
      JsonDeserializer<Class<Module>> jsonDeserializer0 = (JsonDeserializer<Class<Module>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream("5(");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, "Invalid custom escape definitions; custom escape not found for character code 0x", propertyMetadata0);
      NullValueProvider nullValueProvider0 = null;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl1, typeFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(40);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "_k5k@", false, placeholderForType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 5909, annotationMap0, propertyMetadata0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer1, jsonDeserializer1);
      JsonDeserializer<ReferenceType> jsonDeserializer2 = (JsonDeserializer<ReferenceType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer2, jsonDeserializer2);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty2.setFallbackSetter(creatorProperty0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
      assertEquals(5909, creatorProperty1.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      assertEquals(5909, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, typeFactory0, propertyMetadata1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      assertEquals(585, settableBeanProperty0.getCreatorIndex());
      
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName((PropertyName) null);
      assertEquals(585, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, typeFactory0, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<JavaType> jsonDeserializer1 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer1, jsonDeserializer1);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty1.setFallbackSetter(settableBeanProperty0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
      assertEquals(585, creatorProperty1.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName((PropertyName) null);
      assertEquals(585, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      asPropertyTypeDeserializer0.getDefaultImpl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      TypeFactory.rawClass(class1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 109, (Object) null, propertyMetadata0);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.setFallbackSetter(creatorProperty0);
      creatorProperty0.getAnnotation(class1);
      JsonDeserializer<ChronoLocalDate> jsonDeserializer1 = (JsonDeserializer<ChronoLocalDate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0._propertyIndex = 0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      settableBeanProperty0.setManagedReferenceName("java.lang.Object");
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(109, settableBeanProperty0.getCreatorIndex());
      
      Class<ObjectNode> class2 = ObjectNode.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class2, 585);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      POJOPropertiesCollector pOJOPropertiesCollector1 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector1).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector1).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector1).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector1).getType();
      BasicBeanDescription basicBeanDescription1 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector1);
      basicBeanDescription1.getObjectIdInfo();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      assertEquals(109, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      PropertyName propertyName0 = PropertyName.construct("T#,2'M");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "T#,2'M", false, (JavaType) null);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, typeFactory0, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer1 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      creatorProperty1.fixAccess((DeserializationConfig) null);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertEquals(0, creatorProperty1.getCreatorIndex());
      
      System.setCurrentTimeMillis(294L);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      PropertyName propertyName0 = PropertyName.construct("T#,2'M");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      Class<String> class0 = String.class;
      typeFactory0.constructRawMapLikeType(class0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "T#,2'M", false, (JavaType) null);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, typeFactory0, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.assignIndex(44);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer1 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer1);
//      try { 
        creatorProperty0.set(typeFactory0, asWrapperTypeDeserializer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property 'T#,2'M'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "ozP`Wn", false, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      beanProperty_Bogus1.getContextAnnotation(class1);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Z0}ZmrOXU _R6%/o", false, placeholderForType0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer2 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer1, beanProperty_Bogus0);
      asPropertyTypeDeserializer2.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer2, annotationMap0, (AnnotatedParameter) null, (-496), (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty1.getAnnotation(class1);
      creatorProperty1.fixAccess((DeserializationConfig) null);
      assertEquals((-496), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", false, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      assertEquals(0, creatorProperty1.getCreatorIndex());
      
      creatorProperty0.getAnnotation(class1);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "subtype to register", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("subtype to register");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 109, (Object) null, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<ReferenceType>[] classArray0 = (Class<ReferenceType>[]) Array.newInstance(Class.class, 3);
      Class<ReferenceType> class2 = ReferenceType.class;
      classArray0[0] = class2;
      Class<ReferenceType> class3 = ReferenceType.class;
      classArray0[1] = class3;
      Class<ReferenceType> class4 = ReferenceType.class;
      classArray0[2] = class4;
      creatorProperty0.setViews(classArray0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty0.getAnnotation(class1);
      JsonDeserializer<ChronoLocalDate> jsonDeserializer1 = (JsonDeserializer<ChronoLocalDate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer1);
      Object object0 = new Object();
      Nulls nulls0 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls0);
//      try { 
        creatorProperty1.setAndReturn(object0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", false, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      creatorProperty0.getAnnotation(class1);
      creatorProperty0.getCreatorIndex();
      JsonDeserializer<ReferenceType> jsonDeserializer1 = (JsonDeserializer<ReferenceType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertEquals(0, creatorProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertNotSame(creatorProperty1, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(621);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      classNameIdResolver0.idFromBaseType();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions* custom es,ape not'Xound for character code 0x", true, placeholderForType0, jsonTypeInfo_As0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 621, jsonTypeInfo_As0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(584);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions* custom es,ape not'Xound for character code 0x", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyMetadata0.withDefaultValue("Invalid custom escape definitions* custom es,ape not'Xound for character code 0x");
      propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2939, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, (Object) null, propertyMetadata1);
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
//      try { 
        creatorProperty0.inject(defaultDeserializationContext0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      placeholderForType0.hasGenericTypes();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName((PropertyName) null);
      assertEquals(102, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      Class<SequenceInputStream> class2 = SequenceInputStream.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class2, 102);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject((DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      propertyMetadata0.withDescription("java.lang.Object");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, (Object) null, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.isIgnorable();
      JsonDeserializer<ReferenceType> jsonDeserializer1 = (JsonDeserializer<ReferenceType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer1);
      Class<Annotation> class2 = Annotation.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class2, 585);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject((DeserializationContext) null, objectIdGenerators_IntSequenceGenerator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.markAsIgnorable();
      creatorProperty0.isIgnorable();
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
//      try { 
        beanDeserializerFactory0.createMapDeserializer(defaultDeserializationContext_Impl0, (MapType) null, basicBeanDescription0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(643);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions* custom e7,ape not'Xound for character code 0x", false, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1631, simpleObjectIdResolver0, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(1631, settableBeanProperty0.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap.merge(annotationMap0, (AnnotationMap) null);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      int int0 = 0;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      PipedInputStream pipedInputStream0 = null;
//      try {
        pipedInputStream0 = new PipedInputStream(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pipe Size <= 0
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.AS_EMPTY;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 126, (Object) null, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("mHz?<!");
      creatorProperty1.setFallbackSetter(creatorProperty0);
      Class<Annotation> class2 = Annotation.class;
      settableBeanProperty0.getAnnotation(class2);
      assertEquals(126, settableBeanProperty0.getCreatorIndex());
      assertEquals("mHz?<!", settableBeanProperty0.getName());
      
      creatorProperty0.isIgnorable();
      JsonDeserializer<MapperFeature> jsonDeserializer1 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertNotSame(settableBeanProperty1, creatorProperty1);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, class0, propertyMetadata1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl3 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl2);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(simpleModule0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      ReferenceType referenceType2 = referenceType1.withValueHandler(objectIdGenerators_IntSequenceGenerator0);
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl2, referenceType2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Nulls nulls2 = Nulls.AS_EMPTY;
      Nulls nulls3 = Nulls.FAIL;
      propertyMetadata1.withNulls(nulls2, nulls3);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      // Undeclared exception!
//      try { 
        creatorProperty1.findInjectableValue(defaultDeserializationContext_Impl2, asPropertyTypeDeserializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      beanProperty_Bogus1.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 56319, "com.fasterxml.jackson.databind.deser.CreatorProperty", propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      ViewMatcher viewMatcher0 = creatorProperty0._viewMatcher;
      creatorProperty0._viewMatcher = null;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class2 = Object.class;
      classArray0[0] = class2;
      Class<Object> class3 = Object.class;
      classArray0[1] = class3;
      Class<Object> class4 = Object.class;
      classArray0[2] = class4;
      Class<Object> class5 = Object.class;
      classArray0[3] = class5;
      Class<Object> class6 = Object.class;
      classArray0[4] = class6;
      ViewMatcher.construct(classArray0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, jsonDeserializer0);
      creatorProperty1.isIgnorable();
      assertEquals(56319, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.AS_EMPTY;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 126, (Object) null, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("mHz?<!");
      creatorProperty1.setFallbackSetter(creatorProperty0);
      Class<Annotation> class2 = Annotation.class;
      settableBeanProperty0.getAnnotation(class2);
      creatorProperty1.getCreatorIndex();
      creatorProperty0.isIgnorable();
      settableBeanProperty0.getInjectableValueId();
      assertEquals(126, settableBeanProperty0.getCreatorIndex());
      assertEquals("mHz?<!", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, beanDeserializerFactory0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      assertEquals(102, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, (String) null, true, placeholderForType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<ReferenceType> class0 = ReferenceType.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, typeResolutionContext_Basic0, annotationMap0, 0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 0, annotationMap0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      Class<Collection> class2 = Collection.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class2);
      MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 200, mapperFeature0, propertyMetadata1);
      JsonDeserializer<ReferenceType> jsonDeserializer0 = (JsonDeserializer<ReferenceType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, jsonDeserializer1, jsonDeserializer1);
      creatorProperty3.setFallbackSetter(creatorProperty1);
      assertEquals(200, creatorProperty2.getCreatorIndex());
      assertEquals(200, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, "Invalid custom escape definitions; custom escape not found for character code 0x", propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      Class<Integer> class0 = Integer.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 585);
      settableBeanProperty0.getMember();
      assertEquals(585, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class0);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, "Invalid custom escape definitions; custom escape not found for character code 0x", propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.toString();
      creatorProperty0.getInjectableValueId();
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty1.getInjectableValueId();
      creatorProperty1.getMember();
      assertEquals(102, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      assertEquals(102, creatorProperty1.getCreatorIndex());
      
      creatorProperty0.markAsIgnorable();
      creatorProperty1.markAsIgnorable();
      assertTrue(creatorProperty1.isIgnorable());
      
      creatorProperty1.toString();
//      try { 
        creatorProperty1.set("[creator property, name ''; inject id 'null']", propertyMetadata0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CreatorProperty creatorProperty0 = null;
//      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, (PropertyName) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class0);
      asPropertyTypeDeserializer0.baseTypeName();
      Class<ReferenceType> class1 = ReferenceType.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class2);
      Integer integer0 = new Integer(585);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-17), integer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      creatorProperty0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
//      try { 
        creatorProperty0.set(object0, object1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      Object object0 = new Object();
//      try { 
        creatorProperty1.setAndReturn(object0, creatorProperty0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      Class<Annotation> class0 = Annotation.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) placeholderForType0);
      JavaType javaType0 = placeholderForType0.withHandlersFrom(arrayType0);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) arrayType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "?e*} ,|WsLf~;", false, javaType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty((BeanProperty) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, arrayType0, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, (Object) null, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Object object0 = new Object();
//      try { 
        creatorProperty0.setAndReturn(objectNode0, object0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 585);
      classNameIdResolver0.idFromValue(objectIdGenerators_IntSequenceGenerator0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator1 = new ObjectIdGenerators.IntSequenceGenerator();
      classNameIdResolver0.idFromValueAndType(objectIdGenerators_IntSequenceGenerator1, class0);
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of((Class<?>) null, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, propertyMetadata0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      CreatorProperty creatorProperty2 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      creatorProperty2.markAsIgnorable();
      creatorProperty2.toString();
//      try { 
        creatorProperty2.set(placeholderForType0, "Invalid custom escape definitions; custom escape not found for character code 0x");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("mHz?<!");
      assertEquals("mHz?<!", settableBeanProperty0.getName());
      assertEquals(102, settableBeanProperty0.getCreatorIndex());
      
      creatorProperty1.setFallbackSetter(creatorProperty0);
      assertEquals(102, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      placeholderForType0.actualType((JavaType) null);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("java.lang.Object");
      classNameIdResolver0.idFromBaseType();
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDefaultValue("java.lang.Object");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 585, propertyMetadata2, propertyMetadata2);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getInjectableValueId();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.withName((PropertyName) null);
      int int0 = creatorProperty1.getCreatorIndex();
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals(585, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.toString();
//      try { 
        creatorProperty0.set(placeholderForType0, "Invalid custom escape definitions; custom escape not found for character code 0x");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, (Object) null, propertyMetadata1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl3 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl2);
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl2, deserializerFactoryConfig0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(585);
      placeholderForType0.hasGenericTypes();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "Invalid custom escape definitions; custom escape not found for character code 0x", true, placeholderForType0);
      Class<MapperFeature> class0 = MapperFeature.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 102, "", propertyMetadata0);
      AnnotationMap annotationMap1 = new AnnotationMap();
      CreatorProperty creatorProperty1 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, 585, typeFactory0, propertyMetadata1);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty0.setFallbackSetter(creatorProperty2);
      assertEquals(585, creatorProperty2.getCreatorIndex());
  }
}
