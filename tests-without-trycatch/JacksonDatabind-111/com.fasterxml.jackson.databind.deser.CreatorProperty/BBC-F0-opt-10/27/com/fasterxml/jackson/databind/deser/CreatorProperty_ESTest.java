/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 16:27:46 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), object1, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Integer integer0 = Integer.getInteger("com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper$Base", 0);
      propertyMetadata0.withIndex(integer0);
      creatorProperty1._propertyIndex = 0;
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals((-2387), settableBeanProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty2 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertEquals((-2387), settableBeanProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 200, "", propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, (DeserializerFactory) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
      Class<Annotation> class0 = Annotation.class;
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withView(class0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(linkedHashMap0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, deserializationConfig2, (JsonParser) null, injectableValues_Std0);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl2, rootNameLookup0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No injectable id with value '' found (for property '@JsonUnwrapped')
//         //
//         verifyException("com.fasterxml.jackson.databind.InjectableValues$Std", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      Class<Module> class0 = Module.class;
      Class<Integer> class1 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      resolvedRecursiveType0.getTypeName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[PreAndSuffixTransformer('", true, (JavaType) null, jsonTypeInfo_As0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName propertyName1 = PropertyName.construct("com.fasterxml.jackson.databind.dwser.CreatorProperty");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 3, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.withNullProvider((NullValueProvider) null);
      BuilderBasedDeserializer builderBasedDeserializer0 = null;
//      try {
        builderBasedDeserializer0 = new BuilderBasedDeserializer((BuilderBasedDeserializer) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("|");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyMetadata0.withDescription("|");
      Class<BinaryNode> class1 = BinaryNode.class;
      PropertyName propertyName1 = new PropertyName("|");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, propertyName1, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapType0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std1.getContextAnnotation(class2);
      AnnotationMap.of(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2265, propertyName0, propertyMetadata0);
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getAnnotation(class3);
      creatorProperty0.withName(propertyName0);
      creatorProperty0.isIgnorable();
      creatorProperty0.toString();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertTrue(creatorProperty0.isIgnorable());
      
      settableBeanProperty0._managedReferenceName = "|";
      settableBeanProperty0.withNullProvider((NullValueProvider) null);
      assertTrue(creatorProperty0.isIgnorable());
      assertTrue(settableBeanProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      Class<Module> class0 = Module.class;
      Class<Integer> class1 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[PreAndSuffixTransformer('", true, (JavaType) null, jsonTypeInfo_As0);
      Class<Object> class2 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 4, typeBindings0, (PropertyMetadata) null);
      creatorProperty0._propertyIndex = 4;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMetadata();
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withName(propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = (CreatorProperty)creatorProperty1.withValueDeserializer(jsonDeserializer0);
      assertTrue(creatorProperty2.hasValueDeserializer());
      assertEquals(4, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, mapType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.setAndReturn(class0, annotationMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName1 = PropertyName.construct("com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer", "com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer");
      Class<Annotation> class1 = Annotation.class;
      Class<Module> class2 = Module.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getDelegateCreator();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, (TypeResolutionContext) null, annotationMap0, 0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, class2, propertyMetadata0);
      creatorProperty0.getAnnotation(class1);
      creatorProperty0.toString();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      LinkedList<PropertyName> linkedList0 = new LinkedList<PropertyName>();
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl1, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("|", "|");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, object0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("|");
      creatorProperty1.setFallbackSetter(creatorProperty0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      creatorProperty1.toString();
//      try { 
        creatorProperty1.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl2, jsonFactory_Feature0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Boolean boolean0 = Boolean.valueOf("");
      Integer integer0 = new Integer((-1955));
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "", integer0, ":VcNKkURt,'(iE_=COO");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyName0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<BinaryNode> jsonDeserializer0 = (JsonDeserializer<BinaryNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.setFallbackSetter(creatorProperty0);
      // Undeclared exception!
//      try { 
        creatorProperty2.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      Boolean boolean0 = Boolean.valueOf("");
      Integer integer0 = new Integer((-1955));
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "", integer0, ":VcNKkURt,'(iE_=COO");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyName1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      JsonDeserializer<BinaryNode> jsonDeserializer0 = (JsonDeserializer<BinaryNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.setFallbackSetter(creatorProperty0);
      // Undeclared exception!
//      try { 
        creatorProperty2.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = Integer.getInteger("Unrecognized value type for VALUE_NUMBER_FLOAT: %s, cannot serialize", integer0);
      propertyMetadata0.withIndex(integer1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 42, annotationMap0, propertyMetadata0);
      JsonDeserializer<PropertyName> jsonDeserializer0 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      propertyName0.withSimpleName("Unrecognized value type for VALUE_NUMBER_FLOAT: %s, cannot serialize");
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
//      try { 
        creatorProperty0.set(mapType0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '@JsonUnwrapped'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, arrayList0, propertyMetadata0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      PropertyName propertyName1 = propertyName0.withNamespace("}0!#P&ZBC5YMoq");
      // Undeclared exception!
//      try { 
        creatorProperty1.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, propertyName1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1306), (Object) null, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, jsonDeserializer0, jsonDeserializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 452, mapType0, propertyMetadata0);
      creatorProperty0._propertyIndex = 452;
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(452, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3937), (Object) null, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "com.fasterxml.jackson.databind.deser.std.DateDeserializers$TimestampDeserializer");
      ObjectMapper objectMapper3 = objectMapper2.addHandler((DeserializationProblemHandler) null);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
//      try { 
        creatorProperty0.findInjectableValue(deserializationContext0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '#temporary-name' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      Class<Object> class5 = Object.class;
      classArray0[4] = class5;
      Class<Object> class6 = Object.class;
      classArray0[5] = class6;
      Class<Object> class7 = Object.class;
      classArray0[6] = class7;
      creatorProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      settableBeanProperty0.getName();
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      settableBeanProperty1.withNullProvider((NullValueProvider) null);
      SettableBeanProperty settableBeanProperty2 = settableBeanProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty2.getCreatorIndex());
      assertNotSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      Class<Object> class5 = Object.class;
      classArray0[4] = class5;
      Class<Object> class6 = Object.class;
      classArray0[5] = class6;
      Class<Object> class7 = Object.class;
      classArray0[6] = class7;
      creatorProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      settableBeanProperty0.toString();
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
      assertNotSame(creatorProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("|");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<BinaryNode> class1 = BinaryNode.class;
      PropertyName propertyName1 = new PropertyName("|");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, propertyName1, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapType0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std1.getContextAnnotation(class2);
      AnnotationMap.of(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2265, propertyName0, propertyMetadata0);
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getAnnotation(class3);
      creatorProperty0.withName(propertyName0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackson.databind.type.MapLikeType");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2440), (Object) null, propertyMetadata0);
      creatorProperty0.toString();
      creatorProperty0.withSimpleName("ALLOW_COMMENTS");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
//      try { 
        creatorProperty0.inject(defaultDeserializationContext0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property 'com.fasterxml.jackson.databind.type.MapLikeType' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      SimpleModule simpleModule0 = new SimpleModule();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, simpleModule0, propertyMetadata0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), object0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      settableBeanProperty0.markAsIgnorable();
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      settableBeanProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.hasAsValue((Annotated) null);
      Integer integer0 = new Integer(2459);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "", integer0, ",Dzwy&ly4I_#");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2459, (Object) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory.defaultInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Object object0 = new Object();
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      JsonDeserializer<JsonGenerator.Feature> jsonDeserializer0 = (JsonDeserializer<JsonGenerator.Feature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      PropertyName propertyName1 = PropertyName.construct((String) null, (String) null);
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory1, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, (-2387));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName1, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-2387), simpleKeyDeserializers0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      AnnotatedMember annotatedMember0 = creatorProperty1.getMember();
      assertEquals((-2387), creatorProperty1.getCreatorIndex());
      assertNotNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("|", "|");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), (Object) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      creatorProperty0.getInjectableValueId();
      assertEquals((-2387), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      Class<Module> class0 = Module.class;
      Class<Integer> class1 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[PreAndSuffixTransformer('", true, (JavaType) null, jsonTypeInfo_As0);
      Class<Object> class2 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 4, typeBindings0, (PropertyMetadata) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMetadata();
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withName(propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      assertEquals(4, creatorProperty1.getCreatorIndex());
      
//      try { 
        creatorProperty1.setAndReturn(beanProperty_Bogus0, object0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '[PreAndSuffixTransformer(''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), object0, propertyMetadata0);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(jsonDeserializer0);
      assertEquals((-2387), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory.defaultInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyName0, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      Object object2 = new Object();
//      try { 
        creatorProperty0.setAndReturn(object2, object1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<LinkedHashMap> class1 = LinkedHashMap.class;
      MapType mapType1 = typeFactory0.constructRawMapType(class1);
      Object object0 = new Object();
      BinaryNode.valueOf((byte[]) null, 4733, 2255);
      mapType0.withKeyTypeHandler((Object) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, class0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.withName((PropertyName) null);
      mapType1.withStaticTyping();
      Object object1 = new Object();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withValueInstantiators(simpleValueInstantiators0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig2);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty1.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      Class<Module> class0 = Module.class;
      Class<Integer> class1 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      resolvedRecursiveType0.getTypeName();
      boolean boolean0 = true;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[PreAndSuffixTransformer('", true, (JavaType) null, jsonTypeInfo_As0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName propertyName1 = PropertyName.construct("com.fasterxml.jackson.databind.deser.CreatorProperty");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 3, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      // Undeclared exception!
//      try { 
        creatorProperty1.set(jsonTypeInfo_As0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, object0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty0.withName(propertyName0);
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals(1, int0);
      
      Object object1 = creatorProperty1.getInjectableValueId();
      assertNotNull(object1);
      assertEquals(1, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      mapType1.withTypeHandler(binaryNode0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = beanDeserializerFactory0.constructBeanDeserializerBuilder(defaultDeserializationContext_Impl2, basicBeanDescription0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      beanDeserializerFactory0.filterBeanProps(defaultDeserializationContext_Impl2, basicBeanDescription0, beanDeserializerBuilder0, stack0, set0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2278, (Object) null, propertyMetadata0);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl1, deserializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      mapType0.withStaticTyping();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3656, (Object) null, propertyMetadata0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, simpleObjectIdResolver0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), mapType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withName(propertyName0);
      mapType1.withStaticTyping();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty2.getAnnotation(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, jsonDeserializer0, (NullValueProvider) null);
      CreatorProperty creatorProperty4 = (CreatorProperty)creatorProperty3.withNullProvider((NullValueProvider) null);
      assertTrue(creatorProperty4.hasValueDeserializer());
      assertEquals((-2387), creatorProperty3.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<LinkedHashMap> class1 = LinkedHashMap.class;
      MapType mapType1 = typeFactory0.constructRawMapType(class1);
      Object object0 = new Object();
      BinaryNode.valueOf((byte[]) null, 4733, 2255);
      mapType0.withKeyTypeHandler((Object) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, class0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName((PropertyName) null);
      mapType1.withStaticTyping();
      Object object1 = new Object();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      // Undeclared exception!
//      try { 
        settableBeanProperty0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("'; inject id '", (String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler((Object) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 115, beanProperty_Bogus0, propertyMetadata0);
      creatorProperty0.withName(propertyName0);
      mapType1.withStaticTyping();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      // Undeclared exception!
//      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl0, creatorProperty0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), object1, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-2387), settableBeanProperty0.getCreatorIndex());
      
      settableBeanProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-2387), settableBeanProperty0.getCreatorIndex());
      
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      assertEquals((-2387), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), object1, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals((-2387), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4950, stack0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      assertEquals(4950, creatorProperty1.getCreatorIndex());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(4950, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("4", "4");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), mapType0, propertyMetadata0);
      creatorProperty0.withName(propertyName0);
      mapType1.withStaticTyping();
      Object object1 = new Object();
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
//      try { 
        creatorProperty0.setAndReturn((Object) null, "4");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '4'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), class0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.fixAccess((DeserializationConfig) null);
      Object object2 = new Object();
//      try { 
        creatorProperty0.setAndReturn(settableBeanProperty0, object2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), mapType0, propertyMetadata0);
      creatorProperty0.withName(propertyName0);
      mapType1.withStaticTyping();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl1, mapType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("4", "4");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), mapType0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      mapType1.withStaticTyping();
      Object object1 = new Object();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      settableBeanProperty0.getMember();
      settableBeanProperty0.getMember();
//      try { 
        settableBeanProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '4'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Module> class0 = Module.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      Class<BinaryNode> class1 = BinaryNode.class;
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class2);
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      Boolean boolean0 = Boolean.valueOf("com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator");
      Integer integer0 = new Integer((-531));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator", integer0, "com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapLikeType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-531), jsonGenerator_Feature0, propertyMetadata2);
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      creatorProperty0.getMember();
      creatorProperty0.getInjectableValueId();
      System.setCurrentTimeMillis((-531));
//      try { 
        creatorProperty0.setAndReturn(boolean0, annotationMap0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1351), (Object) null, propertyMetadata0);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
//      try { 
        creatorProperty0.set((Object) null, typeFactory0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<Annotation> class1 = Annotation.class;
      annotationMap1.get(class1);
      AnnotationMap annotationMap2 = AnnotationMap.of(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getDefaultCreator();
      Class<TypeNameIdResolver> class2 = TypeNameIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) mapType1);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType1, typeResolutionContext_Basic0, annotationMap0, 0);
      Object object1 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap2, annotatedParameter0, 0, object1, propertyMetadata0);
      creatorProperty0.setManagedReferenceName("");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0._propertyIndex = 0;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
//      try { 
        creatorProperty0.setAndReturn("", (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), object1, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-2387), settableBeanProperty0.getCreatorIndex());
      
      mapType0.withStaticTyping();
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer0);
      Class<Annotation> class1 = Annotation.class;
      settableBeanProperty1.getAnnotation(class1);
      assertEquals((-2387), settableBeanProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      
      int int0 = settableBeanProperty0.getCreatorIndex();
      assertEquals((-2387), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1502), (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1502), settableBeanProperty0.getCreatorIndex());
      
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Module> jsonDeserializer1 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals((-1502), creatorProperty1.getCreatorIndex());
      assertNotSame(settableBeanProperty1, creatorProperty1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory.defaultInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Class<ObjectInputStream> class1 = ObjectInputStream.class;
      typeFactory0.constructMapLikeType((Class<?>) class1, (JavaType) mapType1, (JavaType) mapType1);
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), object1, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      settableBeanProperty0.isIgnorable();
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer0);
//      try { 
        settableBeanProperty1.set(valueInstantiator_Base0, creatorProperty0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), mapType0, propertyMetadata0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType1, mapType1);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      Class<Integer> class1 = Integer.class;
      ObjectIdGenerator<String> objectIdGenerator0 = objectIdGenerators_StringIdGenerator0.forScope(class1);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(objectIdGenerator0);
      ReferenceType referenceType3 = referenceType2.withContentTypeHandler(mapType1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      StringBuilder stringBuilder0 = new StringBuilder();
      creatorProperty0.isIgnorable();
      StringBuilder stringBuilder1 = placeholderForType0.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = referenceType3.getGenericSignature(stringBuilder1);
      mapType0.getGenericSignature(stringBuilder2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      mapType1.withStaticTyping();
      Object object1 = new Object();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
//      try { 
        settableBeanProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext0, defaultDeserializationContext0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = new PropertyName((String) null, (String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler((Object) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMetadata();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), propertyName1, propertyMetadata0);
      creatorProperty0.withName(propertyName0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig2);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      // Undeclared exception!
//      try { 
        creatorProperty1.findInjectableValue(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), object1, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      settableBeanProperty0.toString();
      assertEquals((-2387), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(mapType1);
      ValueInstantiator.Base valueInstantiator_Base2 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base2.getIncompleteParameter();
      Object object2 = new Object();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMetadata();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), jsonGenerator_Feature0, propertyMetadata0);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty2.getAnnotation(class1);
      CreatorProperty creatorProperty3 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), (Object) null, propertyMetadata0);
      creatorProperty3.withName(propertyName0);
//      try { 
        creatorProperty3.set(mapType1, class1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), object1, propertyMetadata0);
      creatorProperty0.setManagedReferenceName("");
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
//      try { 
        settableBeanProperty0.setAndReturn(beanDeserializerFactory0, jsonGenerator_Feature0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CreatorProperty creatorProperty0 = null;
//      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      PropertyName propertyName1 = new PropertyName("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Object object0 = new Object();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      MapType mapType1 = mapType0.withKeyTypeHandler(jsonGenerator_Feature0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMetadata();
      Class<Integer> class1 = Integer.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class1);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class2);
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), (Object) null, propertyMetadata0);
      PropertyName propertyName2 = PropertyName.USE_DEFAULT;
      creatorProperty0.withName(propertyName2);
      System.setCurrentTimeMillis((-2387));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2409), object1, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      Object object2 = settableBeanProperty0.getInjectableValueId();
      assertNotNull(object2);
      assertEquals((-2409), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), annotationMap0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-2387), settableBeanProperty0.getCreatorIndex());
      
      mapType0.withStaticTyping();
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(creatorProperty0, settableBeanProperty1);
      assertEquals((-2387), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-844), annotationMap0, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertSame(settableBeanProperty0, creatorProperty0);
      assertEquals((-844), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), object1, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals((-2387), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object1 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2387), object1, propertyMetadata0);
      creatorProperty0.setManagedReferenceName("");
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withName(propertyName0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      // Undeclared exception!
//      try { 
        creatorProperty1.findInjectableValue(defaultDeserializationContext_Impl1, valueInstantiator_Base0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      Class<Module> class0 = Module.class;
      Class<Integer> class1 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[PreAndSuffixTransformer('", true, (JavaType) null, jsonTypeInfo_As0);
      Class<Object> class2 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName propertyName1 = PropertyName.construct("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 4, typeBindings0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (byte)69, (Object) null, propertyMetadata0);
      creatorProperty1.withName(propertyName0);
      creatorProperty2.markAsIgnorable();
      assertTrue(creatorProperty2.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      Class<Module> class0 = Module.class;
      Class<Integer> class1 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[PreAndSuffixTransformer('", true, (JavaType) null, jsonTypeInfo_As0);
      Class<Object> class2 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 4, typeBindings0, (PropertyMetadata) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (byte)69, (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object1 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 123, 3, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(0, 4);
//      try { 
        settableBeanProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, propertyName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '[PreAndSuffixTransformer(''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      Class<Module> class0 = Module.class;
      Class<Integer> class1 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[PreAndSuffixTransformer('", true, (JavaType) null, jsonTypeInfo_As0);
      Class<Object> class2 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 4, typeBindings0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (byte)69, (Object) null, propertyMetadata0);
      creatorProperty1.withName(propertyName0);
      assertEquals(4, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      Class<Module> class0 = Module.class;
      Class<Integer> class1 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      boolean boolean0 = true;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[PreAndSuffixTransformer('", true, (JavaType) null, jsonTypeInfo_As0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName propertyName1 = PropertyName.construct("com.fasterxml.jackson.databind.deser.CreatorProperty");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 3, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.set(jsonTypeInfo_As0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      Class<Module> class0 = Module.class;
      Class<Integer> class1 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[PreAndSuffixTransformer('", true, (JavaType) null, jsonTypeInfo_As0);
      Class<Object> class2 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 4, typeBindings0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byte byte0 = (byte) (-1);
//      try { 
        creatorProperty0.set((Object) null, valueInstantiator_Base0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '[PreAndSuffixTransformer(''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[PreAndSuffixTransformer('", "[PreAndSuffixTransformer('");
      Class<Module> class0 = Module.class;
      Class<Integer> class1 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[PreAndSuffixTransformer('", true, (JavaType) null, jsonTypeInfo_As0);
      Class<Object> class2 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 4, typeBindings0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte)0;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      NullNode nullNode0 = NullNode.instance;
      JsonParser jsonParser1 = objectMapper0.treeAsTokens(nullNode0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser1);
      JsonParser jsonParser2 = jsonParserSequence0.skipChildren();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
//      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser2, deserializationContext0, simpleObjectIdResolver0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '[PreAndSuffixTransformer(''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }
}
