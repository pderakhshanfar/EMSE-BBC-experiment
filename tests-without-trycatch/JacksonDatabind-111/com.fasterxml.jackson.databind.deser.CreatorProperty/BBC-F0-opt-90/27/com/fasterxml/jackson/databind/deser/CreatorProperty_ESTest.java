/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 16:28:36 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.net.Proxy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(242L);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, (AnnotationMap) null, (-1601));
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, annotatedParameter0, (-1), integer0, propertyMetadata0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0._managedReferenceName = "";
      creatorProperty0.assignIndex(0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty2._viewMatcher = viewMatcher0;
      AnnotatedMember annotatedMember0 = creatorProperty2.getMember();
      assertNotNull(annotatedMember0);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      
      String string0 = creatorProperty1.toString();
      assertEquals("[creator property, name ''; inject id '-1']", string0);
      
      Class<Annotation> class1 = Annotation.class;
      creatorProperty2.getAnnotation(class1);
      assertEquals((-1), creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      propertyMetadata0.withDescription("Property '%s' (type %s) has no injectable value id configured");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0._ignorable = true;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.hasAsValue((Annotated) null);
      Integer integer0 = new Integer((-1502));
      PropertyMetadata.construct((Boolean) null, "", integer0, "EK^$gU#.bN");
      annotationIntrospector1.findNameForDeserialization((Annotated) null);
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, 3, "EK^$gU#.bN", propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
//      try { 
        creatorProperty1.setAndReturn((Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.hasAsValue((Annotated) null);
      Integer integer0 = new Integer(3);
      PropertyMetadata.construct((Boolean) null, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3, (Object) null, propertyMetadata0);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
//      try { 
        creatorProperty0.setAndReturn((Object) null, "");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName((PropertyName) null);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      creatorProperty0._propertyIndex = 2;
      creatorProperty0.fixAccess((DeserializationConfig) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(242L);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, (AnnotationMap) null, (-1601));
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, annotatedParameter0, (-1), integer0, propertyMetadata0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0._managedReferenceName = "";
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      AnnotatedMember annotatedMember0 = creatorProperty2.getMember();
      assertNotNull(annotatedMember0);
      assertEquals((-1), creatorProperty2.getCreatorIndex());
      
      creatorProperty0.withName((PropertyName) null);
      String string0 = creatorProperty1.toString();
      assertEquals("[creator property, name ''; inject id '-1']", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, proxy_Type0, propertyMetadata2);
      creatorProperty0.assignIndex(0);
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      System.setCurrentTimeMillis(0);
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertNotSame(creatorProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "com.fasterxml.jackson.databind.deser.CreatorProperty");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.format.InputAccessor$Std");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "", false, resolvedRecursiveType0, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<Annotation> class1 = Annotation.class;
      annotationMap1.get(class1);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class1, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      Boolean boolean0 = new Boolean("com.fasterxml.jackson.core.format.InputAccessor$Std");
      Integer integer0 = new Integer(4073);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "com.fasterxml.jackson.databind.deser.CreatorProperty");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 4073, annotationMap1, propertyMetadata0);
      JsonDeserializer<BufferedInputStream> jsonDeserializer0 = (JsonDeserializer<BufferedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(4073, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = creatorProperty0._objectIdInfo;
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      creatorProperty0.setFallbackSetter(objectIdReferenceProperty0);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, proxy_Type0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<DecimalNode> jsonDeserializer0 = (JsonDeserializer<DecimalNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
//      try { 
        creatorProperty0.set(simpleObjectIdResolver0, bufferedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<DecimalNode> jsonDeserializer0 = (JsonDeserializer<DecimalNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3, (Object) null, propertyMetadata0);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
//      try { 
        creatorProperty0.set((Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-18), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) objectIdReferenceProperty1;
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, objectIdReferenceProperty1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, (PropertyName) null);
      ObjectIdReferenceProperty objectIdReferenceProperty2 = new ObjectIdReferenceProperty(objectIdReferenceProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) objectIdReferenceProperty2;
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 221, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(221);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject((DeserializationContext) null, propertyMetadata0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3487, (Object) null, (PropertyMetadata) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null);
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1657), proxy_Type0, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals((-1657), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("X){HX>");
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withIndex(integer0);
      propertyMetadata0.withDefaultValue("No fallback setter/field defined for creator property '");
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      propertyMetadata2.withDefaultValue("");
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.toString();
      creatorProperty0.markAsIgnorable();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Annotation> class0 = Annotation.class;
      settableBeanProperty0.getAnnotation(class0);
      creatorProperty0.withName((PropertyName) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl1, "[creator property, name ''; inject id 'null']");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("X){HX>");
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withIndex(integer0);
      propertyMetadata0.withDefaultValue("No fallback setter/field defined for creator property '");
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.toString();
      creatorProperty0.markAsIgnorable();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl1, "[creator property, name ''; inject id 'null']");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1657), (Object) null, propertyMetadata0);
      JsonParser jsonParser0 = null;
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, (PropertyName) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2124, (Object) null, propertyMetadata1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "R<&/hY!,M;XK%A@'");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1657), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      // Undeclared exception!
//      try { 
        creatorProperty1.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1567), propertyMetadata0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      assertEquals((-1567), settableBeanProperty0.getCreatorIndex());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals((-1567), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer((-1656));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1656), (Object) null, (PropertyMetadata) null);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertEquals((-1656), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      creatorProperty0._managedReferenceName = ".'Ko_uOmUEV";
      creatorProperty0.fixAccess((DeserializationConfig) null);
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-974), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(3503);
      Integer integer1 = new Integer((-3274));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-3274));
      propertyMetadata0.withIndex(integer1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      beanSerializerBuilder0.setFilterId(propertyName0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.toString();
      creatorProperty1.withName(propertyName0);
      // Undeclared exception!
//      try { 
        creatorProperty1.inject((DeserializationContext) null, beanSerializerBuilder0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3503, (Object) null, propertyMetadata0);
      creatorProperty0._propertyIndex = 3503;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(3503, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Integer integer0 = new Integer(1);
      Class<String> class0 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, (-2185));
      AnnotatedParameter annotatedParameter1 = annotatedParameter0.withAnnotations(annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, annotatedParameter1, (-1367), (Object) null, propertyMetadata0);
      Integer integer1 = new Integer((-2185));
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals((-1367), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3503, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, (JavaType) null, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Std0.getAnnotation(class0);
      Nulls nulls0 = Nulls.SET;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3503, (Object) null, propertyMetadata1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      defaultDeserializationContext_Impl2.with(beanDeserializerFactory0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl3 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty1.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl3, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Ti");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3503, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl2.with(beanDeserializerFactory0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext0, creatorProperty1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Ti");
      propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3503, (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.getInjectableValueId();
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName((PropertyName) null);
      assertEquals(3503, settableBeanProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Ti");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3503, (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(3503, settableBeanProperty0.getCreatorIndex());
      
      creatorProperty0.getInjectableValueId();
      assertEquals(3503, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Integer integer0 = new Integer((-2861));
      Integer integer1 = new Integer(1445);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Ti");
      propertyMetadata0.withIndex(integer1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3503, (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer1 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer1);
      assertEquals(3503, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, proxy_Type0, propertyMetadata2);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getCreatorIndex();
      creatorProperty0.isIgnorable();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, proxy_Type0, propertyMetadata2);
      creatorProperty0.assignIndex(0);
      creatorProperty0.getCreatorIndex();
      creatorProperty0.isIgnorable();
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(3503);
      Integer integer1 = new Integer(3503);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "", integer1, "|%]cOh?)f=40");
      Integer integer2 = new Integer(3503);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer2);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3503, proxy_Type0, propertyMetadata1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      settableBeanProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(3503, settableBeanProperty0.getCreatorIndex());
      assertNotSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 62, (Object) null, propertyMetadata0);
      creatorProperty0.toString();
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      creatorProperty0.withNullProvider((NullValueProvider) null);
      SimpleModule simpleModule0 = new SimpleModule();
//      try { 
        creatorProperty0.setAndReturn(annotationMap0, simpleModule0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Integer integer0 = new Integer((-11));
      Integer integer1 = new Integer(2149);
      Integer integer2 = new Integer(2324);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer2);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 101, integer1, propertyMetadata1);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id '2149']", string0);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("[creator property, name ''; inject id '2149']");
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      assertEquals(101, settableBeanProperty0.getCreatorIndex());
      assertEquals("[creator property, name ''; inject id '2149']", settableBeanProperty0.getName());
      assertEquals(101, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      Integer integer0 = new Integer(0);
      NullValueProvider nullValueProvider0 = null;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 7, (Object) null, propertyMetadata1);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, (NullValueProvider) null);
      creatorProperty1.withNullProvider((NullValueProvider) null);
      SimpleModule simpleModule0 = new SimpleModule();
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonSerializer0).handledType();
      // Undeclared exception!
//      try { 
        simpleModule0.addSerializer(jsonSerializer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // JsonSerializer of type com.fasterxml.jackson.databind.JsonSerializer$MockitoMock$503520570 does not define valid handledType() -- must either register with method that takes type argument  or make serializer extend 'com.fasterxml.jackson.databind.ser.std.StdSerializer'
//         //
//         verifyException("com.fasterxml.jackson.databind.module.SimpleSerializers", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withMergeInfo((PropertyMetadata.MergeInfo) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, proxy_Type0, propertyMetadata2);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(0, int0);
      
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id 'HTTP']", string0);
      
      creatorProperty0.getInjectableValueId();
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Proxy.Type.values();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      Integer integer0 = new Integer(49);
      propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1617), (Object) null, propertyMetadata1);
      creatorProperty0.getCreatorIndex();
      creatorProperty0.isIgnorable();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0.toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.set(creatorProperty0, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      Integer integer0 = new Integer((-3215));
      propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1298, (Object) null, propertyMetadata1);
      JsonDeserializer<BufferedInputStream> jsonDeserializer0 = (JsonDeserializer<BufferedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.isIgnorable();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
      propertyMetadata0.withIndex((Integer) null);
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      Integer integer0 = new Integer((-666));
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1679), (Object) null, propertyMetadata1);
      creatorProperty0.getCreatorIndex();
      creatorProperty0.isIgnorable();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1679), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(3503);
      Integer integer1 = new Integer((-3274));
      String string0 = "";
      Integer integer2 = new Integer(3503);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "", integer2, "|%]cOh?)f=40");
      String string1 = "Property '%s' (type %s) has no injectable value id configured";
      Integer integer3 = Integer.getInteger("Property '%s' (type %s) has no injectable value id configured", integer2);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer3);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3503, proxy_Type0, propertyMetadata1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(3503);
      Integer integer1 = new Integer((-3274));
      Integer integer2 = new Integer(3503);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "", integer2, "|%]cOh?)f=40");
      Integer integer3 = Integer.getInteger("Property '%s' (type %s) has no injectable value id configured", integer2);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer3);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3503, proxy_Type0, propertyMetadata1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(3503, settableBeanProperty0.getCreatorIndex());
      assertNotSame(settableBeanProperty0, creatorProperty0);
      
      settableBeanProperty0.toString();
      settableBeanProperty0.markAsIgnorable();
      assertTrue(settableBeanProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Integer integer0 = new Integer(3503);
      Integer integer1 = new Integer((-2436));
      propertyMetadata0.withIndex(integer1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.toString();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext0, integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(3503);
      Integer integer1 = new Integer((-3274));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-3274));
      propertyMetadata0.withIndex(integer1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.toString();
      // Undeclared exception!
//      try { 
        creatorProperty1.inject((DeserializationContext) null, beanSerializerBuilder0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(3503);
      Integer integer1 = new Integer((-3274));
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      Integer integer2 = new Integer((-1));
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2507, (Object) null, propertyMetadata1);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(2507, int0);
      
      creatorProperty0.isRequired();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      assertEquals(2507, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonDeserializer<String> jsonDeserializer0 = null;
      CreatorProperty creatorProperty0 = null;
//      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Integer integer0 = new Integer(3503);
      Integer integer1 = new Integer((-2436));
      propertyMetadata0.withIndex(integer1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id 'null']", string0);
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(0, int0);
      
      creatorProperty0.getMember();
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, proxy_Type0, propertyMetadata2);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id 'HTTP']", string0);
      assertEquals(0, creatorProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "XXUKYWWLB", false, simpleType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty((BeanProperty) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType0, propertyName0, typeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, referenceType0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id '[reference type, class java.io.BufferedInputStream<java.io.BufferedInputStream><[simple type, class java.io.BufferedInputStream]>]']", string0);
      
      JsonDeserializer<ReferenceType> jsonDeserializer0 = (JsonDeserializer<ReferenceType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3), propertyMetadata0, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.toString();
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
      assertSame(creatorProperty1, settableBeanProperty0);
      assertEquals((-3), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, proxy_Type0, propertyMetadata2);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(0, int0);
      
      creatorProperty0.isIgnorable();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      assertTrue(integer0.equals((Object)int0));
      
      JsonDeserializer<Proxy.Type> jsonDeserializer0 = (JsonDeserializer<Proxy.Type>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType.upgradeFrom(simpleType0, simpleType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "", false, simpleType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty((BeanProperty) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, typeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-787), simpleObjectIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.withSimpleName("'");
      propertyMetadata1.withIndex((Integer) null);
      creatorProperty0.toString();
      // Undeclared exception!
//      try { 
        creatorProperty0.inject((DeserializationContext) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(3503);
      Integer integer1 = new Integer((-3274));
      Integer integer2 = new Integer(3503);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "", integer2, "|%]cOh?)f=40");
      Integer integer3 = Integer.getInteger("Property '%s' (type %s) has no injectable value id configured", integer2);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer3);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3503, proxy_Type0, propertyMetadata1);
      creatorProperty0.toString();
//      try { 
        creatorProperty0.set((Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType.upgradeFrom(simpleType0, simpleType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "", false, simpleType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty((BeanProperty) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, typeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-787), simpleObjectIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty0.toString();
      // Undeclared exception!
//      try { 
        creatorProperty0.inject((DeserializationContext) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "XXUKYWWLB", false, simpleType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty((BeanProperty) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType0, propertyName0, typeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, referenceType0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id '[reference type, class java.io.BufferedInputStream<java.io.BufferedInputStream><[simple type, class java.io.BufferedInputStream]>]']", string0);
      
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      assertEquals(0, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "XXUKYWWLB", false, simpleType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty((BeanProperty) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType0, propertyName0, typeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, referenceType0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      String string0 = creatorProperty1.toString();
      assertEquals("[creator property, name ''; inject id '[reference type, class java.io.BufferedInputStream<java.io.BufferedInputStream><[simple type, class java.io.BufferedInputStream]>]']", string0);
      assertEquals(0, creatorProperty1.getCreatorIndex());
  }
}
