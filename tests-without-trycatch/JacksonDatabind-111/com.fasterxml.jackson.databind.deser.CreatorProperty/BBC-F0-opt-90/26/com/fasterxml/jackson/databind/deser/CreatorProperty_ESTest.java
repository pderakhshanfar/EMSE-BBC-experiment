/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 16:27:46 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.text.DateFormat;
import java.time.LocalDate;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CreatorProperty creatorProperty0 = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1153));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName0 = null;
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      CreatorProperty creatorProperty1 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3318, resolvedRecursiveType0, propertyMetadata0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      creatorProperty1.setFallbackSetter((SettableBeanProperty) null);
      JsonDeserializer<JsonNode> jsonDeserializer0 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = null;
//      try {
        creatorProperty3 = new CreatorProperty((CreatorProperty) null, jsonDeserializer0, jsonDeserializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zm");
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Random.setNextRandom((-1921));
      System.setCurrentTimeMillis(0L);
      Random.setNextRandom(0);
      System.setCurrentTimeMillis((byte)0);
      PropertyName propertyName0 = PropertyName.construct("/;x<}.8FD,(h;(-9wi");
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "/;x<}.8FD,(h;(-9wi", false, (JavaType) null);
      Class<Long> class0 = Long.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (byte)16, (Object) null, (PropertyMetadata) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<?> jsonDeserializer1 = defaultDeserializationContext_Impl1.handlePrimaryContextualization(jsonDeserializer0, beanProperty_Bogus0, (JavaType) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(jsonDeserializer1);
      assertEquals(16, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(32);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 32, annotationMap0, (PropertyMetadata) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<IntNode>[] classArray0 = (Class<IntNode>[]) Array.newInstance(Class.class, 2);
      Class<IntNode> class0 = IntNode.class;
      PropertyName propertyName1 = propertyName0.withSimpleName(":=snvuZ<");
      classArray0[0] = class0;
      Class<IntNode> class1 = IntNode.class;
      classArray0[1] = class1;
      creatorProperty0.setViews(classArray0);
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      System.setCurrentTimeMillis(0L);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      creatorProperty1.toString();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Class<String> class2 = String.class;
      Class<TypeIdResolver> class3 = TypeIdResolver.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      creatorProperty1.withName(propertyName1);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      // Undeclared exception!
//      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl0, class2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(32);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 32, annotationMap0, (PropertyMetadata) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<IntNode>[] classArray0 = (Class<IntNode>[]) Array.newInstance(Class.class, 2);
      Class<IntNode> class0 = IntNode.class;
      classArray0[0] = class0;
      Class<IntNode> class1 = IntNode.class;
      classArray0[1] = class1;
      creatorProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      System.setCurrentTimeMillis(0L);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      settableBeanProperty0.toString();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Class<String> class2 = String.class;
      Class<TypeIdResolver> class3 = TypeIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class3, (JavaType) placeholderForType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
//      try { 
        creatorProperty0.set(simpleObjectIdResolver0, resolvedRecursiveType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262147);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262147, annotationMap0, propertyMetadata0);
      JsonParser jsonParser0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty1, objectIdInfo0);
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer1, jsonDeserializer1);
      ObjectIdReferenceProperty objectIdReferenceProperty2 = new ObjectIdReferenceProperty(objectIdReferenceProperty1, propertyName0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) objectIdReferenceProperty2;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, valueInstantiator_Base0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2928);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2928, annotationMap0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2928, placeholderForType0, propertyMetadata0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
//      try { 
        creatorProperty1.setAndReturn(propertyMetadata0, annotationMap0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2916);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2916, annotationMap0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.isIgnorable();
//      try { 
        creatorProperty0.setAndReturn(annotationMap0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      propertyMetadata0.withDefaultValue("H0DO");
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      Object object1 = creatorProperty0.getInjectableValueId();
      assertNotNull(object1);
      assertEquals(262144, creatorProperty0.getCreatorIndex());
      
      JsonDeserializer<TypeNameIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(262144, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(44);
      TypeDeserializer typeDeserializer0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      JsonParser jsonParser0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName0 = null;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 44, placeholderForType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262097);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262137);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      valueInstantiator_Base0.getValueTypeDesc();
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262137, object0, propertyMetadata0);
      JsonDeserializer<Month> jsonDeserializer0 = (JsonDeserializer<Month>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      System.setCurrentTimeMillis(0L);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      Locale locale0 = new Locale("com.fasterxml.jackson.databind.JsonNode", "Cannot use Object Id with Builder-based deserialization (type ");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      BeanDeserializer beanDeserializer0 = null;
//      try {
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, set0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Month> class0 = Month.class;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      creatorProperty0.markAsIgnorable();
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      Class<TypeIdResolver> class2 = TypeIdResolver.class;
      FromStringDeserializer.findDeserializer(class2);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      System.setCurrentTimeMillis(13);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      creatorProperty0.isIgnorable();
      creatorProperty0.withName((PropertyName) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object1 = new Object();
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.setAttribute(annotationMap0, object1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262143);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, typeResolutionContext_Basic0, annotationMap0, 0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1403), typeBindings0, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      assertEquals((-1403), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      PropertyName propertyName0 = new PropertyName("");
      Class<Annotation> class0 = Annotation.class;
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, resolvedRecursiveType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      IntNode intNode0 = new IntNode(1016);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName1, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 241, intNode0, propertyMetadata0);
      PropertyName propertyName2 = PropertyName.construct("");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonDeserializer<TypeNameIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.withName(propertyName0);
      assertEquals(241, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262102);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      valueInstantiator_Base0.getIncompleteParameter();
      Month month0 = Month.SEPTEMBER;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262102, month0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      LocalDate localDate0 = MockLocalDate.ofYearDay(48, 48);
      // Undeclared exception!
//      try { 
        creatorProperty1.set(creatorProperty0, localDate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 262146;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262146);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262146, valueInstantiator_Base1, propertyMetadata0);
      PropertyName propertyName1 = PropertyName.construct("<&K`P&p,.-v", "<&K`P&p,.-v");
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      placeholderForType0.toString();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AnnotationMap annotationMap1 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, 262144, propertyMetadata0, propertyMetadata0);
      AnnotationMap.merge(annotationMap1, annotationMap0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      // Undeclared exception!
//      try { 
        settableBeanProperty0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-128));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-128), (Object) null, propertyMetadata0);
      JsonDeserializer<TypeNameIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-128), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      assertEquals((-128), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262146);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262146, placeholderForType0, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      StringReader stringReader0 = new StringReader("JSON");
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) stringReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qLd?4j");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      creatorProperty0.fixAccess((DeserializationConfig) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
//      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262146);
      placeholderForType0.getContentType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262146, (Object) null, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl1, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '#temporary-name' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertSame(settableBeanProperty0, creatorProperty0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262146);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2335, propertyName0, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getAnnotation(class0);
      JsonDeserializer<InputStream> jsonDeserializer1 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer1, jsonDeserializer1);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      JsonDeserializer<IntNode> jsonDeserializer2 = (JsonDeserializer<IntNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty3._ignorable = true;
      SettableBeanProperty settableBeanProperty0 = creatorProperty3.withValueDeserializer(jsonDeserializer2);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertTrue(settableBeanProperty0.isIgnorable());
      
      int int0 = creatorProperty3.getCreatorIndex();
      assertNotSame(creatorProperty3, settableBeanProperty0);
      assertEquals(2335, int0);
      
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals(2335, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262146);
      placeholderForType0.getContentType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      JsonDeserializer<Month> jsonDeserializer0 = (JsonDeserializer<Month>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.getCreatorIndex();
      JsonDeserializer<Month> jsonDeserializer1 = (JsonDeserializer<Month>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262146);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "'", false, placeholderForType0, jsonTypeInfo_As0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1319), pushbackInputStream0, propertyMetadata1);
      JsonDeserializer<Month> jsonDeserializer0 = (JsonDeserializer<Month>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-1319), settableBeanProperty0.getCreatorIndex());
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-1319), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262146);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262146, (Object) null, propertyMetadata0);
      Month month0 = Month.AUGUST;
      creatorProperty0._ignorable = true;
      creatorProperty0.withName(propertyName0);
      String string0 = "w.eSh'#ln`x@}M";
//      try { 
        creatorProperty0.setAndReturn(propertyMetadata1, "w.eSh'#ln`x@}M");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      creatorProperty0.getName();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-11);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, objectMapper1, byteQuadsCanonicalizer0, byteArray0, 0, (byte) (-11), true);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.deserializeSetAndReturn(uTF8StreamJsonParser0, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, propertyMetadata0, propertyMetadata0);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      creatorProperty2.getAnnotation(class1);
      Class<Object> class2 = Object.class;
      FromStringDeserializer.findDeserializer(class2);
      creatorProperty2.withNullProvider((NullValueProvider) null);
      System.setCurrentTimeMillis(1);
      System.setCurrentTimeMillis((-155L));
      System.setCurrentTimeMillis(6);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      annotationMap0.toString();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      Object object1 = new Object();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, linkedList0);
      NumericNode numericNode0 = arrayNode0.numberNode((byte)59);
      // Undeclared exception!
//      try { 
        creatorProperty1.setAndReturn("[null]", numericNode0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262126);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Month> class0 = Month.class;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262126, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(262126);
      creatorProperty0.markAsIgnorable();
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      Class<TypeIdResolver> class2 = TypeIdResolver.class;
      FromStringDeserializer.findDeserializer(class2);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      System.setCurrentTimeMillis(13);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262126);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Month> class0 = Month.class;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262126, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(262126);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      Class<TypeIdResolver> class2 = TypeIdResolver.class;
      FromStringDeserializer.findDeserializer(class2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      Class<InputStream> class3 = InputStream.class;
      settableBeanProperty0.visibleInView(class3);
      System.setCurrentTimeMillis(13);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(262126, settableBeanProperty0.getCreatorIndex());
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262126);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Month> class0 = Month.class;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262126, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(262126);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      Class<TypeIdResolver> class2 = TypeIdResolver.class;
      FromStringDeserializer.findDeserializer(class2);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      System.setCurrentTimeMillis(13);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, annotationMap0, 65599);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 59, class1, propertyMetadata0);
      JsonDeserializer<ChronoLocalDate> jsonDeserializer0 = (JsonDeserializer<ChronoLocalDate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      JsonDeserializer<TypeIdResolver> jsonDeserializer1 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      AnnotatedMember annotatedMember0 = creatorProperty1.getMember();
      assertNotNull(annotatedMember0);
      
      creatorProperty2.fixAccess((DeserializationConfig) null);
      assertEquals(59, creatorProperty2.getCreatorIndex());
      assertNotSame(creatorProperty2, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(262144, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      annotationMap0.toString();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      JsonDeserializer<Month> jsonDeserializer0 = (JsonDeserializer<Month>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.getMember();
      assertEquals(262144, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(262144, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.construct((String) null, "'");
      PropertyName propertyName1 = propertyName0.withNamespace("Kkb*");
      Integer integer0 = new Integer(262144);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, integer0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      ObjectMapper objectMapper3 = objectMapper0.setDateFormat(dateFormat0);
      Stack<Module> stack0 = new Stack<Module>();
      ObjectMapper objectMapper4 = objectMapper3.registerModules((Iterable<? extends Module>) stack0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      objectMapper4.disable(serializationFeature0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      SimpleModule simpleModule0 = new SimpleModule();
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue(deserializationContext0, simpleModule0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1284);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1284, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '@JsonUnwrapped' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      Object object1 = new Object();
//      try { 
        creatorProperty0.setAndReturn(object1, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Month> class0 = Month.class;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.FAIL;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, (Object) null, propertyMetadata2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, deserializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262126);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Month> class0 = Month.class;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      propertyName0.withSimpleName("AU*Ir");
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262126, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(471);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      ObjectMapper objectMapper2 = objectMapper1.setDateFormat(dateFormat0);
      Stack<Module> stack0 = new Stack<Module>();
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<? extends Module>) stack0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper4 = objectMapper3.disable(serializationFeature0);
      DeserializationContext deserializationContext0 = objectMapper4.getDeserializationContext();
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue(deserializationContext0, "'; inject id '");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262126);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Month> class0 = Month.class;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262126, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(471);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(262126, settableBeanProperty0.getCreatorIndex());
      
      creatorProperty0.isIgnorable();
      creatorProperty0.isIgnorable();
      assertEquals(262126, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1284);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1284, (Object) null, propertyMetadata0);
      JsonParser jsonParser0 = null;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, beanDeserializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      valueInstantiator_Base0.getValueTypeDesc();
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      JsonDeserializer<Month> jsonDeserializer0 = (JsonDeserializer<Month>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      annotationIntrospector0.hasAnySetter((Annotated) null);
      Integer integer0 = new Integer(262144);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct((Boolean) null, ".zS", integer0, ".zS");
      CreatorProperty creatorProperty1 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, (Object) null, propertyMetadata1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
//      try { 
        creatorProperty1.set(".zS", annotationIntrospector0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      valueInstantiator_Base0.getValueTypeDesc();
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      JsonDeserializer<Month> jsonDeserializer0 = (JsonDeserializer<Month>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(262144, settableBeanProperty0.getCreatorIndex());
      
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals(262144, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262126);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Month> class0 = Month.class;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262126, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(471);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      creatorProperty0.getInjectableValueId();
      assertEquals(262126, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262146);
      placeholderForType0.getContentType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262146, (Object) null, propertyMetadata0);
      creatorProperty0.setFallbackSetter((SettableBeanProperty) null);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Integer integer0 = new Integer(262146);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      valueInstantiator_Base0.getValueTypeDesc();
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      JsonDeserializer<Month> jsonDeserializer0 = (JsonDeserializer<Month>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      JsonDeserializer<Month> jsonDeserializer0 = (JsonDeserializer<Month>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Module> jsonDeserializer1 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertEquals(262144, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Month> class0 = Month.class;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, class0, propertyMetadata1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      creatorProperty0.markAsIgnorable();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object object1 = new Object();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, object1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      assertEquals(262144, creatorProperty0.getCreatorIndex());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      creatorProperty0.getMember();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(262144, settableBeanProperty0.getCreatorIndex());
      assertNotSame(creatorProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      creatorProperty0.isIgnorable();
      assertEquals(262144, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Object object0 = new Object();
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Month> class0 = Month.class;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.FAIL;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, (Object) null, propertyMetadata2);
      IntNode intNode0 = new IntNode(262144);
//      try { 
        creatorProperty0.set((Object) null, intNode0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      creatorProperty0.toString();
      PlaceholderForType placeholderForType1 = new PlaceholderForType(262144);
      placeholderForType1.actualType();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std1.getAnnotation(class2);
      AnnotationMap annotationMap1 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base2 = new ValueInstantiator.Base(placeholderForType1);
      valueInstantiator_Base2.getIncompleteParameter();
      Object object1 = new Object();
      CreatorProperty creatorProperty1 = new CreatorProperty((PropertyName) null, placeholderForType1, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(262144, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      creatorProperty0.getMember();
      assertEquals(262144, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<Annotation> class1 = Annotation.class;
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      PropertyName propertyName0 = PropertyName.construct("Property '%s' (type %s) has no injectable value id configured", "Property '%s' (type %s) has no injectable value id configured");
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<JsonNode> class2 = JsonNode.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getContextAnnotation(class1);
      Class<ChronoLocalDate> class3 = ChronoLocalDate.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class2, (Annotation) null, class3, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 262144, simpleType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      String string0 = creatorProperty2.toString();
      assertEquals(262144, creatorProperty2.getCreatorIndex());
      assertEquals("[creator property, name 'Property '%s' (type %s) has no injectable value id configured'; inject id '[simple type, class com.fasterxml.jackson.databind.JsonNode]']", string0);
      
      PropertyName propertyName1 = PropertyName.construct((String) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      assertEquals("", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      placeholderForType0.toString();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      AnnotationMap annotationMap1 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, 262144, propertyMetadata0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals(262144, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<Annotation> class1 = Annotation.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      ObjectNode objectNode1 = objectNode0.put("PKJ)d+k1J=", (Double) null);
      ObjectNode objectNode2 = objectNode1.put((String) null, (-2.14748365E9F));
      LinkedHashMap<String, JsonNode> linkedHashMap0 = new LinkedHashMap<String, JsonNode>();
      objectNode2.setAll((Map<String, ? extends JsonNode>) linkedHashMap0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, (-2591), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = beanDeserializerFactory0.constructBeanDeserializerBuilder(defaultDeserializationContext_Impl0, basicBeanDescription0);
      // Undeclared exception!
//      try { 
        beanDeserializerBuilder0.buildAbstract();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.getValueDeserializer();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty2.getAnnotation(class1);
      assertEquals((-1), creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      creatorProperty0.toString();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals(262144, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonNode> class0 = JsonNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      placeholderForType0.actualType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base1.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 262144, object0, propertyMetadata0);
      creatorProperty0.toString();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)9;
      byteArray1[6] = (byte)9;
      byteArray1[7] = (byte)9;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, objectMapper2, byteQuadsCanonicalizer1, byteArray1, (byte)9, 2, true);
      Integer integer0 = new Integer(925);
//      try { 
        creatorProperty0.deserializeSetAndReturn(uTF8StreamJsonParser0, (DeserializationContext) null, integer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }
}
