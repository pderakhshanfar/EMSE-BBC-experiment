/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 16:29:27 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.BufferedInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.math.MathContext;
import java.net.Proxy;
import java.time.temporal.ChronoField;
import java.util.ArrayDeque;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyName0, propertyMetadata0);
      propertyMetadata0.withDescription("");
      creatorProperty0._propertyIndex = 0;
      JsonDeserializer<CreatorProperty> jsonDeserializer0 = (JsonDeserializer<CreatorProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      creatorProperty0.withName(propertyName0);
      AnnotationMap.merge(annotationMap0, annotationMap0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      ChronoField chronoField0 = ChronoField.PROLEPTIC_MONTH;
      creatorProperty0.withNullProvider((NullValueProvider) null);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl1, chronoField0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      Class<ObjectIdResolver>[] classArray0 = (Class<ObjectIdResolver>[]) Array.newInstance(Class.class, 9);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      classArray0[4] = class2;
      classArray0[5] = class0;
      Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
      classArray0[6] = class3;
      creatorProperty0.withName(propertyName0);
      Class<ObjectIdResolver> class4 = ObjectIdResolver.class;
      classArray0[7] = class4;
      Class<ObjectIdResolver> class5 = ObjectIdResolver.class;
      classArray0[8] = class5;
      creatorProperty0.setViews(classArray0);
      propertyName0.withNamespace("7U:0WP!Fb<x /");
      PropertyName propertyName1 = propertyName0.withNamespace("wGTAJVMb6BaJ");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.withName(propertyName1);
      assertEquals(1156, creatorProperty1.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(1156, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      creatorProperty0.withName(propertyName0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      ChronoField chronoField0 = ChronoField.PROLEPTIC_MONTH;
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl1, chronoField0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1027));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      Class<Module> class0 = Module.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      PropertyName.construct("Property '%s' (type %s) has no injectable value id configured", "Property '%s' (type %s) has no injectable value id configured");
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      classNameIdResolver0.idFromBaseType();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, (TypeResolutionContext) null, annotationMap1, (-1027));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap1, annotatedParameter0, (-1027), "Property '%s' (type %s) has no injectable value id configured", propertyMetadata0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Integer integer0 = new Integer((-1027));
      creatorProperty0.assignIndex(240);
      simpleObjectIdResolver0.newForDeserialization(integer0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals((-1027), creatorProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-1027), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("?j1cs");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PropertyName propertyName2 = propertyName1.withSimpleName("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      propertyName0.toString();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyName2.withSimpleName("?j1cs");
      Nulls nulls0 = Nulls.SET;
      propertyName1.internSimpleName();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("need JSON Array to contain As.WRAPPER_ARRAY type information for class ");
      Nulls nulls1 = Nulls.FAIL;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls1, nulls0);
      Nulls nulls2 = Nulls.DEFAULT;
      propertyMetadata0.withNulls(nulls0, nulls2);
      PropertyMetadata propertyMetadata3 = propertyMetadata1.withDefaultValue("p,{");
      propertyMetadata2.withDescription("need JSON Array to contain As.WRAPPER_ARRAY type information for class ");
      propertyMetadata3.withIndex((Integer) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata3);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getInjectableValueId();
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      settableBeanProperty0.withNullProvider(dOMDeserializer_DocumentDeserializer0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      Object object1 = new Object();
//      try { 
        creatorProperty0.setAndReturn(nulls2, object1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1027));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      Class<Module> class0 = Module.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, (TypeResolutionContext) null, annotationMap1, (-1027));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap1, annotatedParameter0, (-1553), classNameIdResolver0, propertyMetadata0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-2076), objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      Object object0 = creatorProperty1.getInjectableValueId();
      assertNotNull(object0);
      
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(jsonDeserializer0);
      assertEquals((-2076), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      Class<Module> class0 = Module.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaTypeArray0[0], javaTypeArray0[1]);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) collectionLikeType0);
      CollectionLikeType collectionLikeType1 = collectionType0.withTypeHandler(beanProperty_Bogus0);
      PropertyName propertyName0 = new PropertyName("~'-?D");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "~'-?D", true, javaTypeArray0[1]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType1, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.setAndReturn(collectionLikeType1, nulls0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4289), (Object) null, propertyMetadata0);
      JsonDeserializer<Proxy.Type> jsonDeserializer0 = (JsonDeserializer<Proxy.Type>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
//      try { 
        creatorProperty0.set(propertyName0, propertyName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4289), (Object) null, propertyMetadata0);
      JsonDeserializer<Proxy.Type> jsonDeserializer0 = (JsonDeserializer<Proxy.Type>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
//      try { 
        creatorProperty0.set((Object) null, propertyMetadata0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      Boolean boolean0 = Boolean.valueOf(true);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("']");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, annotationMap0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      AnnotatedParameter annotatedParameter0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleType0.isThrowable();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      propertyName0.withNamespace("_");
      propertyName0.withNamespace("7{@Wer[eM0%s#8R");
      CreatorProperty creatorProperty1 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property 'wGTAJVMb6BaJ' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<Module> class0 = Module.class;
      PropertyName.construct("");
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2100), simpleType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      JsonDeserializer<Class<ObjectIdResolver>> jsonDeserializer0 = (JsonDeserializer<Class<ObjectIdResolver>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty2 = new ObjectIdReferenceProperty(objectIdReferenceProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) objectIdReferenceProperty2;
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1591), class0, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-1591), settableBeanProperty0.getCreatorIndex());
      
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty0._valueDeserializer;
      creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertEquals((-1591), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1597), class0, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1597), settableBeanProperty0.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotatedParameter annotatedParameter0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-20), propertyName0, propertyMetadata0);
      DeserializationContext deserializationContext0 = null;
      JsonParser jsonParser0 = null;
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1039, class0, propertyMetadata0);
      creatorProperty0.assignIndex(1039);
      creatorProperty0.withName(propertyName0);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        creatorProperty0.inject((DeserializationContext) null, object0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      simpleType0.withStaticTyping();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-3107), simpleObjectIdResolver0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-3107), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeDeserializer typeDeserializer0 = null;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      int int0 = 1148;
      PropertyName propertyName1 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, simpleType0, propertyName1, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1148, (Object) null, (PropertyMetadata) null);
      JsonParser jsonParser0 = null;
      DeserializationContext deserializationContext0 = null;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName1, simpleType0, propertyName1, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1148, (Object) null, (PropertyMetadata) null);
      PropertyName propertyName2 = null;
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty2.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, propertyName1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 0, class0, propertyMetadata0);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty1._fallbackSetter = (SettableBeanProperty) creatorProperty0;
      creatorProperty0.isRequired();
      TypeFactory.defaultInstance();
      DeserializationContext deserializationContext0 = null;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
//      try { 
        creatorProperty1.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      simpleType0.isReferenceType();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1._fallbackSetter = (SettableBeanProperty) creatorProperty0;
      creatorProperty1.fixAccess((DeserializationConfig) null);
      System.setCurrentTimeMillis(1156);
      System.setCurrentTimeMillis(1156);
      MockFile mockFile0 = new MockFile("");
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyName propertyName1 = propertyName0.internSimpleName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, simpleType0, propertyName1, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.fixAccess((DeserializationConfig) null);
      System.setCurrentTimeMillis(1156);
//      try { 
        creatorProperty0.set(class0, propertyName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '@JsonUnwrapped'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeFactory.defaultInstance();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Class<Module> class0 = Module.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[3]);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      Integer integer0 = new Integer((-3246));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-3291), integer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.fixAccess((DeserializationConfig) null);
      System.setCurrentTimeMillis((-3246));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1027));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, javaTypeArray0[0]);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = new AnnotationMap();
      CollectionLikeType collectionLikeType1 = CollectionLikeType.upgradeFrom(collectionLikeType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(collectionLikeType0, classNameIdResolver0, "ALLOW_NUMERIC_LEADING_ZEROS", false, collectionLikeType1);
      AnnotationMap annotationMap2 = new AnnotationMap();
      AnnotationMap annotationMap3 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaTypeArray0[0], (TypeResolutionContext) null, annotationMap1, 1172);
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<JsonDeserializer<JavaType>> jsonDeserializer1 = (JsonDeserializer<JsonDeserializer<JavaType>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Integer.getInteger(",5jn8");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = Boolean.FALSE;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType1, propertyName0, asExternalTypeDeserializer1, annotationMap0, annotatedParameter0, 0, annotatedParameter0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.withName(propertyName1);
      creatorProperty1.withName(propertyName0);
      Class<Object> class0 = Object.class;
      Class<Module> class1 = Module.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(class0, list0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings1, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0, (JavaType) placeholderForType0);
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, mapType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      propertyName0.internSimpleName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      creatorProperty0.assignIndex(1156);
      JsonDeserializer<Class<ObjectIdResolver>> jsonDeserializer0 = (JsonDeserializer<Class<ObjectIdResolver>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      assertFalse(simpleType1.isArrayType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      int int0 = 1156;
      propertyName0.internSimpleName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.set(propertyName0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<Annotation> class0 = Annotation.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      TypeFactory.defaultInstance();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1171, objectIdGenerators_StringIdGenerator0, (PropertyMetadata) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PropertyName propertyName2 = new PropertyName("v b4?T|~m(-Z|E");
      PropertyName propertyName3 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName3);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName1, simpleType0, propertyName3, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 0, objectIdGenerators_StringIdGenerator0, (PropertyMetadata) null);
      creatorProperty2.getCreatorIndex();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
//      try { 
        creatorProperty3.deserializeAndSet(jsonParser0, (DeserializationContext) null, "wGTAJVMb6BaJ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<JavaType> class0 = JavaType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3044), (Object) null, propertyMetadata0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '@JsonUnwrapped' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("|1[\"FV4Xcms!~P@0|5Q");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-1293), (Object) null, propertyMetadata1);
      PropertyName propertyName1 = new PropertyName("v b4?T|~m(-Z|E");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      creatorProperty1.withNullProvider(jsonDeserializer0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      DeserializationContext deserializationContext0 = null;
      creatorProperty1.getCreatorIndex();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      arrayNode0.traverse();
      int int0 = (-3598);
      MathContext mathContext0 = null;
//      try {
        mathContext0 = new MathContext((-3598));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Digits < 0
//         //
//         verifyException("java.math.MathContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      simpleType0.isThrowable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wGTAJVMb6BaJ");
      SimpleType simpleType1 = simpleType0.withTypeHandler((Object) null);
      Class<String> class2 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation1 = new AnnotationCollector.OneAnnotation(class2, (Annotation) null);
      Integer integer0 = new Integer((-455));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation1, (AnnotatedParameter) null, (-2052), integer0, (PropertyMetadata) null);
      propertyName0.withNamespace("wGTAJVMb6BaJ");
      creatorProperty0.withNullProvider((NullValueProvider) null);
      JsonDeserializer<BufferedInputStream> jsonDeserializer0 = (JsonDeserializer<BufferedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      JsonDeserializer<Module> jsonDeserializer1 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer1, (NullValueProvider) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      SettableBeanProperty settableBeanProperty1 = creatorProperty2.withNullProvider((NullValueProvider) null);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      
      JsonDeserializer<Module> jsonDeserializer2 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer2);
      creatorProperty1.getCreatorIndex();
      Class<Annotation> class3 = Annotation.class;
      creatorProperty2.getAnnotation(class3);
      assertEquals((-2052), creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      PropertyName.construct("wGTAJVMb6BaJ");
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName1 = PropertyName.construct("wGTAJVMb6BaJ");
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      TypeFactory.defaultInstance();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1171, (Object) null, (PropertyMetadata) null);
      PropertyName propertyName2 = new PropertyName("v b4?T|~m(-Z|E");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      DeserializationContext deserializationContext0 = null;
      creatorProperty0.getCreatorIndex();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(2799);
      JsonParser jsonParser0 = arrayNode0.traverse();
//      try { 
        creatorProperty1.deserializeAndSet(jsonParser0, (DeserializationContext) null, propertyName1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property 'wGTAJVMb6BaJ'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<Class<ObjectIdResolver>> jsonDeserializer0 = (JsonDeserializer<Class<ObjectIdResolver>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<BufferedInputStream>[] classArray0 = (Class<BufferedInputStream>[]) Array.newInstance(Class.class, 6);
      Class<BufferedInputStream> class2 = BufferedInputStream.class;
      classArray0[0] = class2;
      Class<BufferedInputStream> class3 = BufferedInputStream.class;
      classArray0[1] = class3;
      Class<BufferedInputStream> class4 = BufferedInputStream.class;
      classArray0[2] = class4;
      Class<BufferedInputStream> class5 = BufferedInputStream.class;
      classArray0[3] = class5;
      Class<BufferedInputStream> class6 = BufferedInputStream.class;
      classArray0[4] = class6;
      Class<Annotation> class7 = Annotation.class;
      creatorProperty0.getAnnotation(class7);
      Class<BufferedInputStream> class8 = BufferedInputStream.class;
      classArray0[5] = class8;
      creatorProperty0.setViews(classArray0);
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      TypeFactory.defaultInstance();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(filteringParserDelegate0);
      simpleType0.withStaticTyping();
//      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParserDelegate0, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property 'wGTAJVMb6BaJ'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      simpleType0.isThrowable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      propertyName0.withNamespace("wGTAJVMb6BaJ");
      creatorProperty0.withNullProvider((NullValueProvider) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
//      try { 
        creatorProperty1.set("wGTAJVMb6BaJ", (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property 'wGTAJVMb6BaJ'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      simpleType0.isThrowable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      propertyName0.withNamespace("wGTAJVMb6BaJ");
      creatorProperty0.withNullProvider((NullValueProvider) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
//      try { 
        creatorProperty1.set("wGTAJVMb6BaJ", (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property 'wGTAJVMb6BaJ'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      simpleType0.isThrowable();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      propertyName0.withNamespace("_");
      propertyName0.withNamespace("gfQ^d|*7%8z0k");
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      propertyName0.withNamespace("<C+|9");
      JsonDeserializer<DecimalNode> jsonDeserializer0 = (JsonDeserializer<DecimalNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<Proxy.Type> jsonDeserializer1 = (JsonDeserializer<Proxy.Type>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeFactory.defaultInstance();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(filteringParserDelegate0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      creatorProperty0.getCreatorIndex();
//      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParserDelegate0, (DeserializationContext) null, simpleType1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property 'wGTAJVMb6BaJ'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1027));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      Class<Module> class0 = Module.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, (TypeResolutionContext) null, annotationMap1, (-1027));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap1, annotatedParameter0, (-1027), "Property '%s' (type %s) has no injectable value id configured", propertyMetadata0);
      JsonDeserializer<Proxy.Type> jsonDeserializer0 = (JsonDeserializer<Proxy.Type>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      CreatorProperty creatorProperty3 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap1, annotatedParameter0, (-1553), classNameIdResolver0, propertyMetadata0);
      creatorProperty2.markAsIgnorable();
      assertTrue(creatorProperty2.isIgnorable());
      
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      CreatorProperty creatorProperty4 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-2076), objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      creatorProperty4.getInjectableValueId();
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty5 = new CreatorProperty(creatorProperty1, jsonDeserializer1, jsonDeserializer1);
      int int0 = creatorProperty3.getCreatorIndex();
      assertEquals((-1553), int0);
      
      creatorProperty2.getMember();
      assertTrue(creatorProperty2.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      PropertyName propertyName1 = propertyName0.withNamespace("");
      JsonDeserializer<DecimalNode> jsonDeserializer0 = (JsonDeserializer<DecimalNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer1);
      creatorProperty0.setFallbackSetter(settableBeanProperty1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls1);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultSetterInfo(jsonSetter_Value0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue(deserializationContext0, propertyName1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("?j1cs");
      propertyName0.internSimpleName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDefaultValue("Property '%s' (type %s) has no injectable value id configured");
      Nulls nulls0 = Nulls.SET;
      Nulls nulls1 = Nulls.SET;
      PropertyMetadata propertyMetadata3 = propertyMetadata2.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "Property '%s' (type %s) has no injectable value id configured", propertyMetadata3);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getInjectableValueId();
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      // Undeclared exception!
//      try { 
        creatorProperty1.findInjectableValue((DeserializationContext) null, bufferedInputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName.construct("wGTAJVMb6BaJ");
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      TypeFactory.defaultInstance();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1171, (Object) null, (PropertyMetadata) null);
      PropertyName propertyName1 = new PropertyName("v b4?T|~m(-Z|E");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      creatorProperty0.getCreatorIndex();
      // Undeclared exception!
//      try { 
        creatorProperty1.inject((DeserializationContext) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("?j1cs");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PropertyName propertyName2 = propertyName1.withSimpleName("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyName1.internSimpleName();
      Nulls nulls0 = Nulls.DEFAULT;
      propertyMetadata0.withDefaultValue("p,{");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("p,{");
      Nulls nulls1 = Nulls.SET;
      Nulls nulls2 = Nulls.FAIL;
      propertyMetadata1.withNulls(nulls2, nulls0);
      Nulls nulls3 = Nulls.DEFAULT;
      propertyMetadata1.withNulls(nulls1, nulls3);
      propertyMetadata1.withIndex((Integer) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata1);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getInjectableValueId();
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      Class<Annotation> class0 = Annotation.class;
      annotationMap0.get(class0);
      Object object1 = new Object();
      creatorProperty0.withName(propertyName1);
      boolean boolean0 = settableBeanProperty0.isIgnorable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeDeserializer typeDeserializer0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyName propertyName1 = propertyName0.internSimpleName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, simpleType0, propertyName1, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1148, (Object) null, (PropertyMetadata) null);
      JsonParser jsonParser0 = null;
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      // Undeclared exception!
//      try { 
        creatorProperty1.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("?j1cs");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PropertyName propertyName2 = propertyName1.withSimpleName("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      propertyName0.toString();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyName2.withSimpleName("?j1cs");
      Nulls nulls0 = Nulls.SET;
      propertyName1.internSimpleName();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("need JSON Array to contain As.WRAPPER_ARRAY type information for class ");
      Nulls nulls1 = Nulls.FAIL;
      propertyMetadata1.withNulls(nulls1, nulls0);
      Nulls nulls2 = Nulls.DEFAULT;
      propertyMetadata0.withNulls(nulls0, nulls2);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDefaultValue("p,{");
      Nulls nulls3 = Nulls.SET;
      Nulls nulls4 = Nulls.FAIL;
      propertyMetadata2.withNulls(nulls3, nulls4);
      propertyMetadata2.withIndex((Integer) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata2);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getInjectableValueId();
      DeserializationContext deserializationContext0 = null;
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      Object object1 = new Object();
//      try { 
        creatorProperty0.setAndReturn(nulls2, object1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DeserializationConfig deserializationConfig0 = null;
      ArrayDeque<NamedType> arrayDeque0 = new ArrayDeque<NamedType>();
      propertyName0.withNamespace("Property '%s' (type %s) has no injectable value id configured");
      objectMapper_DefaultTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, mapType0, arrayDeque0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = null;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
//      try { 
        creatorProperty1.setAndReturn(mapType0, typeFactory0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("?j1cs");
      PropertyName propertyName1 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyName propertyName2 = propertyName1.withSimpleName("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      propertyName0.toString();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyName2.withSimpleName("?j1cs");
      Nulls nulls0 = Nulls.SET;
      propertyName1.internSimpleName();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("need JSON Array to contain As.WRAPPER_ARRAY type information for class ");
      Nulls nulls1 = Nulls.DEFAULT;
      propertyMetadata0.withNulls(nulls0, nulls1);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDefaultValue("p,{");
      Nulls nulls2 = Nulls.SET;
      Nulls nulls3 = Nulls.FAIL;
      propertyMetadata2.withNulls(nulls2, nulls3);
      propertyMetadata2.withIndex((Integer) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata2);
      creatorProperty0.markAsIgnorable();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl2, mapType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("?j1cs");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PropertyName propertyName2 = propertyName1.withSimpleName("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      propertyName0.toString();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyName2.withSimpleName("?j1cs");
      Nulls nulls0 = Nulls.SET;
      propertyName1.internSimpleName();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("need JSON Array to contain As.WRAPPER_ARRAY type information for class ");
      Nulls nulls1 = Nulls.DEFAULT;
      propertyMetadata0.withNulls(nulls0, nulls1);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDefaultValue("p,{");
      Nulls nulls2 = Nulls.SET;
      Nulls nulls3 = Nulls.FAIL;
      propertyMetadata2.withNulls(nulls2, nulls3);
      propertyMetadata2.withIndex((Integer) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata2);
      creatorProperty0.markAsIgnorable();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl2, mapType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      ViewMatcher viewMatcher0 = creatorProperty0._viewMatcher;
      creatorProperty0._viewMatcher = null;
      creatorProperty0.setManagedReferenceName("7U:0WP!Fb<x /");
      propertyName0.withNamespace("7U:0WP!Fb<x /");
      propertyName0.withNamespace("wGTAJVMb6BaJ");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<BufferedInputStream> jsonDeserializer0 = (JsonDeserializer<BufferedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.isIgnorable();
      creatorProperty1.getInjectableValueId();
      assertEquals(1156, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      PropertyName propertyName1 = propertyName0.withNamespace("<C+|9");
      JsonDeserializer<DecimalNode> jsonDeserializer0 = (JsonDeserializer<DecimalNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class2 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      MapType mapType1 = mapType0.withContentValueHandler(annotationCollector_OneAnnotation0);
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName1, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, mapType1, (PropertyMetadata) null);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
//      try { 
        creatorProperty1.inject((DeserializationContext) null, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      TypeFactory.defaultInstance();
      Object object0 = new Object();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, object0, (PropertyMetadata) null);
      PropertyName propertyName1 = new PropertyName("More than one argument (#%d and #%d) left as delegating for Creator %s: only one allowed");
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, propertyName1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      SimpleObjectIdResolver simpleObjectIdResolver1 = new SimpleObjectIdResolver();
      // Undeclared exception!
//      try { 
        creatorProperty2.inject((DeserializationContext) null, simpleObjectIdResolver1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1027));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JavaType[] javaTypeArray0 = new JavaType[1];
      propertyName0.withNamespace(",5jn8");
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, javaTypeArray0[0]);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, (TypeResolutionContext) null, annotationMap1, (-1027));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap1, annotatedParameter0, (-1027), "Property '%s' (type %s) has no injectable value id configured", propertyMetadata0);
      JsonDeserializer<Proxy.Type> jsonDeserializer0 = (JsonDeserializer<Proxy.Type>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      JsonDeserializer<InputStream> jsonDeserializer1 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty3.withValueDeserializer(jsonDeserializer1);
      AnnotatedParameter annotatedParameter1 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, (TypeResolutionContext) null, annotationMap0, 0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride(annotatedParameter1);
      AnnotatedParameter annotatedParameter2 = (AnnotatedParameter)propertyMetadata_MergeInfo0.getter;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo1 = PropertyMetadata.MergeInfo.createForDefaults(annotatedParameter2);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
//      try { 
        creatorProperty3.inject((DeserializationContext) null, annotatedParameter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      propertyName0.withNamespace("7U:0WP!Fb<x /");
      propertyName0.withNamespace("wGTAJVMb6BaJ");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<BufferedInputStream> jsonDeserializer0 = (JsonDeserializer<BufferedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.isIgnorable();
      assertEquals(1156, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<InputStream> class1 = InputStream.class;
      simpleType0.isTypeOrSuperTypeOf(class1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1207, (Object) null, (PropertyMetadata) null);
      creatorProperty0.isIgnorable();
      assertEquals(1207, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      propertyName0.withNamespace("");
      propertyName0.withNamespace("']");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.getMember();
      assertEquals(1156, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.isThrowable();
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      propertyName0.withNamespace("7U:0WP!Fb<x /");
      propertyName0.withNamespace("wGTAJVMb6BaJ");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertEquals(1156, creatorProperty1.getCreatorIndex());
      
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals(1156, creatorProperty2.getCreatorIndex());
      
      creatorProperty0.getMember();
      assertEquals(1156, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      propertyName0.withNamespace("7U:0WP!Fb<x /");
      propertyName0.withNamespace("wGTAJVMb6BaJ");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      String string0 = creatorProperty1.toString();
      assertEquals("[creator property, name 'wGTAJVMb6BaJ'; inject id 'null']", string0);
      assertEquals(1156, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1027));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      Class<Module> class0 = Module.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, (TypeResolutionContext) null, annotationMap1, (-1027));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap1, annotatedParameter0, (-1027), "Property '%s' (type %s) has no injectable value id configured", propertyMetadata0);
      JsonDeserializer<Proxy.Type> jsonDeserializer0 = (JsonDeserializer<Proxy.Type>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty0.setFallbackSetter(creatorProperty2);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      creatorProperty0.toString();
      Integer integer0 = new Integer((-1027));
      simpleObjectIdResolver0.newForDeserialization(integer0);
//      try { 
        creatorProperty3.set("Property '%s' (type %s) has no injectable value id configured", simpleObjectIdResolver0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '@JsonUnwrapped'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1027));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      Class<Module> class0 = Module.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      PropertyName.construct("Property '%s' (type %s) has no injectable value id configured", "Property '%s' (type %s) has no injectable value id configured");
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, (TypeResolutionContext) null, annotationMap1, (-1027));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap1, annotatedParameter0, (-1027), "Property '%s' (type %s) has no injectable value id configured", propertyMetadata0);
      JsonDeserializer<Proxy.Type> jsonDeserializer0 = (JsonDeserializer<Proxy.Type>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Integer integer0 = new Integer((-1027));
      Class<Annotation> class1 = Annotation.class;
      creatorProperty2.getAnnotation(class1);
      creatorProperty0.assignIndex(240);
      simpleObjectIdResolver0.newForDeserialization(integer0);
//      try { 
        creatorProperty3.set("Property '%s' (type %s) has no injectable value id configured", simpleObjectIdResolver0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '@JsonUnwrapped'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1207, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      DeserializationContext deserializationContext0 = null;
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        creatorProperty0.inject((DeserializationContext) null, object0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("?j1cs");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PropertyName propertyName2 = propertyName1.withSimpleName("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      propertyName0.toString();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      propertyName2.withSimpleName("?j1cs");
      Nulls nulls1 = Nulls.SET;
      propertyName1.internSimpleName();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("need JSON Array to contain As.WRAPPER_ARRAY type information for class ");
      Nulls nulls2 = Nulls.DEFAULT;
      propertyMetadata1.withNulls(nulls1, nulls2);
      PropertyMetadata propertyMetadata3 = propertyMetadata2.withDefaultValue("p,{");
      Nulls nulls3 = Nulls.SET;
      Nulls nulls4 = Nulls.FAIL;
      propertyMetadata3.withNulls(nulls3, nulls4);
      propertyMetadata3.withIndex((Integer) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata3);
      creatorProperty0.markAsIgnorable();
      Object object1 = creatorProperty0.getInjectableValueId();
      DeserializationContext deserializationContext0 = null;
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, object1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<BufferedInputStream> jsonDeserializer0 = (JsonDeserializer<BufferedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyName propertyName1 = propertyName0.withNamespace("7U:0WP!Fb<x /");
      propertyName0.withNamespace("wGTAJVMb6BaJ");
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.withName(propertyName1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<BufferedInputStream> jsonDeserializer1 = (JsonDeserializer<BufferedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer1, jsonDeserializer1);
      // Undeclared exception!
//      try { 
        Proxy.Type.valueOf("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant java.net.Proxy.Type.
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      propertyName0.withNamespace("7U:0WP!Fb<x /");
      PropertyName propertyName1 = propertyName0.withNamespace("wGTAJVMb6BaJ");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.withName(propertyName1);
      assertEquals(1156, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class2 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      mapType0.withContentValueHandler(annotationCollector_OneAnnotation0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, propertyName0, (PropertyMetadata) null);
      PropertyName propertyName1 = new PropertyName("wGTAJVMb6BaJ");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
//      try { 
        creatorProperty0.inject((DeserializationContext) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      int int0 = (-1027);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1027));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      String string0 = "Property '%s' (type %s) has no injectable value id configured";
      Class<Module> class0 = Module.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, (TypeResolutionContext) null, annotationMap1, (-1027));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap1, annotatedParameter0, (-1027), "Property '%s' (type %s) has no injectable value id configured", propertyMetadata0);
      JsonDeserializer<Proxy.Type> jsonDeserializer0 = (JsonDeserializer<Proxy.Type>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
//      try { 
        creatorProperty3.inject((DeserializationContext) null, annotatedParameter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1027));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      Class<Module> class0 = Module.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, (TypeResolutionContext) null, annotationMap1, (-1027));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap1, annotatedParameter0, (-1027), "Property '%s' (type %s) has no injectable value id configured", propertyMetadata0);
      JsonDeserializer<Proxy.Type> jsonDeserializer0 = (JsonDeserializer<Proxy.Type>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      AnnotationMap annotationMap2 = new AnnotationMap();
      CreatorProperty creatorProperty3 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap2, annotatedParameter0, (-1553), classNameIdResolver0, propertyMetadata0);
      creatorProperty2.markAsIgnorable();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      CreatorProperty creatorProperty4 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-2076), objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      creatorProperty4.getInjectableValueId();
      DeserializationContext deserializationContext0 = null;
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty5 = new CreatorProperty(creatorProperty1, jsonDeserializer1, jsonDeserializer1);
      // Undeclared exception!
//      try { 
        creatorProperty5.findInjectableValue((DeserializationContext) null, creatorProperty3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 31, (Object) null, (PropertyMetadata) null);
      PropertyName propertyName1 = propertyName0.withNamespace("DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s");
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, propertyName1);
      JsonDeserializer<Annotation> jsonDeserializer0 = null;
      creatorProperty2.withValueDeserializer((JsonDeserializer<?>) null);
      // Undeclared exception!
//      try { 
        Proxy.Type.valueOf("C");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant java.net.Proxy.Type.C
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      int int0 = 1156;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<BufferedInputStream> jsonDeserializer0 = (JsonDeserializer<BufferedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      propertyName0.withNamespace("7U:0WP!Fb<x /");
      propertyName0.withNamespace("wGTAJVMb6BaJ");
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<BufferedInputStream> jsonDeserializer1 = (JsonDeserializer<BufferedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer1, jsonDeserializer1);
      BufferRecycler bufferRecycler0 = null;
      // Undeclared exception!
//      try { 
        Proxy.Type.valueOf("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant java.net.Proxy.Type.
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("wGTAJVMb6BaJ", "wGTAJVMb6BaJ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class1 = Module.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1156, (Object) null, (PropertyMetadata) null);
      PropertyName propertyName1 = propertyName0.withNamespace("7U:0WP!Fb<x /");
      PropertyName propertyName2 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Integer integer0 = new Integer(0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty2.getAnnotation(class2);
      creatorProperty2.assignIndex((-2668));
      simpleObjectIdResolver0.newForDeserialization("Cannot parse date \"%s\", problem: %s");
//      try { 
        creatorProperty1.set((Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1027));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      Class<Module> class0 = Module.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, (TypeResolutionContext) null, annotationMap1, (-1027));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap1, annotatedParameter0, (-1027), "Property '%s' (type %s) has no injectable value id configured", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, propertyName0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
//      try { 
        Proxy.Type.valueOf("Property '%s' (type %s) has no injectable value id configured");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant java.net.Proxy.Type.Property '%s' (type %s) has no injectable value id configured
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1027));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      Class<Module> class0 = Module.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, (TypeResolutionContext) null, annotationMap1, (-1027));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap1, annotatedParameter0, (-1027), "Property '%s' (type %s) has no injectable value id configured", propertyMetadata0);
      JsonDeserializer<Proxy.Type> jsonDeserializer0 = (JsonDeserializer<Proxy.Type>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Integer integer0 = new Integer((-1027));
      simpleObjectIdResolver0.newForDeserialization(integer0);
//      try { 
        creatorProperty3.set("Property '%s' (type %s) has no injectable value id configured", simpleObjectIdResolver0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '@JsonUnwrapped'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("&+g4GZ$");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PropertyName propertyName2 = propertyName1.withSimpleName("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      propertyName0.toString();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SET;
      propertyName1.internSimpleName();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("need JSON Array to contain As.WRAPPER_ARRAY type information for class ");
      Nulls nulls2 = Nulls.DEFAULT;
      propertyMetadata1.withNulls(nulls1, nulls2);
      PropertyMetadata propertyMetadata3 = propertyMetadata2.withDefaultValue("p,{");
      Nulls nulls3 = Nulls.SET;
      Nulls nulls4 = Nulls.FAIL;
      propertyMetadata3.withNulls(nulls3, nulls4);
      propertyMetadata3.withIndex((Integer) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata3);
      creatorProperty0.markAsIgnorable();
      Object object1 = creatorProperty0.getInjectableValueId();
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, object1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }
}
