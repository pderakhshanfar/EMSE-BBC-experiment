/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 06:08:18 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      creatorProperty0.assignIndex(0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withNullProvider((NullValueProvider) null);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, propertyName0, (PropertyMetadata) null);
      Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 7);
      Class<Module> class0 = Module.class;
      classArray0[0] = class0;
      Class<Module> class1 = Module.class;
      classArray0[1] = class1;
      Class<Module> class2 = Module.class;
      classArray0[2] = class2;
      Class<Module> class3 = Module.class;
      classArray0[3] = class3;
      Class<Module> class4 = Module.class;
      classArray0[4] = class4;
      Class<Module> class5 = Module.class;
      classArray0[5] = class5;
      Class<Module> class6 = Module.class;
      classArray0[6] = class6;
      creatorProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-22), propertyMetadata0, propertyMetadata1);
      creatorProperty0._propertyIndex = 2137;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-22), settableBeanProperty0.getCreatorIndex());
      
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-22));
      SettableBeanProperty settableBeanProperty2 = creatorProperty0.withNullProvider(coreXMLDeserializers_Std0);
      assertEquals((-22), settableBeanProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 256, (Object) null, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      creatorProperty0.withNullProvider(dOMDeserializer_NodeDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<RoundingMode> jsonDeserializer1 = (JsonDeserializer<RoundingMode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      
      creatorProperty0._fallbackSetter = settableBeanProperty0;
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertTrue(creatorProperty0._fallbackSetter.hasValueDeserializer());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      creatorProperty0.assignIndex(0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      propertyName0.internSimpleName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, propertyName0, propertyMetadata0);
      ObjectIdGenerator<ClassNameIdResolver> objectIdGenerator0 = (ObjectIdGenerator<ClassNameIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(jsonDeserializer0);
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, creatorProperty0, objectIdResolver0);
      CreatorProperty creatorProperty1 = (CreatorProperty)objectIdReader0.idProperty;
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, object0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMetadata();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, javaTypeArray0[0], propertyMetadata0);
      creatorProperty1._ignorable = true;
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName0);
      assertTrue(settableBeanProperty0.isIgnorable());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      FloatNode floatNode0 = new FloatNode(0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals(0, creatorProperty0.getCreatorIndex());
      
      boolean boolean0 = settableBeanProperty0.isIgnorable();
      assertTrue(boolean0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-144), (Object) null, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = creatorProperty0._objectIdInfo;
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) objectIdReferenceProperty0;
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      propertyName0.internSimpleName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, propertyName0, propertyMetadata0);
      ObjectIdGenerator<ClassNameIdResolver> objectIdGenerator0 = (ObjectIdGenerator<ClassNameIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(jsonDeserializer0);
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, creatorProperty0, objectIdResolver0);
      CreatorProperty creatorProperty1 = (CreatorProperty)objectIdReader0.idProperty;
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      placeholderForType0.isThrowable();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      Class<TypeIdResolver>[] classArray0 = (Class<TypeIdResolver>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      propertyMetadata1.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      creatorProperty0.withName(propertyName0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty1.inject(defaultDeserializationContext0, "CE8?aKzJHDTr+:m");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      propertyMetadata1.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      creatorProperty1.assignIndex(0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(referenceType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, referenceType0, propertyName1, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty1.withName(propertyName1);
      FloatNode floatNode0 = new FloatNode(0.6F);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
//      try { 
        settableBeanProperty0.set(creatorProperty1, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<RoundingMode> class0 = RoundingMode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, simpleType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std1.getContextAnnotation(class1);
      Class<JsonDeserializer> class2 = JsonDeserializer.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class2, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1583), (Object) null, (PropertyMetadata) null);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.set(class1, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = null;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      propertyMetadata0.withDefaultValue("6 S~yCv1E");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.isIgnorable();
      creatorProperty1.isIgnorable();
      Object object0 = new Object();
      creatorProperty0.toString();
      // Undeclared exception!
//      try { 
        creatorProperty1.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, (-477));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-477), annotationMap0, propertyMetadata0);
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = null;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      propertyMetadata0.withDefaultValue("6 S~yCv1E");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.isIgnorable();
      creatorProperty1.isIgnorable();
      // Undeclared exception!
//      try { 
        creatorProperty1.setAndReturn((Object) null, deserializerFactoryConfig0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<RoundingMode> class0 = RoundingMode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1412), (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
//      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, (-498));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-498), (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
//      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, (-35));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-35), (Object) null, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-35), settableBeanProperty0.getCreatorIndex());
      
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withNullProvider(dOMDeserializer_NodeDeserializer0);
      assertEquals((-35), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, (-46));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-46), annotatedParameter0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-22), propertyMetadata0, propertyMetadata1);
      creatorProperty0._propertyIndex = 2137;
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-22), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      propertyMetadata1.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      Class<ClassNameIdResolver>[] classArray0 = (Class<ClassNameIdResolver>[]) Array.newInstance(Class.class, 5);
      Class<ClassNameIdResolver> class1 = ClassNameIdResolver.class;
      classArray0[0] = class1;
      Class<ClassNameIdResolver> class2 = ClassNameIdResolver.class;
      classArray0[1] = class2;
      Class<ClassNameIdResolver> class3 = ClassNameIdResolver.class;
      classArray0[2] = class3;
      Class<ClassNameIdResolver> class4 = ClassNameIdResolver.class;
      classArray0[3] = class4;
      Class<ClassNameIdResolver> class5 = ClassNameIdResolver.class;
      classArray0[4] = class5;
      creatorProperty1.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator1 = new ObjectIdGenerators.IntSequenceGenerator();
      PropertyName propertyName1 = new PropertyName("5u+Qfzh(", "'");
      PropertyMetadata propertyMetadata3 = propertyMetadata2.withDefaultValue("5u+Qfzh(");
      PropertyMetadata propertyMetadata4 = propertyMetadata3.withRequired((Boolean) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, placeholderForType0, propertyName1, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, beanProperty_Bogus0, propertyMetadata4);
      creatorProperty0.withName(propertyName1);
      FloatNode floatNode0 = new FloatNode(1);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
//      try { 
        settableBeanProperty0.set(propertyMetadata1, propertyName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, 0);
      Object object0 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, object0, propertyMetadata0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Object object1 = new Object();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0._fallbackSetter = settableBeanProperty0;
      SimpleObjectIdResolver simpleObjectIdResolver1 = new SimpleObjectIdResolver();
//      try { 
        creatorProperty0.setAndReturn(object1, simpleObjectIdResolver1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<BeanSerializer> class1 = BeanSerializer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("P2E\"u_[x&0>-pWl5+");
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = javaType0;
      resolvedRecursiveType0.refine(class2, typeBindings1, javaType0, javaTypeArray0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaTypeArray0[2], typeResolutionContext_Basic0, annotationMap0, (-84));
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class2, typeBindings1, javaTypeArray0[3], javaTypeArray0, javaTypeArray0[0]);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, collectionLikeType0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      JsonParser jsonParser0 = jsonFactory3.createParser("");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
//      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, objectIdGenerators_IntSequenceGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, (-23));
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 24, object0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("$Mwc2qrNiRFPOc");
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature1);
      JsonParser jsonParser0 = jsonFactory4.createParser(",Nc");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      NamedType namedType0 = new NamedType(class0);
//      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl1, namedType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName.construct("-7");
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 15, annotationMap0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      AnnotatedMember annotatedMember0 = creatorProperty1.getMember();
      assertEquals(15, creatorProperty1.getCreatorIndex());
      assertNotNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-9));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      referenceType0.getTypeName();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SL.U-");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-9), "[reference type, class java.lang.Object<$-8><$-8>]", propertyMetadata0);
      placeholderForType0.getInterfaces();
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      annotationMap0.annotations();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      int int0 = settableBeanProperty0.getCreatorIndex();
      assertEquals((-9), int0);
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-9), (Object) null, propertyMetadata0);
      JsonDeserializer<JavaType> jsonDeserializer1 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      asExternalTypeDeserializer0.baseTypeName();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      settableBeanProperty1.getInjectableValueId();
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getGenericSignature();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, annotationMap0, propertyMetadata0);
      creatorProperty0.withName(propertyName0);
//      try { 
        creatorProperty0.set((Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      propertyName0.toString();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, annotationMap0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertEquals(0, creatorProperty1.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 224, classNameIdResolver0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature1, false);
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0);
      // Undeclared exception!
//      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, (DeserializationContext) null, jsonFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, 0);
      Object object0 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, object0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      creatorProperty0.getCreatorIndex();
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      Object object1 = new Object();
//      try { 
        creatorProperty0.set(simpleType0, object1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-9));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      referenceType0.getTypeName();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-9), "[reference type, class java.lang.Object<$-8><$-8>]", propertyMetadata0);
      placeholderForType0.getInterfaces();
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      annotationMap0.annotations();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.getCreatorIndex();
      creatorProperty0.fixAccess((DeserializationConfig) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      creatorProperty0._fallbackSetter = settableBeanProperty0;
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("[p^y't8Y(");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)0;
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0, (int) (byte)0, 0);
      annotationMap0.annotations();
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, (DeserializationContext) null, jsonFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, (-1889));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      int int0 = 0;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext0, class0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-9));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      referenceType0.getTypeName();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-9), "[reference type, class java.lang.Object<$-8><$-8>]", propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      annotationMap0.annotations();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.getCreatorIndex();
      creatorProperty0.fixAccess((DeserializationConfig) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("[p^y't8Y(");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)0;
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0, (int) (byte)0, 0);
//      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, (DeserializationContext) null, jsonFactory0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, 0);
      Object object0 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, object0, propertyMetadata0);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 2942);
      // Undeclared exception!
//      try { 
        creatorProperty0.inject((DeserializationContext) null, object0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-9));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      referenceType0.getTypeName();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 13, "[reference type, class java.lang.Object<$-8><$-8>]", propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.getCreatorIndex();
      creatorProperty0.fixAccess((DeserializationConfig) null);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals(13, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      referenceType0.getTypeName();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      propertyMetadata0.withDescription("CE8?aKzJHDTr+:m");
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      simpleObjectIdResolver0.newForDeserialization(asExternalTypeDeserializer0);
      FloatNode floatNode0 = new FloatNode(559.8F);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2049, floatNode0, propertyMetadata0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      int int0 = creatorProperty2.getCreatorIndex();
      assertEquals(2049, int0);
      
      creatorProperty2.fixAccess((DeserializationConfig) null);
      FromStringDeserializer.findDeserializer(class0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      referenceType0.getTypeName();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      propertyMetadata0.withDescription("5u+Qfzh(");
      Object object0 = new Object();
      beanProperty_Bogus0.getWrapperName();
      Object object1 = new Object();
      FloatNode.valueOf(0.6F);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-3151), (Object) null, propertyMetadata0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, simpleObjectIdResolver0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer((-2314));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, placeholderForType0, propertyMetadata0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      simpleObjectIdResolver0.newForDeserialization((Object) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      FloatNode floatNode0 = new FloatNode(86.7F);
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(floatNode0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2314), objectIdResolver0, propertyMetadata0);
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals((-2314), int0);
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      Class<RoundingMode> class1 = RoundingMode.class;
      FromStringDeserializer.findDeserializer(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, annotationMap0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty2.getAnnotation(class1);
      assertEquals(0, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, 0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Internal error: failed to locate expected buffered tokens");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata1);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator1 = new ObjectIdGenerators.IntSequenceGenerator();
//      try { 
        creatorProperty0.set(simpleObjectIdResolver0, objectIdGenerators_IntSequenceGenerator1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap1, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, annotationMap1, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      assertEquals(0, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      JavaType javaType0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      String string0 = "";
      PropertyName propertyName1 = propertyName0.withSimpleName("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = null;
//      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, asExternalTypeDeserializer0, propertyMetadata0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(integer0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, objectIdResolver0, propertyMetadata0);
      creatorProperty1.getCreatorIndex();
      creatorProperty1.fixAccess((DeserializationConfig) null);
      creatorProperty0.markAsIgnorable();
      int int0 = creatorProperty0.getCreatorIndex();
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", false, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, asExternalTypeDeserializer0, propertyMetadata0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(integer0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, objectIdResolver0, propertyMetadata0);
      creatorProperty1.getCreatorIndex();
      creatorProperty1.fixAccess((DeserializationConfig) null);
      FromStringDeserializer.findDeserializer(class0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, placeholderForType0);
      Class<SimpleModule> class0 = SimpleModule.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer((-2576));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("CE8?aKzJHDTr+:m");
      PropertyMetadata propertyMetadata2 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata2.withDescription("No fallback setter/field defined for creator property '");
      Object object0 = new Object();
      PropertyMetadata propertyMetadata3 = propertyMetadata1.withDescription("No fallback setter/field defined for creator property '");
      Object object1 = new Object();
      beanProperty_Bogus0.getWrapperName();
      Object object2 = new Object();
      Object object3 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2597, object3, propertyMetadata3);
      JsonDeserializer<RoundingMode> jsonDeserializer0 = (JsonDeserializer<RoundingMode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      BeanDeserializerBuilder beanDeserializerBuilder1 = new BeanDeserializerBuilder(beanDeserializerBuilder0);
      DeserializationConfig deserializationConfig0 = beanDeserializerBuilder1._config;
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0._findCustomArrayDeserializer((ArrayType) null, (DeserializationConfig) null, (BeanDescription) null, asExternalTypeDeserializer0, jsonDeserializer1);
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(2597, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 170, objectIdGenerators_IntSequenceGenerator0, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty1._viewMatcher = viewMatcher0;
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.getCreatorIndex();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
//      try { 
        creatorProperty0.set(propertyMetadata0, class0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<FloatNode> class0 = FloatNode.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0]);
      Class<Object> class1 = Object.class;
      referenceType0.refine(class1, typeBindings0, javaTypeArray0[1], javaTypeArray0);
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, classNameIdResolver0, (String) null, false, javaType0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, (BeanProperty) null);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata2 = propertyMetadata0.withDescription("Property '%s' (type %s) has no injectable value id configured");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[1], propertyName0, asPropertyTypeDeserializer1, annotationMap0, (AnnotatedParameter) null, 164, integer0, propertyMetadata2);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      creatorProperty0.getAnnotation(class2);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 164, javaTypeArray0[0], propertyMetadata1);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.getAnnotation(class2);
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals(164, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      propertyMetadata1.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      creatorProperty1.assignIndex(1);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(referenceType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, referenceType0, propertyName1, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty1.withName(propertyName1);
      FloatNode floatNode0 = new FloatNode(0.6F);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
//      try { 
        settableBeanProperty0.set(creatorProperty1, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, placeholderForType0);
      Class<SimpleModule> class0 = SimpleModule.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer((-2576));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      propertyMetadata0.withDescription("CE8?aKzJHDTr+:m");
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata1.withDescription("No fallback setter/field defined for creator property '");
      Object object0 = new Object();
      Version version0 = new Version(3492, 3492, (-2576), "lMgC0~1(", "CE8?aKzJHDTr+:m", "CE8?aKzJHDTr+:m");
      SimpleModule simpleModule0 = new SimpleModule(";dw6m <&[>.fJ,8Yke", version0);
      SimpleModule simpleModule1 = simpleModule0.setDeserializerModifier((BeanDeserializerModifier) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2576), simpleModule1, propertyMetadata1);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      // Undeclared exception!
//      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMetadata();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      // Undeclared exception!
//      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl1, beanDeserializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      propertyMetadata1.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator1 = new ObjectIdGenerators.IntSequenceGenerator();
      PropertyName propertyName1 = new PropertyName("5u+Qfzh(", "'");
      PropertyMetadata propertyMetadata3 = propertyMetadata2.withDefaultValue("5u+Qfzh(");
      PropertyMetadata propertyMetadata4 = propertyMetadata3.withRequired((Boolean) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, placeholderForType0, propertyName1, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, beanProperty_Bogus0, propertyMetadata4);
      creatorProperty0.withName(propertyName1);
      FloatNode floatNode0 = new FloatNode(1);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
//      try { 
        settableBeanProperty0.set(propertyMetadata1, propertyName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMetadata();
      propertyMetadata0.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, javaTypeArray0[0], propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName0);
      settableBeanProperty0.isIgnorable();
      int int0 = settableBeanProperty0.getCreatorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<FloatNode> class0 = FloatNode.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings.createIfNeeded(class0, javaType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName1 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<Annotation> class1 = Annotation.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getAnnotation(class1);
      PropertyName propertyName2 = new PropertyName((String) null, (String) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0, jsonTypeInfo_As0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, javaType0, propertyName1, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 30, propertyMetadata0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<RoundingMode> jsonDeserializer0 = (JsonDeserializer<RoundingMode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      Object object0 = creatorProperty2.getInjectableValueId();
      assertEquals(30, creatorProperty2.getCreatorIndex());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, annotationMap0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertEquals(0, creatorProperty1.getCreatorIndex());
      
      System.setCurrentTimeMillis(0L);
      Object object0 = creatorProperty0.getInjectableValueId();
      assertNotNull(object0);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      propertyMetadata1.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      creatorProperty0.withName(propertyName0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty1.inject(defaultDeserializationContext0, "CE8?aKzJHDTr+:m");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMetadata();
      propertyMetadata0.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, javaTypeArray0[0], propertyMetadata0);
      creatorProperty1.withName(propertyName0);
      FloatNode floatNode0 = new FloatNode(0);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
//      try { 
        creatorProperty1.set(floatNode0, roundingMode0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      String string0 = "5u+Qfzh(";
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      Integer integer1 = new Integer(0);
//      try { 
        creatorProperty0.set(integer1, asExternalTypeDeserializer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      propertyMetadata1.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 170, objectIdGenerators_IntSequenceGenerator0, propertyMetadata0);
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals(170, int0);
      
      creatorProperty1.fixAccess((DeserializationConfig) null);
      assertEquals(170, creatorProperty1.getCreatorIndex());
      
      creatorProperty1.toString();
      assertEquals(170, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<FloatNode> class0 = FloatNode.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0]);
      Class<Object> class1 = Object.class;
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, javaTypeArray0[1], javaTypeArray0);
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, classNameIdResolver0, (String) null, false, javaType0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, (BeanProperty) null);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType1, propertyName0, asPropertyTypeDeserializer1, annotationMap0, (AnnotatedParameter) null, 1, javaType0, propertyMetadata1);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      assertEquals(1, creatorProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(1, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<RoundingMode> class0 = RoundingMode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      simpleType0.isReferenceType();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyName0, (PropertyMetadata) null);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertSame(settableBeanProperty0, creatorProperty0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      referenceType0.hasGenericTypes();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      propertyMetadata1.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 170, objectIdGenerators_IntSequenceGenerator0, propertyMetadata0);
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals(170, int0);
      
      creatorProperty1.fixAccess((DeserializationConfig) null);
      creatorProperty0.getMember();
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMetadata();
      FloatNode floatNode0 = new FloatNode((-1440.8619F));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, (NullValueProvider) null);
      creatorProperty2.getMember();
      assertEquals(0, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      FloatNode floatNode0 = new FloatNode((-1440.8619F));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, (NullValueProvider) null);
//      try { 
        creatorProperty2.setAndReturn("5u+Qfzh(", propertyMetadata1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      propertyMetadata1.withDescription("com.fasterxml.jackson.databind.util.NameTransformer$2");
      propertyMetadata1.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 170, objectIdGenerators_IntSequenceGenerator0, propertyMetadata0);
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals(170, int0);
      
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      assertEquals(170, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = null;
//      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, propertyName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<FloatNode> class0 = FloatNode.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0]);
      Class<Object> class1 = Object.class;
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, javaTypeArray0[1], javaTypeArray0);
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, classNameIdResolver0, (String) null, false, javaType0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, (BeanProperty) null);
      asPropertyTypeDeserializer0.baseTypeName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType1, propertyName0, asPropertyTypeDeserializer1, annotationMap0, (AnnotatedParameter) null, 1, javaType0, propertyMetadata1);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      FloatNode floatNode0 = new FloatNode((-1440.8619F));
      creatorProperty0.withName(propertyName0);
//      try { 
        creatorProperty1.setAndReturn(roundingMode0, floatNode0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "CE8?aKzJHDTr+:m", propertyMetadata0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      propertyMetadata1.withDescription("CE8?aKzJHDTr+:m");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      assertEquals(1, creatorProperty1.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "2H&`ui-x", true, referenceType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      referenceType0.getTypeName();
      propertyMetadata0.withDescription("CE8?aKzJHDTr+:m");
      Object object0 = new Object();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "", true, placeholderForType0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      Object object1 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer1, annotationMap0, (AnnotatedParameter) null, 1, object1, propertyMetadata0);
      creatorProperty0.getValueDeserializer();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(1, settableBeanProperty0.getCreatorIndex());
      assertNotSame(creatorProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<FloatNode> class0 = FloatNode.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      Class<FloatNode> class1 = FloatNode.class;
      ReferenceType referenceType0 = ReferenceType.construct(class1, typeBindings0, javaType0, javaTypeArray0, javaType0);
      Class<Object> class2 = Object.class;
      JavaType javaType1 = referenceType0.refine(class2, typeBindings0, javaType0, javaTypeArray0);
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType1, javaType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, classNameIdResolver0, (String) null, false, referenceType0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, (BeanProperty) null);
      asPropertyTypeDeserializer1.baseTypeName();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      propertyMetadata0.withDefaultValue("com.fasterxml.jackson.databind.node.FloatNode");
      PropertyName propertyName1 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType0, propertyName1, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata1);
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getAnnotation(class3);
//      try { 
        creatorProperty0.setAndReturn((Object) null, javaType1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<FloatNode> class0 = FloatNode.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0]);
      Class<Object> class1 = Object.class;
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, javaTypeArray0[1], javaTypeArray0);
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, classNameIdResolver0, (String) null, false, javaType0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, (BeanProperty) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType1, propertyName0, asPropertyTypeDeserializer1, annotationMap0, (AnnotatedParameter) null, 1, javaType0, propertyMetadata1);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      FloatNode floatNode0 = new FloatNode((-1440.8619F));
//      try { 
        creatorProperty1.setAndReturn(roundingMode0, floatNode0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-25));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer((-25));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-25), "1{nz4vVKf/_.", propertyMetadata0);
      JsonDeserializer<RoundingMode> jsonDeserializer0 = null;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("");
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      javaTypeArray0[1] = (JavaType) referenceType0;
      javaTypeArray0[2] = (JavaType) referenceType0;
      PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", (Integer) null, "5u+Qfzh(");
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) referenceType0;
      // Undeclared exception!
//      try { 
        placeholderForType0.refine(class0, typeBindings1, referenceType0, javaTypeArray0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "CE8?aKzJHDTr+:m", true, placeholderForType0);
      Class<String> class0 = String.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "5u+Qfzh(", integer0, "5u+Qfzh(");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "1{nz4vVKf/_.", propertyMetadata0);
      JsonDeserializer<RoundingMode> jsonDeserializer0 = null;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("");
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      javaTypeArray0[1] = (JavaType) referenceType0;
      javaTypeArray0[2] = (JavaType) referenceType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) referenceType0;
      // Undeclared exception!
//      try { 
        placeholderForType0.refine(class0, typeBindings1, referenceType0, javaTypeArray0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }
}
