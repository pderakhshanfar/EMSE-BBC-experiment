/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:31:41 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectIdValueProperty_ESTest extends ObjectIdValueProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      Class<SettableBeanProperty>[] classArray0 = (Class<SettableBeanProperty>[]) Array.newInstance(Class.class, 2);
      objectIdValueProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertSame(settableBeanProperty0, objectIdValueProperty0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      objectIdValueProperty0.assignIndex(0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertSame(settableBeanProperty0, objectIdValueProperty0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdGenerator<JsonFactory.Feature> objectIdGenerator0 = (ObjectIdGenerator<JsonFactory.Feature>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<PropertyName> jsonDeserializer0 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      objectIdValueProperty0.assignIndex(385);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer1 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withValueDeserializer(jsonDeserializer1);
      assertNotSame(settableBeanProperty0, objectIdValueProperty0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 1);
      objectIdValueProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withNullProvider((NullValueProvider) null);
      assertNull(settableBeanProperty0.getManagedReferenceName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      objectIdValueProperty0.assignIndex(0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withNullProvider((NullValueProvider) null);
      assertFalse(settableBeanProperty0.isRequired());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdGenerator<JsonFactory.Feature> objectIdGenerator0 = (ObjectIdGenerator<JsonFactory.Feature>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<PropertyName> jsonDeserializer0 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      objectIdValueProperty0.assignIndex(385);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withNullProvider((NullValueProvider) null);
      assertEquals("", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      Class<SettableBeanProperty>[] classArray0 = (Class<SettableBeanProperty>[]) Array.newInstance(Class.class, 2);
      objectIdValueProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withName(propertyName0);
      assertNotSame(objectIdValueProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      objectIdValueProperty0.assignIndex(0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withName(objectIdReader0.propertyName);
      assertEquals(0, settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdGenerator<JsonFactory.Feature> objectIdGenerator0 = (ObjectIdGenerator<JsonFactory.Feature>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<PropertyName> jsonDeserializer0 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      objectIdValueProperty0.assignIndex(385);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withName(propertyName0);
      assertEquals("", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<String> class1 = String.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class1, class1, class0);
      ObjectIdGenerator<InputStream> objectIdGenerator0 = (ObjectIdGenerator<InputStream>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        objectIdValueProperty0.deserializeSetAndReturn(jsonParserSequence0, defaultDeserializationContext_Impl0, object0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        objectIdValueProperty0.deserializeSetAndReturn(jsonParserSequence0, defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<String> class1 = String.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class1, class1, class0);
      ObjectIdGenerator<InputStream> objectIdGenerator0 = (ObjectIdGenerator<InputStream>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator_IdKey0, (ObjectIdGenerator.IdKey) null).when(objectIdGenerator0).key(any());
      Integer integer0 = new Integer((-1));
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      objectIdValueProperty0.deserializeAndSet(jsonParserSequence0, defaultDeserializationContext_Impl0, integer0);
      // Undeclared exception!
//      try { 
        objectIdValueProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, jsonParser0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, (ObjectIdResolver) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
//      try { 
        objectIdValueProperty1.deserializeSetAndReturn(jsonParserSequence0, defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        objectIdValueProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, objectIdValueProperty0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<String> class1 = String.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class1, class1, class0);
      ObjectIdGenerator<InputStream> objectIdGenerator0 = (ObjectIdGenerator<InputStream>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator_IdKey0, (ObjectIdGenerator.IdKey) null).when(objectIdGenerator0).key(any());
      Integer integer0 = new Integer((-1));
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      objectIdValueProperty0.deserializeAndSet(jsonParserSequence0, defaultDeserializationContext_Impl0, integer0);
      // Undeclared exception!
//      try { 
        objectIdValueProperty0.deserializeAndSet(jsonParserSequence0, defaultDeserializationContext_Impl0, integer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleObjectIdResolver0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1906, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 3325, 3052, true);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
//      try { 
        objectIdValueProperty1.deserializeAndSet(uTF8StreamJsonParser0, defaultDeserializationContext_Impl0, byteQuadsCanonicalizer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdGenerator<Long> objectIdGenerator0 = (ObjectIdGenerator<Long>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<List<PropertyName>> jsonDeserializer0 = (JsonDeserializer<List<PropertyName>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = null;
//      try {
        objectIdValueProperty0 = new ObjectIdValueProperty((ObjectIdValueProperty) null, objectIdReader0.propertyName);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdValueProperty objectIdValueProperty0 = null;
//      try {
        objectIdValueProperty0 = new ObjectIdValueProperty((ObjectIdValueProperty) null, jsonDeserializer0, jsonDeserializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = null;
//      try {
        objectIdValueProperty0 = new ObjectIdValueProperty((ObjectIdReader) null, propertyMetadata0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      // Undeclared exception!
//      try { 
        objectIdValueProperty0.setAndReturn((Object) null, propertyName0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, simpleType0, jsonTypeInfo_As0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 83, simpleType0, propertyMetadata0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, objectIdGenerator0, jsonDeserializer0, creatorProperty0, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
//      try { 
        objectIdValueProperty0.setAndReturn((Object) null, propertyMetadata0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<String> class1 = String.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class1, class1, class0);
      ObjectIdGenerator<InputStream> objectIdGenerator0 = (ObjectIdGenerator<InputStream>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator_IdKey0).when(objectIdGenerator0).key(any());
      Integer integer0 = new Integer((-1));
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = objectIdValueProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = new PropertyName("");
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, (ObjectIdResolver) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, propertyName0);
      assertFalse(objectIdValueProperty1.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, objectIdGenerators_StringIdGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdReader objectIdReader1 = new ObjectIdReader(simpleType0, propertyName0, objectIdGenerators_StringIdGenerator0, (JsonDeserializer<?>) null, objectIdValueProperty0, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, propertyMetadata0);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        objectIdValueProperty1.set(object0, objectIdGenerators_StringIdGenerator0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<String> class1 = String.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class1, class1, class0);
      ObjectIdGenerator<InputStream> objectIdGenerator0 = (ObjectIdGenerator<InputStream>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator_IdKey0).when(objectIdGenerator0).key(any());
      Integer integer0 = new Integer((-3));
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(simpleType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdReader objectIdReader1 = new ObjectIdReader(simpleType0, propertyName0, objectIdGenerator0, jsonDeserializer0, objectIdValueProperty0, objectIdReader0.resolver);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      // Undeclared exception!
//      try { 
        objectIdValueProperty1.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, arrayList0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdGenerator<InputStream> objectIdGenerator0 = (ObjectIdGenerator<InputStream>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = objectIdValueProperty0.getAnnotation(class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdGenerator<JsonFactory.Feature> objectIdGenerator0 = (ObjectIdGenerator<JsonFactory.Feature>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<PropertyName> jsonDeserializer0 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      AnnotatedMember annotatedMember0 = objectIdValueProperty0.getMember();
      assertNull(annotatedMember0);
  }
}
