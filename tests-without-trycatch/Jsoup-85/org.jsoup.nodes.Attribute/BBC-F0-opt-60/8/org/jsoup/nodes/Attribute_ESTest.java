/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 01:13:23 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("noshade", "noshade");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(":gt(%d)", ":gt(%d)");
      MockPrintStream mockPrintStream0 = new MockPrintStream(":gt(%d)");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) mockPrintStream0, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("open", "open");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("qjtYX1^ZY&F;Y", ".3RH;(cFud#TG)x");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
      assertEquals(".3RH;(cFud#TG)x", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("6+F c", (String) null, document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("9/ 2Z", "{i^MZgmQP:QcOjo 'YN", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("C&gJ5Myo ac", ".", attributes0);
      attributes0.put(attribute0);
      attribute0.setValue("allowfullscreen");
      assertEquals("allowfullscreen", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-X\"E};XZi\"n.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("kolF", "30iT#LlXs9", attributes0);
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
      assertEquals("30iT#LlXs9", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("allowfullscreen");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = new Attribute("              ", (String) null);
      String string0 = attribute0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attribute attribute0 = new Attribute("v", (String) null);
      String string0 = attribute0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("noshade", "noshade");
      String string0 = attribute0.getValue();
      assertEquals("noshade", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("FdyFnvniJ", "");
      String string0 = attribute0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = new Attribute("       ", "       ");
      String string0 = attribute0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.shouldCollapseAttribute("9/ 2Z", ".", (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("muted", ".");
      // Undeclared exception!
//      try { 
        attribute0.setValue(".");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("selected", true);
      Attributes attributes2 = attributes1.put("data-", "selected");
      String[] stringArray0 = new String[1];
      attributes1.vals = stringArray0;
      Attribute attribute0 = new Attribute("data-", ")_c3;jNo", attributes2);
      // Undeclared exception!
//      try { 
        attribute0.setValue("s(KgBzm|;7CEU*nvY");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("3`-", "3`-");
      attributes1.put(attribute0);
      attributes1.keys = null;
      // Undeclared exception!
//      try { 
        attribute0.setKey("`");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("&V-fojoSLHC5:N^%.|2", "width must be > 0", attributes0);
      // Undeclared exception!
//      try { 
        attribute0.setKey("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("data-a", true);
      Attribute attribute0 = new Attribute("data-a", "data-a", attributes0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
//      try { 
        attribute0.setKey("m$");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.isDataAttribute((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.isBooleanAttribute((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "^J<w2C2{7Lgzr");
      // Undeclared exception!
//      try { 
        Attribute.html("^J<w2C2{7Lgzr", "^J<w2C2{7Lgzr", (Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        Attribute.html("eGp@1{7Zbj_T", (String) null, (Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        Attribute.html((String) null, (String) null, (Appendable) null, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
//      try { 
        Attribute.html("", ":gt(%d)", (Appendable) pipedWriter0, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("noshade", "noshade");
      MockPrintStream mockPrintStream0 = new MockPrintStream("noshade");
      // Undeclared exception!
//      try { 
        attribute0.html((Appendable) mockPrintStream0, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attribute attribute0 = new Attribute("noresize", "noresize");
      PipedWriter pipedWriter0 = new PipedWriter();
//      try { 
        attribute0.html((Appendable) pipedWriter0, (Document.OutputSettings) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.createFromEncoded((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.createFromEncoded((String) null, "v");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
//      try {
        attribute0 = new Attribute("", "", attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = null;
//      try {
        attribute0 = new Attribute("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("noshade");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("noshade", "noshade", (Appendable) mockPrintStream0, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute("v", "v");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "v");
      // Undeclared exception!
//      try { 
        attribute0.html((Appendable) charBuffer0, (Document.OutputSettings) null);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data->}O16Bm", (String) null, attributes0);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("noshade", "noshade");
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.parser.parseerrorlist", (String) null, attributes0);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("u8enSloqZm)v$", "u8enSloqZm)v$", (Attributes) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data->}O16Bm", (String) null, attributes0);
      Attribute attribute1 = new Attribute("data->}O16Bm", " />");
      boolean boolean0 = attribute0.equals(attribute1);
      //  // Unstable assertion: assertTrue(attribute1.equals((Object)attribute0));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("I70i'l/", "I70i'l/");
      boolean boolean0 = attribute0.equals(attributes0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute("rX*65D0bWtJ", "");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = new Attribute("u8enSloqZm)v$", "u8enSloqZm)v$", (Attributes) null);
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.parser.XmlTreeBuilder", "org.jsoup.parser.XmlTreeBuilder", attributes0);
      Attribute attribute1 = new Attribute("M'SNWWl!'lAkP", "menu");
      boolean boolean0 = attribute1.equals(attribute0);
      assertFalse(boolean0);
      assertEquals("menu", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attribute attribute0 = new Attribute("data->}O16Bm", " />");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
      assertEquals(" />", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data->}O16Bm", (String) null, attributes0);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "allowfullscreen");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("noshade", "noshade");
      String string0 = attribute0.html();
      assertEquals("noshade", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringWriter stringWriter0 = new StringWriter();
      Attribute.html((String) null, "org.jsoup.parser.XmlTreeBuilder", (Appendable) stringWriter0, document_OutputSettings0);
      assertEquals("null=\"org.jsoup.parser.XmlTreeBuilder\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringWriter stringWriter0 = new StringWriter();
      Attribute.html("N;Pi2<$(", "", (Appendable) stringWriter0, document_OutputSettings0);
      assertEquals("N;Pi2<$(=\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Attribute.html("a>;6EUr( 6+.>H", "       ", (Appendable) stringWriter0, document_OutputSettings1);
      assertEquals("a>;6EUr( 6+.>H=\"       \"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = new Attribute("              ", (String) null);
      String string0 = attribute0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("data-a", true);
      Attribute attribute0 = new Attribute("data-a", "data-a", attributes1);
      attribute0.setValue("'");
      assertEquals("'", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-a", "data-a", attributes0);
      attribute0.setValue("'");
      assertEquals("'", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("applet", "applet", attributes0);
      attribute0.setKey("applet");
      assertEquals("applet", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attribute attribute0 = new Attribute("org.jsoup.parser.XmlTreeBuilder", "org.jsoup.parser.XmlTreeBuilder");
      attribute0.setKey("M'SNWWl!'lAkP");
      assertEquals("org.jsoup.parser.XmlTreeBuilder", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attribute attribute0 = new Attribute(":gt(%d)", ":gt(%d)");
      // Undeclared exception!
//      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("3`-", "3`-");
      attributes0.put(attribute0);
      attribute0.setKey("applet");
      assertEquals("applet", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Attribute attribute0 = new Attribute("data->}O16Bm", "?#~<QM`#+CI");
      boolean boolean0 = attribute0.isDataAttribute();
      assertEquals("?#~<QM`#+CI", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.parser.XmlTreeBuilder", "org.jsoup.parser.XmlTreeBuilder", attributes0);
      String string0 = attribute0.getKey();
      assertEquals("org.jsoup.parser.XmlTreeBuilder", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("+#]e!", "ssjOsv>*!4%");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("`");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
//      try { 
        attribute0.html((Appendable) charBuffer0, (Document.OutputSettings) null);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-a", "data-a", attributes0);
      String string0 = attribute0.toString();
      assertEquals("data-a=\"data-a\"", string0);
  }
}
