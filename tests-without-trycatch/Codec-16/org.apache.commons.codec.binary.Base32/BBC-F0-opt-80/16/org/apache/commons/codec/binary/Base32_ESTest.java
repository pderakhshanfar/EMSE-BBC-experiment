/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 21:19:33 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)93);
      boolean boolean0 = base32_0.isInAlphabet("C[9w?`L;3+da]IG*lb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte) (-90));
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte) (-15);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(24, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode((byte[]) null, 0, 0, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32(7);
      byte[] byteArray0 = new byte[11];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.encode(byteArray0);
      byte[] byteArray2 = base32_0.encode(byteArray1);
      byte[] byteArray3 = base32_0.decode(byteArray2);
      Base32 base32_1 = new Base32(true, (byte)108);
      // Undeclared exception!
//      try { 
        base32_1.decode(byteArray3, 0, 255, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 24
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)78;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (int) (byte) (-82);
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (int) (byte)5, (int) (byte)31, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32(7);
      byte[] byteArray0 = base32_0.decode("[b&");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode((byte[]) null, 0, 0, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base32 base32_0 = new Base32(0, byteArray0, false, (byte)1);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.encode((byte[]) null, (int) (byte)0, 824, baseNCodec_Context0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_0 = new Base32(6);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (-1), 6, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(true, (byte)77);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32((byte)88, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [X\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32(6);
      boolean boolean0 = base32_0.isInAlphabet((byte)29);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base32 base32_0 = new Base32(13, byteArray0, false);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-12));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)108);
      boolean boolean0 = base32_0.isInAlphabet((byte)49);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base32 base32_0 = new Base32((int) (byte)88);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-8);
      Base32 base32_0 = new Base32((byte)9, byteArray0);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(13, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base32 base32_0 = new Base32(13, byteArray0, false);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32(7);
      byte[] byteArray0 = new byte[11];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-331);
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, 7, (-2222), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus -331
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32(7);
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      byte[] byteArray2 = base32_0.encode(byteArray1);
      String string0 = base32_0.encodeToString(byteArray2);
      assertEquals("JFDECVKDKFFUESKGIFKUGUKLIJEUMQKVINIUWQSJIZAVKQ2QJI2UQVJWKQZFASJ5", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[0];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (-2438), (-2438), baseNCodec_Context0);
      base32_0.encode(byteArray0, 997, (-1176), baseNCodec_Context0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_0 = new Base32(6);
      byte[] byteArray0 = new byte[3];
      baseNCodec_Context0.modulus = 1179;
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (int) (byte)0, (-2157), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus 1179
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32(7);
      byte[] byteArray0 = base32_0.decode(":* VO`HN&?K,gWj");
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-114), (byte) (-43)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32(6);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      byte[] byteArray2 = base32_0.decode(byteArray1);
      assertEquals(3, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32(7);
      byte[] byteArray0 = base32_0.decode("8zIJfdM");
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-8);
      Base32 base32_0 = new Base32((byte)9, byteArray0);
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = new Base32(7);
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      byte[] byteArray2 = base32_0.decode(byteArray1);
      assertEquals(11, byteArray2.length);
      assertEquals(24, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32((byte)32);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte)9;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32((byte)93, byteArray0, false, (byte)9);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(1633, (byte[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineLength 1633 > 0, but lineSeparator is null
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("UTF-16");
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-53)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)93);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.decode((byte[]) null, (-1319), 309, baseNCodec_Context0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base32 base32_0 = new Base32((-2412), byteArray0, true);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }
}
