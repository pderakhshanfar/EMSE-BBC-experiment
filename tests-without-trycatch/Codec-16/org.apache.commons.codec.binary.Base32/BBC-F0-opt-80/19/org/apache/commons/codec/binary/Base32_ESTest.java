/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 21:36:04 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)88;
      Base32 base32_0 = new Base32(830, byteArray0, true);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[26];
      byteArray0[18] = (byte) (-34);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(48, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = base32_0.decode("B`O6BjH&\"V17REYaj\"");
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("BO6BHV17RC\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = base32_0.decode("B`O6BjH&\"V17REYaj\"");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 540, (int) (byte)0, baseNCodec_Context0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)94, (byte)12, (byte) (-72), (byte) (-4), (byte)39, (byte) (-37)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[26];
      byteArray0[2] = (byte) (-64);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      byte[] byteArray2 = base32_0.decode(byteArray1);
      assertEquals(26, byteArray2.length);
      assertEquals(48, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)51;
      Base32 base32_0 = new Base32((-176), byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-3314);
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, 6, 10, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base32 base32_0 = new Base32((-2770), byteArray0, true, (byte) (-55));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 23, 0, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-92));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.encode((byte[]) null, (-629), 1508, baseNCodec_Context0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = base32_0.decode("B`O6BjH&\"V17REYaj\"");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, 73, 57, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 73
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)108);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (-842), (-351), (BaseNCodec.Context) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)66;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(365, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [\u0000B\u0000\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32((byte)13);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = base32_0.decode("B`O6BjH&\"V17REYaj\"");
      boolean boolean0 = base32_0.containsAlphabetOrPad(byteArray0);
      assertArrayEquals(new byte[] {(byte)94, (byte)12, (byte) (-72), (byte) (-4), (byte)39, (byte) (-37)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      boolean boolean0 = base32_0.isInAlphabet((byte)69);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base32 base32_0 = new Base32(830, byteArray0, true);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(24, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[3];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-1696);
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (-254), (-254), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus -1696
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[4];
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("AAAAAAA=", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32(10);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32(10);
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(20, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[26];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 1987, (-722), baseNCodec_Context0);
      base32_0.encode(byteArray0, (int) (byte) (-64), 2, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[26];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 76;
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, 2594, (int) (byte) (-72), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus 76
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)69;
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)33, (byte)8, (byte)66, (byte)16}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32(10);
      byte[] byteArray0 = base32_0.decode("<J(Va'*|X'qoDLdL\"`d");
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)77, (byte)110, (byte)53}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)33, (byte)8, (byte)66}, byteArray1);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-77);
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(0, byteArray0, false, (byte)32);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(false, (byte)68);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)83;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(5, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [\u0000S\u0000\u0000\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(1, (byte[]) null, false, (byte)125);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineLength 1 > 0, but lineSeparator is null
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = new Base32(10);
      byte[] byteArray0 = base32_0.decode("lineSeparator must not contain Base32 characters: [");
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)119}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("<G>5{v$9<M&wi<");
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)55}, byteArray0);
  }
}
