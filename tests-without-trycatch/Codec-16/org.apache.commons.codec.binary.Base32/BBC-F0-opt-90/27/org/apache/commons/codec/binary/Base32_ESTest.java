/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 02:40:40 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32 base32_0 = new Base32();
      Base32 base32_1 = new Base32();
      byte byte0 = (byte) (-76);
      base32_1.isInAlphabet((byte) (-76));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_1.ensureBufferSize(5, baseNCodec_Context0);
      base32_0.encode(byteArray0, 26, 0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      Base32 base32_2 = new Base32(64, byteArray0, true);
      base32_2.decode(byteArray0, 2918, 2918, baseNCodec_Context1);
      int int0 = 44;
      Base32 base32_3 = new Base32(44, byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32();
      base32_0.isInAlphabet((byte)96);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      base32_0.encodeToString(byteArray0);
      byte[] byteArray1 = base32_0.decode("7777773A74AAAAAAAA======");
      base32_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32();
      base32_0.isInAlphabet((byte)8);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((byte)8, baseNCodec_Context0);
      Base32 base32_1 = new Base32(4041, byteArray0, false);
      base32_1.encode(byteArray0, 4041, 64, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_1.decode(byteArray0, (int) (byte)8, 33, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)8);
      base32_1.isInAlphabet((byte) (-75));
      base32_0.encode(byteArray0, 4648, (-3414), baseNCodec_Context0);
      byte byte0 = (byte)3;
      Base32 base32_2 = new Base32(114, byteArray0, true, (byte)3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[16];
      base32_0.encodeToString(byteArray0);
      base32_0.decode("");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((-3282), baseNCodec_Context0);
      Base32 base32_1 = new Base32(76, byteArray1, false);
      base32_1.encode(byteArray1, 9, (-1478), baseNCodec_Context0);
      base32_0.decode(byteArray0, 24, 1, baseNCodec_Context0);
      Base32 base32_2 = new Base32(2883, byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      base32_0.isInAlphabet((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize(240, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)0);
      base32_0.isInAlphabet((byte)94);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.modulus = 64;
      Base32 base32_1 = new Base32((-3820));
      base32_1.encode(byteArray1, 76, (int) (byte) (-11), baseNCodec_Context0);
      base32_1.decode(byteArray1, 8, (int) (byte)94, baseNCodec_Context1);
      base32_1.decode(byteArray1, 76, 4363, baseNCodec_Context1);
      base32_1.decode(byteArray1, 76, (-750), baseNCodec_Context0);
      base32_0.isInAlphabet((byte)10);
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)10;
      BaseNCodec.Context baseNCodec_Context3 = new BaseNCodec.Context();
      Base32 base32_2 = new Base32((-2220));
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray1, 240, (int) (byte)10, baseNCodec_Context1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus 64
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)124);
      base32_0.isInAlphabet((byte)124);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)124;
      base32_0.encodeToString(byteArray0);
      byte[] byteArray1 = base32_0.decode("UTF-8");
      Base32 base32_1 = new Base32(64);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.eof = true;
      base32_0.decode((byte[]) null, (int) (byte)124, (-3949), baseNCodec_Context0);
      base32_0.decode(byteArray1, 55, (int) (byte)124, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      base32_0.isInAlphabet((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode((Object) "AA\u0000\u0000\u0000\u0000\u0000\u0000");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)18;
      byteArray1[4] = (byte) (-50);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      Base32 base32_1 = null;
//      try {
        base32_1 = new Base32((byte)0, byteArray1, false, (byte)72);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      base32_0.isInAlphabet((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base32_0.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Object object0 = base32_0.decode((Object) "[3wpwQi+r5S>3Yd,");
      base32_0.encode(object0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (int) (byte)0, 100, baseNCodec_Context2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      Base32 base32_0 = new Base32((byte)0);
      base32_0.encodeToString(byteArray0);
      byte[] byteArray1 = base32_0.decode("%s[buffer=%s, currentLinePos=%s, eof=%s, ibitWorkArea=%s, lbitWorkArea=%s, modulus=%s, pos=%s, readPos=%s]");
      base32_0.isInAlphabet((byte)89);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32(1030, byteArray1);
      Base32 base32_2 = new Base32(64);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, 631, 76, baseNCodec_Context1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 631
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      boolean boolean0 = false;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32((byte)90, byteArray0, true, (byte)10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte byte0 = (byte) (-27);
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (int) (byte) (-27);
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (int) (byte) (-27), (int) (byte) (-27), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus -27
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte byte0 = (byte)124;
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(64, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)124);
      base32_0.encode(byteArray0, 64, 3351, baseNCodec_Context0);
      base32_0.decode(byteArray0, 32, 3351, baseNCodec_Context0);
      Base32 base32_1 = new Base32(true);
      Object object0 = base32_1.decode((Object) "[3wpwQi+r5S>3Yd,");
      base32_0.encode(object0);
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (-3019), 503, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3019
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(85, baseNCodec_Context0);
      Base32 base32_1 = new Base32(76, byteArray0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_1.encode(byteArray0, 85, 76, baseNCodec_Context1);
      Base32 base32_2 = new Base32(17);
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      base32_2.encode(byteArray0, 23, 23, baseNCodec_Context2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)124);
      base32_0.isInAlphabet((byte)124);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)124;
      base32_0.encodeToString(byteArray0);
      base32_0.decode("nZ>lN/X'Wt");
      base32_0.isInAlphabet((byte) (-11));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32((byte)0, byteArray0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      Base32 base32_2 = new Base32((int) (byte)124);
      // Undeclared exception!
//      try { 
        base32_1.encode(byteArray0, 3, 3374, baseNCodec_Context1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte byte0 = (byte)124;
      Base32 base32_0 = new Base32((byte)124);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(3931, baseNCodec_Context0);
      base32_0.encode(byteArray0, 3931, 3351, baseNCodec_Context0);
      base32_0.decode(byteArray0, (int) (byte)124, 3351, baseNCodec_Context0);
      // Undeclared exception!
      base32_0.decode(byteArray0, 32, 3351, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(64, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)124);
      base32_0.encode(byteArray0, 64, 3351, baseNCodec_Context0);
      base32_0.decode(byteArray0, 32, 3351, baseNCodec_Context0);
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (-3019), 503, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3019
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = 2062;
      byte[] byteArray0 = base32_0.ensureBufferSize(3931, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)124);
      base32_0.decode(byteArray0);
      int int0 = 3351;
      // Undeclared exception!
      base32_0.encode(byteArray0, 3931, 3351, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte byte0 = (byte)65;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(false, (byte)65);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32();
      base32_0.isInAlphabet((byte)37);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = null;
//      try {
        base32_1 = new Base32(349, (byte[]) null, false, (byte)2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineLength 349 > 0, but lineSeparator is null
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      Base32 base32_1 = new Base32(76, byteArray0, false, (byte) (-53));
      base32_1.isInAlphabet((byte) (-1));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_1.encode(byteArray0, 1054, (int) (byte) (-53), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (-2024), (-635), baseNCodec_Context1);
      boolean boolean0 = base32_0.isInAlphabet((byte)3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      base32_0.isInAlphabet((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("AA\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      base32_0.decode((String) null);
      base32_0.isInAlphabet((byte) (-11));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encodeAsString((byte[]) null);
      baseNCodec_Context0.lbitWorkArea = (long) 64;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte)0, 0, baseNCodec_Context1);
      baseNCodec_Context0.currentLinePos = 76;
      baseNCodec_Context0.lbitWorkArea = (long) (-1127);
      base32_0.decode((byte[]) null, 0, (-1127), baseNCodec_Context0);
      base32_0.isInAlphabet((byte) (-6));
      base32_0.isInAlphabet((byte) (-6));
      base32_0.decode((byte[]) null, 0, (-2349), baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-50));
      assertFalse(boolean0);
      
      boolean boolean1 = base32_0.isInAlphabet((byte)88);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32((-1094));
      base32_0.isInAlphabet((byte) (-71));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      base32_0.isInAlphabet((byte)0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = 0;
      base32_0.encode(byteArray1);
      baseNCodec_Context0.currentLinePos = (-32);
      base32_0.encode(byteArray1, (int) (byte) (-71), (-32), baseNCodec_Context0);
      base32_0.encode(byteArray1, (int) (byte) (-71), (-1879), baseNCodec_Context0);
      byte[] byteArray2 = new byte[0];
      base32_0.encode(byteArray2, (-1530), 599, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-95);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 2716;
      baseNCodec_Context0.toString();
      baseNCodec_Context0.ibitWorkArea = 0;
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (int) (byte)45, (-154), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus 2716
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1564;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)74;
      byteArray0[0] = (byte)74;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(1564, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [J]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = 76;
      baseNCodec_Context0.toString();
      baseNCodec_Context0.lbitWorkArea = (long) (byte)40;
      base32_0.ensureBufferSize(64, baseNCodec_Context0);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-66);
      BaseNCodec.Context baseNCodec_Context1 = null;
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (int) (byte)0, (int) (byte)0, (BaseNCodec.Context) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte byte0 = (byte)72;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32((byte)72);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      Base32 base32_0 = new Base32(0, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.currentLinePos = (-3302);
      base32_0.decode(byteArray0, 210, (-3302), baseNCodec_Context0);
      byte[] byteArray1 = base32_0.decode(byteArray0);
      byte[] byteArray2 = base32_0.encode(byteArray0);
      base32_0.isInAlphabet((byte)98);
      baseNCodec_Context0.readPos = 2107;
      base32_0.isInAlphabet((byte)9);
      base32_0.isInAlphabet((byte)98);
      base32_0.encode(byteArray2, (int) (byte)9, (int) (byte)98, baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)77, (byte)73, (byte)61, (byte)61, (byte)61, (byte)61, (byte)61, (byte)61}, byteArray2);
      
      base32_0.isInAlphabet((byte) (-5));
      base32_0.isInAlphabet((byte)33);
      baseNCodec_Context0.currentLinePos = 2283;
      base32_0.decode(byteArray1, 0, 359, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)6);
      base32_0.decode(byteArray0, 2107, 9, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)35);
      base32_0.encode(byteArray0, (int) (byte)98, 1082, baseNCodec_Context0);
      base32_0.encodeToString(byteArray1);
      base32_0.encode(byteArray0, 1910, (-1374), baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)98}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 3375;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(3375, byteArray0, true, (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)0);
      base32_0.isInAlphabet((byte)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)0, 60, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = new Base32();
//      try { 
        base32_0.encode((Object) "");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base-N encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)0;
      Base32 base32_0 = new Base32((-996), byteArray0, false);
      base32_0.isInAlphabet((byte) (-46));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (int) (byte)0, 2867, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base32 base32_0 = new Base32(8, byteArray0, false, (byte)0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.buffer = byteArray0;
      baseNCodec_Context0.buffer = byteArray0;
      baseNCodec_Context0.modulus = 0;
      baseNCodec_Context0.ibitWorkArea = (-467);
      base32_0.decode(byteArray0, 8, (int) (byte)0, baseNCodec_Context0);
      base32_0.encode(baseNCodec_Context0.buffer, 0, (-1837), baseNCodec_Context0);
      base32_0.encode(byteArray0, 0, 0, baseNCodec_Context0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-73);
      byteArray1[6] = (byte)0;
      base32_0.encode(byteArray1, (-4610), (-4610), baseNCodec_Context0);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)64;
      Base32 base32_0 = new Base32(52, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)64, (-4537), baseNCodec_Context0);
      baseNCodec_Context0.pos = (int) (byte)64;
      base32_0.isInAlphabet((byte)0);
      baseNCodec_Context0.lbitWorkArea = 0L;
      base32_0.encode(byteArray0, (-1), (-699), baseNCodec_Context0);
      base32_0.encode(byteArray0, (-3937), (int) (byte) (-39), baseNCodec_Context0);
      baseNCodec_Context0.lbitWorkArea = 255L;
      base32_0.encode(byteArray0, 0, 0, baseNCodec_Context0);
      base32_0.decode(byteArray0, 0, (-1), baseNCodec_Context0);
      base32_0.encode(byteArray0, (int) (byte)64, 64, baseNCodec_Context0);
      base32_0.encode(byteArray0, 1977, (-276), baseNCodec_Context0);
      base32_0.decode(byteArray0, 0, (int) (byte)64, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)29);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)29;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte)29;
      byteArray1[3] = (byte)29;
      byteArray1[4] = (byte)29;
      base32_0.encodeToString(byteArray1);
      byteArray0[8] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.toString();
      baseNCodec_Context0.eof = false;
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (int) (byte)29, 824, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 29
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = (-2929);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)98;
      Base32 base32_0 = new Base32((-2929), byteArray0, false);
//      try { 
        base32_0.encode((Object) null);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base-N encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 551;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)95;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(551, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [J\uFFFDb\u0000K_]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base32 base32_0 = new Base32(3298);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      base32_0.isInAlphabet("");
      byteArray0[1] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.eof = false;
      baseNCodec_Context0.eof = false;
      base32_0.encode(byteArray0, (-1828), (int) (byte)0, baseNCodec_Context0);
      base32_0.isInAlphabet((byte) (-72));
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, 5, 1957, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)124);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(3931, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)124);
      base32_0.encode(byteArray0, 3931, 3351, baseNCodec_Context0);
      base32_0.decode(byteArray0, 32, 3351, baseNCodec_Context0);
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (-1485), 32, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1485
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byte byte0 = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-127);
      Base32 base32_0 = new Base32(0, byteArray0, true, (byte) (-115));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = (int) (byte) (-115);
      base32_0.ensureBufferSize(11, baseNCodec_Context0);
      baseNCodec_Context0.readPos = 1839;
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, 2289, 545, (BaseNCodec.Context) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base32 base32_0 = new Base32(1787);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)7;
      byteArray0[0] = (byte)7;
      byte byte1 = (byte)5;
      byteArray0[1] = (byte)5;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encodeAsString(byteArray0);
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (-1), (int) (byte)5, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 19, 0, baseNCodec_Context0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)93;
      Base32 base32_0 = new Base32(886, byteArray0, true);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      base32_0.isInAlphabet((byte)0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.readResults(byteArray0, (byte)0, (-1), baseNCodec_Context0);
      base32_0.encodeAsString(byteArray0);
      boolean boolean0 = base32_0.isInAlphabet((byte)6);
      assertFalse(boolean0);
  }
}
