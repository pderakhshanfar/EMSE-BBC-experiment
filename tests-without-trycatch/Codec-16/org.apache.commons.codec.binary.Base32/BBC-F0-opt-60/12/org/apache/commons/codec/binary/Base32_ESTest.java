/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 20:56:31 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base32 base32_0 = new Base32((byte) (-92), byteArray0, true);
      boolean boolean0 = base32_0.isInAlphabet((byte)88);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32((-2862), byteArray0, false, (byte) (-12));
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("AA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32((-53), (byte[]) null);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 64;
      baseNCodec_Context0.modulus = (-53);
      // Undeclared exception!
//      try { 
        base32_0.encode((byte[]) null, (-1150), (-53), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus -53
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)65;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-386);
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, 4, 46, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[9];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 99, (int) (byte)0, baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base32 base32_0 = new Base32((byte) (-92), byteArray0, true);
      boolean boolean0 = base32_0.isInAlphabet((byte)72);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      boolean boolean0 = base32_0.isInAlphabet((byte)6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)24);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (int) (byte)24, 5097, (BaseNCodec.Context) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32(13, byteArray0, true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, 1242, 1099, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1242
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base32 base32_0 = new Base32(34, byteArray0, true);
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (int) (byte) (-104), (-558), (BaseNCodec.Context) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)88;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(2091, byteArray0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [\u0000\u0000\u0000X\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32((byte)69);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32(1749);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      boolean boolean0 = base32_0.isInAlphabet(byteArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32(13, byteArray0, true);
      boolean boolean0 = base32_0.isInAlphabet("Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base32 base32_0 = new Base32((byte)13, byteArray0, false);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(30, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base32 base32_0 = new Base32(76, byteArray0, false);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(24, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte) (-85);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(24, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32(13, byteArray0, true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 13, (-59), baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)24);
      byte[] byteArray0 = new byte[5];
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("AAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[2];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 318, (int) (byte) (-58), baseNCodec_Context0);
      base32_0.encode(byteArray0, (-58), 8, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base32 base32_0 = new Base32(1749);
      byte[] byteArray0 = new byte[4];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 1337;
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (-1807), (-500), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus 1337
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("Y5VGB]Ol7=Gg:T6");
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)106, (byte)96, (byte) (-69)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base32 base32_0 = new Base32((-2078), byteArray0, false, (byte) (-37));
      byte[] byteArray1 = base32_0.decode("UTF-16LE");
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-53), (byte) (-27)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("UTF-8");
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base32 base32_0 = new Base32();
      Object object0 = base32_0.decode((Object) "AAAAAAAAAA======");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = new Base32();
      Object object0 = base32_0.decode((Object) "xr 5Y^Nw[ZpK[iTYU");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-116);
      Base32 base32_0 = new Base32((-2078), byteArray0, false, (byte) (-37));
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(13, byteArray0, true, (byte)9);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(true, (byte)76);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)76;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(76, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [\u0000\u0000L\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(71, (byte[]) null, true, (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineLength 71 > 0, but lineSeparator is null
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base32 base32_0 = new Base32(1749);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      byte[] byteArray2 = base32_0.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base32 base32_0 = new Base32();
      Object object0 = base32_0.decode((Object) "NEB24AAAAAAAAAAAAAAAAAAAAAAAA===");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-96));
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }
}
