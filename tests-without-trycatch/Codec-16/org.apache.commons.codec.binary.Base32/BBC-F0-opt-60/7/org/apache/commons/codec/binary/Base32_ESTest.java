/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 18:48:05 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)60;
      base32_0.isInAlphabet("EZX|eQi|cc,GY\"");
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)100;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-1005);
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, 4, (int) (byte)58, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[1];
      base32_0.encodeToString(byteArray0);
      base32_0.encodeToString(byteArray0);
      byte[] byteArray1 = base32_0.decode("n6KJIhA!V%Jg~SdlMe");
      base32_0.encodeToString(byteArray1);
      base32_0.encodeToString(byteArray1);
      byte[] byteArray2 = new byte[11];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)68;
      byteArray1[2] = (byte)3;
      byteArray2[3] = (byte) (-109);
      byteArray2[4] = (byte)70;
      byteArray2[5] = (byte) (-18);
      base32_0.encodeToString(byteArray2);
      base32_0.encodeToString(byteArray2);
      base32_0.decode("VT2014Q6TO00000000======");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      byte byte0 = (byte)26;
      Base32 base32_0 = new Base32(1710, byteArray0, true);
      base32_0.containsAlphabetOrPad(byteArray0);
      base32_0.containsAlphabetOrPad(byteArray0);
      base32_0.isInAlphabet((byte)29);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.eof = true;
      byte[] byteArray1 = base32_0.ensureBufferSize((byte)0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.modulus = 76;
      baseNCodec_Context1.buffer = byteArray1;
      base32_0.encode(byteArray0, 2084, 0, baseNCodec_Context1);
      base32_0.encode(byteArray0, (int) (byte)0, (int) (byte)0, baseNCodec_Context1);
      baseNCodec_Context1.lbitWorkArea = (long) 76;
      base32_0.isInAlphabet((byte)63);
      base32_0.isInAlphabet((byte)0);
      baseNCodec_Context0.ibitWorkArea = 1867;
      base32_0.isInAlphabet((byte) (-66));
      // Undeclared exception!
//      try { 
        base32_0.decode(baseNCodec_Context1.buffer, 255, (-2841), baseNCodec_Context1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus 76
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode("/j'd%iMU5)EzK2");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[0];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-543);
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (-3589), (-3589), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus -543
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32((int) (byte) (-36));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((byte) (-36), baseNCodec_Context0);
      base32_0.containsAlphabetOrPad(byteArray0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encodeToString(byteArray0);
      Base32 base32_1 = new Base32(76, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(4700, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)103);
      base32_0.isInAlphabet((byte)103);
      base32_0.encode(byteArray0);
      base32_0.encode(byteArray0, 2936, (int) (byte)103, baseNCodec_Context0);
      // Undeclared exception!
      base32_0.decode(byteArray0, 2862, 4103, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32((int) (byte) (-36));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32(false);
      int int0 = 82;
      Base32 base32_2 = new Base32(82);
      byte[] byteArray0 = base32_2.ensureBufferSize(64, baseNCodec_Context0);
      base32_2.containsAlphabetOrPad(byteArray0);
      String string0 = "(ALx<=QA,F(5Z";
      Base32 base32_3 = new Base32(68, byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[0];
      base32_0.encodeToString(byteArray0);
      byte[] byteArray1 = base32_0.decode("UTF-16");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray1, 73, 2, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 73
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((byte)103, baseNCodec_Context1);
      base32_0.isInAlphabet((byte)105);
      base32_0.isInAlphabet((byte)103);
      int int0 = 10;
      int int1 = 125;
      Base32 base32_1 = new Base32(125, byteArray0);
      base32_1.encode(byteArray0, 14, 2078, baseNCodec_Context1);
      int int2 = 158;
      BaseNCodec.Context baseNCodec_Context2 = null;
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, 64, (int) (byte)105, (BaseNCodec.Context) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(4700, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)103);
      base32_0.isInAlphabet((byte)103);
      baseNCodec_Context0.ibitWorkArea = 2936;
      base32_0.encode(byteArray0, 2936, (int) (byte)103, baseNCodec_Context0);
      base32_0.decode(byteArray0, 2862, 4103, baseNCodec_Context0);
      base32_0.encode(byteArray0, (int) (byte)103, 4700, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)103);
      base32_0.decode(byteArray0, 4103, (int) (byte)103, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      base32_0.isInAlphabet("");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(4700, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)103);
      base32_0.isInAlphabet((byte)103);
      base32_0.encode(byteArray0, 2936, (int) (byte)103, baseNCodec_Context0);
      base32_0.decode(byteArray0, 2862, 4103, baseNCodec_Context0);
      base32_0.decode(byteArray0, 116, 572, baseNCodec_Context0);
      base32_0.decode(byteArray0, 61, (-1301), baseNCodec_Context0);
      base32_0.decode(byteArray0, 764, (-1301), baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(4700, baseNCodec_Context0);
      BaseNCodec.isWhiteSpace((byte)103);
      base32_0.isInAlphabet((byte)103);
      base32_0.encode(byteArray0, 523, 1823, baseNCodec_Context0);
      base32_0.decode(byteArray0, 3685, 3685, baseNCodec_Context0);
      base32_0.decode(byteArray0, 3685, 87, baseNCodec_Context0);
      // Undeclared exception!
      base32_0.encode(byteArray0, 68, 4470, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((byte)103, baseNCodec_Context1);
      baseNCodec_Context0.buffer = byteArray0;
      base32_0.isInAlphabet((byte)103);
      base32_0.isInAlphabet((byte)103);
      Base32 base32_1 = new Base32(10, byteArray0);
      base32_1.encode(baseNCodec_Context0.buffer, 64, 76, baseNCodec_Context0);
      int int0 = 4103;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)103;
      // Undeclared exception!
//      try { 
        base32_1.decode(byteArray1, 76, 158, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 76
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte byte0 = (byte) (-17);
      Base32 base32_0 = new Base32(false, (byte) (-17));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      base32_0.containsAlphabetOrPad(byteArray0);
      base32_0.decode("Z`R3PS(WOMaq`ZE.");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (-1581), (-304), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (-304), (int) (byte) (-17), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context3 = new BaseNCodec.Context();
//      try { 
        base32_0.encode((Object) "UTF-16");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base-N encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((-1778), baseNCodec_Context0);
      base32_0.containsAlphabetOrPad(byteArray0);
      byte[] byteArray1 = base32_0.decode("(ALx<=QA,F(5Z");
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encodeToString(byteArray1);
      base32_0.encodeToString(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)51;
      byteArray2[1] = (byte)126;
      byteArray2[2] = (byte)38;
      byteArray2[3] = (byte)0;
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)126;
      byteArray3[1] = (byte)38;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)126;
      byteArray3[4] = (byte)91;
      byteArray3[5] = (byte)51;
      byteArray3[6] = (byte)126;
      Base32 base32_1 = null;
//      try {
        base32_1 = new Base32((byte)51, byteArray3, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [~&\u0000~[3~]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(4700, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)103);
      base32_0.isInAlphabet((byte)103);
      base32_0.encode(byteArray0, 2936, (int) (byte)103, baseNCodec_Context0);
      base32_0.decode(byteArray0, 2862, 4103, baseNCodec_Context0);
      base32_0.decode(byteArray0, 116, 572, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base32 base32_0 = new Base32((int) (byte) (-36));
      base32_0.isInAlphabet((byte) (-36));
      byte[] byteArray0 = base32_0.decode("!au1mIcsvwGE@i[}");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, 62, 552, baseNCodec_Context1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 62
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)3);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      base32_0.encodeToString(byteArray0);
      base32_0.encodeToString(byteArray0);
      base32_0.isInAlphabet(byteArray0, false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.toString();
      base32_0.encode(byteArray0, (int) (byte)3, (-827), baseNCodec_Context1);
      base32_0.encode(byteArray0, 2057, (int) (byte)3, baseNCodec_Context1);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte byte0 = (byte)3;
      Base32 base32_0 = new Base32((byte)3);
      byte[] byteArray0 = new byte[9];
      base32_0.containsAlphabetOrPad(byteArray0);
      byte[] byteArray1 = base32_0.decode("UTF-16");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      int int0 = 0;
      int int1 = 2936;
      base32_0.decode(byteArray1, (int) (byte)3, 0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (int) (byte)3, 1351, baseNCodec_Context1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((-1778), baseNCodec_Context0);
      base32_0.containsAlphabetOrPad(byteArray0);
      byte[] byteArray1 = base32_0.decode("(ALx<=QA,F(5Z");
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encodeToString(byteArray1);
      base32_0.encodeToString(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)51;
      byteArray2[1] = (byte)126;
      byteArray2[2] = (byte)38;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-68);
      byteArray2[5] = (byte)31;
      base32_0.isInAlphabet(byteArray2, true);
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context3 = new BaseNCodec.Context();
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)126;
      byteArray3[1] = (byte)44;
      byteArray3[2] = (byte)106;
      byteArray3[3] = (byte)38;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)126;
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray3, (-1867), 141, baseNCodec_Context3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1867
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte byte0 = (byte)0;
      base32_0.isInAlphabet((byte)0);
      byte[] byteArray0 = new byte[0];
      byte byte1 = (byte)17;
      byte byte2 = (byte)67;
      byte byte3 = (byte)0;
      byte byte4 = (byte)10;
      Base32 base32_1 = null;
//      try {
        base32_1 = new Base32((byte)10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)91;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(61, byteArray0, true, (byte)119);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [7>[\uFFFD[]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32(2063);
      Base32 base32_1 = new Base32(false, (byte)36);
      base32_1.isInAlphabet((byte)36);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode((byte[]) null, 8, (-2776), baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte byte0 = (byte)0;
      base32_0.isInAlphabet((byte)0);
      byte[] byteArray0 = new byte[0];
      base32_0.decode("org.apache.commons.codec.DecoderException");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = (long) 64;
      baseNCodec_Context0.readPos = (int) (byte)0;
      baseNCodec_Context0.eof = false;
      baseNCodec_Context0.pos = 0;
      baseNCodec_Context0.modulus = 64;
      base32_0.decode(byteArray0, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (int) (byte)0, 65, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32(33);
      byte[] byteArray0 = new byte[4];
      base32_0.encodeAsString(byteArray0);
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)30;
      base32_0.encodeToString(byteArray0);
      byteArray0[2] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.readResults(byteArray0, 17, (-2150), baseNCodec_Context0);
      byteArray0[3] = (byte)0;
      baseNCodec_Context0.currentLinePos = 64;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.toString();
      base32_0.decode(byteArray0, 1449, 0, baseNCodec_Context1);
      base32_0.readResults(byteArray0, 382, 382, baseNCodec_Context1);
      baseNCodec_Context1.readPos = 76;
      base32_0.decode(byteArray0, 86, (int) (byte)0, baseNCodec_Context1);
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, 90, 53, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 90
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte byte0 = (byte)0;
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[0];
      int int0 = (-3803);
      base32_0.containsAlphabetOrPad(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0);
      base32_0.isInAlphabet(byteArray0, false);
      baseNCodec_Context0.modulus = 76;
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (int) (byte)0, (-3803), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus 76
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, 0, 1593, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte) (-81), (int) (byte) (-89), baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-89));
      boolean boolean1 = base32_0.isInAlphabet((byte)20);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = null;
      byte byte0 = (byte)20;
      Base32 base32_0 = new Base32(0, (byte[]) null, true, (byte)20);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.ibitWorkArea = 27;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)20;
//      try { 
        base32_0.encode((Object) baseNCodec_Context0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base-N encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-116));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      base32_0.encodeAsString(byteArray0);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((-1723), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = 90;
      baseNCodec_Context1.toString();
      baseNCodec_Context1.buffer = byteArray1;
      baseNCodec_Context1.pos = (int) (byte) (-116);
      base32_0.encode(byteArray0, (int) (byte) (-116), (-392), baseNCodec_Context1);
      base32_0.decode(byteArray0, (-392), (int) (byte) (-116), baseNCodec_Context1);
      base32_0.encode(byteArray1, 28, (-2057), baseNCodec_Context0);
      base32_0.isInAlphabet((byte) (-116));
      base32_0.isInAlphabet((byte) (-116));
      base32_0.encode(byteArray0, 0, 90, baseNCodec_Context1);
      base32_0.decode(byteArray1, (int) (byte) (-116), (int) (byte) (-116), baseNCodec_Context1);
      base32_0.encode(byteArray1, 0, 1815, baseNCodec_Context1);
      base32_0.isInAlphabet((byte) (-116));
      base32_0.decode(byteArray1, (int) (byte) (-116), 0, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte) (-99);
      base32_0.encodeAsString(byteArray0);
      byte[] byteArray1 = null;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 0;
      baseNCodec_Context0.readPos = 64;
      // Undeclared exception!
//      try { 
        base32_0.decode((byte[]) null, 3965, 3965, baseNCodec_Context0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte byte0 = (byte)78;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(false, (byte)78);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte byte0 = (byte) (-80);
      Base32 base32_0 = new Base32(false, (byte) (-80));
      base32_0.isInAlphabet((byte) (-80));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (int) (byte) (-80), 1, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -80
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      byte byte0 = (byte)26;
      byteArray0[2] = (byte)26;
      Base32 base32_0 = new Base32(1710, byteArray0, true);
      base32_0.containsAlphabetOrPad(byteArray0);
      base32_0.containsAlphabetOrPad(byteArray0);
      base32_0.isInAlphabet((byte)29);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.eof = true;
      byte[] byteArray1 = base32_0.ensureBufferSize((byte)0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.modulus = 76;
      baseNCodec_Context1.buffer = byteArray1;
      base32_0.encode(byteArray0, 2084, 0, baseNCodec_Context1);
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (int) (byte)26, (int) (byte)26, baseNCodec_Context1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 26
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)0;
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("03J00===", string0);
      
      boolean boolean0 = base32_0.isInAlphabet((byte)83);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)3);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)3;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 0, 2357, baseNCodec_Context0);
      base32_0.encode(byteArray0, 0, (int) (byte)3, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      int int0 = (-1778);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((-1778), baseNCodec_Context0);
      base32_0.containsAlphabetOrPad(byteArray0);
      byte byte0 = (byte)95;
      base32_0.encode(byteArray0);
      baseNCodec_Context0.toString();
      // Undeclared exception!
      base32_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-52);
      Base32 base32_0 = new Base32(0, byteArray0, true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode((byte[]) null, (-1665), (int) (byte)0, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(1014, (byte[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineLength 1014 > 0, but lineSeparator is null
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base32 base32_0 = new Base32(0, (byte[]) null, false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.currentLinePos = 0;
      base32_0.encode((byte[]) null, (-1751), (-1276), baseNCodec_Context0);
      base32_0.encode((byte[]) null, (-1276), (-1751), baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base32 base32_0 = new Base32((-999));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)0;
      base32_0.encodeAsString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-116);
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte)20;
      byteArray1[4] = (byte)86;
      byteArray1[5] = (byte)41;
      byteArray1[6] = (byte)98;
      base32_0.encodeToString(byteArray1);
      byte[] byteArray2 = new byte[2];
      base32_0.encodeToString(byteArray2);
      base32_0.isInAlphabet(byteArray2, false);
      byteArray2[0] = (byte)125;
      byteArray2[1] = (byte)109;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray2, (int) (byte)109, 2276, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 109
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base32 base32_0 = new Base32((-108), (byte[]) null);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.encode((byte[]) null, 0, 64, baseNCodec_Context0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)0;
      Base32 base32_0 = new Base32(1245, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)27;
      Base32 base32_0 = new Base32(0, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, 0, (int) (byte)27, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)29;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(2057, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [\u0018\uFFFD\u0018\u0000L\uFFFD~\u001F\u001D]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte byte0 = (byte) (-32);
      Base32 base32_0 = new Base32((byte) (-32));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte) (-32);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 64;
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (int) (byte) (-32), 2, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -32
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      base32_0.isInAlphabet("Fdo$:");
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)82;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.ibitWorkArea = 18;
      baseNCodec_Context0.eof = true;
      base32_0.encode(byteArray0, (int) (byte)0, (-1361), baseNCodec_Context0);
      base32_0.encode(byteArray0, (int) (byte)60, (int) (byte)82, baseNCodec_Context0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte byte0 = (byte)69;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32((byte)69);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 23;
      Base32 base32_0 = new Base32(23);
      Object object0 = new Object();
//      try { 
        base32_0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Base-N encode is not a byte[]
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
//      }
  }
}
