/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 02:17:53 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base32 base32_0 = new Base32((-1038), byteArray0, true, (byte) (-1));
      boolean boolean0 = base32_0.isInAlphabet((byte)92);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base32 base32_0 = new Base32((-3887), byteArray0, false, (byte)56);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = (-399L);
      baseNCodec_Context0.modulus = 1;
      base32_0.encode(byteArray0, 10, (-224), baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base32 base32_0 = new Base32((byte)3);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte)3, (int) (byte)0, baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)84;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-1440);
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (int) (byte)0, 3010, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[2];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 64, 0, baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base32 base32_0 = new Base32((byte)0, byteArray0);
      byte[] byteArray1 = base32_0.decode("Parameter supplied to Base-N decode is not a byte[] or a String");
      assertArrayEquals(new byte[] {(byte)120, (byte)91}, byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (int) (byte) (-80), (int) (byte) (-80), (BaseNCodec.Context) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, 89, (-1364), (BaseNCodec.Context) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)53;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(4, byteArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [\u0000\u00005\u0000\u0000\u0000\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32((byte)79);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base32 base32_0 = new Base32((-3887), byteArray0, false, (byte)56);
      boolean boolean0 = base32_0.isInAlphabet((byte)56);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base32 base32_0 = new Base32((-3887), byteArray0, false, (byte)56);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-101));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32((int) (byte)34);
      boolean boolean0 = base32_0.isInAlphabet((byte)88);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)88);
      boolean boolean0 = base32_0.isInAlphabet((byte)88);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      Base32 base32_0 = new Base32(10);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (int) (byte)5, 102, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 30
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte) (-20));
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-20);
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("TG000000000000000000000000000\uFFFD\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base32 base32_0 = new Base32((int) (byte)34);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (-892), (-892), baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-2426);
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (-6), (-6), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus -2426
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)5);
      byte[] byteArray0 = new byte[9];
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("AAAAAAAAAAAAAAA\u0005", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(76, baseNCodec_Context0);
      base32_0.encodeToString(byteArray0);
      // Undeclared exception!
      base32_0.decode(byteArray0, 3896, 3896, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base32 base32_0 = new Base32((int) (byte)34);
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("AAAAAAAA\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base32 base32_0 = new Base32(true, (byte) (-20));
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("00000000", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base32 base32_0 = new Base32((-3887), byteArray0, false, (byte)56);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte)56, (-3887), baseNCodec_Context0);
      base32_0.encode(byteArray0, 6, (-3887), baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      byte[] byteArray0 = new byte[2];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 76;
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (int) (byte)0, 5, baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus 76
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("AURQ====");
      assertArrayEquals(new byte[] {(byte)5, (byte)35}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode(".4:epQ-c51cfe");
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-28)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)25);
      byte[] byteArray0 = base32_0.decode("VYy,FV3?rO&zl?;q5");
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-2), (byte)60}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte) (-20));
      byte[] byteArray0 = base32_0.decode("TJMEPR7CTJMEO0000000000000000\uFFFD\uFFFD\uFFFD");
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(true, (byte)10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)88;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(5451, byteArray0, false, (byte) (-15));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [\u0000\u0000X\u0000\u0000\u0000\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(531, (byte[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineLength 531 > 0, but lineSeparator is null
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("AAAAAAAAAA======");
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = new Base32((int) (byte)34);
      byte[] byteArray0 = base32_0.decode("EIAAAAAA\r\n");
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)5);
      byte[] byteArray0 = base32_0.decode("AUCQAIYFEMCQKBI\u0005");
      assertArrayEquals(new byte[] {(byte)5, (byte)5, (byte)0, (byte)35, (byte)5, (byte)35, (byte)5, (byte)5, (byte)5}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base32 base32_0 = new Base32(3, byteArray0, true);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }
}
