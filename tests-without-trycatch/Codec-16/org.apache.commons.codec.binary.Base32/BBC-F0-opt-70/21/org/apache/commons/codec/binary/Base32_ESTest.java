/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 02:05:28 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32(0, byteArray0, true);
      boolean boolean0 = base32_0.isInAlphabet((byte)88);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32(0, byteArray0, true, (byte) (-78));
      String string0 = base32_0.encodeAsString(byteArray0);
      assertEquals("00\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte) (-42);
      String string0 = base32_0.encodeAsString(byteArray0);
      assertEquals("AAAABVQAAAAAAAAAAA======", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32(0, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte)5, 0, baseNCodec_Context0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base32 base32_0 = new Base32(0, byteArray0, true, (byte)95);
      byte[] byteArray1 = base32_0.decode("L4AAAAAAAAAAAAAAAAAAA___");
      assertEquals(13, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)78;
      Base32 base32_0 = new Base32((-1326), byteArray0, true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (int) (byte) (-119);
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (int) (byte)0, (int) (byte)78, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32(946);
      byte[] byteArray0 = new byte[1];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, (-8), 993, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -8
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base32 base32_0 = new Base32(0, byteArray0, true, (byte)0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(baseNCodec_Context0.buffer, 0, 0, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32(66);
      byte[] byteArray0 = new byte[3];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte)64, (-327), baseNCodec_Context0);
      base32_0.decode(baseNCodec_Context0.buffer, 4, 66, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base32 base32_0 = new Base32((-2387), byteArray0);
      boolean boolean0 = base32_0.isInAlphabet((byte)65);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)95);
      boolean boolean0 = base32_0.isInAlphabet((byte)11);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (-1873), 1113, (BaseNCodec.Context) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base32 base32_0 = new Base32((-668), byteArray0, false, (byte)0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, 0, 32, baseNCodec_Context0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, 2279, 0, (BaseNCodec.Context) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32((byte)68);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32(66);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      boolean boolean0 = base32_0.containsAlphabetOrPad(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      boolean boolean0 = base32_0.isInAlphabet("Fg=WroyF[y4I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base32 base32_0 = new Base32(946);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((byte)12, baseNCodec_Context0);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(13140, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-725);
      // Undeclared exception!
//      try { 
        base32_0.encode(byteArray0, (-375), (-57), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus -725
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[4];
      String string0 = base32_0.encodeAsString(byteArray0);
      assertEquals("AAAAAAA=", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)95);
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(24, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((byte) (-51), baseNCodec_Context0);
      base32_0.encode(byteArray0);
      // Undeclared exception!
      base32_0.encode(byteArray0, 0, 1994, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)95);
      byte[] byteArray0 = new byte[7];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (-1187), (-5763), baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32(66);
      byte[] byteArray0 = new byte[3];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte)64, (-327), baseNCodec_Context0);
      base32_0.encode(byteArray0, 9, (-1209), baseNCodec_Context0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32(2883);
      byte[] byteArray0 = base32_0.decode("UTF-8");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 63;
      // Undeclared exception!
//      try { 
        base32_0.decode(byteArray0, 45, (int) (byte) (-53), baseNCodec_Context0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Impossible modulus 63
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base32 base32_0 = new Base32((-2387), byteArray0);
      byte[] byteArray1 = base32_0.decode("5GDK#}nM5v+Xnh");
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-122), (byte) (-90), (byte)118}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("J#ScC%DG~/a$H:");
      assertArrayEquals(new byte[] {(byte)76, (byte) (-124), (byte)51}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      Base32 base32_0 = new Base32((-2387), byteArray0);
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(false, (byte)9);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32((byte)95, byteArray0, false, (byte)68);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pad must not be in alphabet or whitespace
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)73;
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(9, byteArray0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineSeparator must not contain Base32 characters: [\u0000\u0000\u0000I\u0000\u0000\u0000\u0000\u0000]
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base32 base32_0 = null;
//      try {
        base32_0 = new Base32(793, (byte[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lineLength 793 > 0, but lineSeparator is null
//         //
//         verifyException("org.apache.commons.codec.binary.Base32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)95);
      byte[] byteArray0 = base32_0.decode("BUN5UNO00000____");
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)95, (byte) (-82), (byte)95, (byte)95, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base32 base32_0 = new Base32((-4483));
      byte[] byteArray0 = base32_0.decode(">\"Ht\"x[>+q7)(i&K[");
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("AAAAAAAAAA======");
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }
}
