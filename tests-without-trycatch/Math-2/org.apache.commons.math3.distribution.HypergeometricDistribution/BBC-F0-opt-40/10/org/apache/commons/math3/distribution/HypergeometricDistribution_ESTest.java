/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 14:49:09 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(149);
      assertEquals(7.617322280136784E-175, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 289, 289, 289);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(289.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(296, 296, 217);
      double double0 = hypergeometricDistribution0.cumulativeProbability(217);
      assertEquals(217.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(307);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 307, 1751, 1717);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (1,751) must be less than or equal to population size (307)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 0, (-3510), (-3510));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      double double0 = hypergeometricDistribution0.probability(149);
      assertEquals(7.617322280136784E-175, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(720, 0, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(720, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(296, 296, 217);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(217, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(720, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(720, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1365, 1365, 0);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1365, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1365, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1365, 1365, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1365, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1365, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(296, 296, 217);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(217.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(720, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(720, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(720, 0, 0);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(720, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(17.1721480128855, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2644, 812, 812);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(679);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(24.61308203991131, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(902, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(24.61308203991131, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(149, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(24.61308203991131, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(149, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(867);
      assertEquals(0.0, double0, 0.01);
      assertEquals(24.61308203991131, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(24.61308203991131, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1365, 1365, 0);
      double double0 = hypergeometricDistribution0.probability(1365);
      assertEquals(1365, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1365, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1365, 1365, 0);
      double double0 = hypergeometricDistribution0.probability((-478));
      assertEquals(1365, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1365, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 867);
      assertEquals(0.9999999999998684, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-824));
      assertEquals(24.61308203991131, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 647, 263, 890);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (890) must be less than or equal to population size (647)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(734, 1327, 1327);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (1,327) must be less than or equal to population size (734)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 2483, 649, (-2036));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-2,036)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, (-2340), 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (-2,340)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-791), (-791), 399);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (-791)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(24.61308203991131, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 134, 134, 134);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(134.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(134, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(24.61308203991131, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 902, 149, 149);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(17.1721480128855, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2183, 762, 762);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(1.0, double0, 0.01);
      assertEquals(265.98442510306916, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 8388607);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-2.0000001192093038), double0, 0.01);
  }
}
