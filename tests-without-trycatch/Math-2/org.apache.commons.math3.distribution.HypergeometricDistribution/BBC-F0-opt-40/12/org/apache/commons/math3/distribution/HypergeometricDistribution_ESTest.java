/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:34:31 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1500);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1500, 1500, 1500);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(1500.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 591, 591, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 591);
      assertEquals(591, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(591, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1890, 1757, 3319);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (3,319) must be less than or equal to population size (1,890)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 1, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 723, 212, 723);
      double double0 = hypergeometricDistribution0.probability(212);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 591, 591, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(591, hypergeometricDistribution0.getPopulationSize());
      assertEquals(591, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1500);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1500, 1500, 1500);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1500.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1500, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 516, 0, 516);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(516, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(516, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1500);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1500, 1500, 1500);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1500, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1103, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      assertEquals(1103, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1103, 0, 0);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1103, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 516, 0, 516);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(516, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 723, 212, 723);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(212.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 701);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(701, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 701);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2420, 91, 1523);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(20.437916802255238, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2281, 719, 719);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(1.0000000000000004, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2898, 1306, 1418);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(970);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1500);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 37, 1500, 371);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (1,500) must be less than or equal to population size (37)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 516, 0, 516);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(516, int0);
      assertEquals(516, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 516, 0, 516);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(516, hypergeometricDistribution0.getSampleSize());
      assertEquals(516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 516, 0, 516);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(516, int0);
      assertEquals(516, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1076, 693, 693);
      hypergeometricDistribution0.getNumericalVariance();
      // Undeclared exception!
      hypergeometricDistribution0.sample(693);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 516, 0, 516);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(516);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(516, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(516, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 701);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(701);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1076, 693, 693);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(693);
      assertEquals(2.2830790573669846E-303, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1076, 693, 693);
      double double0 = hypergeometricDistribution0.probability(1076);
      assertEquals(446.32806691449815, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 516, 0, 516);
      hypergeometricDistribution0.probability((-195));
      assertEquals(516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(516, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1076, 693, 693);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1076);
      assertEquals(446.32806691449815, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 403, 403, (-1051));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-1,051)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1523, (-60), 743);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (-60)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-545), (-545), (-545));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (-545)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 591, 591, 0);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(591, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(591, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2281, 719, 719);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-195));
      assertEquals(0.0, double0, 0.01);
      assertEquals(226.63787812362997, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(134217721, 134217721, 134217721);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-14.000000365078469), double0, 0.01);
  }
}
