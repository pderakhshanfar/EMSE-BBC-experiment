/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:54:13 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1162, 1162, 104);
      assertEquals(104, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1162, hypergeometricDistribution0.getPopulationSize());
      assertEquals(104.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(104, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1162, hypergeometricDistribution0.getPopulationSize());
      assertEquals(104.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1668, 1400, 1400);
      assertEquals(1175.0599520383694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1400, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1400, hypergeometricDistribution0.getSampleSize());
      assertEquals(1668, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1400);
      assertEquals(1175.0599520383694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1400, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1400, hypergeometricDistribution0.getSampleSize());
      assertEquals(1668, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.8691E-318, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1578, 0, 1578);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, intArray0.length);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, intArray0.length);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(615, 615, 615);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(615.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(615, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(615, hypergeometricDistribution0.getPopulationSize());
      assertEquals(615, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(615);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(615.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(615, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(615, hypergeometricDistribution0.getPopulationSize());
      assertEquals(615, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 326, 0, 857);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (857) must be less than or equal to population size (326)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 531, 2271, 2271);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (2,271) must be less than or equal to population size (531)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 0, (-2275), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, (-1135));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-580), (-580), (-580));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (-580)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3157, 1400, 1400);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3157, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1400, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1400, hypergeometricDistribution0.getSampleSize());
      assertEquals(620.8425720620843, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(1053);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3157, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1400, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1400, hypergeometricDistribution0.getSampleSize());
      assertEquals(620.8425720620843, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4.872677971997691E-224, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1578, 0, 1578);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, intArray0.length);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2643, 776, 1086);
      assertEquals(776, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2643, hypergeometricDistribution0.getPopulationSize());
      assertEquals(318.8558456299659, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1086, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(776, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2643, hypergeometricDistribution0.getPopulationSize());
      assertEquals(318.8558456299659, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1086, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1400, 0, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1400, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1400, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1578, 0, 1578);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, intArray0.length);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1449, 1449, 1449);
      assertEquals(1449, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1449, hypergeometricDistribution0.getSampleSize());
      assertEquals(1449.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1449, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1449, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1449, hypergeometricDistribution0.getSampleSize());
      assertEquals(1449.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1449, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1449, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1578, 0, 1578);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, intArray0.length);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1668, 1400, 1400);
      assertEquals(1175.0599520383694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1668, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1400, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1400, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1175.0599520383694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1668, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1400, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1400, hypergeometricDistribution0.getSampleSize());
      assertEquals(30.352744557276974, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3157, 1400, 1400);
      assertEquals(1400, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3157, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1400, hypergeometricDistribution0.getSampleSize());
      assertEquals(620.8425720620843, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(1400);
      assertEquals(1400, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3157, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1400, hypergeometricDistribution0.getSampleSize());
      assertEquals(620.8425720620843, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1053, 1053, (-2121));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-2,121)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(615, 615, 615);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(615, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(615, hypergeometricDistribution0.getSampleSize());
      assertEquals(615.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(615, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(615, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(615, hypergeometricDistribution0.getSampleSize());
      assertEquals(615.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(615, hypergeometricDistribution0.getPopulationSize());
      assertEquals(615, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1578, 0, 1578);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, intArray0.length);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1668, 1400, 1400);
      assertEquals(1400, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1400, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1175.0599520383694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1668, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1400, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1400, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1175.0599520383694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1668, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1400, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1668, 1400, 1400);
      // Undeclared exception!
      hypergeometricDistribution0.sample(1668);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well44497a well44497a0 = new Well44497a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1578, 0, 1578);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1578);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1162, 1162, 104);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-857));
      assertEquals(1.0, double0, 0.01);
      assertEquals(104.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1400, 0, 0);
      double double0 = hypergeometricDistribution0.probability(1400);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1400, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1668, 1400, 1400);
      double double0 = hypergeometricDistribution0.probability(1053);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1175.0599520383694, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well44497a well44497a0 = new Well44497a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1578, 0, 1578);
      double double0 = hypergeometricDistribution0.cumulativeProbability(2);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1668, 1400, 1400);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-642));
      assertEquals(1175.0599520383694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3070, 1265, 354);
      hypergeometricDistribution0.cumulativeProbability(265);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(265);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(318, 1646, 318);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (1,646) must be less than or equal to population size (318)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1633, (-1), 1366);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (-1)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3157, 1400, 1400);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(620.8425720620843, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1400, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well44497a well44497a0 = new Well44497a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1578, 0, 1578);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1578, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1668, 1400, 1400);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(30.352744557276974, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(134217752, 134217752, 134217752);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-15.999992847443906), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2643, 776, 1086);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(117);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(134217752, 134217752, 134217752);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(134217752, int0);
  }
}
