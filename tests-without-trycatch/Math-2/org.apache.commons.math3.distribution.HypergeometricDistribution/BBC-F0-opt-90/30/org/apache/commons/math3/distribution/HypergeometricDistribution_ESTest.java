/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 12:19:28 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4120, 992, 992);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(572);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1483;
      int int1 = 2590;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3918, 1483, 2590);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.upperCumulativeProbability(1483);
      hypergeometricDistribution0.reseedRandomGenerator(3918);
      int int2 = 2228;
      hypergeometricDistribution0.upperCumulativeProbability(2228);
      hypergeometricDistribution0.probability(1483);
      hypergeometricDistribution0.getPopulationSize();
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(873);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3011, 1483, 2590);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.upperCumulativeProbability(1483);
      hypergeometricDistribution0.reseedRandomGenerator(3011);
      hypergeometricDistribution0.probability(1478);
      hypergeometricDistribution0.upperCumulativeProbability(1865);
      hypergeometricDistribution0.probability(1483);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability(1571);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3011, 1483, 2590);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.upperCumulativeProbability(1483);
      hypergeometricDistribution0.reseedRandomGenerator(3011);
      hypergeometricDistribution0.upperCumulativeProbability(1865);
      hypergeometricDistribution0.probability(1483);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability(1571);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getPopulationSize();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(588, 588, 588);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 588, 588);
      hypergeometricDistribution0.cumulativeProbability(588, 588);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.sample(588);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.probability(588);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(588);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getSupportLowerBound();
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(mersenneTwister0, 588, 2, 343);
      hypergeometricDistribution1.getSupportUpperBound();
      hypergeometricDistribution1.sample(364);
      hypergeometricDistribution1.probability(2);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution1.upperCumulativeProbability(345);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3011;
      intArray0[1] = 0;
      intArray0[2] = 1178;
      intArray0[3] = 1991;
      intArray0[5] = 1015;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 4957, 1015, 1177);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(847, 1991);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 3011;
      int int1 = 2159;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3011, 2159, 2159);
      hypergeometricDistribution0.getNumericalVariance();
      int int2 = (-289);
      hypergeometricDistribution0.cumulativeProbability((-289));
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(588, 588, 588);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 588, 588);
      hypergeometricDistribution0.cumulativeProbability(588, 588);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.sample(588);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.probability(588);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(588);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.probability(856);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3011;
      Well44497b well44497b0 = new Well44497b(3011);
      well44497b0.setSeed(3011);
      int int0 = 1793;
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1793, 0, 3011);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (3,011) must be less than or equal to population size (1,793)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1017, 1017, 1017);
      hypergeometricDistribution0.upperCumulativeProbability(1017);
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportUpperBound();
      mersenneTwister0.nextDouble();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability((-662), 586);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(mersenneTwister0, 1017, 1017, 1017);
      hypergeometricDistribution1.probability((-8));
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution1.probability((-8));
      hypergeometricDistribution1.isSupportConnected();
      hypergeometricDistribution1.getNumberOfSuccesses();
      hypergeometricDistribution1.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(588, 588, 588);
      hypergeometricDistribution0.getNumericalVariance();
      int[] intArray0 = new int[1];
      Well44497b well44497b0 = new Well44497b(intArray0);
      well44497b0.setSeed(588);
      int int0 = 1793;
      int int1 = 0;
      int int2 = 447;
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well44497b0, 1793, 0, 447);
      int int3 = 3196;
      hypergeometricDistribution0.sample(3196);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution1.isSupportConnected();
      well44497b0.clear();
      hypergeometricDistribution1.getNumericalVariance();
//      try { 
        well44497b0.nextLong((-214L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -214 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(871, 0, 871);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0, 1084, 676);
      hypergeometricDistribution0.reseedRandomGenerator(1084);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(871, int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2265);
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(2265);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(double2, double0, 0.01);
      
      hypergeometricDistribution0.cumulativeProbability(1, 676);
      double double3 = hypergeometricDistribution0.cumulativeProbability(3504);
      assertEquals(1.0, double3, 0.01);
      assertEquals(871, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1358L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2753, 2753, 0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1230.869, 0, 2753);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-34);
      mersenneTwister0.nextBytes(byteArray0);
      mersenneTwister0.nextLong((long) 2753);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)114;
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte)0;
//      try { 
        mersenneTwister0.nextLong((long) (byte)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 588;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(588, 588, 588);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 588, 0);
      hypergeometricDistribution0.cumulativeProbability(588, 588);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getPopulationSize();
      // Undeclared exception!
//      try { 
        hypergeometricDistribution0.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1808);
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      int int0 = 2;
      iSAACRandom0.clear();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2, 0, 2);
      iSAACRandom0.clear();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportLowerBound();
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = (-1808);
      intArray1[2] = 2;
      iSAACRandom0.setSeed(intArray1);
      iSAACRandom0.nextBoolean();
      iSAACRandom0.setSeed((long) 2);
      hypergeometricDistribution0.getNumberOfSuccesses();
//      try { 
        iSAACRandom0.nextLong((-3246L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -3,246 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2793, 2793, 2793);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.cumulativeProbability(2793, 2793);
      hypergeometricDistribution0.upperCumulativeProbability(2);
      hypergeometricDistribution0.reseedRandomGenerator(2793);
      hypergeometricDistribution0.upperCumulativeProbability(2793);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      int int0 = (-1);
      double double0 = 0.0;
      int int1 = 0;
//      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-1441.022931471689));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,441.023 out of [0, 1] range
//         //
//         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 2;
      int int1 = 652;
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 652, (-1020));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-1,020)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1017, 1017, 1017);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1017);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(1017, int0);
      
      hypergeometricDistribution0.getSupportUpperBound();
      mersenneTwister0.nextDouble();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability((-662), 586);
      hypergeometricDistribution0.reseedRandomGenerator(1017);
      hypergeometricDistribution0.upperCumulativeProbability(1017);
      hypergeometricDistribution0.getSupportUpperBound();
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double2 = hypergeometricDistribution0.probability((-380));
      assertEquals(0.0, double2, 0.01);
      
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1017, int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1437L);
      well19937c0.nextBoolean();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2, 0, 2);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 160;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(160, 160, 160);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      int int1 = (-886);
      hypergeometricDistribution0.cumulativeProbability((-886));
      hypergeometricDistribution0.getSupportUpperBound();
//      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(973.6490470037);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 973.649 out of [0, 1] range
//         //
//         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0);
      int int0 = 809;
      int int1 = (-2526);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 809, (-2526), 809);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (-2,526)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1090L));
      int int0 = 387;
      well44497b0.setSeed(387);
      int int1 = 1793;
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 387, 387, 1793);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (1,793) must be less than or equal to population size (387)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3011;
      intArray0[1] = 0;
      intArray0[2] = 1178;
      intArray0[3] = 1991;
      intArray0[4] = 2928;
      intArray0[5] = 1015;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1991, 2, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSampleSize();
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1427);
      assertEquals(1991, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 310;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(310, 310, 310);
      hypergeometricDistribution0.getSupportLowerBound();
//      try { 
        hypergeometricDistribution0.cumulativeProbability(353, 310);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lower endpoint (353) must be less than or equal to upper endpoint (310)
//         //
//         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0L);
      int int0 = 1;
      well44497b0.nextInt(1);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1, 1, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
//      try { 
        hypergeometricDistribution0.cumulativeProbability(1, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // lower endpoint (1) must be less than or equal to upper endpoint (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1586), (-1586), (-4613));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (-1,586)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 376;
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 376, 376);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (376) must be less than or equal to population size (2)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      int int1 = 209;
      int int2 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 209, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 746;
      intArray0[1] = (-819);
      intArray0[2] = 783;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      int int0 = 510;
      mersenneTwister0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 0, (-7534), 510);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well512a well512a0 = new Well512a(55);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1, 1057, 2738);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (1,057) must be less than or equal to population size (1)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }
}
