/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:59:20 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well512a well512a0 = new Well512a((-200L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2417, 860, 724);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(724);
      assertEquals(257.6086057095573, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(967, 0, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(967, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(343, 343, 343);
      double double0 = hypergeometricDistribution0.cumulativeProbability(343);
      assertEquals(343.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, (-52), 0, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (-52)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2417, 2417, 710);
      double double0 = hypergeometricDistribution0.probability(710);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well1024a0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 1293, 0, 1293);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1293, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(343, 343, 343);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(343, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2644);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 843, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(843, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(343, 343, 343);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(343.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(967, 0, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      assertEquals(967, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(343, 343, 343);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(343.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2644);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 843, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(843, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well512a well512a0 = new Well512a((-200L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2417, 860, 724);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1058));
      assertEquals(257.6086057095573, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2417, 2417, 710);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(710, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well512a well512a0 = new Well512a((-200L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2417, 860, 724);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(116.28731882933916, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2674, 934, 1215);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(153);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1752);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1455, 1455, (-885));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-885)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(343, 343, 343);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(343.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(343, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well512a well512a0 = new Well512a((-200L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2417, 860, 724);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(257.6086057095573, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(860, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2644);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 843, 0, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(3392);
      assertEquals(0.0, double0, 0.01);
      assertEquals(843, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(8388607);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 8388607, 8388607, 8388607);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1591));
      assertEquals(1.0, double0, 0.01);
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well512a well512a0 = new Well512a((-200L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2417, 860, 724);
      double double0 = hypergeometricDistribution0.probability(1176);
      assertEquals(0.0, double0, 0.01);
      assertEquals(257.6086057095573, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(8388607);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 8388607, 8388607, 8388607);
      double double0 = hypergeometricDistribution0.probability((-612));
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(724);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 724, 724, 724);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1147);
      assertEquals(724.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3147, 1515, 779);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(649);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(585, 0, 698);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (698) must be less than or equal to population size (585)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1088);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1088, 1246, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (1,246) must be less than or equal to population size (1,088)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 34, (-475));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-475)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(489, (-1748), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (-1,748)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, (-2794), (-2794));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well512a well512a0 = new Well512a((-200L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2417, 860, 724);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(257.6086057095573, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well512a well512a0 = new Well512a((-200L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2417, 860, 724);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(257.6086057095573, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(724, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(967, 0, 0);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(967, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well512a well512a0 = new Well512a((-200L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2417, 860, 724);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(116.28731882933916, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(8388607);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 8388607, 8388607, 8388607);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-2.0000001192093038), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(8388607);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 8388607, 8388607, 8388607);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388607, int0);
  }
}
