/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:19:11 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1002, 446, 1002);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(446.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1002, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1002, hypergeometricDistribution0.getSampleSize());
      assertEquals(446, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(446.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1002, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1002, hypergeometricDistribution0.getSampleSize());
      assertEquals(446, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1002, 446, 1002);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(446, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1002, hypergeometricDistribution0.getSampleSize());
      assertEquals(446.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1002, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1002);
      assertEquals(1.0, double0, 0.01);
      assertEquals(446, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1002, hypergeometricDistribution0.getSampleSize());
      assertEquals(446.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1002, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(2);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 98, 2, 1284);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (1,284) must be less than or equal to population size (98)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-809L));
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2, 439, 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (439) must be less than or equal to population size (2)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1177, (-181), 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (-181)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-944), (-944), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (-944)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 2074, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1002, 446, 1002);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(446, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(446.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1002, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1002, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(446);
      assertEquals(1.0, double0, 0.01);
      assertEquals(446, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(446.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1002, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1002, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1529, 1529, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1529, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1529, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1529, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1529, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1630, 1457, 1457);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1457, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1302.3613496932514, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1457, hypergeometricDistribution0.getSampleSize());
      assertEquals(1630, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1457, int0);
      assertEquals(1457, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1302.3613496932514, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1457, hypergeometricDistribution0.getSampleSize());
      assertEquals(1630, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1176, 50, 50);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(50, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(50, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.1258503401360542, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1176, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(50, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(50, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.1258503401360542, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1176, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1002, 446, 1002);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(446.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(446, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1002, hypergeometricDistribution0.getSampleSize());
      assertEquals(1002, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(446, int0);
      assertEquals(446.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(446, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1002, hypergeometricDistribution0.getSampleSize());
      assertEquals(1002, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1288, 1288, 1288);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1288, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1288.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1288, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1288, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1288, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1288, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1288.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1288, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1288, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2291, 48, 98);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2291, hypergeometricDistribution0.getPopulationSize());
      assertEquals(48, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(98, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0532518550851155, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1.9250834377021762, double0, 0.01);
      assertEquals(2291, hypergeometricDistribution0.getPopulationSize());
      assertEquals(48, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(98, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0532518550851155, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2074, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1288, 1288, 1288);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1288, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1288, hypergeometricDistribution0.getSampleSize());
      assertEquals(1288.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1288, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1288.0, double0, 0.01);
      assertEquals(1288, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1288, hypergeometricDistribution0.getSampleSize());
      assertEquals(1288.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1288, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(365, 365, 365);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(365, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(365.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(365, hypergeometricDistribution0.getPopulationSize());
      assertEquals(365, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(365, int0);
      assertEquals(365, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(365.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(365, hypergeometricDistribution0.getPopulationSize());
      assertEquals(365, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 664, 664, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(664, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(664, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(664, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(664, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1630, 1457, 1457);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1457, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1457, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1630, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1302.3613496932514, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(14.679626868442503, double0, 0.01);
      assertEquals(1457, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1457, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1630, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1302.3613496932514, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2912, 1452, 980);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(488.65384615384613, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(980, hypergeometricDistribution0.getSampleSize());
      assertEquals(2912, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1452, hypergeometricDistribution0.getNumberOfSuccesses());
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3156, 1925, 1925);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1800);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2074, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1285, 1285, 1285);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1285.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1176, 50, 50);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1632);
      assertEquals(2.1258503401360542, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(748, 748, 748);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(748);
      assertEquals(1.0, double0, 0.01);
      assertEquals(748.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1176, 50, 50);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(50);
      assertEquals(2.6398741444978377E-89, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1529, 1529, 0);
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(1529, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1529, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1630, 1457, 1457);
      double double0 = hypergeometricDistribution0.probability(795);
      assertEquals(1302.3613496932514, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1285, 1285, 1285);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1285);
      assertEquals(1285.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1075, 1075, 1075);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-92));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1075.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(442, 1288, 1288);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (1,288) must be less than or equal to population size (442)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1285, 1285, (-387));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-387)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, (-1216), (-1216), (-1216));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (-1,216)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2386, 2386, 2386);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(2386.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1430, 0, 0);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1430, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1430, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1430, hypergeometricDistribution0.getPopulationSize());
  }
}
