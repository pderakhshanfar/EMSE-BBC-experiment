/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:59:35 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(876);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 676, 474, 101);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(101);
      assertEquals(7.136216010902168E-18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3041, 3041, 3041);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(3041);
      assertEquals(3041.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(968, 968, 968);
      double double0 = hypergeometricDistribution0.cumulativeProbability(968);
      assertEquals(968.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(968, 2546, 968);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (2,546) must be less than or equal to population size (968)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1590), 794, (-1557));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (-1,590)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(876);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 676, 474, 101);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(1.3328090375265745E-63, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 558, 0, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(558, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(968, 968, 968);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(968.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(968, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 558, 0, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(558, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(968, 968, 968);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(968, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 558, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(558, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(968, 968, 968);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(968.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1721, 1189, 1189);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(78.54106506337514, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 558, 0, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(558, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(968, 968, 968);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(968.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(19650218, 19650218, 1865);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-102.13876985995779), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well512a0);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomAdaptor0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 3455, 3455, 0);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(3455, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3455, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[8];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1336, 300, 1050);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(39.16897081165664, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1679, 756, 640);
      hypergeometricDistribution0.upperCumulativeProbability(245);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(245);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(968, 968, 968);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(968.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(968, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(968, 968, 968);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(968.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(968, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(876);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 676, 474, 101);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(991);
      assertEquals(0.0, double0, 0.01);
      assertEquals(70.81952662721893, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[8];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1336, 300, 1050);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-268));
      assertEquals(235.77844311377245, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(968, 968, 968);
      double double0 = hypergeometricDistribution0.probability(3006);
      assertEquals(968.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1721, 1189, 1189);
      hypergeometricDistribution0.cumulativeProbability(887);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(887);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1721, 1189, 1189);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-2991));
      assertEquals(821.453224869262, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1721, 1189, 1189);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1263);
      assertEquals(1.0, double0, 0.01);
      assertEquals(821.453224869262, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(876, 2, 1242);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (1,242) must be less than or equal to population size (876)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1344L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 588, 968, 968);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (968) must be less than or equal to population size (588)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 2489, (-185));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-185)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well44497b well44497b0 = new Well44497b(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2888, (-3490), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (-3,490)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-2182L));
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 0, (-689), 31);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1721, 1189, 1189);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(821.453224869262, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(19650218, 19650218, 1865);
      double double0 = hypergeometricDistribution0.probability((-2954));
      assertEquals((-102.13876985995779), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(19650218, 19650218, 1865);
      hypergeometricDistribution0.sample(1865);
      assertEquals((-102.13876985995779), hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(19650218, 19650218, 1865);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals((-102.13876985995779), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1865, int0);
  }
}
