/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 12:08:10 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(286, 99, 99);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(99);
      assertEquals(1.5369406254487983E-79, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(458, 458, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-246));
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(458, hypergeometricDistribution0.getPopulationSize());
      assertEquals(458, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(365, 365, 365);
      double double0 = hypergeometricDistribution0.cumulativeProbability(365, 365);
      assertEquals(0.0, double0, 0.01);
      assertEquals(365.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(426, 1581, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (1,581) must be less than or equal to population size (426)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(5, (-1329), 5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (-1,329)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well512a well512a0 = new Well512a(2486L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 0, 0, 2636);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(428, 341, 366);
      double double0 = hypergeometricDistribution0.probability(341);
      assertEquals(1.0037138109687638E-54, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1045, 92, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(92, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      assertEquals(1045, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-493L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 428, 428, 428);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(428.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(428, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(458, 458, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(458, hypergeometricDistribution0.getPopulationSize());
      assertEquals(458, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5055, 5055, 5055);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(5055, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1045, 92, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1045, hypergeometricDistribution0.getPopulationSize());
      assertEquals(92, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-493L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 428, 428, 428);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(428.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(428, 341, 366);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(8.606587599665598, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1045, 92, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1045, hypergeometricDistribution0.getPopulationSize());
      assertEquals(92, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(365, 365, 365);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(365.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(571, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(571, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5055, 5055, 5055);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(5055.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(428, 341, 366);
      double double0 = hypergeometricDistribution0.cumulativeProbability(298);
      assertEquals(0.9883996206733524, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5055, 5055, 5055);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(5055.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(428, 341, 366);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(8.606587599665598, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4081, 1108, 2193);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(399);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4265, 811, 811);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(703);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1110, 89, 1489);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (1,489) must be less than or equal to population size (1,110)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-493L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 428, 428, 428);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(428.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(428, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-493L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 428, 428, 428);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(428.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(428, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-493L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 428, 428, 428);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(428.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(428, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(366, 19, 99);
      // Undeclared exception!
      hypergeometricDistribution0.sample(99);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(99, 99, 99);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(144);
      assertEquals(0.0, double0, 0.01);
      assertEquals(99.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(458, 458, 0);
      double double0 = hypergeometricDistribution0.probability(458);
      assertEquals(458, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(458, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(458, 458, 0);
      double double0 = hypergeometricDistribution0.probability((-2618));
      assertEquals(458, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(458, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-493L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 428, 428, 428);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1070.1, 428, 888);
      assertEquals(428.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(4503599627370495L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 393, 393, 567);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (567) must be less than or equal to population size (393)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well19937a well19937a0 = new Well19937a(intArray0);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 600, 302, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-1)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-940), 758, 591);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (-940)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(99, 99, 99);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(99.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 8388607);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(8388607);
      assertEquals(1.0, double0, 0.01);
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 8388607);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-2.0000001192093038), double0, 0.01);
  }
}
