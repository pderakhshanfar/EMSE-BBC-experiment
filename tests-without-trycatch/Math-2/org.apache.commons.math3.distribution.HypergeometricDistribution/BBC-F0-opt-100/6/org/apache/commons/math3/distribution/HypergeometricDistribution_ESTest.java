/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 14:40:18 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(410, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[5];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1954, (-573), 1669);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (-573)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1362), 174, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (-1,362)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(410, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(410, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4, 4, 4);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(410, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(410, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(410, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 19650218, 19650218, 790);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-84.2838977155368), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 0, 1);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(410, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(410, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well512a well512a0 = new Well512a(999);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 999, 2, 2);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.003991983984000048, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well512a well512a0 = new Well512a((-4421L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1627, 368, 368);
      hypergeometricDistribution0.sample();
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability((byte)35);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3696, 1877, 1877);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1207);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well44497b well44497b0 = new Well44497b(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 74, 230, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (230) must be less than or equal to population size (74)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(410, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(410, int0);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(410, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(940, 2, 2);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.00425531914893617, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(940, 2, 2);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(940);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.00425531914893617, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(940, 2, 2);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-490));
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.00425531914893617, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(940, 2, 2);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(2.265878141073573E-6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      double double0 = hypergeometricDistribution0.probability(310);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(410, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(940, 2, 2);
      double double0 = hypergeometricDistribution0.probability((-1987));
      assertEquals(0.00425531914893617, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(410, 1, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1972));
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(410, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 0, 940);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (940) must be less than or equal to population size (2)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 653, 653, (-3726));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-3,726)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 2882, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well512a well512a0 = new Well512a((-4421L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1627, 368, 368);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(72, int0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(49.871387418791855, double0, 0.01);
      assertEquals(83.23540258143824, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(940, 2, 2);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(0.00425531914893617, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(940, 2, 2);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.00425531914893617, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(940, 2, 2);
      double double0 = hypergeometricDistribution0.cumulativeProbability(2, 785);
      assertEquals(0.00425531914893617, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(940, 2, 2);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0.00425531914893617, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
  }
}
