/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:55:01 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(19650173, 163, 19650173);
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2888, 1307, 1307);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1140);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(340, 340, 0);
      hypergeometricDistribution0.cumulativeProbability((-34));
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, (-34), 340);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.probability((-1715));
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.probability(592);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(2037L);
      well19937c0.nextDouble();
      well19937c0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1307, 597, 597);
      hypergeometricDistribution0.reseedRandomGenerator((-1647L));
      hypergeometricDistribution0.probability(597);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.probability(1307);
      hypergeometricDistribution0.upperCumulativeProbability(597);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      // Undeclared exception!
      hypergeometricDistribution0.sample(160);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2700, 607, 1520);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability((-2254));
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(607);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well44497b0, 1604, 1520, 1520);
      hypergeometricDistribution1.probability(1604);
      hypergeometricDistribution1.probability(1194);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution1.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability((-3801));
      hypergeometricDistribution0.probability(607);
      hypergeometricDistribution1.getNumberOfSuccesses();
      hypergeometricDistribution1.cumulativeProbability(265);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextInt();
      int int0 = 2700;
      int int1 = 1520;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2700, 607, 1520);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability((byte)2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-1933);
      int int1 = 1348;
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1348, 975, 2633);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (2,633) must be less than or equal to population size (1,348)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getPopulationSize();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution((RandomGenerator) null, 3, 1, 1);
      hypergeometricDistribution1.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2700, 607, 1520);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)30;
      well44497b0.nextBytes(byteArray0);
      hypergeometricDistribution0.probability(607);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.cumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(0, 1);
      Well1024a well1024a0 = new Well1024a((long) 1);
      HypergeometricDistribution hypergeometricDistribution1 = null;
//      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well1024a0, 1, 1199, (-620));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-620)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1646, 1646, 1646);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2131));
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability((-1376), 1646);
      hypergeometricDistribution0.sample(1646);
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(1646);
      assertEquals(double2, double1, 0.01);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = hypergeometricDistribution0.probability(1646);
      assertEquals(Double.NaN, double4, 0.01);
      
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.upperCumulativeProbability(1646);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      hypergeometricDistribution0.sample(1646);
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double5, 0.01);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.upperCumulativeProbability(1646);
      hypergeometricDistribution0.getSampleSize();
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1646, int0);
      
      double double6 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1646.0, double6, 0.01);
      
      double double7 = hypergeometricDistribution0.cumulativeProbability((-1378));
      assertEquals(0.0, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(871, 871, 871);
      double double0 = hypergeometricDistribution0.cumulativeProbability(871);
      hypergeometricDistribution0.getSupportUpperBound();
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(300);
      assertEquals(double2, double0, 0.01);
      
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(871, int0);
      
      hypergeometricDistribution0.reseedRandomGenerator(1335L);
      double double3 = hypergeometricDistribution0.cumulativeProbability((-141));
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1252, 0, 1252);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1252, int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1252);
      assertEquals(0.0, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int1);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability((-141));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1252, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(588, 0, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(588, int0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int1);
      
      hypergeometricDistribution0.isSupportConnected();
      double double2 = hypergeometricDistribution0.probability(588);
      assertEquals(0.0, double2, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0L);
      well19937c0.nextInt(3554);
      int int0 = 995;
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 955, 1891, 995);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (1,891) must be less than or equal to population size (955)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1624;
      int int1 = 4254;
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1624, 1624, 4254);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (4,254) must be less than or equal to population size (1,624)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(2037L);
      well19937c0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 597, 597, 3742);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // sample size (3,742) must be less than or equal to population size (597)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(3757L);
      int[] intArray0 = new int[9];
      intArray0[0] = 402;
      intArray0[1] = 402;
      intArray0[2] = 402;
      intArray0[3] = 402;
      intArray0[4] = 402;
      intArray0[5] = 402;
      intArray0[6] = 402;
      intArray0[7] = 402;
      intArray0[8] = 402;
      well1024a0.setSeed(intArray0);
      int int0 = 436;
      well1024a0.setSeed(1346);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 402, 436, 436);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (436) must be less than or equal to population size (402)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2700, 607, 1520);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(115.81187736554361, double0, 0.01);
      
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.calculateNumericalVariance();
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)30;
      well44497b0.nextBytes(byteArray0);
      double double1 = hypergeometricDistribution0.probability(607);
      assertEquals(1.7204524167514742E-181, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.probability((-1811));
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 259;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(259, 259, 0);
      int int2 = 0;
      // Undeclared exception!
//      try { 
        hypergeometricDistribution0.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2383;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2383, 2383, 2383);
      hypergeometricDistribution0.reseedRandomGenerator(427L);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(604);
      hypergeometricDistribution0.getPopulationSize();
      // Undeclared exception!
//      try { 
        hypergeometricDistribution0.sample((-829));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-829)
//         //
//         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1;
      int int1 = (-2222);
      int int2 = 137;
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, (-2222), 137);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of successes (-2,222)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-260);
      intArray0[1] = 486;
      intArray0[2] = (-128);
      Well44497a well44497a0 = new Well44497a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, (-2004), 0, 486);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (-2,004)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-1990);
      int int1 = 136;
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1990), (-1990), 136);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (-1,990)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      iSAACRandom0.nextLong();
      iSAACRandom0.nextLong();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2141, 1, 1045);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.sample();
      iSAACRandom0.nextInt(1);
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSampleSize();
      iSAACRandom0.nextFloat();
      hypergeometricDistribution0.getSampleSize();
      iSAACRandom0.nextLong();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
//      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(1691.92917195);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1,691.929 out of [0, 1] range
//         //
//         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(871, 871, 871);
      hypergeometricDistribution0.cumulativeProbability(871);
      hypergeometricDistribution0.getSupportUpperBound();
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(725);
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(871);
      hypergeometricDistribution0.sample();
      double double1 = hypergeometricDistribution0.cumulativeProbability(871);
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(871.0, double2, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getPopulationSize();
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      hypergeometricDistribution0.probability(1386);
      double double0 = hypergeometricDistribution0.probability(1);
      double double1 = hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(1);
      double double2 = hypergeometricDistribution0.cumulativeProbability(1);
      assertEquals(double2, double1, 0.01);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(5.259099728747365E-8, 1, 2112);
      assertEquals(2, int0);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.isSupportConnected();
      double double3 = hypergeometricDistribution0.probability(1463);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      int int1 = 4972;
      HypergeometricDistribution hypergeometricDistribution0 = null;
//      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 4972, 4972);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // population size (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
//      }
  }
}
