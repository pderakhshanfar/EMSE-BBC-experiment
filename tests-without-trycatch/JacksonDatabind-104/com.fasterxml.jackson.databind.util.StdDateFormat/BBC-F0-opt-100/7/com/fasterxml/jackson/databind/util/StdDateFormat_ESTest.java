/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 01:06:17 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Boolean boolean0 = Boolean.valueOf("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, (Locale) null, boolean0, true);
      ParsePosition parsePosition0 = new ParsePosition(15);
//      try { 
        stdDateFormat0._parseAsISO8601("9NfN2^Dzx", parsePosition0);
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"9NfN2^Dzx\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? false)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Boolean boolean0 = Boolean.valueOf("Value \"");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(57);
      stdDateFormat0._parseDate("2.2250738585072012e-308", parsePosition0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.CHINESE;
      ParsePosition parsePosition0 = new ParsePosition(1298);
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0);
      Date date0 = stdDateFormat0._parseDate("0+Cew'(d9", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      stdDateFormat0.instance._clearFormats();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient((Boolean) null);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.CHINESE;
      Boolean boolean0 = Boolean.valueOf("?*ymhop0'");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(17);
      stdDateFormat0.parseAsRFC1123("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(17);
      Boolean boolean0 = new Boolean("BPtu-nJ>zmI&");
      Locale locale0 = Locale.GERMAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
      Date date0 = stdDateFormat0.parseAsISO8601("0000-00-00", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.looksLikeISO8601("Value \"");
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.CHINESE;
      Boolean boolean0 = Boolean.valueOf("?*ymhop0'");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      boolean boolean1 = stdDateFormat0.isColonIncludedInTimeZone();
      assertTrue(boolean1);
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "0000-00-00T00:00");
      Locale locale0 = Locale.GERMAN;
      Boolean boolean0 = Boolean.valueOf("0000-00-00T00:00");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(57, "0000-00-00");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, (Locale) null);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      MockDate mockDate0 = new MockDate((-2), (-2), (-2), 0, 724);
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("1897-10-29T12:04:00.000+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.CHINESE;
      Boolean boolean0 = Boolean.valueOf("?*ymhop0'");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      ParsePosition parsePosition0 = new ParsePosition((-200));
      stdDateFormat0._parseDate("0000-00-00", parsePosition0);
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Boolean boolean0 = Boolean.valueOf("^*Q&xe5kPdTg");
      Locale locale0 = new Locale("^*Q&xe5kPdTg", "^*Q&xe5kPdTg");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      ParsePosition parsePosition0 = new ParsePosition(15);
      stdDateFormat0._parseAsISO8601("0000-00-00", parsePosition0);
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      timeZone0.getOffset(0L);
      stdDateFormat0._getCalendar(timeZone0);
      ParsePosition parsePosition0 = new ParsePosition(369);
      stdDateFormat0._parseDate("lenient", parsePosition0);
      // Undeclared exception!
//      try { 
        stdDateFormat0.looksLikeISO8601((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      boolean boolean0 = StdDateFormat._equals(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
//      try { 
        stdDateFormat0.withLocale((Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, (Locale) null, boolean0, false);
      // Undeclared exception!
//      try { 
        stdDateFormat0.setTimeZone((TimeZone) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition((-1535));
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsRFC1123("C|'.zK{|", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = new Locale("j~&zp", "<B,JmRogu?'w=O", "<B,JmRogu?'w=O");
      Boolean boolean0 = new Boolean("com.fasterxml.jackson.core.io.NumberInput");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsRFC1123("<B,JmRogu?'w=O", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(0);
//      try { 
        stdDateFormat0.parseAsISO8601("", parsePosition0);
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"\": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALIAN;
      Boolean boolean0 = new Boolean("H|he");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      ParsePosition parsePosition0 = new ParsePosition(2206);
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsISO8601("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(43);
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsISO8601((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(222);
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.CANADA;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition((-1299));
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse("qlF%o:@~y5)`", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(70);
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.CHINESE;
      Boolean boolean0 = Boolean.valueOf("?*ymhop0'");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse("");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, (Locale) null, boolean0);
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse("Cannot parse date +%!\": while it seems to fit format '%s', parsing fails (leniency? %s)");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        StdDateFormat.getRFC1123Format((TimeZone) null, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1647), "0000-00-00");
      // Undeclared exception!
//      try { 
        StdDateFormat.getISO8601Format(simpleTimeZone0, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Boolean boolean0 = Boolean.valueOf("Value \"");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        stdDateFormat0.format((Date) null, stringBuffer0, (FieldPosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-1711));
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseDate("t", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition((-1535));
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseDate((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(57);
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(292);
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseAsISO8601((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0._getCalendar((TimeZone) null);
      // Undeclared exception!
//      try { 
        stdDateFormat0._getCalendar((TimeZone) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, (Locale) null, boolean0, false);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
//      try { 
        stdDateFormat0._format((TimeZone) null, (Locale) null, mockDate0, (StringBuffer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      boolean boolean0 = stdDateFormat0.isLenient();
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      boolean boolean1 = stdDateFormat1.isLenient();
      assertFalse(boolean1);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.setLenient(true);
      boolean boolean0 = stdDateFormat0.isLenient();
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Boolean boolean0 = new Boolean("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      Boolean boolean1 = new Boolean("");
      StdDateFormat stdDateFormat2 = stdDateFormat1.withLenient(boolean1);
      assertSame(stdDateFormat2, stdDateFormat1);
      assertFalse(stdDateFormat2.isLenient());
      assertFalse(stdDateFormat2.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(0);
      boolean boolean0 = StdDateFormat._equals((Integer) null, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALIAN;
      Boolean boolean0 = new Boolean("H|he");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      ParsePosition parsePosition0 = new ParsePosition(2206);
      stdDateFormat0.parse("H|he", parsePosition0);
      assertEquals(2206, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=2206,errorIndex=2206]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(217);
      Date date0 = stdDateFormat0._parseDate("*;biyL;P'AwFxXaOH", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = new Locale("~&zp", "<B,JmRogu?'w=O", "- AbN&h");
      ParsePosition parsePosition0 = new ParsePosition(0);
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      stdDateFormat1._parseDate("~&zp", parsePosition0);
      assertNotSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse("0000-00-00T00:00");
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.CHINESE;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      ParsePosition parsePosition0 = new ParsePosition(35);
      stdDateFormat0.parse("1944-07-22T17:51:00.000+00:00", parsePosition0);
      assertEquals("java.text.ParsePosition[index=35,errorIndex=-1]", parsePosition0.toString());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
//      try { 
        stdDateFormat0.parse("6_99\"zp=07Bh");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"6_99\"zp=07Bh\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.DATE_FORMAT_ISO8601;
      boolean boolean0 = stdDateFormat0.equals(mockSimpleDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      String string0 = stdDateFormat0.toPattern();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      MockDate mockDate0 = new MockDate((-1790), (-1790), (-1790), (-1790), (-1790), (-1790));
      String string0 = stdDateFormat0.format((Date) mockDate0);
      assertEquals("0046-09-22T03:40:10.000+0000", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate(331, 13, (-545), 13, (-545));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(294, "");
      Locale locale0 = new Locale("g[7`j_cu_v)B,u%5;i", "0000-00-00T00:00", "0000-00-00T00:00");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, (Boolean) null, true);
      String string0 = stdDateFormat0.format((Date) mockDate0);
      assertTrue(stdDateFormat0.isLenient());
      assertEquals("2230-08-04T03:55:00.294+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-390), "2.2250738585072012e-308");
      Locale locale0 = Locale.PRC;
      StringBuffer stringBuffer0 = new StringBuffer();
      stdDateFormat0._format(simpleTimeZone0, locale0, mockDate0, stringBuffer0);
      assertEquals("2014-02-14T20:21:20.930-0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
//      try { 
        stdDateFormat0.parse(",");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \",\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
//      try { 
        stdDateFormat0.parse("0000-,2-00T00:0");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"0000-,2-00T00:0\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      ParsePosition parsePosition0 = new ParsePosition(57);
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      stdDateFormat0.getTimeZone();
      stdDateFormat0.parse("0000-00-00", parsePosition0);
      Calendar calendar0 = stdDateFormat0._getCalendar((TimeZone) null);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
      
      boolean boolean1 = stdDateFormat0.looksLikeISO8601("0000-00-00");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.CHINESE;
      MockDate mockDate0 = new MockDate(35, 58, 1727, 35, (-2469));
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      String string0 = stdDateFormat0.format((Date) mockDate0);
      assertFalse(stdDateFormat0.isLenient());
      assertEquals("1944-07-22T17:51:00.000+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      stdDateFormat1.setLenient(false);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "kQDtM;(``/$Pc");
      stdDateFormat0.setTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      TimeZone timeZone0 = TimeZone.getDefault();
      stdDateFormat0._timezone = timeZone0;
      stdDateFormat0.setTimeZone(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "0000-00-00T00:00");
      Locale locale0 = Locale.GERMAN;
      Boolean boolean0 = Boolean.valueOf("0000-00-00T00:00");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(simpleTimeZone0);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, (Locale) null, boolean0, false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      TimeZone timeZone0 = TimeZone.getDefault();
      StdDateFormat stdDateFormat1 = stdDateFormat0.instance.withTimeZone(timeZone0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.hashCode();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Boolean boolean0 = Boolean.valueOf("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      TimeZone.getDefault();
      Locale locale1 = new Locale("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "ha~", "");
      StdDateFormat stdDateFormat1 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      MockDate mockDate0 = new MockDate((-1369), 57, 0, 1199, 33);
      StdDateFormat stdDateFormat2 = stdDateFormat1.clone();
      ParsePosition parsePosition0 = new ParsePosition(1409);
      MockDate mockDate1 = new MockDate(1199, 41, 33, 15, 57);
      StdDateFormat stdDateFormat3 = stdDateFormat2.withLocale(locale1);
      stdDateFormat3.instance.setLenient(true);
      StdDateFormat stdDateFormat4 = stdDateFormat2.withLenient(boolean0);
      // Undeclared exception!
//      try { 
        stdDateFormat4._parseAsISO8601("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      boolean boolean0 = stdDateFormat0.isColonIncludedInTimeZone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALIAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getISO8601Format(timeZone0, locale0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "0000-00-00T00:00");
      Locale locale0 = Locale.GERMAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getRFC1123Format(simpleTimeZone0, locale0);
      assertEquals("EEE, tt MMM uuuu HH:mm:ss zzz", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(1139);
//      try { 
        stdDateFormat0.instance._parseDate("-", parsePosition0);
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Timestamp value - out of 64-bit value range
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F*Dz0$");
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = new Boolean(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      String string0 = stdDateFormat0.toString();
      assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale: zh_CN, lenient: true)", string0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("0080-00-00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Boolean boolean0 = Boolean.valueOf("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, (Locale) null, boolean0, true);
      ParsePosition parsePosition0 = new ParsePosition(100);
//      try { 
        stdDateFormat0._parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? false)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.CANADA;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0);
      Date date0 = stdDateFormat0.parse("7");
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }
}
