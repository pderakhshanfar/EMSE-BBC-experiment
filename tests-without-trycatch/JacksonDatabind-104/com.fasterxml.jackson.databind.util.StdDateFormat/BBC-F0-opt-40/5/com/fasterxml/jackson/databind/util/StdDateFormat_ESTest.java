/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 00:53:30 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.io.StringWriter;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      Date date0 = stdDateFormat0.parse("0005-00-00");
      assertNotNull(date0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
//      try { 
        stdDateFormat0.parse("2.2250738585072012e-308");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"2.2250738585072012e-308\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(45);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=45,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(45, parsePosition0.getIndex());
      
      Date date0 = stdDateFormat0._parseDate("lenient", parsePosition0);
      assertNull(date0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertEquals("java.text.ParsePosition[index=45,errorIndex=45]", parsePosition0.toString());
      assertEquals(45, parsePosition0.getIndex());
      assertEquals(45, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      
      Date date0 = stdDateFormat0.parse("Y", parsePosition0);
      assertNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
//      try { 
        stdDateFormat0.parseObject("]QD%q9");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Format.parseObject(String) failed
//         //
//         verifyException("java.text.Format", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(7);
      //  // Unstable assertion: assertNotNull(parsePosition0);
      //  // Unstable assertion: assertEquals((-1), parsePosition0.getErrorIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=7,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertEquals(7, parsePosition0.getIndex());
      
      stdDateFormat0.parse("0000-00-A00T00:00", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag("Cannot parse date \"%s\": not compatible with any of standard forms (%s)");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertNotNull(stdDateFormat1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
      assertSame(stdDateFormat0, stdDateFormat1);
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(729, "0000-00-00T00:00");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=0000-00-00T00:00,offset=729,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(729, simpleTimeZone0.getRawOffset());
      assertEquals("0000-00-00T00:00", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      Boolean boolean0 = Boolean.valueOf("EEE, dd MMM yyyy HH:mm:ss zzz");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      assertNotNull(stdDateFormat0);
      assertEquals("java.util.SimpleTimeZone[id=0000-00-00T00:00,offset=729,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(729, simpleTimeZone0.getRawOffset());
      assertEquals("0000-00-00T00:00", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      assertNotNull(stdDateFormat1);
      assertEquals("java.util.SimpleTimeZone[id=0000-00-00T00:00,offset=729,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(729, simpleTimeZone0.getRawOffset());
      assertEquals("0000-00-00T00:00", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
      assertNotSame(stdDateFormat0, stdDateFormat1);
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("59!X", "59!X");
      assertNotNull(locale0);
      assertEquals("59!X", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("59!x", locale0.getLanguage());
      assertEquals("59!x_59!X", locale0.toString());
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("59!X", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("59!x", locale0.getLanguage());
      assertEquals("59!x_59!X", locale0.toString());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Date date0 = stdDateFormat0.parseAsRFC1123("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
      assertNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("59!X", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("59!x", locale0.getLanguage());
      assertEquals("59!x_59!X", locale0.toString());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(45);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=45,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(45, parsePosition0.getIndex());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      Date date0 = stdDateFormat0.parseAsISO8601("0000-00-00", parsePosition0);
      assertNotNull(date0);
      assertEquals("java.text.ParsePosition[index=45,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(45, parsePosition0.getIndex());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      
      Date date0 = stdDateFormat0.parse("0000-00-00", parsePosition0);
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      boolean boolean0 = stdDateFormat0.looksLikeISO8601("0000-00-00");
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "', '");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=', ',offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("', '", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("java.util.SimpleTimeZone[id=', ',offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("', '", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      boolean boolean0 = stdDateFormat0.looksLikeISO8601("', '");
      assertEquals("java.util.SimpleTimeZone[id=', ',offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("', '", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(729, "0000-00-00T00:00");
      assertNotNull(simpleTimeZone0);
      assertEquals("0000-00-00T00:00", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0000-00-00T00:00,offset=729,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(729, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      
      Boolean boolean0 = Boolean.valueOf("EEE, dd MMM yyyy HH:mm:ss zzz");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      assertNotNull(stdDateFormat0);
      assertEquals("0000-00-00T00:00", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0000-00-00T00:00,offset=729,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(729, simpleTimeZone0.getRawOffset());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("0000-00-00T00:00", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0000-00-00T00:00,offset=729,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(729, simpleTimeZone0.getRawOffset());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      assertEquals("0000-00-00T00:00", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0000-00-00T00:00,offset=729,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(729, timeZone0.getRawOffset());
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4835), "0000-00-00");
      assertNotNull(simpleTimeZone0);
      assertEquals((-4835), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=0000-00-00,offset=-4835,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("0000-00-00", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      assertNotNull(stdDateFormat0);
      assertEquals((-4835), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=0000-00-00,offset=-4835,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("0000-00-00", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals((-4835), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=0000-00-00,offset=-4835,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("0000-00-00", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals((-4835), timeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=0000-00-00,offset=-4835,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("0000-00-00", timeZone0.getID());
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "', '");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=', ',offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("', '", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=', ',offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("', '", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=', ',offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("', '", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("', '", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=', ',offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=yyyy-MM-dd'T'HH:mm:ss.SSSZ,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getRFC1123Format(simpleTimeZone0, locale0);
      assertNotNull(mockSimpleDateFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=yyyy-MM-dd'T'HH:mm:ss.SSSZ,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("EEE, dd MMM yyyy HH:mm:ss zzz", mockSimpleDateFormat0.toPattern());
      assertEquals("EEE, dd MMM yyyy HH:mm:ss zzz", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      Boolean boolean0 = new Boolean("lenient");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      assertNotNull(stdDateFormat0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
      assertNotNull(stdDateFormat1);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat0, stdDateFormat1);
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(45);
      //  // Unstable assertion: assertNotNull(parsePosition0);
      //  // Unstable assertion: assertEquals((-1), parsePosition0.getErrorIndex());
      //  // Unstable assertion: assertEquals(45, parsePosition0.getIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=45,errorIndex=-1]", parsePosition0.toString());
      
      stdDateFormat0._parseAsISO8601("0000-00-00", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag("Cannot parse date \"%s\": not compatible with any of standard forms (%s)");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      
      Calendar calendar0 = stdDateFormat0._getCalendar(timeZone0);
      assertNotNull(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMANY;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0);
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      stdDateFormat0.instance._getCalendar(zoneInfo0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = StdDateFormat._equals("W['.Mc:O", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      assertNotNull(zoneInfo0);
      assertEquals("UTC", zoneInfo0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
      assertNotNull(stdDateFormat0);
      assertEquals("UTC", zoneInfo0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.withLocale((Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.instance.setTimeZone((TimeZone) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition((-2821));
      assertNotNull(parsePosition0);
      assertEquals((-2821), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-2821,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsRFC1123("0000-00-00T00:00", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(1);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsRFC1123((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(333);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=333,errorIndex=-1]", parsePosition0.toString());
      assertEquals(333, parsePosition0.getIndex());
      
//      try { 
        stdDateFormat0.parseAsISO8601(":rV11,ZVMDN", parsePosition0);
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \":rV11,ZVMDN\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(45);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=45,errorIndex=-1]", parsePosition0.toString());
      assertEquals(45, parsePosition0.getIndex());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsISO8601((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition((-303));
      //  // Unstable assertion: assertNotNull(parsePosition0);
      //  // Unstable assertion: assertEquals((-303), parsePosition0.getIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=-303,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      parsePosition0.setIndex((-900));
      assertEquals("java.text.ParsePosition[index=-900,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-900), parsePosition0.getIndex());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse("<_V$'T)~C@[(ny7Lw@T", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.instance.parse("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.toString());
      
      Boolean boolean0 = Boolean.valueOf("<Z40{K");
      //  // Unstable assertion: assertNotNull(boolean0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.toString());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(45);
      //  // Unstable assertion: assertNotNull(parsePosition0);
      //  // Unstable assertion: assertEquals((-1), parsePosition0.getErrorIndex());
      //  // Unstable assertion: assertEquals(45, parsePosition0.getIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=45,errorIndex=-1]", parsePosition0.toString());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse("");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse("0000-00-00T00:00");
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.looksLikeISO8601((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      // Undeclared exception!
//      try { 
        StdDateFormat.getISO8601Format(timeZone0, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.format((Date) null, stringBuffer0, fieldPosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      Boolean boolean0 = new Boolean("lenient");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      assertNotNull(stdDateFormat0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition((-151));
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=-151,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-151), parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseDate("Ftw", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(5);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=5,errorIndex=-1]", parsePosition0.toString());
      assertEquals(5, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseDate((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      //  // Unstable assertion: assertNotNull(timeZone0);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag("Cannot parse date \"%s\": not compatible with any of standard forms (%s)");
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.toString());
      
      Boolean boolean0 = new Boolean(true);
      //  // Unstable assertion: assertNotNull(boolean0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      //  // Unstable assertion: assertEquals("", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.toString());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition((-957));
      //  // Unstable assertion: assertNotNull(parsePosition0);
      //  // Unstable assertion: assertEquals((-957), parsePosition0.getIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=-957,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag("Cannot parse date \"%s\": not compatible with any of standard forms (%s)");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(1);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(1, parsePosition0.getIndex());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseAsISO8601("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag("Cannot parse date \"%s\": not compatible with any of standard forms (%s)");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertFalse(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(848);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=848,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(848, parsePosition0.getIndex());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseAsISO8601((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      
      stdDateFormat0.instance._getCalendar((TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      MockDate mockDate0 = new MockDate((-2046), 1453, (-1298));
      assertNotNull(mockDate0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      assertNotNull(zoneInfo0);
      assertEquals("UTC", zoneInfo0.getID());
      
      // Undeclared exception!
//      try { 
        stdDateFormat0._format(zoneInfo0, locale0, mockDate0, (StringBuffer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      boolean boolean0 = stdDateFormat0.isLenient();
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      assertNotNull(stdDateFormat1);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
      assertNotSame(stdDateFormat0, stdDateFormat1);
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      
      boolean boolean1 = stdDateFormat1.isLenient();
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
      assertNotSame(stdDateFormat0, stdDateFormat1);
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(boolean1);
      assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
      assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = StdDateFormat._equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag("Cannot parse date \"%s\": not compatible with any of standard forms (%s)");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient((Boolean) null);
      assertNotNull(stdDateFormat1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat1.isLenient());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat0, stdDateFormat1);
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      Boolean boolean0 = Boolean.valueOf("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      StdDateFormat stdDateFormat1 = new StdDateFormat(stdDateFormat0.instance._timezone, locale0, boolean0);
      assertNotNull(stdDateFormat1);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      
      ParsePosition parsePosition0 = new ParsePosition(45);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=45,errorIndex=-1]", parsePosition0.toString());
      assertEquals(45, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Date date0 = stdDateFormat1._parseDate("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
      assertNull(date0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertEquals(45, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=45,errorIndex=45]", parsePosition0.toString());
      assertEquals(45, parsePosition0.getIndex());
      assertNotSame(stdDateFormat0, stdDateFormat1);
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
      assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertNotNull(stdDateFormat1);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertTrue(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat0, stdDateFormat1);
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      
//      try { 
        stdDateFormat1.parseObject("0uX#bo~MdY_su:6");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Format.parseObject(String) failed
//         //
//         verifyException("java.text.Format", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
//      try { 
        stdDateFormat0.parse("0000--00");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"0000--00\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
//      try { 
        stdDateFormat0.parse("0000 00-00");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"0000 00-00\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "\" can not be represented as BigDecimal");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("\" can not be represented as BigDecimal", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=\" can not be represented as BigDecimal,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(simpleTimeZone0);
      assertNotNull(stdDateFormat1);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("\" can not be represented as BigDecimal", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=\" can not be represented as BigDecimal,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat1.isLenient());
      assertNotSame(stdDateFormat0, stdDateFormat1);
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      
      boolean boolean0 = stdDateFormat0.equals(stdDateFormat1);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("\" can not be represented as BigDecimal", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=\" can not be represented as BigDecimal,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat1.isLenient());
      assertNotSame(stdDateFormat0, stdDateFormat1);
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(boolean0);
      assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
      assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      assertNotNull(zoneInfo0);
      assertEquals("UTC", zoneInfo0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
      assertNotNull(stdDateFormat0);
      assertEquals("UTC", zoneInfo0.getID());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      
      String string0 = stdDateFormat0.toPattern();
      assertNotNull(string0);
      assertEquals("UTC", zoneInfo0.getID());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (strict)]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      String string0 = stdDateFormat0.toPattern();
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      MockDate mockDate0 = new MockDate((-1709), (-1709), (-1709), (-1709), (-1709), 84);
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      // Undeclared exception!
//      try { 
        stdDateFormat0.instance.format((Date) mockDate0);
//       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag("Cannot parse date \"%s\": not compatible with any of standard forms (%s)");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      MockDate mockDate0 = new MockDate(1213, (-914), 2);
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer("WF(Q$Q0a}:>R");
      assertNotNull(stringBuffer0);
      assertEquals("WF(Q$Q0a}:>R", stringBuffer0.toString());
      assertEquals(12, stringBuffer0.length());
      
      FieldPosition fieldPosition0 = new FieldPosition((-914));
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals("java.text.FieldPosition[field=-914,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals((-914), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      StringBuffer stringBuffer1 = stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertNotNull(stringBuffer1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertEquals("Wed Nov 02 00:00:00 GMT 3036", mockDate0.toString());
      assertEquals(41, stringBuffer0.length());
      assertEquals("WF(Q$Q0a}:>R3036-11-02T00:00:00.000+00:00", stringBuffer0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals("java.text.FieldPosition[field=-914,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals((-914), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("WF(Q$Q0a}:>R3036-11-02T00:00:00.000+00:00", stringBuffer1.toString());
      assertEquals(41, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)StdDateFormat.CALENDAR;
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer();
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Locale locale0 = Locale.GERMAN;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(43, "UW?jaOhzPCJx,");
      stdDateFormat1._format(simpleTimeZone0, locale0, date0, stringBuffer0);
      //  // Unstable assertion: assertEquals("1582-10-15T00:00:00.043+00:00", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-12219292800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=yyyy-MM-dd'T'HH:mm:ss.SSSZ,offset=-914,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1582,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=277,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=86,ZONE_OFFSET=-914,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      stdDateFormat0.instance._format(simpleTimeZone0, locale0, date0, stringBuffer0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ1582-10-04T23:59:59.086-0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Integer integer0 = new Integer(105);
      stdDateFormat0.format((Object) integer0);
      ParsePosition parsePosition0 = new ParsePosition(105);
      ParsePosition parsePosition1 = new ParsePosition(105);
//      try { 
        stdDateFormat0._parseDate("1970-01-01T00:00:00.105+0000", parsePosition1);
//       //  fail("Expecting exception: ParseException");
       // Unstable assertion
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"1970-01-01T00:00:00.105+0000\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
//      try { 
        stdDateFormat0.parse("-");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Timestamp value - out of 64-bit value range
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(1);
      stdDateFormat0._parseDate("+0000", parsePosition0);
      assertEquals(1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(1103);
      Date date0 = stdDateFormat0._parseDate("0000-20-05", parsePosition0);
      assertNotNull(date0);
      assertEquals((-1), parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.setLenient(true);
      boolean boolean0 = stdDateFormat0.isLenient();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.ENGLISH;
      Boolean boolean0 = Boolean.valueOf("<Z40{K");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
      stdDateFormat0.setLenient(false);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "000-0000");
      Locale locale0 = Locale.UK;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, (Boolean) null);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
      stdDateFormat0.instance.setTimeZone(simpleTimeZone0);
      ParsePosition parsePosition0 = new ParsePosition(2248);
      // Undeclared exception!
//      try { 
        stdDateFormat1.parseAsISO8601("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      stdDateFormat0.setTimeZone(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      boolean boolean0 = stdDateFormat1.isColonIncludedInTimeZone();
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(729, "0000-00-00T00:00");
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = Boolean.valueOf("EEE, dd MMM yyyy HH:mm:ss zzz");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("Cannot parse date \"%s\": not compatible with any of standard forms (%s)");
      TimeZone timeZone1 = TimeZone.getTimeZone("0000-00-00T00:00");
      Boolean boolean0 = Boolean.valueOf((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone1, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4835), "0000-00-00");
      Locale locale0 = Locale.UK;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(simpleTimeZone0);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      stdDateFormat0._clearFormats();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "N^{`7");
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getISO8601Format(simpleTimeZone0, locale0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8");
      // Undeclared exception!
//      try { 
        StdDateFormat.getRFC1123Format(timeZone0, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition((-2));
      stdDateFormat0.parseObject("8", parsePosition0);
      int int0 = (-3209);
      MockDate mockDate0 = new MockDate((-90), (-3209), (-957));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      StringBuffer stringBuffer1 = new StringBuffer("0000-00-00T00:00");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-2363));
      stringBuffer1.append((Object) parsePosition0);
      StringBuffer stringBuffer2 = decimalFormat0.format((-3075.12), stringBuffer0, fieldPosition0);
      decimalFormat0.format((-1L), stringBuffer2, fieldPosition0);
      stringBuffer1.append(stringBuffer0);
      stdDateFormat0.format((Date) mockDate0, stringBuffer1, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      String string0 = stdDateFormat0.toString();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: null, locale: en_US, lenient: null)", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      stdDateFormat0.parse("0090-00-00");
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.CANADA;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      stdDateFormat0.hashCode();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("Cannot parse date \"%s\": not compatible with any of standard forms (%s)");
      Boolean boolean0 = new Boolean(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      stdDateFormat0.clone();
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      boolean boolean0 = stdDateFormat0.isColonIncludedInTimeZone();
      assertFalse(boolean0);
  }
}
