/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 00:40:17 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.parse("0004-00-00");
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]VydMun");
      Boolean boolean0 = Boolean.FALSE;
      Locale locale0 = Locale.forLanguageTag("V9*$Q7;g_*");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
//      try { 
        stdDateFormat0.parse("2.2250738585072012e-308");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"2.2250738585072012e-308\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]Vydtun");
      Locale locale0 = Locale.JAPAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
//      try { 
        stdDateFormat0.parse("]Vydtun");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"]Vydtun\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      String string0 = "'";
//      try { 
        stdDateFormat0.parse(string0);
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"'\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
//      try { 
        stdDateFormat0.parse("~azk<Cb}AHIQ9");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"~azk<Cb}AHIQ9\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, ";Y<q{[b");
      Locale locale0 = Locale.ROOT;
      Boolean boolean0 = new Boolean((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      MockDate mockDate0 = new MockDate(12, 2, 12, 2, 12);
      StringBuffer stringBuffer0 = new StringBuffer();
      stdDateFormat0._format(simpleTimeZone0, locale0, mockDate0, stringBuffer0);
      assertEquals("1912-03-12T02:12:00.012+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      stdDateFormat0.instance._clearFormats();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, ";Y<q{[b");
      Locale locale0 = Locale.ROOT;
      Boolean boolean0 = new Boolean((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      StdDateFormat stdDateFormat2 = stdDateFormat1.withLocale(locale0);
      assertNotSame(stdDateFormat2, stdDateFormat0);
      assertTrue(stdDateFormat2.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat2.isLenient());
      assertSame(stdDateFormat2, stdDateFormat1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, ";Y<q{[b");
      Locale locale0 = Locale.ROOT;
      Boolean boolean0 = new Boolean((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(12);
      stdDateFormat0.instance.parseAsRFC1123("9G", parsePosition0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = new Locale("wg(56i");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(27);
      Date date0 = stdDateFormat0.parseAsISO8601("0000-00-00", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(1338);
      stdDateFormat0.parse("0000-00-7(0WT0:00", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1338,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(23, ";Y<q{[b");
      Locale locale0 = Locale.ROOT;
      Boolean boolean0 = new Boolean((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(3944);
      Date date0 = stdDateFormat0.parse("0000-00-00", parsePosition0);
      assertNotNull(date0);
      assertEquals((-1), parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = Boolean.valueOf("mHW)Ck;XB");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      boolean boolean1 = stdDateFormat0.looksLikeISO8601("0000-00-00");
      assertTrue(boolean1);
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1442), "+0000", (-1442), 0, 31, 4501, 4501, 0, (-1251), (-1442));
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      stdDateFormat0.looksLikeISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = new Locale("RkT[");
      Boolean boolean0 = Boolean.valueOf("");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
      boolean boolean1 = stdDateFormat0.isColonIncludedInTimeZone();
      assertFalse(boolean1);
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "+0000");
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4040), "0000-00-00");
      Locale locale0 = Locale.GERMAN;
      Boolean boolean0 = new Boolean("5)klA<9q_");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, ";Y<q{[b");
      Locale locale0 = Locale.ROOT;
      Boolean boolean0 = new Boolean((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getISO8601Format(timeZone0, locale0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      StdDateFormat stdDateFormat2 = stdDateFormat1.clone();
      assertFalse(stdDateFormat2.isLenient());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(7, "");
      Locale locale0 = new Locale("Value \"");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, (Boolean) null, true);
      stdDateFormat0.clone();
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(864);
      Date date0 = stdDateFormat0._parseDate("0000-00-00", parsePosition0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, ";Y<q{[b");
      Locale locale0 = Locale.ROOT;
      Boolean boolean0 = new Boolean((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(3944);
      stdDateFormat0._parseAsISO8601("0000-00-00", parsePosition0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1442), "+0000", (-1442), 0, 31, 4501, 4501, 0, (-1251), (-1442));
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = stdDateFormat0._getCalendar(timeZone0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Calendar calendar0 = stdDateFormat0._getCalendar(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = StdDateFormat.DEFAULT_LOCALE;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      boolean boolean0 = StdDateFormat._equals((Object) dateFormat0, (Object) dateFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = StdDateFormat._equals((Object) "", (Object) "com.fasterxml.jackson.core.io.NumberInput");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
//      try { 
        stdDateFormat0.withLocale((Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
//      try { 
        stdDateFormat0.setTimeZone((TimeZone) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition((-787));
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsRFC1123("/", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, ";Y<q{[b");
      Locale locale0 = Locale.ROOT;
      Boolean boolean0 = new Boolean((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(12);
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsRFC1123((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
//      try { 
        stdDateFormat0.parseAsISO8601("-Q8+y", parsePosition0);
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"-Q8+y\": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(2147483645);
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsISO8601((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(3170);
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(57);
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse((String) null, (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse("");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
//      try { 
        stdDateFormat0.parse("0000-00-00T00:00");
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
//      try { 
        stdDateFormat0.looksLikeISO8601((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
//      try { 
        StdDateFormat.getRFC1123Format((TimeZone) null, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      FieldPosition fieldPosition0 = new FieldPosition(2);
      // Undeclared exception!
//      try { 
        stdDateFormat0.instance.format((Date) null, (StringBuffer) null, fieldPosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(57);
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseDate("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(23, ";Y<q{[b");
      Locale locale0 = Locale.ROOT;
      Boolean boolean0 = new Boolean((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(3944);
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseDate((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      ParsePosition parsePosition0 = new ParsePosition(1210);
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]VydMun");
      Boolean boolean0 = new Boolean("Value \"");
      Locale locale0 = Locale.forLanguageTag("V9*$Q7;g_*");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition((-6));
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseAsISO8601("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(518);
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseAsISO8601((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(31);
      // Undeclared exception!
//      try { 
        stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      stdDateFormat0._getCalendar((TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Locale locale0 = Locale.GERMAN;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        stdDateFormat0._format((TimeZone) null, locale0, (Date) null, stringBuffer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
//      try { 
        stdDateFormat0.format((Date) mockDate0);
//       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      boolean boolean0 = stdDateFormat0.isLenient();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      boolean boolean1 = stdDateFormat0.isLenient();
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Boolean boolean0 = new Boolean("3AdQ[Di_hO]b<r*:");
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
      stdDateFormat0.setLenient(false);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]VydMun");
      Boolean boolean0 = Boolean.FALSE;
      Locale locale0 = Locale.forLanguageTag("V9*$Q7;g_*");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient((Boolean) null);
      assertFalse(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      ParsePosition parsePosition0 = new ParsePosition(57);
      Date date0 = stdDateFormat0._parseDate("J", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Locale locale0 = Locale.CANADA;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
//      try { 
        stdDateFormat1.parseObject(stdDateFormat0.DATE_FORMAT_STR_ISO8601);
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Format.parseObject(String) failed
//         //
//         verifyException("java.text.Format", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = new Locale("wg(56i");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1528);
//      try { 
        stdDateFormat0._parseAsISO8601("!dyvDr", parsePosition0);
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"!dyvDr\": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(1528);
//      try { 
        stdDateFormat0._parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? true)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
//      try { 
        stdDateFormat0.parse("0000--00T0:t0");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"0000--00T0:t0\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]VydMun");
      Boolean boolean0 = Boolean.FALSE;
      Locale locale0 = Locale.forLanguageTag("V9*$Q7;g_*");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
//      try { 
        stdDateFormat0.parse("5epS!ohPQfow");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"5epS!ohPQfow\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.CANADA_FRENCH;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      boolean boolean1 = stdDateFormat0.equals(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.FRANCE;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      boolean boolean1 = stdDateFormat0.equals(locale0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, ";Y<q{[b");
      Locale locale0 = Locale.ROOT;
      Boolean boolean0 = new Boolean((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      String string0 = stdDateFormat0.toPattern();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (strict)]", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.TAIWAN;
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      String string0 = stdDateFormat0.instance.toPattern();
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]", string0);
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]VydMun");
      Boolean boolean0 = new Boolean("Value \"");
      Locale locale0 = Locale.forLanguageTag("V9*$Q7;g_*");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      MockDate mockDate0 = new MockDate((-1935), 54, 519, (-227), (-6));
      StringBuffer stringBuffer0 = new StringBuffer();
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, (FieldPosition) null);
      assertEquals(28, stringBuffer0.length());
      assertEquals("0031-11-21T12:54:00.000+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = new Locale("wg(56i");
      Boolean boolean0 = new Boolean("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      MockDate mockDate0 = new MockDate();
      String string0 = stdDateFormat0.format((Date) mockDate0);
      assertEquals("2014-02-14T20:21:21.320+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, ";Y<q{[b");
      Locale locale0 = Locale.ROOT;
      Boolean boolean0 = new Boolean((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      MockDate mockDate0 = new MockDate(2, (-6), 0, 2, (-6032));
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      StringBuffer stringBuffer0 = new StringBuffer();
      stdDateFormat1.format((Date) mockDate0, stringBuffer0, (FieldPosition) null);
      assertEquals("1901-06-25T21:28:00.012+00:00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = Boolean.FALSE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-85), "+0000");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      MockDate mockDate0 = new MockDate((-227), 54, 54, (-2539), (-227));
      StringBuffer stringBuffer0 = new StringBuffer();
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, (FieldPosition) null);
      assertEquals("1677-05-09T01:12:59.915-0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("7");
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
//      try { 
        stdDateFormat0.parse("2#W1 yuc8*o5]h{*EQ");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Cannot parse date \"2#W1 yuc8*o5]h{*EQ\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      assertFalse(stdDateFormat0.isLenient());
      
      stdDateFormat0.setLenient(true);
      boolean boolean1 = stdDateFormat0.isLenient();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      stdDateFormat0.setTimeZone(zoneInfo0);
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4040), "0000-00-00");
      Locale locale0 = Locale.GERMAN;
      Boolean boolean0 = new Boolean("5)klA<9q_");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
      assertFalse(stdDateFormat1.isLenient());
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      ZoneInfo zoneInfo1 = (ZoneInfo)zoneInfo0.clone();
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(zoneInfo1);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isLenient());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(zoneInfo0);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(zoneInfo0);
      ParsePosition parsePosition0 = new ParsePosition(1338);
      // Undeclared exception!
//      try { 
        stdDateFormat1.parse("0000-00-00T00:00", parsePosition0);
//       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
//      } catch(IllegalStateException e) {
//         //
//         // No match available
//         //
//         verifyException("java.util.regex.Matcher", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.CANADA_FRENCH;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      stdDateFormat0.hashCode();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      TimeZone timeZone0 = TimeZone.getDefault();
      stdDateFormat0.setTimeZone(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      boolean boolean1 = stdDateFormat0.isColonIncludedInTimeZone();
      assertFalse(stdDateFormat0.isLenient());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      // Undeclared exception!
//      try { 
        StdDateFormat.getISO8601Format(timeZone0, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4040), "0000-00-00");
      Locale locale0 = Locale.GERMAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getRFC1123Format(simpleTimeZone0, locale0);
      assertEquals("EEE, tt MMM uuuu HH:mm:ss zzz", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
//      try { 
        stdDateFormat0.parse("-");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Timestamp value - out of 64-bit value range
//         //
//         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = Boolean.FALSE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-85), "+0000");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      String string0 = stdDateFormat0.toString();
      assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: java.util.SimpleTimeZone[id=+0000,offset=-85,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0], locale: zh_CN, lenient: false)", string0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("0020-00-00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1618));
      // Undeclared exception!
//      try { 
        stdDateFormat0.parseAsISO8601("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }
}
