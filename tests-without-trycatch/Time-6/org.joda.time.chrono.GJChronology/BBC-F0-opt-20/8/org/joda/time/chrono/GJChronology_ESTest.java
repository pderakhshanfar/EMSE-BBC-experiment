/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 00:25:54 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicMonthOfYearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJYearOfEraDateTimeField;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 3);
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getDurationField();
      Hours hours0 = Hours.EIGHT;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, preciseDurationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.getMinimumValue((long) 2);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 2592000001L, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      DurationField durationField0 = gJChronology0.days();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(1L, 2592000001L);
      assertEquals(0L, long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(1, 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 1);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-117327398400000L), (long) 2);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {3717, 11, 0, 0, 0, 0, 0, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1461L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, 1461L, (long) 3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-1), (-458)}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 1);
      DateTimeField dateTimeField0 = gJChronology0.era();
      DurationField durationField0 = gJChronology0.millis();
      Hours hours0 = Hours.EIGHT;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, preciseDurationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.roundHalfCeiling((-2207L));
      assertEquals((-62105356800000L), long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      mutableDateTime0.setRounding(dateTimeField0, 3);
      assertEquals(1388361600000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, 1418947200000L, 1);
      LocalDate localDate0 = new LocalDate(1418947200000L);
      LocalDate localDate1 = new LocalDate(localDate0, gJChronology0);
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-661));
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.addWrapField((long) 1, 31);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      dateTimeField0.getLeapAmount(4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.isLeap(2);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 10000L, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 60);
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getDurationField();
      Hours hours0 = Hours.EIGHT;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 60);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, preciseDurationField0, durationField0);
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
//      try { 
        zonedChronology_ZonedDateTimeField0.set(10000L, ";l/", locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value \";l/\" for weekyearOfCentury is not supported
//         //
//         verifyException("org.joda.time.field.BaseDateTimeField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 4);
      LocalDate localDate0 = new LocalDate((long) 1, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        gJChronology0.set(localDate0, (-2678399997L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 19 for dayOfMonth is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 4, 1);
      GJChronology gJChronology1 = GJChronology.getInstance();
      LocalDate localDate0 = new LocalDate(1461L, (Chronology) gJChronology1);
      // Undeclared exception!
//      try { 
        gJChronology0.set(localDate0, 3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 1 for dayOfMonth is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 1);
      LocalDate localDate0 = new LocalDate((long) 2, (Chronology) gJChronology0);
      Seconds.secondsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 4, 1);
      MonthDay monthDay0 = new MonthDay(2480L, (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plusDays((-1185));
      assertEquals(4, monthDay1.getDayOfMonth());
      assertEquals(1, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      String string0 = dateTimeField0.getAsShortText((-2498L));
      assertEquals("71", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 1);
      DateTimeField dateTimeField0 = gJChronology0.year();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getDurationField();
      Locale locale0 = Locale.ITALY;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, (DurationField) null, (DurationField) null);
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText((long) 2, locale0);
      assertEquals("1970", string0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 5);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1970-01-01,mdfw=5]", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (-235772726400000L), 4);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=-5502-08-29]", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-14L), (DateTimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 3);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(3, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MockDate mockDate0 = new MockDate((-479), 292272984, 176);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (-10191995757970L), 4);
//      try { 
        gJChronology0.getDateTimeMillis(2, 2, 1, 7, 2147483646, (-3941), 3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 2147483646 for minuteOfHour must be in the range [0,59]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = null;
//      try {
        dateTime0 = new DateTime(1801, 4513, (-1503), 1801, 4, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 1801 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 4, 1);
      Chronology chronology0 = gJChronology0.withUTC();
      assertNotSame(chronology0, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByYear(31083663600000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(31081935600000L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByYear(0L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1123200000L), long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1475L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      long long0 = gJChronology0.julianToGregorianByWeekyear(0);
      assertEquals((-1209600000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1475L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      long long0 = gJChronology0.gregorianToJulianByYear(2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1123200002L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      long long0 = gJChronology0.gregorianToJulianByYear((-85709318400000L));
      assertEquals((-85678473600000L), long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByWeekyear(1065L);
      assertEquals(1209601065L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-41023152000000L));
      assertEquals((-41023152000000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1475L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1475L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1475L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      long long0 = gJChronology0.getDateTimeMillis(1647, 1, 1, 2, 4, 2, 29);
      assertEquals((-10191995757971L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.getDateTimeMillis(5616, 4, 5, 3);
      assertEquals(115064841600003L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-14L), (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      long long0 = gJChronology0.getDateTimeMillis(1475, 1, 2, 2459);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-15619823997541L), long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (-10191995757971L), 4);
      // Undeclared exception!
//      try { 
        gJChronology0.julianToGregorianByWeekyear((-10191995757971L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 53 for weekOfWeekyear must be in the range [1,52]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      // Undeclared exception!
//      try { 
        gJChronology0.gregorianToJulianByYear((-9223372036854775808L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -292275054 for year must be in the range [-292269054,292272992]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 2, 4);
      // Undeclared exception!
//      try { 
        gJChronology0.gregorianToJulianByWeekyear(31536000000L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 53 for weekOfWeekyear must be in the range [1,52]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
//      try { 
        GJChronology.getInstance((DateTimeZone) null, (-9223372017043200000L), 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 292278995 for weekyear must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      // Undeclared exception!
//      try { 
        GJChronology.getInstance(dateTimeZone0, (-76336300800000L), 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: 0
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
//      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.GJChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      mutableDateTime0.setRounding(dateTimeField0, 3);
      assertEquals(1389484800000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1475L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(mutableDateTime0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(62035200000L, (DateTimeZone) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 4);
      gJChronology0.getBase();
      LocalDate localDate0 = new LocalDate(mutableDateTime0, gJChronology0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(9);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone1, (ReadableInstant) null, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gJChronology0, dateTimeField0);
      skipUndoDateTimeField0.getLeapDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone1, (DurationField) null, (DurationField) null, (DurationField) null);
      zonedChronology_ZonedDateTimeField0.getMinimumValue(4331L);
      // Undeclared exception!
//      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 590);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: 590
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 4);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(0L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      int int0 = dateTimeField0.getMinimumValue(307L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      long long0 = dateTimeField0.getDifferenceAsLong(0, 3);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      DurationField durationField0 = gJChronology0.days();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(1, 1391L);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1475L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      Period period0 = Period.years((-1856));
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 0L, (-1601L));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-1), (-601)}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Chronology chronology0 = gJChronology0.getBase();
      Months months0 = Months.SEVEN;
      long long0 = chronology0.add((ReadablePeriod) months0, (-12219292800000L), 2);
      assertEquals((-12182486400000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 1, 5);
      Months months0 = Months.FIVE;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-117136360679995L), (long) 1);
      assertArrayEquals(new int[] {44542}, intArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 4);
      LocalDate localDate0 = new LocalDate((long) 3, (Chronology) gJChronology0);
      LocalDate localDate1 = localDate0.plusWeeks(3);
      LocalDate localDate2 = localDate1.minusYears(4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(localDate2.equals((Object)localDate0));
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 1, 5);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, 2147483647L, (long) 0);
      assertArrayEquals(new int[] {0, (-1), 0, 6, 3, 28, 36, 353}, intArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      long long0 = dateTimeField0.roundHalfCeiling((-1671L));
      assertEquals(0L, long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.dayOfYear();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-661));
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getDurationField();
      Hours hours0 = Hours.MIN_VALUE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-661));
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, preciseDurationField0, preciseDurationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.roundHalfCeiling((-2695L));
      assertEquals(0L, long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, 0L, 1);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      long long0 = dateTimeField0.roundHalfCeiling((-2638L));
      assertEquals(0L, long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate localDate0 = new LocalDate((-12219292800000L));
      LocalDate localDate1 = null;
//      try {
        localDate1 = new LocalDate(localDate0, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 15 for dayOfMonth must not be larger than 4
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-661));
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.addWrapField((long) 31, 11);
      assertEquals(950400031L, long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.dayOfYear();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-661));
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getDurationField();
      Hours hours0 = Hours.MIN_VALUE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-661));
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, preciseDurationField0, preciseDurationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.addWrapField(1194L, 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(86401194L, long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 86400970L, 1);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      long long0 = dateTimeField0.addWrapField(86400970L, 2145269747);
      assertEquals(1555200970L, long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      DurationField durationField0 = gJChronology0.centuries();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, (DurationField) null, durationField0);
      zonedChronology_ZonedDateTimeField0.getLeapAmount(2);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      int int0 = dateTimeField0.getLeapAmount(2859L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      DurationField durationField0 = gJChronology0.years();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.isLeap((-188L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      boolean boolean0 = dateTimeField0.isLeap(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      Locale locale0 = Locale.ROOT;
      long long0 = dateTimeField0.set((long) 0, "3", locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-2145830400000L), long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      Locale locale0 = Locale.ITALY;
      long long0 = dateTimeField0.set((-24L), "3", locale0);
      assertEquals((-1296000024L), long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) julianChronology0);
      // Undeclared exception!
//      try { 
        gJChronology0.set(localDate0, 5655L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 5 for dayOfMonth is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      long long0 = gJChronology0.set(localDate0, (-32645376000000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 4);
      LocalDate localDate0 = new LocalDate((long) 3, (Chronology) gJChronology0);
      LocalDate localDate1 = localDate0.plusMonths(3);
      // Undeclared exception!
//      try { 
        Seconds.secondsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 1970 for year is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 1, 5);
      MonthDay monthDay0 = new MonthDay((long) 5, (Chronology) gJChronology0);
      Days days0 = Days.ZERO;
      MonthDay monthDay1 = monthDay0.plus(days0);
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getDurationField();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, preciseDurationField0, durationField0);
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText((long) 2, (Locale) null);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("71", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getDurationField();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, preciseDurationField0, durationField0);
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText((long) 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("70", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      Locale locale0 = Locale.ITALY;
      String string0 = dateTimeField0.getAsText(35249731200000L, locale0);
      assertEquals("88", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      Locale locale0 = Locale.ITALY;
      String string0 = dateTimeField0.getAsText(100656000000L, locale0);
      assertEquals("74", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=2014-02-14T20:21:21.320Z,mdfw=1]", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (-10191995757971L), 4);
      GJChronology gJChronology1 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 3);
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, 692L, 2);
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertTrue(boolean0);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(4978125, 3, 7, 3, 3, 7, 26);
      assertEquals(157032290142187026L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = null;
//      try {
        localDateTime0 = new LocalDateTime(2, 2, 29, 21, 29, 2, 2, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 29 for dayOfMonth must be in the range [1,28]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = null;
//      try {
        localDateTime0 = new LocalDateTime(1458, 2, 1458, 317, 2, 317, 2, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 317 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
//      try { 
        gJChronology0.getDateTimeMillis(207, 0, 91, 0, 0, 2, 40);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for monthOfYear must be in the range [1,12]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((-1749), 2, 5, 2, 2, 0, 5, gJChronology0);
      Chronology chronology0 = gJChronology0.getBase();
      LocalDate localDate0 = new LocalDate(localDateTime0, chronology0);
      localDate0.minusYears(28);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 1);
//      try { 
        gJChronology0.getDateTimeMillis(1970, 1, 1, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Specified date does not exist
//         //
//         verifyException("org.joda.time.chrono.GJChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
//      try { 
        gJChronology0.getDateTimeMillis(11, 1072, 2575, 1231);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 1072 for monthOfYear must be in the range [1,12]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Chronology chronology0 = gJChronology0.getBase();
      Months months0 = Months.SEVEN;
      long long0 = chronology0.add((ReadablePeriod) months0, (-473L), (-723));
      assertEquals((-13308364800473L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period((-13308364800473L));
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-12219292800000L), (long) (-723));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {387, 2, 2, 2, 23, 59, 59, 277}, intArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 2592000001L, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      DurationField durationField0 = gJChronology0.days();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(offsetDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(1L, 192651667315200000L);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-6104888L), long0);
      assertEquals(292278994, offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.getDifferenceAsLong((-661), (-661));
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      LocalDate localDate0 = new LocalDate(1158L, (Chronology) gJChronology0);
      Locale locale0 = Locale.FRENCH;
      String string0 = dateTimeField0.getAsText((ReadablePartial) localDate0, (-686), locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("-686", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime(363, 73281320, (-3153), 4711, 42, 4711, (-3153), lenientChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 4, 1);
      MonthDay monthDay0 = new MonthDay(2480L, (Chronology) gJChronology0);
      Days days0 = Days.SIX;
      MonthDay monthDay1 = monthDay0.plus(days0);
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay1.getMonthOfYear());
      assertEquals(7, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      Locale locale0 = Locale.CANADA;
      int int0 = dateTimeField0.getMaximumTextLength(locale0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-661));
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      int int0 = zonedChronology_ZonedDateTimeField0.getDifference(1, (-661));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 4);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      MonthDay monthDay0 = new MonthDay((long) 4, (Chronology) islamicChronology0);
      int int0 = dateTimeField0.getMaximumValue((ReadablePartial) monthDay0);
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 1);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DurationField durationField0 = gJChronology0.millis();
      Hours hours0 = Hours.EIGHT;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, preciseDurationField0, durationField0, durationField0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      zonedChronology_ZonedDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      int int0 = dateTimeField0.getMinimumValue((ReadablePartial) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      MockDate mockDate0 = new MockDate();
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = dateTimeField0.getAsShortText((ReadablePartial) monthDay0, (-4071), locale0);
      assertEquals("-4071", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      LocalDate localDate0 = new LocalDate(1531, 1, 35, lenientChronology0);
      LocalDate localDate1 = localDate0.withWeekyear(3087);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByWeekyear(198980317429200000L);
      assertEquals(198976230190800000L, long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DurationField durationField0 = gJChronology0.years();
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-4));
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      Locale locale0 = Locale.ITALY;
      long long0 = zonedChronology_ZonedDateTimeField0.set((long) 0, "3", locale0);
      assertEquals((-62072438400000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      long long0 = dateTimeField0.getDifferenceAsLong(12, (-12857616000000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(407L, long0);
  }
}
