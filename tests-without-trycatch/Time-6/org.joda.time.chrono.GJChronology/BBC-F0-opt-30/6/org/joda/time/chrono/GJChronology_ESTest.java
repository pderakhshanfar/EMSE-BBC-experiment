/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 00:22:05 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicDayOfMonthDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.MillisDurationField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1155);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1420070400000L, 1);
      YearMonth yearMonth0 = new YearMonth(1420070400000L, (Chronology) gJChronology0);
      YearMonth yearMonth1 = yearMonth0.withYear(1155);
      assertEquals(1, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      DurationField durationField0 = gJChronology0.centuries();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      zonedChronology_ZonedDurationField0.getDifferenceAsLong((-300L), 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DurationField durationField0 = gJChronology0.centuries();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      long long0 = zonedChronology_ZonedDurationField0.getDifferenceAsLong(1601L, (-1707L));
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-232L), (Chronology) gJChronology0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (long) 1, (-436L));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-437)}, intArray0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Months months0 = Months.ZERO;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-300L), (-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {(-4646)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth((-39L), (Chronology) lenientChronology0);
      Period period0 = new Period(yearMonth0, yearMonth0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-62133091199999L), 1920L);
      assertArrayEquals(new int[] {1968, 11, 0, 0, 0, 0, 1, 919}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((-1123200000L), (Chronology) gJChronology0);
      yearMonth0.withYear(1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 3);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1155);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1420070400000L, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      Partial partial0 = new Partial(localDateTime0);
      Days days0 = Days.THREE;
      // Undeclared exception!
//      try { 
        partial0.withPeriodAdded(days0, 1155);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 2014 for year is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 2);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth(3656L, (Chronology) lenientChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(2678400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3726));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) (-3726), 6);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[-00:00:03.726,cutover=1969-12-31T23:59:56.274Z,mdfw=6]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1155);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-79271049600000L), 1);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[+00:00:01.155,cutover=-0542-01-01,mdfw=1]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2541L), 1);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1155);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1420070400000L, 1);
//      try { 
        gJChronology0.getDateTimeMillis(2, 2, 1, 1, 3, 146, (-2472));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 146 for secondOfMinute must be in the range [0,59]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = null;
//      try {
        dateTime0 = new DateTime((-264), 0, 93, (-264), (-264), 0, 0, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -264 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-12216960000000L), 4);
      YearMonth yearMonth0 = new YearMonth((-12216960000000L), (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        yearMonth0.toInterval();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Specified date does not exist
//         //
//         verifyException("org.joda.time.chrono.GJChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1155);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1420070400000L, 1);
      long long0 = gJChronology0.julianToGregorianByYear(2147483647L);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1024283647L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1162);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
      long long0 = gJChronology0.julianToGregorianByYear(1162);
      assertEquals((-1123198838L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear(1392336000029L);
      assertEquals(1391126400029L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2541L), 1);
      long long0 = gJChronology0.julianToGregorianByWeekyear(1);
      assertEquals((-1209599999L), long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByYear((-1123200000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      long long0 = gJChronology0.gregorianToJulianByYear(1607L);
      assertEquals(1123201607L, long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      long long0 = gJChronology0.gregorianToJulianByYear((-12219292800000L));
      assertEquals((-12218428800000L), long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 4);
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209600000L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-30136924800000L));
      assertEquals((-30136320000000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 3);
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertEquals(0L, instant1.getMillis());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 2);
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(2168, 4, 18, 18);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(6257606400018L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62135769599999L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
//      try { 
        gJChronology0.julianToGregorianByWeekyear((-62135769599999L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 53 for weekOfWeekyear must be in the range [1,52]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
//      try { 
        gJChronology0.gregorianToJulianByYear((-62135769599999L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for year is not supported
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
//      try { 
        gJChronology0.gregorianToJulianByWeekyear((-62135769599999L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for year is not supported
//         //
//         verifyException("org.joda.time.field.SkipDateTimeField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2543L), 1);
      // Undeclared exception!
//      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.GJChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2534L), 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
//      try { 
        gJChronology0.getDateTimeMillis(29, 2, 29, 2, 29, 29, 11);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 29 for dayOfMonth must be in the range [1,28]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology.getInstance(dateTimeZone0, (-2541L), 1);
      GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 2);
//      try { 
        gJChronology0.getDateTimeMillis(888, 2, 86396504, 1002, 91, (-1), 612);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 1002 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GJChronology.getInstance();
      int int0 = (-999);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-999));
      Instant instant0 = Instant.now();
      // Undeclared exception!
//      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, (-999));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: -999
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1162);
      // Undeclared exception!
//      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: 0
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) fixedDateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      DurationField durationField0 = gJChronology0.centuries();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      zonedChronology_ZonedDurationField0.getDifferenceAsLong((-300L), 1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      DurationField durationField0 = gJChronology0.centuries();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      zonedChronology_ZonedDurationField0.getDifferenceAsLong(1, 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-232L), (Chronology) gJChronology0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, 0L, (-436L));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-436)}, intArray0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2534L), 1);
      Months months0 = Months.months(1);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-2534L), 1676L);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-232L), (Chronology) gJChronology0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, 9999873769600000L, (-300L));
      assertArrayEquals(new int[] {(-316883), (-5), 1, 4, 6, 13, 19, 700}, intArray0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, 31449600000L, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology1);
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) lenientChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(31536000000L, interval0.getEndMillis());
      assertEquals((-1555200000L), interval0.getStartMillis());
      assertEquals(1969, yearMonth0.getYear());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1707L, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth(2592000026L, (Chronology) lenientChronology0);
      Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (-60778857600000L), 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth((-60778857600000L), (Chronology) lenientChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals((-60781536000000L), interval0.getStartMillis());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals((-60778684800000L), interval0.getEndMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1155);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1420070400000L, 1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Partial partial0 = new Partial(dateTimeFieldType0, 1155);
      Partial partial1 = partial0.withChronologyRetainFields(gJChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      Partial partial2 = partial1.withFieldAdded(durationFieldType0, 236548278);
      assertFalse(partial2.equals((Object)partial1));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) lenientChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(2678400000L, interval0.getEndMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1155);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1420070400000L, 1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      lenientChronology0.validate(monthDay0, intArray0);
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 1, 1);
      LocalDateTime localDateTime0 = new LocalDateTime((-498L));
      // Undeclared exception!
//      try { 
        gJChronology0.set(localDateTime0, (-498L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 31 for dayOfMonth is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((-9223372036854775779L), (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        yearMonth0.minusMonths(7);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -292269055 for year is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2529L), 1);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      BasicDayOfMonthDateTimeField basicDayOfMonthDateTimeField0 = new BasicDayOfMonthDateTimeField(julianChronology0, millisDurationField0);
      DateTimeFieldType dateTimeFieldType0 = basicDayOfMonthDateTimeField0.getType();
      Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Partial partial1 = partial0.withPeriodAdded(mutablePeriod0, 1);
      assertEquals(1, partial1.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2541L), 1);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1155);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1420070400000L, 1);
      Object object0 = new Object();
      boolean boolean0 = gJChronology0.equals(object0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-12219292800000L));
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 3);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2541L), 1);
      long long0 = gJChronology0.getDateTimeMillis(1350, 1, 3, 2, 1, 28, 3);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-19564408711997L), long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.getDateTimeMillis(5542, 2, 2, 2, 4, 11, 11);
      assertEquals(112724186651011L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2541L), 1);
//      try { 
        gJChronology0.getDateTimeMillis(0, Integer.MAX_VALUE, 5, 2146973678, (-48), 1, 3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 2146973678 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        yearMonth0.toInterval();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Specified date does not exist
//         //
//         verifyException("org.joda.time.chrono.GJChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, 2678400000L, 1);
      YearMonth yearMonth0 = new YearMonth(2678400000L, (Chronology) gJChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(1);
      Interval interval0 = yearMonth1.toInterval();
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1123200000L, interval0.getStartMillis());
      assertEquals(1970, yearMonth1.getYear());
      assertEquals(2678400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
//      try { 
        gJChronology0.getDateTimeMillis(1, 2, (-2021), (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -1 for millisOfDay must be in the range [0,86399999]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1155);
      // Undeclared exception!
//      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 1155);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: 1155
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1420070400000L, 1);
      DurationField durationField0 = gJChronology0.centuries();
      long long0 = durationField0.getDifferenceAsLong((-300L), 1420070400000L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2541L), 1);
      YearMonth yearMonth0 = new YearMonth(2187L, (Chronology) gJChronology0);
      Interval interval0 = yearMonth0.toInterval();
      DateTime dateTime0 = interval0.getStart();
      Years years0 = Years.TWO;
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) years0);
      assertEquals(63072000000L, dateTime1.getMillis());
      assertEquals(2678400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2529L), 1);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L, (Chronology) julianChronology0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-129351081600000L), 826L);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {4098, 11, (-1), (-2), (-23), (-59), (-59), (-174)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1155);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1420070400000L, 1);
      DurationField durationField0 = gJChronology0.centuries();
      durationField0.getDifferenceAsLong(1420070400000L, 1155);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2534L), 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      Partial partial0 = new Partial(localDateTime0);
      Days days0 = Days.THREE;
      Partial partial1 = partial0.withPeriodAdded(days0, 1);
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (-2678400000L), 2);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      lenientChronology0.withZone(dateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((-2678400000L), (Chronology) gJChronology1);
      YearMonth yearMonth1 = yearMonth0.minusMonths(1208);
      yearMonth1.withYear((-3361));
      Interval interval0 = new Interval((-3361), 2, dateTimeZone0);
      assertEquals(2L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      Partial partial0 = new Partial(localDateTime0);
      Days days0 = Days.THREE;
      // Undeclared exception!
//      try { 
        partial0.withPeriodAdded(days0, 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 14 for dayOfMonth is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByWeekyear(3687L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1209603687L, long0);
  }
}
