/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 16:15:12 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant(313L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      Months months0 = Months.ONE;
      gJChronology0.get((ReadablePeriod) months0, 313L, (-474L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Months months0 = Months.SEVEN;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, 1392409279997L, 2848L);
      assertArrayEquals(new int[] {(-529)}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.ONE;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.add((ReadablePeriod) months0, (-12219292800000L), 13);
      assertEquals((-12185078400000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Months months0 = Months.TEN;
      GJChronology gJChronology0 = GJChronology.getInstance();
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-66678595199982L), 1392409281320L);
      assertArrayEquals(new int[] {25884}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MonthDay monthDay0 = new MonthDay(26L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 0, 1);
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(gJChronology0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant(1L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0, 2);
      LocalDate localDate0 = new LocalDate((long) 2, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        gJChronology0.set(localDate0, 1L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 19 for dayOfMonth is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, 1413331200000L, 4);
      LocalDate localDate0 = new LocalDate(1413331200000L, (Chronology) gJChronology0);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      assertEquals(1, minutes0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 1, 5);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1970-01-01T00:00:00.001Z,mdfw=5]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-62135769599997L), 1);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=0000-12-30T00:00:00.003Z,mdfw=1]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0, 6);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
//      try { 
        gJChronology0.getDateTimeMillis(4, (-1827), 34, 60, (-5864), 34, 1086);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 60 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, 1413331200000L, 4);
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByYear(97286400000L);
      assertEquals(96163200000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant(20L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.julianToGregorianByYear(20L);
      assertEquals((-1123199980L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 0L, 2);
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, 1413331200000L, 4);
      long long0 = gJChronology0.julianToGregorianByWeekyear(15638400000L);
      assertEquals(14428800000L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByWeekyear(3);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1209599997L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByYear((-1576L));
      assertEquals(1123198424L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86400);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 3600L, 1);
      long long0 = gJChronology0.gregorianToJulianByYear((-6366643198514L));
      assertEquals((-6365692798514L), long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-430L));
      assertEquals(1209599570L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-12219292800000L));
      assertEquals((-12218688000000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 0L, 2);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(0L, instant0.getMillis());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime(662L, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(662L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 4);
      long long0 = gJChronology0.getDateTimeMillis(1101320, 4, 1, 17, 1, 5, 17);
      assertEquals(34692143072465017L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.getDateTimeMillis(5705, 1, 1, 5705);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(117865238405705L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
//      try { 
        gJChronology0.julianToGregorianByWeekyear((-62135769599999L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 53 for weekOfWeekyear must be in the range [1,52]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      // Undeclared exception!
//      try { 
        gJChronology0.gregorianToJulianByYear((-62135769599999L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for year is not supported
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
//      try { 
        gJChronology0.gregorianToJulianByWeekyear(31536000000L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 53 for weekOfWeekyear must be in the range [1,52]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      // Undeclared exception!
//      try { 
        GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) (-2321), (-2321));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: -2321
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
//      try { 
        gJChronology0.getDateTimeMillis((-178), (-213), (-4447), 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -213 for monthOfYear must be in the range [1,12]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
//      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.GJChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(2, 2, 2, 2, 2, 2, 2);
      assertEquals((-62101461477998L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) zonedChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
//      try { 
        gJChronology0.getDateTimeMillis(29, 2, 29, 2, 2, 2, 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 29 for dayOfMonth must be in the range [1,28]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant(1L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0, 2);
//      try { 
        gJChronology0.getDateTimeMillis(2, 2, 3172, 2, 3172, 2147483639, 2147483639);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 3172 for minuteOfHour must be in the range [0,59]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62135769599999L), long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant(1L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0, 2);
      DateTimeFieldType.dayOfWeek();
      gJChronology0.withUTC();
      Months months0 = Months.EIGHT;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-62135769600000L), 1L);
      assertArrayEquals(new int[] {23628}, intArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = Instant.now();
      // Undeclared exception!
//      try { 
        GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0, 31);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: 31
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter2);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0, 2);
      Months months0 = Months.NINE;
      Period period0 = new Period((long) 2, (Chronology) gJChronology0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-62135769600000L), (long) 2);
      assertArrayEquals(new int[] {1969, 0, 0, 0, 0, 0, 0, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 4);
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant(1L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0, 2);
      Months months0 = Months.TEN;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, 0L, (-1300L));
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Months months0 = Months.ONE;
      long long0 = gJChronology0.add((ReadablePeriod) months0, (-19206892800659L), 15356250);
      assertEquals(40363829539199341L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Months months0 = Months.TEN;
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.add((ReadablePeriod) months0, (long) (-704), (-704));
      assertEquals((-18512841600704L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Months months0 = Months.SIX;
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      LocalDate localDate0 = new LocalDate((long) 719536, (Chronology) gJChronology0);
      LocalDate localDate1 = localDate0.withWeekyear(719536);
      localDate1.plus(months0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plusMonths((-2145412785));
      assertEquals(14, monthDay1.getDayOfMonth());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(5, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-12219292799996L), (Chronology) gJChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      LocalDate localDate1 = null;
//      try {
        localDate1 = new LocalDate(localDate0, dateTimeZone0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 15 for dayOfMonth must not be larger than 4
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = Instant.now();
      MonthDay monthDay0 = new MonthDay((-43L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      monthDay0.withChronologyRetainFields(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 7, 7);
      LocalDate localDate0 = new LocalDate(2678400000L, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 1970 for year is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now();
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(gJChronology0);
      Period period0 = new Period();
      MonthDay monthDay2 = monthDay1.plus(period0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay2.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 0L, 2);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=1970-01-01,mdfw=2]", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=2014-02-14T20:21:21.320Z]", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = Instant.now();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 0, 1);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      boolean boolean0 = gJChronology0.equals(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertTrue(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 2);
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 4);
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
//      try { 
        gJChronology0.getDateTimeMillis(2, 2, 2, 2, 2, 77, 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 77 for secondOfMinute must be in the range [0,59]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
//      try { 
        gJChronology0.getDateTimeMillis(3574, 2, 29, 23, 23, 2, 29);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 29 for dayOfMonth must be in the range [1,28]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
//      try { 
        gJChronology0.getDateTimeMillis(59, 59, 59, 59, 59, 59, 59);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 59 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      LocalDateTime localDateTime0 = new LocalDateTime(instant0, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 2);
      LocalDate localDate0 = null;
//      try {
        localDate0 = new LocalDate((Object) null, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Specified date does not exist
//         //
//         verifyException("org.joda.time.chrono.GJChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (-12219292800000L), 4);
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      Period period0 = Period.days(4);
      LocalDate localDate1 = localDate0.minus(period0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 2);
      Months months0 = Months.SEVEN;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, 10000000000000L, 1L);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {(-3803)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plusDays(1);
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(15, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 2);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      LocalDate localDate0 = new LocalDate(2678400000L, (Chronology) lenientChronology0);
      Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (-62135769599999L), 5);
      LocalDate localDate0 = null;
//      try {
        localDate0 = new LocalDate((-62135769599999L), (Chronology) gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for year is not supported
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 2);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 2, (Chronology) gJChronology0);
      localDateTime0.toDateTime((DateTimeZone) null);
      LocalDate localDate0 = new LocalDate((long) 2, (Chronology) gJChronology0);
      Period period0 = Period.hours(2);
      localDate0.plus(period0);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      LocalDate localDate1 = localDate0.withWeekyear(796);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }
}
