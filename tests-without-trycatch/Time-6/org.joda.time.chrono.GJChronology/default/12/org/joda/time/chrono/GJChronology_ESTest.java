/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 16:16:02 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      DurationField durationField0 = gJChronology0.years();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(skipDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.addWrapField(1L, 2);
      assertEquals(6311433600001L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getDifferenceAsLong((-317L), 1L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getDifferenceAsLong(3, 1L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getDifferenceAsLong(1, 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-12219292800000L), (-62071660799997L), gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(86395083L, (-12219292800000L), gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTime dateTime0 = new DateTime(4, 211, 2626, 2626, 11, 32, lenientChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-61252724908000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-61943828400000L), 1, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(55L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(2629746000L, 2, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1121L, gJChronology0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.era();
      mutableDateTime0.setRounding(dateTimeField0, 4);
      assertEquals((-62135769600000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate.now((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, 5);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(skipDateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      long long0 = zonedChronology_ZonedDateTimeField0.addWrapField(1L, 1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(86400001L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getLeapAmount(1L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.era();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      zonedChronology_ZonedDateTimeField0.isLeap(1392409281320L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      DurationField durationField0 = gJChronology0.years();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(skipDateTimeField0, dateTimeZone0, durationField0, durationField0, (DurationField) null);
      // Undeclared exception!
//      try { 
        zonedChronology_ZonedDateTimeField0.set(1L, "#!#^");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value \"#!#^\" for centuryOfEra is not supported
//         //
//         verifyException("org.joda.time.field.BaseDateTimeField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(55L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      MonthDay monthDay0 = new MonthDay(31449600000L, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        monthDay0.plusMonths(3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 31 for dayOfMonth is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 22, 703, 21, 22, 22);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      long long0 = gJChronology0.set(localDate0, 10368000000L);
      assertEquals((-12219292800000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        localDate0.toDateTimeAtCurrentTime();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 1 for dayOfMonth is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plusDays(1);
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(15, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      DurationField durationField0 = gJChronology0.years();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(skipDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.getAsShortText(1L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getAsText(1L, (Locale) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 5);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=2014-02-14T20:21:21.320Z,mdfw=5]", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-14452300799997L), 1);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=1512-01-11T00:00:00.003Z,mdfw=1]", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) null, 2);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1123198396L), (Chronology) gJChronology0);
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 3);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = null;
//      try {
        dateTime0 = new DateTime(2, 2, 2, 1, 4, 63, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 63 for secondOfMinute must be in the range [0,59]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = null;
//      try {
        dateTime0 = new DateTime(65, 65, 65, 65, 65, 65, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 65 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      // Undeclared exception!
//      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800016L), 1479);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: 1479
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByYear(21260793600000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(21259238400000L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByYear(0);
      assertEquals((-1123200000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear(2551440384L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1341840384L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByWeekyear(1164L);
      assertEquals((-1209598836L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByYear((-671L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1123199329L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByYear((-4294967296L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-3171767296L), long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-12219292800000L));
      assertEquals((-12218688000000L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      long long0 = gJChronology0.getDateTimeMillis(2878, 1, 1, 1, 31, 3, 620);
      assertEquals(28653787863620L, long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(7, 7, 11, 7, 11, 7, 26);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-61929938932974L), long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%T_aAlr66`\"GX");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) islamicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      long long0 = gJChronology0.getDateTimeMillis(2006, 11, 1, 1);
      assertEquals(1163462400001L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      // Undeclared exception!
//      try { 
        gJChronology0.gregorianToJulianByYear(9223372036854775807L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 292278994 for year must be in the range [-292269054,292272992]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
//      try { 
        gJChronology0.gregorianToJulianByWeekyear((-9223372034409600000L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -292275055 for weekyear must be in the range [-292269055,292272992]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime((-9223372034409600000L), (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 292278994 for weekyear must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime((-9223372034409600000L), (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 292278994 for weekyear must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
//      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.GJChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.assemble((AssembledChronology.Fields) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = null;
//      try {
        dateTime0 = new DateTime(65533, 2, 29, 2, 2, 29, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 29 for dayOfMonth must be in the range [1,28]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
//      try { 
        gJChronology0.getDateTimeMillis(10, (-7), 11, 93, 93, 11, (-7));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 93 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      // Undeclared exception!
//      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: 0
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = gJChronology0.getGregorianCutover();
      LocalDateTime localDateTime0 = new LocalDateTime(instant0, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(1, 1, 1, buddhistChronology0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(855);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 2);
      ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 2);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      long long0 = dateTimeField0.addWrapField((long) 2, 5);
      assertEquals(13046400002L, long0);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getDifferenceAsLong(0, 5);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-451));
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-451), dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getDifferenceAsLong(73281320L, (-1495L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(236L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 4);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, remainderDateTimeField0);
      skipDateTimeField0.getDifferenceAsLong(5, 86400000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      LocalDate localDate0 = new LocalDate(11, 11, 11, lenientChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTime dateTime0 = new DateTime((-1979), 292271046, (-1979), 292271046, 292271046, (-1979), lenientChronology0);
      assertEquals(769543565491981000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-79266470400000L), 2, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-79266470400000L), 5, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
      localDateTime0.withWeekyear(3);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1, 2, 2, 0, 5, 1, 5);
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, 0);
      mutableDateTime0.setRounding((DateTimeField) skipDateTimeField0, 4);
      assertEquals((-62105356800000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 2);
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      long long0 = dateTimeField0.roundHalfCeiling((-81635731201363L));
      assertEquals((-81635731200001L), long0);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 3);
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      long long0 = dateTimeField0.roundHalfCeiling((-11L));
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      mutableDateTime0.setRounding(dateTimeField0, 3);
      assertEquals((-62135769600000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      MonthDay monthDay0 = new MonthDay((long) 5, (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.withMonthOfYear(1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      // Undeclared exception!
//      try { 
        dateTimeField0.addWrapField((long) 2, 5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // MIN > MAX
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 3);
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      long long0 = dateTimeField0.addWrapField((long) (-2), 0);
      assertEquals((-2L), long0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 3);
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      long long0 = dateTimeField0.addWrapField((long) 0, 4);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14400000L, long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.weekOfWeekyear();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getLeapAmount(19918786464000010L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(855);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.era();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, 11);
      skipDateTimeField0.getLeapAmount(11);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 3);
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      dateTimeField0.isLeap(0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(855);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.era();
      dateTimeField0.isLeap(2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      // Undeclared exception!
//      try { 
        dateTimeField0.set((long) 4, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value null for hourOfDay is not supported
//         //
//         verifyException("org.joda.time.field.BaseDateTimeField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 3);
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      // Undeclared exception!
//      try { 
        dateTimeField0.set((-50952197106000L), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value null for hourOfDay is not supported
//         //
//         verifyException("org.joda.time.field.BaseDateTimeField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
//      try { 
        gJChronology0.set(monthDay0, 1392409278637L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 14 for dayOfMonth is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      Period period0 = new Period(monthDay0, monthDay0);
      MonthDay monthDay1 = monthDay0.minus(period0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      dateTimeField0.getAsShortText((long) 3);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      DurationField durationField0 = gJChronology0.years();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(skipDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText((-1L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("20", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      dateTimeField0.getAsText((-688L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 3);
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      Locale locale0 = Locale.PRC;
      String string0 = dateTimeField0.getAsText((-79303104000000L), locale0);
      assertEquals("0", string0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=1970-01-01T00:00:00.001Z]", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 2);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[+00:00:00.003,cutover=1970-01-01,mdfw=2]", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Object object0 = gJChronology0.getParam();
      boolean boolean0 = gJChronology0.equals(object0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertTrue(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (-12219292800000L), 2);
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertEquals(2, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((-1L), (Chronology) gJChronology0);
      Instant instant0 = Instant.now();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = null;
//      try {
        dateTime0 = new DateTime((-1), 2, 1968, (-2270), 1968, (-2114445437), gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -2270 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = null;
//      try {
        dateTime0 = new DateTime(3, 2, 29, 3, 3, 9, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 29 for dayOfMonth must be in the range [1,28]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.getDateTimeMillis(4, 4, 4, 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62033039999996L), long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
//      try { 
        gJChronology0.getDateTimeMillis(4, 9, (-216), 36);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -216 for dayOfMonth must be in the range [1,30]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Months months0 = Months.ONE;
      long long0 = gJChronology0.add((ReadablePeriod) months0, 2551440384L, 41);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(110292240384L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(5);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 5, 3);
      MutablePeriod mutablePeriod0 = new MutablePeriod(1555200000L, (-2562L), gJChronology0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.weekOfWeekyear();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.getDifferenceAsLong(19918786464000000L, 680L);
      assertEquals(32934501L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      Locale locale0 = Locale.JAPAN;
      String string0 = dateTimeField0.getAsText(1, locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("\u897F\u66A6", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((long) 5, (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.minusDays(4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(28, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 3);
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      Locale locale0 = Locale.US;
      dateTimeField0.getMaximumTextLength(locale0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 3);
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      dateTimeField0.getDifference(4, 0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.weekOfWeekyear();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      int int0 = dateTimeField0.getMaximumValue((ReadablePartial) localDateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      Locale locale0 = Locale.FRANCE;
      dateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      dateTimeField0.getMinimumValue((ReadablePartial) yearMonth0);
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((-12L), (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.withMonthOfYear(11);
      assertEquals(30, monthDay1.getDayOfMonth());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
//      try { 
        dateTimeField0.getAsShortText(4, locale0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-1L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1209599999L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LenientChronology.getInstance(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
//      try { 
        gJChronology0.set(localDateTime0, 3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 14 for dayOfMonth is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      long long0 = zonedChronology_ZonedDateTimeField0.addWrapField((long) (-2), 78);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2460326399998L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByYear((-1123200000L));
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }
}
