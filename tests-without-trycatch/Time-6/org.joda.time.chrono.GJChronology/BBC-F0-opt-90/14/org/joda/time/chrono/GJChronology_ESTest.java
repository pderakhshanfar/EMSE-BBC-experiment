/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 22:46:20 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicYearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJEraDateTimeField;
import org.joda.time.chrono.GJYearOfEraDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.ZeroIsMaxDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 1L, 3);
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, islamicChronology0);
      DurationField durationField0 = gJYearOfEraDateTimeField0.getRangeDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.getMinimumValue(1L);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      long long0 = dateTimeField0.getDifferenceAsLong((-12243225600000L), 0);
      assertEquals((-388L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      DurationField durationField0 = gJChronology0.halfdays();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(1L, 1L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (long) 1, (-42521587200000L));
      assertArrayEquals(new int[] {(-1347), (-5), (-2), (-2), 0, 0, 0, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant(0L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      zonedChronology_ZonedDateTimeField0.add(0L, 0L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 1);
      Period period0 = new Period(19, 3, 1231, (-894), 3862, 1, (-151), 4);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-12211689599999L), (long) 1);
      assertArrayEquals(new int[] {387, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      DurationField durationField0 = gJChronology0.minutes();
      DurationField durationField1 = gJChronology0.eras();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField1, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.roundHalfCeiling((-2088L));
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.era();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(gregorianChronology0);
      DurationField durationField0 = gJEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, (DurationField) null, (DurationField) null, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.roundHalfCeiling(1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62135769600000L), long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((-1L), (Chronology) gJChronology0);
      yearMonth0.withYear(536);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 5);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      Partial partial0 = new Partial(localDateTime0);
      Partial partial1 = partial0.withChronologyRetainFields(gJChronology0);
      assertEquals(4, partial1.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.clockhourOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-947));
      DurationField durationField0 = gJChronology0.seconds();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, zonedChronology_ZonedDurationField0);
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue((-929L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, islamicChronology0);
      DurationField durationField0 = gJYearOfEraDateTimeField0.getRangeDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.getLeapAmount(1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.era();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(gregorianChronology0);
      DurationField durationField0 = gJEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, (DurationField) null, (DurationField) null, durationField0);
      zonedChronology_ZonedDateTimeField0.isLeap(1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-9223372036854775788L), (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        yearMonth0.minusMonths(13);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -292269055 for year is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      dateTimeField0.getAsShortText((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(2012L, (Chronology) ethiopicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.era();
      dateTimeField0.getAsText(2012L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 5);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1970-01-01,mdfw=5]", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.withEra(0);
      DateTime dateTime0 = localDate1.toDateTimeAtCurrentTime((DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=-2014-02-14T20:21:21.320Z]", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 1);
      GJChronology gJChronology1 = GJChronology.getInstance();
      gJChronology1.equals(gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = null;
//      try {
        dateTime0 = new DateTime(5, 2, 124, 0, (-224), 15, 0, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -224 for minuteOfHour must be in the range [0,59]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
//      try { 
        gJChronology0.getDateTimeMillis((-1410), 1597, (-1410), 60, 60, 3334, (-2146778629));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 60 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
//      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800013L), 1182);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: 1182
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 2);
      long long0 = gJChronology0.julianToGregorianByYear(30585600000L);
      assertEquals(29462400000L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByYear((-1000L));
      assertEquals((-1123201000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear(4294967295L);
      assertEquals(3085367295L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByWeekyear((-1L));
      assertEquals((-1209600001L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByYear((-1123200000L));
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByYear((-1L));
      assertEquals(1123199999L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      long long0 = gJChronology0.gregorianToJulianByYear((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12218428800000L), long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-1647L));
      assertEquals(1209598353L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 4);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(1L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 2);
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 5, 2, 3, 31, 31);
      assertEquals((-62135416588969L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      long long0 = gJChronology0.getDateTimeMillis(10209375, 4, 29, 10209375);
      assertEquals(322114599859809375L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
//      try { 
        gJChronology0.julianToGregorianByWeekyear((-50838278400000L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 53 for weekOfWeekyear must be in the range [1,52]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      // Undeclared exception!
//      try { 
        gJChronology0.gregorianToJulianByYear((-62166355200000L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for year is not supported
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(74L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 5);
      // Undeclared exception!
//      try { 
        gJChronology0.gregorianToJulianByWeekyear(3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 53 for weekOfWeekyear must be in the range [1,52]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(9223372014451200000L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 1, 2, 1);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTime(localTime0, (DateTimeZone) null);
      // Undeclared exception!
//      try { 
        GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 292278994 for weekyear must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
//      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.GJChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(292272992, 3, 2, 4, 1, 5, 5);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(9223182617544065005L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
//      try { 
        gJChronology0.getDateTimeMillis(14, (-1392), (-912), 1, 23, 315, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 315 for secondOfMinute must be in the range [0,59]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = DateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 70);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: 70
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(9223372035731575807L);
      // Undeclared exception!
//      try { 
        GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 292278995 for weekyear must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.era();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getLeapDurationField();
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 1L, 3);
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, islamicChronology0);
      DurationField durationField0 = gJYearOfEraDateTimeField0.getRangeDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.getMinimumValue((long) 2);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 1L, 3);
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, islamicChronology0);
      DurationField durationField0 = gJYearOfEraDateTimeField0.getRangeDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.getMinimumValue((-7L));
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(gregorianChronology0);
      DurationField durationField0 = basicYearDateTimeField0.getLeapDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, (DurationField) null, (DurationField) null, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong((-612L), (-12219292800000L));
      assertEquals(387L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      long long0 = dateTimeField0.getDifferenceAsLong(0, 0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      DurationField durationField0 = basicYearDateTimeField0.getLeapDurationField();
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(3, 0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      DurationField durationField0 = gJChronology0.seconds();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, (DurationField) null, durationField0, (DurationField) null);
      long long0 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong((-12212380800000L), 1);
      assertEquals((-387L), long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTime dateTime0 = new DateTime(4, (-1584), 166, 86400000, 86400000, 3998, lenientChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(250028816798000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(23);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2484L), (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 5);
      Period period0 = new Period();
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-10540800000L), (-2484L));
      assertArrayEquals(new int[] {0, 4, 0, 0, 0, 0, (-2), (-484)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1107L, (Chronology) gJChronology0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      Period period0 = new Period((long) 2);
      int[] intArray0 = gJChronology1.get((ReadablePeriod) period0, 10000000000000L, 10L);
      assertArrayEquals(new int[] {(-316), (-11), 1, 4, 6, 13, 20, 10}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.plusYears((-1147));
      assertEquals((-48414944318680L), dateTime1.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime(1123200000L, (Chronology) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 5);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      DateTimeField dateTimeField0 = gJChronology0.year();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, (DurationField) null, assembledChronology_Fields0.millis, (DurationField) null);
      long long0 = zonedChronology_ZonedDateTimeField0.roundHalfCeiling(5);
      assertEquals(1123200000L, long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      long long0 = dateTimeField0.roundHalfCeiling((-61246963830998L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-61247059200000L), long0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      long long0 = dateTimeField0.roundHalfCeiling((-62101295999976L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62105356800000L), long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      mutableDateTime0.setRounding(dateTimeField0);
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      long long0 = dateTimeField0.roundHalfEven(2360L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62135769600000L), long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 1);
      LocalDateTime localDateTime0 = new LocalDateTime((-12219638400000L));
      Partial partial0 = new Partial(localDateTime0);
      Partial partial1 = partial0.withChronologyRetainFields(gJChronology0);
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeField dateTimeField0 = gJChronology0.hourOfHalfday();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, islamicChronology0);
      DurationField durationField0 = gJYearOfEraDateTimeField0.getRangeDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, (DurationField) null, durationField0);
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue((-12219292800000L));
      assertEquals(0, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.era();
      Instant instant0 = new Instant(2360L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      DurationField durationField0 = gJChronology0.halfdays();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue((-62135769600000L));
      assertEquals(0, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      int int0 = dateTimeField0.getMinimumValue(1256L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      dateTimeField0.getLeapAmount(2360L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      dateTimeField0.getLeapAmount(3912L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      dateTimeField0.isLeap(8812800000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 1392409281320L, 1);
      DateTimeField dateTimeField0 = gJChronology0.era();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gJChronology0, dateTimeField0);
      DurationField durationField0 = skipUndoDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.isLeap(0L);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, islamicChronology0);
      DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.set((long) 4, "6");
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-2049753599996L), long0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((-12219292800000L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      DurationField durationField0 = gJChronology0.seconds();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.set((-12219292800000L), "6");
      assertEquals((-12220070400000L), long0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) null);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      long long0 = zonedChronology_ZonedDateTimeField0.set(160056864000000L, "6");
      assertEquals(160057296000000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(5, 4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      long long0 = dateTimeField0.set(3308L, "6");
      assertEquals((-1123196692L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Instant instant0 = new Instant();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 4);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 14 for dayOfMonth is not supported
//         //
//         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 3);
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      Partial partial1 = partial0.without(dateTimeFieldType0);
      Partial partial2 = partial1.withChronologyRetainFields(gJChronology0);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      Partial partial3 = partial2.withFieldAdded(durationFieldType0, 1);
      assertFalse(partial3.equals((Object)partial2));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((-1L), (Chronology) gJChronology0);
      Period period0 = new Period((ReadableInstant) null, (ReadableDuration) null);
      YearMonth yearMonth1 = yearMonth0.minus(period0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(12, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      dateTimeField0.getAsShortText((-2017L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      dateTimeField0.getAsShortText((-62033299200000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      dateTimeField0.getAsText(31556952000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.era();
      DurationField durationField0 = gJChronology0.hours();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText((-79301721598110L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("BC", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 2);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1970-01-01,mdfw=2]", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = GJChronology.getInstance();
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-62135593138999L), (Chronology) gJChronology0);
      TimeZone timeZone0 = TimeZone.getTimeZone("G[");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 3);
      GJChronology gJChronology2 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      boolean boolean0 = gJChronology1.equals(gJChronology2);
      assertFalse(boolean0);
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotSame(gJChronology2, gJChronology0);
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = new Instant();
      boolean boolean0 = gJChronology0.equals(instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertTrue(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(2012L, (Chronology) ethiopicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(4, 4, 4, 11, 4, 11, gJChronology0);
      assertEquals((-62033000149000L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = null;
//      try {
        dateTime0 = new DateTime(3, 2, (-2147483617), (-2445), 4, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -2445 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = null;
//      try {
        dateTime0 = new DateTime(29, 2, 29, 2, 29, 29, 2, gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 29 for dayOfMonth must be in the range [1,28]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        yearMonth0.toInterval();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Specified date does not exist
//         //
//         verifyException("org.joda.time.chrono.GJChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 2);
//      try { 
        gJChronology0.getDateTimeMillis(6, 60000, (-687), 11);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 60000 for monthOfYear must be in the range [1,12]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
//      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 1182);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: 1182
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      LocalDateTime localDateTime0 = new LocalDateTime(instant0, gJChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      // Undeclared exception!
//      try { 
        GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0, 1547);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid min days in first week: 1547
//         //
//         verifyException("org.joda.time.chrono.JulianChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) null);
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1);
      assertEquals((-62135769599999L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2292L), (Chronology) ethiopicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 1);
      Months months0 = Months.TWO;
      long long0 = gJChronology0.add((ReadablePeriod) months0, (-2292L), 4);
      assertEquals(20995197708L, long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = new Instant();
      DateTime dateTime0 = new DateTime();
      Period period0 = new Period(instant0, dateTime0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-1518L), 1397506881320L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {44, 3, 1, 6, 20, 21, 22, 838}, intArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      // Undeclared exception!
//      try { 
        dateTimeField0.getDifferenceAsLong((-62135593138999L), (-1075L));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
//      try { 
        dateTimeField0.getAsText(4, locale0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay(4, 4, gJChronology0);
      MonthDay monthDay1 = monthDay0.plusDays((-1354));
      assertEquals(20, monthDay1.getDayOfMonth());
      assertEquals(7, monthDay1.getMonthOfYear());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(5, 4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.era();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      dateTimeField0.getMaximumTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(5, 4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.era();
      // Undeclared exception!
//      try { 
        dateTimeField0.getDifference(0, (-704L));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      dateTimeField0.getMaximumValue((ReadablePartial) localDateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(18);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      dateTimeField0.getMinimumValue((ReadablePartial) localDateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      Locale locale0 = Locale.forLanguageTag("B%\"G?KOlrI%X}r");
      String string0 = dateTimeField0.getAsShortText((ReadablePartial) null, 0, locale0);
      assertEquals("BC", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTime dateTime0 = new DateTime(1520, 1964, 1026, 91, (-1), 1488, 147, lenientChronology0);
      assertEquals((-8949587771853L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209600001L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeField dateTimeField0 = gJChronology0.era();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      Locale locale0 = Locale.PRC;
      zonedChronology_ZonedDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MonthDay monthDay0 = new MonthDay((Chronology) buddhistChronology0);
      LocalDate localDate0 = monthDay0.toLocalDate(1);
      LocalDate localDate1 = localDate0.withWeekyear(86400);
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      LocalDateTime localDateTime0 = new LocalDateTime(instant0, gJChronology0);
      long long0 = gJChronology0.set(localDateTime0, 1209600000L);
      assertEquals((-12219292800000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }
}
