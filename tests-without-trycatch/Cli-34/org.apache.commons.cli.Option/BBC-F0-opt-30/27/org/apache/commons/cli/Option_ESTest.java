/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 07:24:22 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("Mop5D", "Mop5D", false, "Mop5D");
      option0.setArgs((-2002));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2002), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("ZrU", "ZrU", true, "j9'[vxFd`)_k&n.");
      option0.setValueSeparator('l');
      option0.setArgs(0);
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("org.apache.commons.cli.Option");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-975));
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("Qck");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("E", "'", true, "E");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("'", option0.getLongOpt());
      assertEquals("E", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("RJzA", true, (String) null);
      option0.addValueForProcessing("RJzA");
      option0.getValuesList();
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("aN", true, "Mop5D");
      option0.setValueSeparator('8');
      char char0 = option0.getValueSeparator();
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "");
      option0.setValueSeparator('i');
      char char0 = option0.getValueSeparator();
      assertEquals('i', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getValue((String) null);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("RJzA", true, (String) null);
      option0.addValueForProcessing("RJzA");
      option0.setArgs(63);
      option0.addValueForProcessing("' contains an illegal character : '");
      option0.getValue(1);
      assertEquals(63, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("ZrU", "ZrU", true, "j9'[vxFd`)_k&n.");
      option0.addValueForProcessing("ZrU");
      String string0 = option0.getValue();
      assertEquals("ZrU", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertEquals("j9'[vxFd`)_k&n.", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "LXk[3]Y\":#grcZf87^");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      option0.getType();
      assertEquals("LXk[3]Y\":#grcZf87^", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      option0.getOpt();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getOpt();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "");
      String string0 = option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.getLongOpt();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option((String) null, true, "YE# a");
      String string0 = option0.getKey();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("RJzA", true, (String) null);
      option0.getKey();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("q", false, "");
      assertEquals("q", option0.getOpt());
      
      option0.getId();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setDescription((String) null);
      String string0 = option0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setDescription("LxGUrpM<arpaI[^{;;");
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", false, "");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("Mop5D", "Mop5D", false, "Mop5D");
      option0.setArgName("Mop5D");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgName("");
      String string0 = option0.getArgName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "LXk[3]Y\":#grcZf87^");
      option0.setArgs(2580);
      option0.acceptsArg();
      assertEquals(2580, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("RJzA", true, (String) null);
      option0.addValueForProcessing("RJzA");
//      try { 
        option0.getValue(63);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 63, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("ZrU", "ZrU", true, "j9o[vxFd`)_k&n.");
      option0.addValueForProcessing("ZrU");
//      try { 
        option0.getValue((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", false, "");
      // Undeclared exception!
//      try { 
        option0.getId();
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("Mop5D", "Mop5D", false, "Mop5D");
      option0.setValueSeparator('O');
      option0.setArgs((-1701));
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("ch@,~ \u0006?GSp5+Ip", false, "ch@,~ \u0006?GSp5+Ip");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'ch@,~ \u0006?GSp5+Ip' contains an illegal character : '@'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option(" ]", " ]", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ' ]' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option(".P?PQ#K3&Tx(3c:", ".P?PQ#K3&Tx(3c:");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '.P?PQ#K3&Tx(3c:' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option((String) null, true, "YE# a");
      option0.getValue();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("K", "The option '");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals("K", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("The option '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("E", "'", true, "E");
      option0.hasOptionalArg();
      assertEquals(69, option0.getId());
      assertEquals("'", option0.getLongOpt());
      assertEquals("E", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("QtO", "QtO");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("QtO", "QtO");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("Mop5D", "Mop5D", false, "Mop5D");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("E", false, "E");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("'");
      Object object0 = option0.clone();
      boolean boolean0 = option0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("+FO=Q");
      Option option1 = new Option("", "", false, "'");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, false, "aO_WW");
      Option option1 = new Option("aO_WW", "aO_WW", false, "'");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertEquals("aO_WW", option1.getOpt());
      assertEquals("aO_WW", option1.getLongOpt());
      assertEquals("'", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", false, "");
      Option option1 = new Option("RJzA", false, "Mcac");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals("Mcac", option1.getDescription());
      assertEquals("RJzA", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", false, "");
      Option option1 = new Option("", "", false, "'");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option1.getLongOpt());
      assertEquals("'", option1.getDescription());
      assertEquals((-1), option1.getArgs());
      assertEquals("", option1.getOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, false, "e1");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.equals(option0);
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("aN", true, "Mop5D");
      Object object0 = new Object();
      boolean boolean0 = option0.equals(object0);
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals("aN", option0.getOpt());
      assertEquals("Mop5D", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("QtO", "QtO");
      String string0 = option0.toString();
      assertEquals((-1), option0.getArgs());
      assertEquals("[ option: QtO  :: QtO ]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("Mop5D", "Mop5D", false, "Mop5D");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      String string0 = option0.toString();
      assertEquals("[ option: Mop5D Mop5D [ARG...] :: Mop5D ]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("ZrU", "ZrU", true, "j9'[vxFd`)_k&n.");
      String string0 = option0.toString();
      assertEquals("[ option: ZrU ZrU  [ARG] :: j9'[vxFd`)_k&n. ]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option((String) null, false, "e1");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("E", false, "E");
      option0.getValue(0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "RJzA");
      String string0 = option0.getValue("");
      assertNotNull(string0);
      assertEquals("RJzA", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("E", "'", true, "E");
      option0.addValueForProcessing("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string0 = option0.getValue("E");
      assertEquals("E", option0.getDescription());
      assertEquals("'", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("E", option0.getOpt());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("ZrU", "ZrU", true, "j9'[vxFd`)_k&n.");
      option0.setValueSeparator('l');
      option0.setArgs(825);
      option0.addValueForProcessing("M;D[wlI,&2dzQTub");
      assertEquals(825, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("ZrU", "ZrU", true, "j9'[vxFd`)_k&n.");
      option0.setValueSeparator('l');
      option0.addValueForProcessing("Illegal option name '");
      assertEquals('l', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option((String) null, false, "aO_WW");
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("The option '");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // NO_ARGS_ALLOWED
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("K", "The option '");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "LXk[3]Y\":#grcZf87^");
      option0.setArgs(2580);
      boolean boolean0 = option0.hasArgs();
      assertEquals(2580, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("Mop5D", "Mop5D", false, "Mop5D");
      option0.setArgName("Mop5D");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("aN", true, "Mop5D");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals(97, option0.getId());
      assertEquals("Mop5D", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option((String) null, "|t7n_,3ax/MQ", false, " [ARG]");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals(" [ARG]", option0.getDescription());
      assertEquals(124, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", false, (String) null);
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "9;tM-e", false, "");
      String string0 = option0.getKey();
      assertEquals("9;tM-e", option0.getLongOpt());
      assertEquals("", string0);
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option((String) null, false, "e1");
      option0.clearValues();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "!.K:HiP(xH:XQ\"~_7");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("aN", true, "Mop5D");
      option0.getValueSeparator();
      assertEquals(97, option0.getId());
      assertEquals("Mop5D", option0.getDescription());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("Mop5D", "Mop5D", false, "Mop5D");
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option((String) null, false, "e1");
      option0.getType();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("QtO", "QtO");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("QtO");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option((String) null, false, "e1");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertNotSame(option1, option0);
      assertTrue(boolean0);
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option((String) null, false, "^");
      // Undeclared exception!
//      try { 
        option0.addValue("^");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option((String) null, false, "e1");
      // Undeclared exception!
//      try { 
        option0.getId();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("Mop5D", "Mop5D", false, "Mop5D");
      option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option((String) null, false, "e1");
      option0.getValuesList();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("I", true, "");
      option0.isRequired();
      assertFalse(option0.hasLongOpt());
      assertEquals("I", option0.getOpt());
      assertEquals("", option0.getDescription());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("aN", true, "Mop5D");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option: aN  [ARG] :: Mop5D :: class java.lang.Object ]", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option((String) null, false, "e1");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      assertTrue(option0.hasOptionalArg());
      
      option0.addValueForProcessing("'");
      assertFalse(option0.hasArgs());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getArgName();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getDescription();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("aN", true, "Mop5D");
      option0.setValueSeparator('8');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('8', option0.getValueSeparator());
      assertTrue(boolean0);
  }
}
