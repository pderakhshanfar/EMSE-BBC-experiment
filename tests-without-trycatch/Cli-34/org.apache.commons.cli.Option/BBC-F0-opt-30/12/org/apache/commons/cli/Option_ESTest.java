/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 01:41:56 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgs((-32));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-32), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", "", false, "DH(7B");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs(100);
      option0.setValueSeparator('e');
      option0.addValueForProcessing("Illegal option name '");
      assertEquals('e', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", ";1Zx4\"", false, "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option((String) null, "3+Be M_");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option((String) null, "3+ M_");
      assertFalse(option0.hasArg());
      
      option0.setArgs(1);
      option0.addValueForProcessing("[ option: null  [ARG] :: [cCMwm!.e!x=ka4 ]");
      option0.getValuesList();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "[ARG...]");
      option0.setValueSeparator('3');
      char char0 = option0.getValueSeparator();
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("5cffMy", true, "+Y_qfd2pDS");
      option0.setValueSeparator('n');
      char char0 = option0.getValueSeparator();
      assertEquals('n', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getValue((String) null);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "J<)fgsm%", true, "org.apache.commons.cli.Option");
      String string0 = option0.getValue("");
      assertNotNull(string0);
      assertEquals("org.apache.commons.cli.Option", option0.getDescription());
      assertEquals("J<)fgsm%", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("5cffMy", true, "+Y_qfd2pDS");
      option0.addValueForProcessing("+Y_qfd2pDS");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertEquals("+Y_qfd2pDS", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertEquals(53, option0.getId());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      option0.getType();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      String string0 = option0.getOpt();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("5cffMy", true, "+Y_qfd2pDS");
      String string0 = option0.getOpt();
      assertEquals("5cffMy", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("+Y_qfd2pDS", option0.getDescription());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      String string0 = option0.getLongOpt();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", "", true, "V1g6");
      String string0 = option0.getLongOpt();
      assertEquals("", string0);
      assertEquals("V1g6", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option((String) null, "3+Be M_");
      String string0 = option0.getKey();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      String string0 = option0.getKey();
      assertEquals("SWh%h<~M", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", true, "[ option:   ::  ]");
      String string0 = option0.getDescription();
      assertEquals("[ option:   ::  ]", string0);
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgName("s");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgs(1880);
      option0.addValueForProcessing((String) null);
//      try { 
        option0.getValue(1880);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1880, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgs(1880);
      option0.addValueForProcessing("l`S%(%PO'~TD3? oq]");
//      try { 
        option0.getValue((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", true, "");
      // Undeclared exception!
//      try { 
        option0.getId();
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option((String) null, false, "$#K(1");
      // Undeclared exception!
//      try { 
        option0.getId();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      option0.setValueSeparator('v');
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("Illegal option name '", true, "Illegal option name '");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'Illegal option name '' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("JZ}n h& p+oj*2aqu3z", "\"xY9O", false, "The option '");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'JZ}n h& p+oj*2aqu3z' contains an illegal character : '}'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("B(/TPs,&", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'B(/TPs,&' contains an illegal character : '('
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('T');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('T', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArgs();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "", true, "The option '");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgs(1880);
      boolean boolean0 = option0.hasArg();
      assertEquals(1880, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "", false, "DH(7B");
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getLongOpt());
      assertEquals("DH(7B", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.hasOptionalArg();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("5cffMy", true, "+Y_qfd2pDS");
      option0.hashCode();
      assertEquals("+Y_qfd2pDS", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals(53, option0.getId());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      option0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", "Illegal option name '", true, "");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option1.getOpt());
      assertEquals("", option1.getDescription());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      Option option1 = new Option((String) null, "/Bj E>Q2y\"Ma.Y .:X", false, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertTrue(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      Option option1 = new Option("", (String) null);
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      Option option1 = new Option("", true, "r1;WT2");
      boolean boolean0 = option1.equals(option0);
      assertFalse(option1.hasLongOpt());
      assertEquals("", option1.getOpt());
      assertFalse(boolean0);
      assertEquals("r1;WT2", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Object object0 = option0.clone();
      boolean boolean0 = object0.equals(option0);
      assertNotSame(object0, option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      Object object0 = new Object();
      boolean boolean0 = option0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("5cffMy", true, "+Y_qfd2pDS");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals("+Y_qfd2pDS", option0.getDescription());
      assertEquals("5cffMy", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.toString();
      assertEquals("[ option:    [ARG] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.toString();
      assertEquals("[ option:   ::  ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertNotNull(stringArray0);
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("c~*CPf>{3z");
      String string0 = option0.getValue("' contains an illegal character : '");
      assertFalse(option0.hasValueSeparator());
      assertEquals("c~*CPf>{3z", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.getValue((-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      option0.addValueForProcessing("B(/TPs,&");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      String string0 = option0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setOptionalArg(true);
      option0.setValueSeparator('t');
      option0.setArgs((-4725));
      option0.addValueForProcessing("[ option:   ::  ]");
      assertEquals((-4725), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", false, "");
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("@Dd");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // NO_ARGS_ALLOWED
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(63);
      boolean boolean0 = option0.hasArgs();
      assertEquals(63, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "[ARG...]");
      option0.setArgName("[ option:   :: =|>Y*eM|r-] ]");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "", true, "The option '");
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      option0.clearValues();
      assertNull(option0.getValue());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      int int0 = option0.getArgs();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("[ option:   ::  ]");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.getOpt();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option((String) null, "/Bj E>Q2y\"Ma.Y .:X", false, (String) null);
      boolean boolean0 = option0.acceptsArg();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      option0.setDescription((String) null);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("5cffMy", true, "+Y_qfd2pDS");
      option0.getType();
      assertEquals("+Y_qfd2pDS", option0.getDescription());
      assertEquals(53, option0.getId());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      // Undeclared exception!
//      try { 
        option0.addValue("q!oL8Ih3.8787/alyB");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      assertTrue(option0.hasLongOpt());
      
      int int0 = option0.getId();
      assertEquals(83, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      String string0 = option0.getLongOpt();
      assertNotNull(string0);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      List list0 = option0.getValuesList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.isRequired();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", "");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option:   ::  :: class java.lang.Object ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      option0.toString();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("5cffMy", true, "+Y_qfd2pDS");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals("+Y_qfd2pDS", option0.getDescription());
      assertEquals("5cffMy", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("$", false, "");
      String string0 = option0.getDescription();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("$", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option((String) null, "SWh%h<~M", true, "SWh%h<~M");
      option0.setValueSeparator('&');
      option0.addValueForProcessing("B(/TPs,&");
      assertEquals('&', option0.getValueSeparator());
  }
}
