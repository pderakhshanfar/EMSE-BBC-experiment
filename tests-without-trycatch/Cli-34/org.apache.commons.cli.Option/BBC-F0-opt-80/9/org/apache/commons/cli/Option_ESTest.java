/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:24:45 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("Z", "Z", true, "Z");
      option0.addValueForProcessing("Z");
      option0.setValueSeparator('a');
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("' contains an illegal character : '");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setArgs((-4590));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-4590), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", true, "zl/>N>S5#^r%sA)*k3");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("dJC", true, "zl/>N>S5#+^r%sA)*k3");
      option0.addValueForProcessing("dJC");
      option0.getValuesList();
      assertEquals("zl/>N>S5#+^r%sA)*k3", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals(100, option0.getId());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setValueSeparator('1');
      char char0 = option0.getValueSeparator();
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setValueSeparator('Q');
      char char0 = option0.getValueSeparator();
      assertEquals('Q', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      option0.getValue((String) null);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("B", "B", true, "B");
      option0.addValueForProcessing("[ option: B B [ARG...] :: Illegal option name ' :: class java.lang.Integer ]");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "I", false, "I");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      option0.getType();
      assertEquals("I", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("I", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("B", true, ".a-uj9$F~`g");
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertEquals(".a-uj9$F~`g", option0.getDescription());
      assertEquals("B", string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option((String) null, " :: ", false, " :: ");
      String string0 = option0.getLongOpt();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("B", true, ".a-uj9$F~`g");
      String string0 = option0.getKey();
      assertEquals(".a-uj9$F~`g", option0.getDescription());
      assertEquals("B", string0);
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", " ", true, "");
      String string0 = option0.getKey();
      assertEquals("", option0.getDescription());
      assertEquals("", string0);
      assertEquals(" ", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      String string0 = option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("Yrbp", (String) null, false, "Yrbp");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", "Rzw0`4", true, "Rzw0`4");
      option0.setArgName("B");
      option0.getArgName();
      assertEquals("Rzw0`4", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("Rzw0`4", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", true, "z^0fc{cs");
      option0.addValueForProcessing("z^0fc{cs");
//      try { 
        option0.getValue(31);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 31, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
//      try { 
        option0.getValue((-1522));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", true, "");
      // Undeclared exception!
//      try { 
        option0.getId();
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
//      try { 
        option0.getId();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option((String) null, true, "zl/>N>S5#+^r%sA)*k3");
      option0.setValueSeparator('[');
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("Z;R9luonyeP+2ZGBX", false, "Z;R9luonyeP+2ZGBX");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'Z;R9luonyeP+2ZGBX' contains an illegal character : ';'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option(" Pi9=T", "6IFM", false, "jU");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ' Pi9=T' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("E[WF[1Z9", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'E[WF[1Z9' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option("", "\re$>EUH>Z", false, (String) null);
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertEquals("\re$>EUH>Z", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setValueSeparator('1');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('1', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", true, ":`{nh3?U@=Q6kEXuN");
      option0.setArgs(31);
      boolean boolean0 = option0.hasArgs();
      assertEquals(31, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "zl/>N>S5#^r%sA)*k3", false, "zl/>N>S5#^r%sA)*k3");
      boolean boolean0 = option0.hasArg();
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("zl/>N>S5#^r%sA)*k3", option0.getLongOpt());
      assertEquals("zl/>N>S5#^r%sA)*k3", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(15);
      option0.hasArg();
      assertEquals(15, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "c1x(", false, "4S'");
      option0.getValueSeparator();
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("c1x(", option0.getLongOpt());
      assertEquals("4S'", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", true, ":`{nh3?U@=Q6kEXuN");
      option0.hasOptionalArg();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals(":`{nh3?U@=Q6kEXuN", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Z");
      option0.addValueForProcessing("Z");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Z");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Z");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("b", "b", true, "5;t");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", "\re$>EUH>Z", false, (String) null);
      option0.hashCode();
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasLongOpt());
      assertEquals("\re$>EUH>Z", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("dJC", true, "zl/>N>S5#+^r%sA)*k3");
      option0.hashCode();
      assertEquals("zl/>N>S5#+^r%sA)*k3", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals(100, option0.getId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = new Option((String) null, "org.apache.commons.cli.Option", false, "[ option: null  :: null ]");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertEquals("[ option: null  :: null ]", option1.getDescription());
      assertEquals(111, option1.getId());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", true, ":`{nh3?U@=Q6kEXuN");
      Option option1 = new Option("", "7>JYEul9p_J#'J&lZ", true, "");
      boolean boolean0 = option1.equals(option0);
      assertEquals(":`{nh3?U@=Q6kEXuN", option0.getDescription());
      assertEquals("7>JYEul9p_J#'J&lZ", option1.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("", option1.getDescription());
      assertEquals("", option1.getOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = new Option("x", false, "'");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals(120, option1.getId());
      assertEquals("'", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      Option option1 = new Option((String) null, (String) null, false, "[ option:    ::  ]");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      Option option1 = new Option("", "", true, "");
      boolean boolean0 = option1.equals(option0);
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Z");
      boolean boolean0 = option0.equals("Z");
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.equals((Object) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertNotSame(option1, option0);
      assertTrue(boolean0);
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("b", "b", true, "5;t");
      option0.setArgs(0);
      option0.toString();
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("b", "b", true, "5;t");
      String string0 = option0.toString();
      assertEquals("[ option: b b  [ARG] :: 5;t ]", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      String[] stringArray0 = option0.getValues();
      assertEquals((-1), option0.getArgs());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("B", "B", true, "B");
      option0.addValueForProcessing("[ option: B B [ARG...] :: Illegal option name ' :: class java.lang.Integer ]");
      String[] stringArray0 = option0.getValues();
      assertNotNull(stringArray0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", true, ":`{nh3?U@=Q6kEXuN");
      option0.addValueForProcessing("");
      String string0 = option0.getValue("fDYY");
      assertEquals("", string0);
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals(":`{nh3?U@=Q6kEXuN", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("b", "b", true, "5;t");
      option0.getValue(4027);
      assertEquals("b", option0.getLongOpt());
      assertEquals("5;t", option0.getDescription());
      assertEquals(98, option0.getId());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "");
      String string0 = option0.getValue("`");
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs(77);
      option0.setValueSeparator('c');
      option0.addValueForProcessing("' contains an illegal character : '");
      assertEquals(77, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "", false, "%|0iqIn[hJJ`z>Ft");
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("%|0iqIn[hJJ`z>Ft");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // NO_ARGS_ALLOWED
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs(77);
      option0.toString();
      assertEquals(77, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "Rzw0`4", true, "Rzw0`4");
      option0.setArgName("B");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("b", "b", true, "5;t");
      boolean boolean0 = option0.hasArgName();
      assertEquals("b", option0.getOpt());
      assertEquals("5;t", option0.getDescription());
      assertFalse(boolean0);
      assertEquals("b", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "c1x(", false, "4S'");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(boolean0);
      assertEquals("4S'", option0.getDescription());
      assertEquals("c1x(", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getKey();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("Yrbp", (String) null, false, "Yrbp");
      option0.clearValues();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("Yrbp", (String) null, false, "Yrbp");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("b", "b", true, "5;t");
      assertEquals("b", option0.getLongOpt());
      
      option0.setLongOpt("[ option: b b  :: 5;t :: class java.lang.String ]");
      assertEquals("5;t", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('c');
      option0.addValueForProcessing("' contains an illegal character : '");
      assertEquals('c', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("b", "b", true, "5;t");
      assertEquals("5;t", option0.getDescription());
      
      option0.setDescription("b");
      assertEquals("b", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getType();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("b", "b", true, "5;t");
      // Undeclared exception!
//      try { 
        option0.addValue("3R");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("b", "b", true, "5;t");
      int int0 = option0.getId();
      assertEquals(98, int0);
      assertEquals("5;t", option0.getDescription());
      assertEquals("b", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", true, ":`{nh3?U@=Q6kEXuN");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertEquals("", option0.getOpt());
      assertEquals(":`{nh3?U@=Q6kEXuN", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("Yrbp", (String) null, false, "Yrbp");
      option0.getValuesList();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      option0.isRequired();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("b", "b", true, "5;t");
      Class<String> class0 = String.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option: b b  [ARG] :: 5;t :: class java.lang.String ]", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("Z", true, "Z");
      assertTrue(option0.hasArg());
      
      option0.addValueForProcessing("Z");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("b", "b", true, "5;t");
      assertEquals(1, option0.getArgs());
      
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertEquals(0, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Option option0 = new Option("", "zl/>N>S5#^r%sA)*k3", false, "zl/>N>S5#^r%sA)*k3");
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertEquals("zl/>N>S5#^r%sA)*k3", string0);
      assertEquals("", option0.getOpt());
      assertEquals("zl/>N>S5#^r%sA)*k3", option0.getLongOpt());
  }
}
