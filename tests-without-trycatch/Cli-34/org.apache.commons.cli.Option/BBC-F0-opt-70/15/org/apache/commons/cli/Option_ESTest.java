/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 02:02:03 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option((String) null, "", false, (String) null);
      option0.setArgs((-876));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-876), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("z", "' contains an illegal character : '", true, "");
      option0.hashCode();
      assertEquals("", option0.getDescription());
      assertEquals("' contains an illegal character : '", option0.getLongOpt());
      assertEquals("z", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("1l", "1l");
      option0.setArgs((-2));
      option0.setValueSeparator('c');
      option0.addValueForProcessing("org.apache.commons.cli.Option");
      assertEquals('c', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, (String) null);
      option0.setArgs((-876));
      option0.toString();
      assertEquals((-876), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "", true, "z");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("p", "p", true, "p");
      option0.addValueForProcessing("jJ-");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('5');
      char char0 = option0.getValueSeparator();
      assertEquals('5', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", false, "afFvk22{}'GAR';QcnQ");
      option0.setValueSeparator('J');
      char char0 = option0.getValueSeparator();
      assertEquals('J', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      String string0 = option0.getValue((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "", false, "z");
      String string0 = option0.getValue("");
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("z", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("p", "p", true, "p");
      option0.addValueForProcessing("yU3");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(21);
      option0.addValueForProcessing("It8yi9zV7!'E<G@");
      option0.addValueForProcessing("");
      option0.getValue(1);
      assertEquals(21, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("$6$9!Cc");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Class<Integer> class0 = Integer.class;
      option0.setType(class0);
      Class class1 = (Class)option0.getType();
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option((String) null, "vczXY*o3[K*5Sy>o<c");
      String string0 = option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("2NVM", "2NVM", false, "T`Erz%.4zYx;3");
      String string0 = option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertEquals("2NVM", option0.getLongOpt());
      assertEquals("T`Erz%.4zYx;3", option0.getDescription());
      assertEquals("2NVM", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.Option", true, "");
      String string0 = option0.getLongOpt();
      assertEquals("org.apache.commons.cli.Option", string0);
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "");
      String string0 = option0.getLongOpt();
      assertNotNull(string0);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getKey();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option((String) null, "'S #>F}C@S+Rt&9A");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("&>-");
      String string0 = option0.getKey();
      assertEquals("&>-", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("4mqV1v730FE", "4mqV1v730FE");
      int int0 = option0.getId();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, (String) null);
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator", false, "$lH_z7}JBA>BMKL~Baz");
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getLongOpt());
      assertEquals("$lH_z7}JBA>BMKL~Baz", string0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "{BLwX3ZJO%Z<_}N");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      int int0 = option0.getArgs();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "", false, "aw`>");
      option0.setArgName("@HX:]:");
      option0.getArgName();
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("aw`>", option0.getDescription());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "", true, "H?ct");
      option0.setArgName("");
      option0.getArgName();
      assertEquals("H?ct", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", ">&u'|^do'eTF0", true, "W{SPac");
      option0.acceptsArg();
      assertEquals(">&u'|^do'eTF0", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("W{SPac", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("&");
//      try { 
        option0.getValue((-2020));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('8');
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("?$>=/KA", true, "?$>=/KA");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '?$>=/KA' contains an illegal character : '?'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("Cannot add value, list full.", "", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'Cannot add value, list full.' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("]b5\nvDL/IJ", "org.apache.commons.cli.Option");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ']b5
//         // vDL/IJ' contains an illegal character : ']'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "", false, "z");
      option0.getValue();
      assertEquals("z", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('q');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('q', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "");
      boolean boolean0 = option0.hasValueSeparator();
      assertTrue(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("p", "p");
      option0.setArgs(64);
      boolean boolean0 = option0.hasArgs();
      assertEquals(64, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "", false, "z");
      boolean boolean0 = option0.hasArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals("z", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("p", "p");
      option0.setArgs(64);
      option0.hasArg();
      assertEquals(64, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getValueSeparator();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("p", "p", true, "p");
      option0.addValueForProcessing("-TC)VH@vmJ46DT");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("1l", "1l");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("p", "p", true, "p");
      option0.addValueForProcessing("jJ-");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, "=", true, "");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      option0.addValueForProcessing("[ option: null =  [ARG] ::  ]");
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("p", "p", true, "p");
      option0.setLongOpt((String) null);
      Option option1 = new Option("p", false, "7V.Nhhx^FwhYWtt^");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertEquals("7V.Nhhx^FwhYWtt^", option1.getDescription());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Option option1 = new Option("", "org.apache.commons.cli.Option", true, "");
      assertEquals("org.apache.commons.cli.Option", option1.getLongOpt());
      
      option1.setLongOpt("");
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Option option1 = new Option("", "org.apache.commons.cli.Option", true, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertFalse(option1.equals((Object)option0));
      assertEquals("", option1.getDescription());
      assertEquals("", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("1l", "1l");
      Option option1 = new Option((String) null, (String) null, true, ";cKDmHk%Vx");
      boolean boolean0 = option1.equals(option0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Option option1 = new Option("", "org.apache.commons.cli.Option", true, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals("", option1.getOpt());
      assertEquals("", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("1l", "", false, "1l");
      Option option1 = new Option("", "org.apache.commons.cli.Option", true, "1l");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option0.getArgs());
      assertEquals("", option1.getOpt());
      assertFalse(boolean0);
      assertEquals("org.apache.commons.cli.Option", option1.getLongOpt());
      assertEquals("1l", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option((String) null, "=", true, "");
      Option option1 = new Option((String) null, "p3}Z", true, "=");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals("=", option1.getDescription());
      assertEquals(112, option1.getId());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals("");
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.toString();
      assertEquals("[ option:    [ARG] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", "");
      String[] stringArray0 = option0.getValues();
      assertEquals((-1), option0.getArgs());
      assertNull(stringArray0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(21);
      option0.addValueForProcessing("It8yi9zV7!'E<G@");
      option0.getValues();
      assertEquals(21, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("$6$9!Cc");
      String string0 = option0.getValue("");
      assertEquals("$6$9!Cc", string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getValue(0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("p", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getDescription());
      assertEquals("p", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(0);
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("org.apache.commons.cli.Option");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs(976);
      option0.setValueSeparator('@');
      option0.addValueForProcessing("UL/wbq|)-\"b3Wg'%H@");
      assertEquals(976, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('@');
      option0.addValueForProcessing("UL/wbq|)-\"b3Wg'%H@");
      assertEquals('@', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "", false, "aw`>");
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("' contains an illegal character : '");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // NO_ARGS_ALLOWED
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(21);
      option0.addValueForProcessing("It8yi9zV7!'E<G@");
//      try { 
        option0.getValue(1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("1l", "1l");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(21);
      option0.toString();
      assertEquals(21, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "Fkx", true, "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertEquals("Fkx", option0.getLongOpt());
      assertFalse(boolean0);
      assertEquals("", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "", false, "aw`>");
      option0.setArgName("@HX:]:");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("1l", "1l");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option((String) null, "'S #>F}C@S+Rt&9A");
      option0.setLongOpt("&>-");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals(38, option0.getId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
//      try { 
        option0.getId();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.clearValues();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "{BLwX3ZJO%Z<_}N");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("{BLwX3ZJO%Z<_}N", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.hasOptionalArg();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setDescription("");
      assertFalse(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getType();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = (Option)option0.clone();
      assertFalse(option1.hasLongOpt());
      assertNotSame(option1, option0);
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option((String) null, "vczXY*o3[K*5Sy>o<c");
      // Undeclared exception!
//      try { 
        option0.addValue("");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", false, "afFvk22{}'GAR';QcnQ");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertEquals("afFvk22{}'GAR';QcnQ", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("p", "p", true, "p");
      option0.getValuesList();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "");
      option0.isRequired();
      assertTrue(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", "");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option:   ::  :: class java.lang.Object ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Option option0 = new Option("", true, "");
      // Undeclared exception!
//      try { 
        option0.getId();
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Option option0 = new Option("", "", false, "aw`>");
      option0.getArgName();
      assertEquals("aw`>", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }
}
