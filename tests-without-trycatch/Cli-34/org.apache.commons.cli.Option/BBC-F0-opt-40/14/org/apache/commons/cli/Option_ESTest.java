/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 01:53:09 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("NcOAR_WLLHWED", "NOARGS_xLLHED", false, "NcOAR_WLLHWED");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("$", "", true, " ");
      option0.hashCode();
      assertEquals(" ", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals("$", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator(':');
      option0.addValueForProcessing("Illegal option name '");
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("[ option: ");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLHWED", "NO_ARGS_ALLHWED", true, "NO_ARGS_ALLHWED");
      option0.setArgs((-3352));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-3352), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs(0);
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLHWED", "NO_ARGS_ALLHWED", true, "NO_ARGS_ALLHWED");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("Y", "", false, "Y");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "eQzs:'Oz[Rd\"\":kF", true, "eQzs:'Oz[Rd\"\":kF");
      option0.addValueForProcessing("");
      option0.getValuesList();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("eQzs:'Oz[Rd\"\":kF", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", "", false, (String) null);
      option0.setValueSeparator('4');
      char char0 = option0.getValueSeparator();
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option((String) null, "H6", false, "tPG%ie/{'>M>m*)r~Q");
      option0.setValueSeparator('s');
      char char0 = option0.getValueSeparator();
      assertEquals('s', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option((String) null, "I{|km", false, "I{|km");
      option0.getValue((String) null);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("o6f", true, "o6f");
      String string0 = option0.getValue("iq");
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("^Jk");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("^Jk");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      Class<String> class0 = String.class;
      option0.setType(class0);
      option0.getType();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("$", "", true, " ");
      String string0 = option0.getOpt();
      assertEquals("$", string0);
      assertEquals("", option0.getLongOpt());
      assertEquals(" ", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      String string0 = option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "M#l~DPlwFu", true, "M#l~DPlwFu");
      option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals("M#l~DPlwFu", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, false, "eQzs:'Oz[Rd\"\":kF");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("f", false, "Cannot add value, list full.");
      String string0 = option0.getKey();
      assertNotNull(string0);
      assertEquals("Cannot add value, list full.", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("f", string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "xr&(-GcUvP=k", true, ">~AP@F\"M");
      String string0 = option0.getKey();
      assertEquals("xr&(-GcUvP=k", option0.getLongOpt());
      assertEquals("", string0);
      assertEquals(">~AP@F\"M", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      String string0 = option0.getDescription();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", false, "S.,J");
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertEquals("S.,J", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("NcOAR_WLLHWED", "NOARGS_xLLHED", false, "NcOAR_WLLHWED");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "eQzs:'Oz[Rd\"\":kF", true, "eQzs:'Oz[Rd\"\":kF");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertEquals("eQzs:'Oz[Rd\"\":kF", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgName("^Jk");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("o6f", true, "o6f");
      option0.addValueForProcessing("");
//      try { 
        option0.getValue(63);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 63, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("^Jk");
//      try { 
        option0.getValue((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      // Undeclared exception!
//      try { 
        option0.getId();
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
//      try { 
        option0.getId();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option((String) null, "I{|km", true, "I{|km");
      option0.setValueSeparator('f');
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("org.apache.commons.cli.Option", true, "org.apache.commons.cli.Option");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.Option' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("[ option: null I{|km  :: I{|km ]", "[ option: null I{|km  :: I{|km ]", false, "i{-ViH==-T7t9-E&(");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ option: null I{|km  :: I{|km ]' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("eQzs:'Oz[Rd\"\":kF", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'eQzs:'Oz[Rd\"\":kF' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('u');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('u', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "eQzs:'Oz[Rd\"\":kF", true, "eQzs:'Oz[Rd\"\":kF");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("eQzs:'Oz[Rd\"\":kF", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "<S<kb tz:L!Q?v)!", true, "");
      boolean boolean0 = option0.hasArgs();
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getDescription());
      assertFalse(boolean0);
      assertEquals("<S<kb tz:L!Q?v)!", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "M#l~DPlwFu", true, "M#l~DPlwFu");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option((String) null, false, "eQzs:'Oz[Rd\"\":kF");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "eQzs:'Oz[Rd\"\":kF", true, "eQzs:'Oz[Rd\"\":kF");
      option0.hasArg();
      assertEquals("eQzs:'Oz[Rd\"\":kF", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option((String) null, "H6", false, "tPG%ie/{'>M>m*)r~Q");
      option0.getValueSeparator();
      assertEquals("tPG%ie/{'>M>m*)r~Q", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals(72, option0.getId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.hasOptionalArg();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("3", "3", false, "3");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("3");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("3", "3", false, "3");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("NcOAR_WLLHWED", "NOARGS_xLLHED", false, "NcOAR_WLLHWED");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      option0.setLongOpt("cF'~B`aw^");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Option option1 = new Option("", "[ option: ", true, "");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option1.getDescription());
      assertFalse(boolean0);
      assertEquals("", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      Option option1 = new Option("", "", false, "");
      assertTrue(option1.equals((Object)option0));
      
      option0.setLongOpt("eQzs:'Oz[Rd\"\":kF");
      boolean boolean0 = option0.equals(option1);
      assertFalse(option1.equals((Object)option0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLHWED", "NO_ARGS_ALLHWED", true, "NO_ARGS_ALLHWED");
      Object object0 = option0.clone();
      boolean boolean0 = option0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, option0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, false, "eQzs:'Oz[Rd\"\":kF");
      Option option1 = new Option((String) null, true, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option((String) null, "a7w4d}O#t", true, "^Lt)W\"~Q `E");
      Option option1 = new Option("U5", "vyDv1M>{", false, "^Lt)W\"~Q `E");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertEquals("^Lt)W\"~Q `E", option1.getDescription());
      assertEquals("vyDv1M>{", option1.getLongOpt());
      assertEquals("U5", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Option option1 = new Option((String) null, (String) null, false, "");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      boolean boolean0 = option0.equals((Object) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "eQzs:'Oz[Rd\"\":kF", true, "eQzs:'Oz[Rd\"\":kF");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertEquals("eQzs:'Oz[Rd\"\":kF", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("NcOAR_WLLHWED", "NOARGS_xLLHED", false, "NcOAR_WLLHWED");
      boolean boolean0 = option0.equals("[ option: NcOAR_WLLHWED NOARGS_xLLHED  :: NOARGS_xLLHED ]");
      assertEquals("NOARGS_xLLHED", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("NcOAR_WLLHWED", option0.getOpt());
      assertEquals("NcOAR_WLLHWED", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Class<Option> class0 = Option.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option:   [ARG] ::  :: class org.apache.commons.cli.Option ]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", true, "");
      String string0 = option0.toString();
      assertEquals("[ option: NO_ARGS_ALLOWED  [ARG] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("NcOAR_WLLHWED", "NOARGS_xLLHED", false, "NcOAR_WLLHWED");
      String string0 = option0.toString();
      assertEquals("[ option: NcOAR_WLLHWED NOARGS_xLLHED  :: NcOAR_WLLHWED ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLHWED", "NO_ARGS_ALLHWED", true, "NO_ARGS_ALLHWED");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "eQzs:'Oz[Rd\"\":kF", true, "eQzs:'Oz[Rd\"\":kF");
      option0.addValueForProcessing("");
      option0.getValue("");
      assertEquals("", option0.getOpt());
      assertEquals("eQzs:'Oz[Rd\"\":kF", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("NcOAR_WLLHWED", "NOARGS_xLLHED", false, "NcOAR_WLLHWED");
      option0.getValue(78);
      assertEquals("NcOAR_WLLHWED", option0.getDescription());
      assertEquals("NOARGS_xLLHED", option0.getLongOpt());
      assertEquals("NcOAR_WLLHWED", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getValue();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "eQzs:'Oz[Rd\"\":kF", true, "eQzs:'Oz[Rd\"\":kF");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertEquals("", option0.getOpt());
      assertEquals("eQzs:'Oz[Rd\"\":kF", option0.getDescription());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing((String) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // NO_ARGS_ALLOWED
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", true, "");
      option0.setArgs((-2));
      option0.toString();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      option0.setArgs(1459);
      boolean boolean0 = option0.hasArgs();
      assertEquals(1459, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasArgName();
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("3", "3", false, "3");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("3");
      option0.getValues();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "", false, (String) null);
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "The option '");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("The option '", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, "I{|km", false, "I{|km");
      assertTrue(option0.hasLongOpt());
      
      int int0 = option0.getId();
      assertEquals((-1), option0.getArgs());
      assertEquals(73, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.clearValues();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("NcOAR_WLLHWED", "NOARGS_xLLHED", false, "NcOAR_WLLHWED");
      int int0 = option0.getArgs();
      assertEquals("NcOAR_WLLHWED", option0.getOpt());
      assertEquals("NOARGS_xLLHED", option0.getLongOpt());
      assertEquals("NcOAR_WLLHWED", option0.getDescription());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("NcOAR_WLLHWED", "NOARGS_xLLHED", false, "NcOAR_WLLHWED");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertEquals("NcOAR_WLLHWED", option0.getOpt());
      assertEquals("NcOAR_WLLHWED", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("NOARGS_xLLHED", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("NcOAR_WLLHWED", "NOARGS_xLLHED", false, "NcOAR_WLLHWED");
      option0.setArgName("L");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("NcOAR_WLLHWED", "NOARGS_xLLHED", false, "NcOAR_WLLHWED");
      assertEquals("NcOAR_WLLHWED", option0.getDescription());
      
      option0.setDescription("NOARGS_xLLHED");
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      option0.getType();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("NcOAR_WLLHWED", "NOARGS_xLLHED", false, "NcOAR_WLLHWED");
      // Undeclared exception!
//      try { 
        option0.addValue((String) null);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("$", "", true, " ");
      String string0 = option0.getLongOpt();
      assertEquals("", string0);
      assertEquals("$", option0.getOpt());
      assertEquals(" ", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "eQzs:'Oz[Rd\"\":kF", true, "eQzs:'Oz[Rd\"\":kF");
      option0.getValuesList();
      assertEquals("eQzs:'Oz[Rd\"\":kF", option0.getLongOpt());
      assertEquals("eQzs:'Oz[Rd\"\":kF", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLHWED", "NO_ARGS_ALLHWED", true, "NO_ARGS_ALLHWED");
      boolean boolean0 = option0.isRequired();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setArgs(941);
      option0.setValueSeparator('t');
      option0.addValueForProcessing("Illegal option name '");
      assertEquals(941, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setValueSeparator('t');
      option0.addValueForProcessing("Illegal option name '");
      assertEquals('t', option0.getValueSeparator());
  }
}
