/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:33:47 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionBuilder_ESTest extends OptionBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionBuilder.isRequired(true);
      Option option0 = OptionBuilder.create("");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionBuilder.withValueSeparator('<');
      Option option0 = OptionBuilder.create((String) null);
      assertEquals((-1), option0.getArgs());
      assertEquals('<', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionBuilder.withLongOpt("org.apache.commons.cli.Option");
      Option option0 = OptionBuilder.create("NO_ARGS_ALLOWED");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionBuilder.withArgName("K%gCrT(6`{");
      Option option0 = OptionBuilder.create("");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionBuilder.hasArgs(318);
      Option option0 = OptionBuilder.create((String) null);
      assertEquals(318, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionBuilder.withValueSeparator('R');
      Option option0 = OptionBuilder.create('R');
      assertEquals('R', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals(82, option0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionBuilder.hasOptionalArgs((-1195));
      Option option0 = OptionBuilder.create('?');
      assertTrue(option0.hasOptionalArg());
      assertEquals("?", option0.getOpt());
      assertEquals((-1195), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionBuilder.hasArgs();
      Option option0 = OptionBuilder.create('6');
      assertEquals((-2), option0.getArgs());
      assertEquals(54, option0.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionBuilder.hasArgs(0);
      Option option0 = OptionBuilder.create('O');
      assertEquals(0, option0.getArgs());
      assertEquals("O", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionBuilder.withLongOpt("RT#");
      OptionBuilder.isRequired(true);
      Option option0 = OptionBuilder.create();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionBuilder.withValueSeparator('#');
      OptionBuilder.withLongOpt("$x$t!PH}!& i,fzR$");
      Option option0 = OptionBuilder.create();
      assertEquals((-1), option0.getArgs());
      assertEquals('#', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionBuilder.withArgName("RT#");
      OptionBuilder.withLongOpt("RT#");
      Option option0 = OptionBuilder.create();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionBuilder.withLongOpt("tn<l");
      OptionBuilder.hasOptionalArgs(0);
      Option option0 = OptionBuilder.create();
      assertTrue(option0.hasOptionalArg());
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionBuilder.withLongOpt("$x$t!PH}!& i,fzR$");
      OptionBuilder.hasOptionalArg();
      Option option0 = OptionBuilder.create();
      assertTrue(option0.hasOptionalArg());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
//      try { 
        OptionBuilder.create("b!h\"vKZM");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'b!h\"vKZM' contains an illegal character : '!'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
//      try { 
        OptionBuilder.create('}');
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '}'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
//      try { 
        OptionBuilder.create();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must specify longopt
//         //
//         verifyException("org.apache.commons.cli.OptionBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionBuilder.hasArg(true);
      Option option0 = OptionBuilder.create('M');
      assertEquals("M", option0.getOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasArg(false);
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.withDescription("9");
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArgs();
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptionBuilder.hasOptionalArgs(0);
      Option option0 = OptionBuilder.create("");
      assertEquals(0, option0.getArgs());
      assertTrue(option0.hasOptionalArg());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptionBuilder.hasArgs();
      OptionBuilder.withLongOpt("");
      Option option0 = OptionBuilder.create();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionBuilder optionBuilder0 = OptionBuilder.withType(class0);
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.withValueSeparator();
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptionBuilder.withArgName(" ");
      Option option0 = OptionBuilder.create('O');
      assertEquals(79, option0.getId());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptionBuilder.isRequired(true);
      Option option0 = OptionBuilder.create('6');
      assertEquals((-1), option0.getArgs());
      assertEquals(54, option0.getId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptionBuilder.withLongOpt("org.apache.commons.cli.Option");
      Option option0 = OptionBuilder.create('O');
      assertEquals("O", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasArg();
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.isRequired();
      assertNotNull(optionBuilder0);
  }
}
