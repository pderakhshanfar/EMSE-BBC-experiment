/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 01:27:39 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLTimeoutException;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.chrono.HijrahDate;
import java.util.ArrayList;
import java.util.List;
import javax.xml.namespace.QName;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlSerializerProvider_ESTest extends XmlSerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1824, 1824, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("E;<+9UX3(+S7QTJDG", "E;<+9UX3(+S7QTJDG", "");
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "Element <{0}> has non-mixed content specification; can not contain non-white space text, or any CDATA sections", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, asciiXmlWriter0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1824, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, (SerializerFactory) null);
      xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) null, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      assertTrue(toXmlGenerator0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DefaultSerializerProvider defaultSerializerProvider0 = xmlSerializerProvider0.createInstance(serializationConfig0, (SerializerFactory) null);
      assertNotSame(defaultSerializerProvider0, xmlSerializerProvider0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver(deserializationConfig0);
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, (SerializerFactory) null);
      QName qName0 = xmlSerializerProvider1._rootNameFromConfig();
      assertNull(qName0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = PropertyName.construct("[no message for ", "CS");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, (SerializerFactory) null);
      QName qName0 = xmlSerializerProvider1._rootNameFromConfig();
      assertNotNull(qName0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      StringReader stringReader0 = new StringReader("JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) stringReader0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
      ToXmlGenerator toXmlGenerator0 = xmlSerializerProvider0._asXmlGenerator(tokenBuffer0);
      assertNull(toXmlGenerator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1803, 1803, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.writeStartArray((-939));
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, (ObjectCodec) null, simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(80);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "com.fasterxml.jackson.databind.ser.Serializers$Base", true, byteArrayBuilder0, 294);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.databind.ser.Serializers$Base", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2969, (-568), (ObjectCodec) null, simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertFalse(toXmlGenerator1.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-160), (-160), (ObjectCodec) null, simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertTrue(toXmlGenerator1.inRoot());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "4G", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1824, 1824, (ObjectCodec) null, simpleNsStreamWriter0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver(deserializationConfig0);
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, (SerializerFactory) null);
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0.createInstance((SerializationConfig) null, beanSerializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._startRootArray((ToXmlGenerator) null, (QName) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("wU-", false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      QName qName0 = new QName("wU-");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "wU-", false, mockFileOutputStream0, 1);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "wU-", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2475, 3, objectMapper0, simpleNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._serializeXmlNull(jsonGenerator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
//      try { 
        xmlSerializerProvider1._serializeXmlNull((JsonGenerator) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._rootNameFromConfig();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<TokenBuffer> class0 = TokenBuffer.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(filterOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectReader0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, (QName) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UVMnC^wKA&,>)V/!]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-5086), (-905), (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("L+JO.uiT", "com.ctc.wstx.util.WordResolver", "Di\"<pv");
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Can not set default namespace for non-namespace writer.
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._asXmlGenerator((JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_BASE64_CODEC_BUFFER, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
//      try { 
        xmlSerializerProvider0._asXmlGenerator(uTF8JsonGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.json.UTF8JsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = null;
//      try {
        xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, (SerializationConfig) null, beanSerializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = null;
//      try {
        xmlSerializerProvider0 = new XmlSerializerProvider((XmlSerializerProvider) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IOException iOException0 = xmlSerializerProvider0._wrapAsIOE((JsonGenerator) null, sQLIntegrityConstraintViolationException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("31<)K8(n;");
      IOException iOException0 = xmlSerializerProvider0._wrapAsIOE(tokenBuffer0, sQLTimeoutException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1828, 1828, (ObjectCodec) null, streamWriter2Delegate0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = PropertyName.construct(">", "");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, (SerializerFactory) null);
      Class<String> class0 = String.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) mockFileInputStream0, (JavaType) resolvedRecursiveType0, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("wU-", false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "wU-", false, mockFileOutputStream0, 1);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "wU-", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2475, 3, objectMapper0, simpleNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._wrapAsIOE(toXmlGenerator0, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(pipedOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "e@$7YL$3'0,6o\"4^`", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8116, 902, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf(",K|nc%<y|d-ORbPU/");
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
//      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not output XML declaration, after other output has already been done.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = new PropertyName("Y", "Y");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, resolvedRecursiveType0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "resultBuffer is null", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) null, (JavaType) arrayType0, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Can not set default namespace for non-namespace writer.
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1828, 1828, (ObjectCodec) null, streamWriter2Delegate0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = PropertyName.construct("", "");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, (SerializerFactory) null);
      Class<String> class0 = String.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      Class<ObjectNode> class1 = ObjectNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) serializationConfig1, (JavaType) resolvedRecursiveType0, (JsonSerializer<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1648, 1648, (ObjectCodec) null, streamWriter2Delegate0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, (SerializerFactory) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) streamWriter2Delegate0, (JavaType) collectionLikeType0, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<TokenBuffer> class0 = TokenBuffer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(resolvedRecursiveType0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-118));
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      HijrahDate hijrahDate0 = MockHijrahDate.from(localDateTime0);
      xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) hijrahDate0, (JavaType) resolvedRecursiveType0, (JsonSerializer<Object>) beanSerializer0);
      assertFalse(resolvedRecursiveType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlRootNameLookup0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "C7g6~b~v|k%:F5o", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1987, 0, objectMapper0, simpleNsStreamWriter0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = PropertyName.construct(" -> ", "CS");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, (SerializerFactory) null);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) configOverrides0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.annotation.ObjectIdGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, (ObjectCodec) null, simpleNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, (SerializerFactory) null);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) serializationConfig0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      DefaultSerializerProvider defaultSerializerProvider0 = xmlSerializerProvider0.copy();
      assertNotSame(defaultSerializerProvider0, xmlSerializerProvider0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlRootNameLookup0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "C7g6~b~v|k%:F5o", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, simpleNsStreamWriter0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = PropertyName.construct(" -> ", "B");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, (SerializerFactory) null);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>(4);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) arrayList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }
}
