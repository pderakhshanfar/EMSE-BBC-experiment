/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:50:47 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringWriter;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.util.Map;
import javax.xml.namespace.QName;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlSerializerProvider_ESTest extends XmlSerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, xmlSerializerProvider0, defaultDeserializationContext_Impl0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "xE)O<R=bN=C", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-1270), objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("com.ctc.wstx.evt.SimpleStartElement");
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[8];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, (-7374));
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      xmlSerializerProvider1.serializeValue((JsonGenerator) tokenBuffer0, (Object) null, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(tokenBuffer0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DefaultSerializerProvider defaultSerializerProvider0 = xmlSerializerProvider0.createInstance(serializationConfig0, (SerializerFactory) null);
      assertNotSame(xmlSerializerProvider0, defaultSerializerProvider0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      QName qName0 = xmlSerializerProvider1._rootNameFromConfig();
      assertNull(qName0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      ToXmlGenerator toXmlGenerator0 = xmlSerializerProvider0._asXmlGenerator(tokenBuffer0);
      assertNull(toXmlGenerator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "zm>`tVG@`0=G6T", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 26, objectMapper0, nonNsStreamWriter0);
      QName qName0 = XmlSerializerProvider.ROOT_NAME_FOR_NULL;
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertFalse(toXmlGenerator1.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, xmlSerializerProvider0, defaultDeserializationContext_Impl0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "AbstractApplicationContext", writerConfig0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationFeature0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-1795), objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertFalse(toXmlGenerator1.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper0, simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, xmlSerializerProvider0, defaultDeserializationContext_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "8(#3eE", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-286), 0, objectReader0, nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertTrue(toXmlGenerator1.inRoot());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = new PropertyName("j", "j");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "item", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "j", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2064), (-1395), (ObjectCodec) null, nonNsStreamWriter0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) objectMapper_DefaultTypeResolverBuilder0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Can not set default namespace for non-namespace writer.
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, xmlSerializerProvider0, defaultDeserializationContext_Impl0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayOutputStream0, byteArray0, 3, true);
//      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) uTF8JsonGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.json.UTF8JsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._wrapAsIOE((JsonGenerator) null, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      QName qName0 = new QName("", ") not numeric, cannot use numeric value accessors", ") not numeric, cannot use numeric value accessors");
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._startRootArray((ToXmlGenerator) null, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._serializeXmlNull(tokenBuffer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
//      try { 
        xmlSerializerProvider1._serializeXmlNull(filteringGeneratorDelegate0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // [no message for java.lang.NullPointerException]
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._rootNameFromConfig();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      QName qName0 = new QName("JSON", "JSON");
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._initWithRootName((ToXmlGenerator) null, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      char[] charArray0 = new char[0];
      asciiXmlWriter0.writeRawAscii(charArray0, 3, (-1288));
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON");
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1288
//         //
//         verifyException("com.ctc.wstx.sw.EncodingXmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, xmlSerializerProvider0, defaultDeserializationContext_Impl0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultDeserializationContext_Impl0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      nonNsStreamWriter0.writeEmptyElement("JSON", "JSON", "JSON");
      QName qName0 = new QName("]", "JSON");
//      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not output XML declaration, after other output has already been done.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._asXmlGenerator((JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, objectMapper0, stringWriter0);
//      try { 
        xmlSerializerProvider0._asXmlGenerator(writerBasedJsonGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = null;
//      try {
        xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, (SerializationConfig) null, beanSerializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = null;
//      try {
        xmlSerializerProvider0 = new XmlSerializerProvider((XmlSerializerProvider) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("8:!^pO[G&kJfl,MQ5'", (String) null, (Throwable) null);
      IOException iOException0 = xmlSerializerProvider0._wrapAsIOE((JsonGenerator) null, sQLTransientConnectionException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      IOException iOException0 = xmlSerializerProvider0._wrapAsIOE((JsonGenerator) null, sQLTimeoutException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
//      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) filteringGeneratorDelegate0, (Object) configOverrides0, (JavaType) mapType0, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = new PropertyName("5cC _)QH>~p", "");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      QName qName0 = xmlSerializerProvider1._rootNameFromConfig();
      assertNotNull(qName0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      QName qName0 = xmlSerializerProvider1._rootNameFromConfig();
      assertNotNull(qName0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "zm>`tVG@`0=G6T", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 26, objectMapper0, nonNsStreamWriter0);
      QName qName0 = XmlSerializerProvider.ROOT_NAME_FOR_NULL;
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertTrue(toXmlGenerator0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[8];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, (-7374));
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      xmlSerializerProvider1.serializeValue((JsonGenerator) tokenBuffer0, (Object) null);
      assertFalse(tokenBuffer0.isClosed());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, rootNameLookup0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, " ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, nonNsStreamWriter0);
      xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) null);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = PropertyName.construct("j", "j");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 258, 1, objectMapper0, streamWriter2Delegate0);
      xmlSerializerProvider1._serializeXmlNull(toXmlGenerator0);
      assertNotSame(xmlSerializerProvider1, xmlSerializerProvider0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      JsonSerializer<Object> jsonSerializer0 = xmlSerializerProvider0.getDefaultNullValueSerializer();
      xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) jsonFactory0, (JavaType) null, jsonSerializer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, xmlSerializerProvider0, defaultDeserializationContext_Impl0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) objectMapper0, (JavaType) null, (JsonSerializer<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = new PropertyName("j", "j");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Wap`V.{u9SR)wi");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "JSON", true, (OutputStream) null, 917);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "j", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 917, 917, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) rootNameLookup0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.TypeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
//      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) jsonFactory0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = new PropertyName("j", "j");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Wap`V.{u9SR)wi");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "JSON", false, (OutputStream) null, (-1548));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "j", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 917, (-1548), objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) toXmlGenerator0.SURR1_FIRST);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3423), (-1), (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) configOverrides0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = new PropertyName("j", "j");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "Wap`V.{u9SR)wi", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 917, 917, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) writerConfig0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Can not set default namespace for non-namespace writer.
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) xmlRootNameLookup0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0.createInstance((SerializationConfig) null, beanSerializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, rootNameLookup0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, " ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, nonNsStreamWriter0);
      Class<ObjectReader> class0 = ObjectReader.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      // Undeclared exception!
//      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      DefaultSerializerProvider defaultSerializerProvider0 = xmlSerializerProvider0.copy();
      assertNotSame(defaultSerializerProvider0, xmlSerializerProvider0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "zm>`tVG@`0=G6T", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 26, objectMapper0, nonNsStreamWriter0);
      QName qName0 = XmlSerializerProvider.ROOT_NAME_FOR_NULL;
      // Undeclared exception!
//      try { 
        xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }
}
