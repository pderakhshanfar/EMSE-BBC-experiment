/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 08:17:47 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.bind.ObjectTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      Class<MockCalendar> class1 = MockCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Calendar>) class1, (TypeAdapter<? super Calendar>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeToken<MockGregorianCalendar> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<MockGregorianCalendar>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("4s{=");
      Class<Byte> class0 = Byte.class;
//      try { 
        gson0.fromJson((Reader) stringReader0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"4s\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      // Undeclared exception!
//      try { 
        gson0.fromJson("<dl*KrN7GAn", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.net.URISyntaxException: Illegal character in path at index 0: <dl*KrN7GAn
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super JsonPrimitive>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      Class<Boolean> class1 = Boolean.class;
      TypeAdapterRuntimeTypeWrapper<Boolean> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Boolean>(gson0, (TypeAdapter<Boolean>) null, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class1, (TypeAdapter<Boolean>) typeAdapterRuntimeTypeWrapper0);
      TypeToken<InetAddress> typeToken0 = TypeToken.get(class0);
      TypeAdapter<InetAddress> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class0, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
//      try { 
        jsonArray0.getAsJsonObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Not a JSON Object: []
//         //
//         verifyException("com.google.gson.JsonElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<JsonNull> class0 = JsonNull.class;
      JsonNull jsonNull1 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertSame(jsonNull1, jsonNull0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<JsonNull> class0 = JsonNull.class;
//      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonArray
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
//      try { 
        gson0.fromJson("L+4erT=yem", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"L+4erT\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) objectTypeAdapter0);
      String string0 = gson0.toJson(jsonElement0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((JsonElement) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonNull> class0 = JsonNull.class;
      JsonObject jsonObject0 = new JsonObject();
//      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonObject
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(0.0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(float0);
      Class<JsonNull> class0 = JsonNull.class;
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(locale0);
      Class<JsonNull> class0 = JsonNull.class;
//      try { 
        gson0.fromJson(jsonElement0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      TypeAdapter<Locale> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);
      Locale locale0 = typeAdapterRuntimeTypeWrapper0.fromJson("null");
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      TypeAdapter<Locale> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);
      Locale locale0 = typeAdapterRuntimeTypeWrapper0.fromJson("\"http://www.someFakeButWellFormedURL.org/fooExample\"");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
//      try { 
        gson0.fromJson("{sAY1Dh<a8", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.EOFException: End of input at line 1 column 11
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      UUID uUID0 = MockUUID.fromString("");
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(uUID0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      Object object0 = gson0.fromJson("null", (Type) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
//      try { 
        gson0.fromJson("HQ:<}_", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree((Object) null);
      Class<InetAddress> class0 = InetAddress.class;
      InetAddress inetAddress0 = gson0.fromJson(jsonElement0, class0);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(inetAddress0);
      Class<InetAddress> class0 = InetAddress.class;
      Inet4Address inet4Address0 = (Inet4Address)gson0.fromJson(jsonElement0, class0);
      assertFalse(inet4Address0.isMCOrgLocal());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      MockFile mockFile0 = new MockFile("Q_Ho\"x|%Xs<MDAT/O", "Q_Ho\"x|%Xs<MDAT/O");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      JsonWriter jsonWriter0 = new JsonWriter(mockFileWriter0);
      gson0.toJson((Object) null, (Type) class0, jsonWriter0);
      assertFalse(jsonWriter0.isLenient());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      URI uRI0 = MockURI.aFileURI;
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(uRI0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree((Object) null);
      Class<URI> class0 = URI.class;
      URI uRI0 = gson0.fromJson(jsonElement0, class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      URL uRL0 = MockURL.getFtpExample();
      String string0 = objectTypeAdapter0.toJson((Object) uRL0);
      assertEquals("\"ftp://ftp.someFakeButWellFormedURL.org/fooExample\"", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      URL uRL0 = gson0.fromJson("null", class0);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
//      try { 
        gson0.fromJson("Q%VVY:$!6", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.net.MalformedURLException: no protocol: Q%VVY
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer("k-@:W]D& 4l@/la!");
      gson0.toJson((Object) null, (Type) class0, (Appendable) stringBuffer0);
      assertEquals(20, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Ykj~F;_H[Rn\"Q");
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(stringBuffer0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = (StringBuffer)gson0.fromJson("~a8+", (Type) class0);
      assertEquals(4, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      StringBuilder stringBuilder0 = new StringBuilder("5;g^o?I;1Tde");
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(stringBuilder0);
      assertTrue(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("@lWJjDe::#\\");
      Class<StringBuilder> class0 = StringBuilder.class;
//      try { 
        gson0.fromJson((Reader) stringReader0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 9 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      Object object0 = gson0.fromJson("(z-i+NGY", (Type) class0);
      assertEquals("(z-i+NGY", object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      Object object0 = gson0.fromJson("null", (Type) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      Object object0 = gson0.fromJson("false", (Type) class0);
      assertEquals("false", object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      TypeToken<Character> typeToken0 = TypeToken.get(class0);
      Class<? super Character> class1 = typeToken0.getRawType();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class1);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Character character0 = new Character(';');
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(character0);
      String string0 = objectTypeAdapter0.toJson((Object) jsonElement0);
      assertEquals("\";\"", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      StringReader stringReader0 = new StringReader("-Infinity");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
//      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expecting character, got: -Infinity
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      TypeToken<Character> typeToken0 = TypeToken.get(class0);
      Class<? super Character> class1 = typeToken0.getRawType();
      JsonObject jsonObject0 = gson0.fromJson("null", (Type) class1);
      assertNull(jsonObject0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.class;
      TypeToken<Character> typeToken0 = TypeToken.get(class0);
      Class<? super Character> class1 = typeToken0.getRawType();
      Object object0 = gson0.fromJson("N", (Type) class1);
      assertEquals('N', object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      MockGregorianCalendar mockGregorianCalendar0 = gson0.fromJson("null", (Type) class0);
      assertNull(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      int[] intArray0 = new int[1];
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      JsonArray jsonArray0 = (JsonArray)objectTypeAdapter0.toJsonTree(atomicIntegerArray0);
      assertEquals(1, jsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = Character.valueOf('U');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      jsonArray0.add((JsonElement) jsonPrimitive0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
//      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"U\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      MockGregorianCalendar mockGregorianCalendar0 = gson0.fromJson("null", (Type) class0);
      assertNull(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
//      try { 
        gson0.fromJson(">~FW(yFK-^hvK+", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \">~FW(yFK-^hvK+\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      MockGregorianCalendar mockGregorianCalendar0 = gson0.fromJson("null", (Type) class0);
      assertNull(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
//      try { 
        gson0.fromJson("Ykj~F;_H[Rn\"Q", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"Ykj~F\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.class;
      Byte byte0 = gson0.fromJson("null", class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("40{=");
      Class<Byte> class0 = Byte.class;
//      try { 
        gson0.fromJson((Reader) stringReader0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
//      try { 
        gson0.fromJson("[gPw=W", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was BEGIN_ARRAY at line 1 column 2 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      JsonObject jsonObject0 = gson0.fromJson("null", (Type) class0);
      assertNull(jsonObject0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
//      try { 
        gson0.fromJson("Ykj~F;_H[Rn\"Q", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 7 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-45);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      JsonArray jsonArray0 = (JsonArray)objectTypeAdapter0.toJsonTree(bitSet0);
      assertEquals(8, jsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      BitSet bitSet0 = new BitSet();
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(bitSet0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      AtomicIntegerArray atomicIntegerArray0 = gson0.fromJson(jsonElement0, class0);
      assertNotNull(atomicIntegerArray0);
      assertEquals("[]", atomicIntegerArray0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
//      try { 
        gson0.fromJson("a", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      // Undeclared exception!
//      try { 
        objectTypeAdapter0.toJsonTree(class0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Attempted to serialize java.lang.Class: org.evosuite.runtime.mock.java.util.MockGregorianCalendar. Forgot to register a type adapter?
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Currency> class0 = Currency.class;
      StringReader stringReader0 = new StringReader("SvQqq529|AfMK");
      // Undeclared exception!
//      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Currency", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Locale locale0 = Locale.UK;
      Currency currency0 = Currency.getInstance(locale0);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)objectTypeAdapter0.toJsonTree(currency0);
      assertFalse(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      AtomicInteger atomicInteger0 = new AtomicInteger(14);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)objectTypeAdapter0.toJsonTree(atomicInteger0);
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
//      try { 
        gson0.fromJson("\"http://www.someFakeButWellFormedURL.org/fooExample\"", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"http://www.someFakeButWellFormedURL.org/fooExample\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(atomicBoolean0);
      Class<JsonNull> class0 = JsonNull.class;
//      try { 
        gson0.fromJson(jsonElement0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
//      try { 
        gson0.fromJson("7#()$)ACK)J~jash", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was NUMBER at line 1 column 2 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(179.4F);
      Class<Byte> class0 = Byte.TYPE;
      String string0 = gson0.toJson((Object) float0, (Type) class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(jsonNull0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Short short0 = new Short((short) (-627));
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)objectTypeAdapter0.toJsonTree(short0);
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JsonElement jsonElement0 = objectTypeAdapter0.toJsonTree(mockGregorianCalendar0);
      Class<JsonNull> class0 = JsonNull.class;
//      try { 
        gson0.fromJson(jsonElement0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonObject
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }
}
