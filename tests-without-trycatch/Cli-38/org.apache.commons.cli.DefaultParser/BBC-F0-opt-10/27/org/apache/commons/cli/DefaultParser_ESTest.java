/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 03:06:26 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.handleConcatenatedOptions("");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("LcIs", "LcIs", true, "LcIs");
      Options options2 = options1.addRequiredOption("LcIs", ">.V", true, "LcIs");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
//      try { 
        defaultParser0.parse(options2, stringArray0, false);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Ambiguous option: '--'  (could be: 'LcIs', '>.V')
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "nSF";
      stringArray0[1] = "--LcIs";
//      try { 
        defaultParser0.parse(options0, stringArray0, false);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: --LcIs
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("LcIs", "LcIs", true, "LcIs");
      Options options2 = options1.addRequiredOption("LcIs", ">.V", true, "LcIs");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
      Properties properties0 = new Properties();
//      try { 
        defaultParser0.parse(options2, stringArray0, properties0, false);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Ambiguous option: '--'  (could be: 'LcIs', '>.V')
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "true";
      stringArray0[1] = "true";
      stringArray0[2] = "true";
      stringArray0[3] = "true";
      stringArray0[4] = "true";
      stringArray0[5] = "true";
      stringArray0[6] = "true";
      stringArray0[7] = "true";
      stringArray0[8] = "true";
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put(object0, options0);
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0, properties0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Object cannot be cast to java.lang.String
//         //
//         verifyException("java.util.Properties", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("LcIs", "LcIs", true, "LcIs");
      options1.addRequiredOption("LcIs", ">.V", true, "LcIs");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
      Properties properties0 = new Properties();
//      try { 
        defaultParser0.parse(options1, stringArray0, properties0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Ambiguous option: '--'  (could be: 'LcIs', '>.V')
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[8];
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        defaultParser0.parse((Options) null, stringArray0, properties0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      Object object0 = new Object();
      OptionGroup optionGroup0 = new OptionGroup();
      properties0.put(object0, optionGroup0);
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, (String[]) null, properties0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Object cannot be cast to java.lang.String
//         //
//         verifyException("java.util.Properties", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      defaultParser0.parse(options0, stringArray0);
//      try { 
        defaultParser0.handleConcatenatedOptions("--");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: --
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("fJ", "", true, "by+tSy+w");
      option0.addValueForProcessing("bwE='},@)B");
      options0.addOption(option0);
      String[] stringArray0 = new String[0];
      defaultParser0.parse(options0, stringArray0);
      // Undeclared exception!
//      try { 
        defaultParser0.handleConcatenatedOptions("--fJ");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
//      try { 
        defaultParser0.handleConcatenatedOptions("elqHw-G/u:0h'7n6J");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("L", "L", true, "L");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-LcI";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("p", "p", false, "p");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("p", true, "--=");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "--=";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("p", "p", true, "'  (could be: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("p", true, "\"Il`?u0W-,Zl");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"Il`?u0W-,Zl";
      stringArray0[1] = "\"Il`?u0W-,Zl";
      stringArray0[2] = "p";
      stringArray0[3] = "'  (could be: ";
      stringArray0[4] = "\"Il`?u0W-,Zl";
      stringArray0[5] = "\"Il`?u0W-,Zl";
      stringArray0[6] = "Jn";
      stringArray0[7] = "--=";
//      try { 
        defaultParser0.parse(options1, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Missing required option: p
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("L", "L", false, "L");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-LcI";
      defaultParser0.parse(options0, stringArray0, true);
      defaultParser0.handleConcatenatedOptions("-LcI");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4-r7LkM49N";
      stringArray0[1] = "XQ>GvR\"!+m*-sa>k#?";
      stringArray0[2] = "-m;(]oaslspAK=eO6s";
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: -m;(]oaslspAK=eO6s
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("1", "-E}MEz}e/DR-", false, "]");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-1=";
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: -1=
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("1", "-E}MEz}e/DR-", true, "LcIs");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-1=";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options1, stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LcI";
      stringArray0[1] = " to desired type: ";
      stringArray0[2] = "-=VsJQo!";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addOption("LcIs", "I.", false, "-I.%Iw]ktF</KB</");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-I.%Iw]ktF</KB</";
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: -I.%Iw]ktF</KB</
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("LcIs", "I.", true, "I.");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "LcIs";
      stringArray0[1] = "-I.%Iw]ktF</KB</";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options1, stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-1=";
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: -1=
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-}";
//      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: -}
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("LcIs", "LcIs", false, "LcIs");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: --=
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("LcIs", "LcIs", true, "LcIs");
      options1.addRequiredOption("LcIs", ">.V", true, "LcIs");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
//      try { 
        defaultParser0.parse(options1, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Ambiguous option: '--'  (could be: 'LcIs', '>.V')
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("LcIs", "LcIs", true, "LcIs");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "LcIs";
      stringArray0[1] = "--LcIs";
      stringArray0[2] = "-";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("LcIs", "LcIs", true, "---LcIs");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-LcI";
      stringArray0[1] = "---LcIs";
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: ---LcIs
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "-";
      stringArray0[2] = "";
      stringArray0[3] = "|";
      stringArray0[4] = "QBinh_|}i]KG8";
      stringArray0[5] = "j1qI'B(w@";
      stringArray0[6] = "sG[l)m[u}frgB\"";
      stringArray0[7] = "--";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      Options options1 = options0.addOption("", "", true, "");
      defaultParser0.parse(options1, stringArray0);
      Option option0 = new Option("", "", false, "");
      defaultParser0.currentOption = option0;
      defaultParser0.handleConcatenatedOptions("--");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("L", "L", false, "L");
      DefaultParser defaultParser0 = new DefaultParser();
      options1.addOption("L", "K", false, "L");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "KSl%E]|#XQ4yZC=pS";
      stringArray0[1] = "K";
      stringArray0[2] = "x";
      stringArray0[3] = "-L";
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Missing required option: L
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      Properties properties0 = new Properties();
      properties0.put("iw^[u6UC0;_", "true");
//      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Default option wasn't defined
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-LcI";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("LcIs", "LcIs", true, "LcIs");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LcIs";
      stringArray0[1] = "(";
      stringArray0[2] = "-LcIs";
      stringArray0[3] = "/Y@";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0, properties0, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-(E{/mX;<1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options1, stringArray0, properties0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("LcIs", "LcIs", true, "LcIs");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-LcI";
      stringArray0[1] = "---(koHslsp\">K=VleO6s";
      stringArray0[2] = "o";
      stringArray0[3] = "-LcI";
      stringArray0[4] = "-LcI";
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Missing argument for option: LcIs
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }
}
