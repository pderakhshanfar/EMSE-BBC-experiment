/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 21:38:43 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("5", "5", false, "-5*6xN7,>C/gY)]");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-5*6xN7,>C/gY)]";
      defaultParser0.parse(options0, stringArray0, true);
      defaultParser0.handleConcatenatedOptions("-5s|deGG");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.handleConcatenatedOptions("");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      defaultParser0.parse(options0, (String[]) null, properties0);
//      try { 
        defaultParser0.handleConcatenatedOptions("--bCx{sL}I7nnz#bn");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: --bCx{sL}I7nnz#bn
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("G", "G", true, "G");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--=-\"O";
      Option option0 = new Option("true", "-", true, ";G2Y5=IS90x# K");
      Options options2 = options1.addOption(option0);
//      try { 
        defaultParser0.parse(options2, stringArray0, true);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Ambiguous option: '--'  (could be: 'G', '-')
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("", (String) null, false, (String) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "o";
//      try { 
        defaultParser0.parse(options0, stringArray0, false);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Missing required option: 
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-=Wgv";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("G", "G", true, "G");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--=-\"O";
      Option option0 = new Option("true", "-", true, ";G2Y5=IS90x# K");
      Options options2 = options1.addOption(option0);
      Properties properties0 = new Properties();
//      try { 
        defaultParser0.parse(options2, stringArray0, properties0, false);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Ambiguous option: '--'  (could be: 'G', '-')
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-=Wgv";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0, (Properties) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.cli.DefaultParser";
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put(object0, object0);
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Object cannot be cast to java.lang.String
//         //
//         verifyException("java.util.Properties", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-=Wgv";
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0, (Properties) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      Properties properties0 = new Properties();
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      properties0.put(defaultParser0, defaultParser0);
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, (String[]) null, properties0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.cli.DefaultParser cannot be cast to java.lang.String
//         //
//         verifyException("java.util.Properties", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("G", "G", true, "G");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--=-\"O";
      Option option0 = new Option("true", "-", true, ";G2Y5=IS90x# K");
      Options options2 = options1.addOption(option0);
//      try { 
        defaultParser0.parse(options2, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Ambiguous option: '--'  (could be: 'G', '-')
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-=;n!-g5i\"-";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
//      try { 
        defaultParser0.handleConcatenatedOptions("<54zmiU");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", true, "");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "iW(UUou6ina;";
      defaultParser0.parse(options0, stringArray0, true);
      defaultParser0.handleConcatenatedOptions("--");
//      try { 
        defaultParser0.handleConcatenatedOptions("---5*6xN7,>C/gY)]");
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Missing argument for option: 
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      defaultParser0.parse(options1, stringArray0);
      defaultParser0.handleConcatenatedOptions("--");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("G", "G", true, "G");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("G", "G", true, "G");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-;=!-g\"O";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("Ui", "Ui", true, "yPH(Cjf}Qqr;<l4");
      DefaultParser defaultParser0 = new DefaultParser();
      options1.addRequiredOption("Ui", "-58R]", false, "OcB`TiS");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-Uil67rPrNm-XKiH ";
      Properties properties0 = new Properties();
//      try { 
        defaultParser0.parse(options1, stringArray0, properties0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: -Uil67rPrNm-XKiH 
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("Ui", "Ui", true, "Ui");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-Uil67rPrNm-XKiH ";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options1, stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Zy(X=!ym";
      stringArray0[1] = "E)W-TKy~1M";
      stringArray0[2] = "Xb]oax@%u(8*DY(";
      stringArray0[3] = "";
      stringArray0[4] = "_bE5uS(~cO3pf-y";
      stringArray0[5] = "-v";
//      try { 
        defaultParser0.parse(options0, stringArray0, properties0, false);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: -v
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("G", "G", false, "d");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "--=-\"O";
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: --=-\"O
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("G", "G", true, "G");
      DefaultParser defaultParser0 = new DefaultParser();
      Options options1 = options0.addRequiredOption("G", "smtNHk(jtYTTs", true, "A CloneNotSupportedException was thrown: ");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "A CloneNotSupportedException was thrown: ";
      stringArray0[1] = "--=";
      Properties properties0 = new Properties();
//      try { 
        defaultParser0.parse(options1, stringArray0, properties0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Ambiguous option: '--'  (could be: 'G', 'smtNHk(jtYTTs')
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.cli.Options";
      stringArray0[1] = "g@/kZ;Ngsy";
      stringArray0[2] = "N\"A~";
      stringArray0[3] = "[";
      stringArray0[4] = "-[qGJkyU^=[GD~ht\"";
//      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: -[qGJkyU^=[GD~ht\"
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("5", "", true, "5");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "5";
      stringArray0[1] = "-5";
      stringArray0[2] = "-5";
      stringArray0[3] = "-5";
      stringArray0[4] = "-5";
      stringArray0[5] = "----NO_ARGS_ALLOWED";
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Unrecognized option: ----NO_ARGS_ALLOWED
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-vx;H~s4:H{";
      Properties properties0 = new Properties();
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("5", "5", true, "5");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-5";
      stringArray0[1] = "-";
      stringArray0[2] = "5";
      stringArray0[3] = "-5";
      stringArray0[4] = "---5*^xN,~CzgbY):]";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options1, stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("5", "5", true, "");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "--5";
      stringArray0[1] = "----=";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options1, stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-";
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("mfw", "mfw", true, "mfw");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "--=";
      stringArray0[1] = "mfw";
      stringArray0[2] = "Uil67rPrNm-XKiH ";
      stringArray0[3] = "mfw";
      stringArray0[4] = "-mfw";
      stringArray0[5] = "--=";
//      try { 
        defaultParser0.parse(options1, stringArray0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Missing argument for option: mfw
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("", "", true, "");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
      defaultParser0.parse(options0, stringArray0);
      defaultParser0.handleConcatenatedOptions("--=");
      defaultParser0.handleConcatenatedOptions("--=");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[qGJkyU^=[GD~ht\"";
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put("[qGJkyU^=[GD~ht\"", object0);
//      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Default option wasn't defined
//         //
//         verifyException("org.apache.commons.cli.DefaultParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("5", "5", true, "-5*^xN7,~C/gY):]");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "5";
      stringArray0[1] = "5";
      stringArray0[2] = "5";
      stringArray0[3] = "-5";
      stringArray0[4] = "8}f1f=W";
      stringArray0[5] = "5";
      stringArray0[6] = "5";
      stringArray0[7] = "-5*^xN7,~C/gY):]";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Properties properties0 = new Properties();
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "-vx;H~s4:H{");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options1, stringArray0, properties0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
//      try { 
        defaultParser0.parse(options0, stringArray0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }
}
