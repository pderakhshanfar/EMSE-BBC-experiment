/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 22:24:23 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArchiveUtils_ESTest extends ArchiveUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-81);
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 1900);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = ArchiveUtils.isArrayZero((byte[]) null, (-3141));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArchiveUtils.isEqual((byte[]) null, (-1), 1, byteArray0, 1302, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[8] = (byte) (-37);
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ArchiveUtils.toAsciiString((byte[]) null, 0, (-2151));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.setSize(4294967296L);
      String string0 = ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      assertEquals("d 4294967296 /", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = ArchiveUtils.toAsciiString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("", (byte[]) null, 2, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("");
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("", byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("|,LAVl4", byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 0, (byte) (-73), byteArray0, (-1555), (byte) (-73));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-26);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 896, 0, byteArray0, (-497), 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ArchiveUtils.toString((ArchiveEntry) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ArchiveUtils.toAsciiString((byte[]) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ArchiveUtils.toAsciiString((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ArchiveUtils.toAsciiBytes((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ArchiveUtils.sanitize((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
//      try { 
        ArchiveUtils.matchAsciiBuffer((String) null, byteArray0, 1, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
//      try { 
        ArchiveUtils.matchAsciiBuffer(" - ", byteArray0, 2847, 15);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2847
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
//      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-13), (-2779), (byte[]) null, (byte)89, (-2702));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
//      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (-36), 0, byteArray0, (byte)101, (byte)101);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 101
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ArchiveUtils.isEqual((byte[]) null, (byte[]) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ArchiveUtils.isEqual((byte[]) null, (byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ArchiveUtils.isEqual((byte[]) null, 0, (-1062), (byte[]) null, 52, 19, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
//      try { 
        ArchiveUtils.isEqual(byteArray0, 0, 32782, byteArray0, 0, 656);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ArchiveUtils.isArrayZero((byte[]) null, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)1;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte)1, 0, byteArray0, 1, 1420, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = ArchiveUtils.isEqual((byte[]) null, 1000, 63, (byte[]) null, 0, 0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 0, (-1062), byteArray0, 100, (-1062), true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 5, (int) (byte)1, byteArray0, 4, 5, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("\uFFFDd\uFFFD");
      assertEquals("?d?", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("\u0000\u0000\u0000\u0000\u0000");
      assertEquals("?????", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (byte)12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
//      try { 
        ArchiveUtils.isArrayZero(byteArray0, (byte)12);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 0, 15, byteArray0, 0, 0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte)1, (int) (byte)1, byteArray0, 0, 0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
//      try { 
        ArchiveUtils.isEqual(byteArray0, 165, 948, byteArray0, 32, (-1), true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 164
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte)1, (int) (byte)1, byteArray0, 0, (int) (byte)63, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "");
      String string0 = ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      assertEquals("d       0 ", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("org.apache.commons.compress.utils.ArchiveUtils", "org.apache.commons.compress.utils.ArchiveUtils", (File) mockFile0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      String string0 = ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      assertEquals("-       0 experiment/org.apache.commons.compress.utils.ArchiveUtils0org.apache.commons.compress.utils.ArchiveUtils", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("", byteArray0, 5, (int) (byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = ArchiveUtils.toAsciiString(byteArray0);
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("xDb");
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (short)1, (short)1, byteArray0, (short)1, 2723);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ArchiveUtils.matchAsciiBuffer("&78'amUTY,Q9L[", (byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ArchiveUtils.isEqual((byte[]) null, 9575, 34, (byte[]) null, (-1619), 34);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals("\u0000", string0);
  }
}
