/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 01:03:46 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      StringWriter stringWriter0 = new StringWriter();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLFeatureNotSupportedException1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('+');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r");
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\r";
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) "\r";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) "\r";
      objectArray0[7] = (Object) "";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.format(objectArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      ArrayList<ObjectOutputStream> arrayList0 = new ArrayList<ObjectOutputStream>();
      cSVPrinter0.getOut();
      // Undeclared exception!
//      try { 
        cSVPrinter0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('>');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r`\n");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withQuote('.');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('f');
      Character character1 = new Character('f');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[7] = object1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.printComment("f java.lang.Character@0000000002\nf org.apache.commons.csv.CSVFormat@0000000001\nf java.io.StringWriter@0000000003\nf java.io.StringWriter@0000000003\nf java.lang.Object@0000000004\nf org.apache.commons.csv.CSVFormat@0000000001\nf org.apache.commons.csv.CSVFormat@0000000001\nf java.lang.Object@0000000005\njava.lang.Character@0000000002\torg.apache.commons.csv.CSVFormat@0000000001\tjava.io.StringWriter@0000000003\tjava.io.StringWriter@0000000003\tjava.lang.Object@0000000004\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000001\tjava.lang.Object@0000000005");
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('P');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = (Object) character0;
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate('P');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000003\t\tjava.lang.Character@0000000004");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('.');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("Mk");
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      Character character0 = new Character('.');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) character0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "Mk";
      objectArray0[5] = (Object) quoteMode0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat5.format(objectArray0);
      cSVFormat1.withHeaderComments(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Mapping for %s not found, expected one of %s");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      PipedWriter pipedWriter0 = new PipedWriter();
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Short short0 = new Short((short)17);
      cSVPrinter0.print(short0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RecordSeparator=<");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.print(mockPrintWriter0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("\u2028", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLNonTransientException0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord((Iterable<?>) sQLFeatureNotSupportedException0);
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) mockPrintWriter0;
      objectArray1[1] = (Object) sQLFeatureNotSupportedException0;
      objectArray1[2] = (Object) sQLFeatureNotSupportedException0;
      objectArray1[3] = (Object) mockPrintWriter0;
      objectArray1[4] = (Object) cSVPrinter0;
      objectArray1[6] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      cSVFormat0.format(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9 Kn=E:j8INAMR]UwUH");
      cSVFormat1.withQuote('e');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9 Kn=E:j8INAMR]UwUH");
      cSVFormat0.print(mockPrintWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AWRr\"h{g>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("AWRr\"h{g>");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Short short0 = new Short((short)2496);
//      try { 
        cSVPrinter0.print(short0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      cSVFormat0.withAllowMissingColumnNames();
      Character character0 = new Character('S');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      Character character1 = Character.valueOf('e');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character1);
      cSVFormat2.format(stringArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("");
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("<|0()G");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-67);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      HashSet<PipedWriter> hashSet0 = new HashSet<PipedWriter>(358);
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) quoteMode0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) quoteMode1;
      cSVFormat2.format(objectArray0);
      cSVFormat1.withNullString("format");
      cSVFormat1.withNullString("out");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.format(objectArray0);
      Character character0 = new Character('Y');
      Character character1 = new Character('[');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      cSVFormat0.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
//      try { 
        cSVPrinter0.printComment("\"\",");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      cSVFormat1.withNullString("org.apache.commons.csv.CSVFormat@0000000002\t\t\torg.apache.commons.csv.CSVFormat@0000000002");
      ArrayList<ObjectOutputStream> arrayList0 = new ArrayList<ObjectOutputStream>();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\u2029", "EP52![+a");
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.format(objectArray0);
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("\"\",");
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("0V*1#~go[Xx>)'V(");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"\",");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RecordSeparator=<");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.print(mockPrintWriter0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("\u2028", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLNonTransientException0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) sQLFeatureNotSupportedException0;
      objectArray0[2] = (Object) sQLFeatureNotSupportedException0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) sQLFeatureNotSupportedException0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) sQLFeatureNotSupportedException0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.format(objectArray0);
      cSVFormat0.format(objectArray0);
      cSVFormat0.withNullString("");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      cSVFormat1.withHeader((ResultSetMetaData) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpected Quote value: ");
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[6];
      cSVFormat0.withHeaderComments(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*'bez0DZcgcus@7I");
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("*'bez0DZcgcus@7I", "*'bez0DZcgcus@7I", 30);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.format(objectArray0);
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      cSVFormat0.withNullString((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpected Quote value: ");
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object[] objectArray1 = new Object[1];
      Object object0 = new Object();
      objectArray1[0] = object0;
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("4y%h83eZ*yU9FQy");
      cSVFormat1.withNullString("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"{e\"5>");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\"{e\"5>");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("`Qu\"MP9Hx");
      cSVFormat3.format(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("");
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      cSVPrinter1.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat0.print(pipedWriter0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (String) null, 57);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "RecordSeparator=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 118);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("<|0()G");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<|0()G");
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVFormat2.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("4y%h83eZ*yU9FQy");
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"{e\"5>");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVFormat1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray1[1] = (Object) locale0;
      objectArray1[2] = (Object) "4y%h83eZ*yU9FQy";
      objectArray1[3] = (Object) "";
      objectArray1[4] = (Object) cSVFormat2;
      objectArray1[5] = (Object) "4y%h83eZ*yU9FQy";
      mockPrintWriter0.printf(locale0, "` 3IBo7CT~!U9__\"@Q", objectArray1);
      Object object0 = new Object();
      cSVFormat3.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat0.withNullString("<|0()G");
      cSVFormat1.withNullString("<|0()G");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat$Predefined");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withCommentMarker('9');
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat3);
//      try { 
        cSVPrinter1.printRecords((Object[]) stringArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withCommentMarker('9');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "{*?$CdkQ~<wn";
      objectArray0[3] = (Object) "{*?$CdkQ~<wn";
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.withHeader((ResultSet) null);
      cSVFormat0.withNullString(")cB&+dZMC4c");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "{*?$CdkQ~<wn";
      objectArray0[3] = (Object) "{*?$CdkQ~<wn";
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.withNullString("<|0()G");
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("<|0()G");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat$Predefined");
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('9');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Object object2 = new Object();
      cSVFormat1.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.withCommentMarker('9');
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Character character0 = new Character('!');
      Character character1 = new Character('9');
      cSVFormat0.withCommentMarker(character1);
      Object object1 = new Object();
      cSVFormat0.withIgnoreEmptyLines();
      Object object2 = new Object();
      Object object3 = new Object();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat1.format(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "RecordSeparator=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      ArrayList<ObjectOutputStream> arrayList0 = new ArrayList<ObjectOutputStream>();
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(cSVFormat0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('9');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      Object object1 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{*?$CdkQ~<wn";
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("{*?$CdkQ~<wn");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('9');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      Object object2 = new Object();
      cSVFormat1.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVPrinter2.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RecordSeparator=<");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("RecordSeparator=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.close();
      Object object0 = new Object();
      cSVFormat0.withIgnoreEmptyLines();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(pipedWriter0);
//      try { 
        cSVPrinter1.print(object0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('L');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RecordSeparator=<");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("RecordSeparator=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object object0 = new Object();
      cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[9];
      objectArray0[4] = (Object) cSVFormat1;
      ArrayList<ObjectOutputStream> arrayList0 = new ArrayList<ObjectOutputStream>();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = 'w';
      charArray0[2] = 'N';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = 'H';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003", 122);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) "org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\t\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) cSVFormat0;
      objectArray1[4] = (Object) "org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\t\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003";
      objectArray1[5] = (Object) cSVFormat1;
      objectArray1[6] = (Object) "org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\t\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003";
      Object object1 = new Object();
      objectArray1[7] = object1;
      objectArray0[2] = (Object) "org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\t\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003";
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray1);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\t\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z9diU$zT");
      Object object2 = new Object();
      Object object3 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Character character0 = new Character('\"');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat1.format(objectArray1);
      cSVFormat5.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "org.apache.coemons.csv.CSVPrinter$1";
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      Character character0 = new Character('5');
      Character character1 = Character.valueOf('5');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat1.withCommentMarker(character1);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) character0;
      objectArray1[1] = (Object) character0;
      objectArray1[2] = (Object) cSVFormat0;
      Object object1 = new Object();
      cSVFormat0.withIgnoreEmptyLines();
      Object object2 = new Object();
      Object object3 = new Object();
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.format(objectArray1);
      cSVFormat2.format(objectArray1);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((File) null, "org.apache.coemons.csv.CSVPrinter$1");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "org.apache.coemons.csv.CSVPrinter$1";
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      Character character0 = new Character('5');
      Character character1 = Character.valueOf('5');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character1);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('c');
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) character0;
      objectArray1[1] = (Object) character0;
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) "org.apache.coemons.csv.CSVPrinter$1";
      objectArray1[4] = (Object) cSVFormat1;
      objectArray1[5] = (Object) cSVFormat2;
      CSVFormat cSVFormat4 = cSVFormat1.withHeaderComments(objectArray1);
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat2.withNullString((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q;jIQ,bOGsM+<sKWaP");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object object1 = new Object();
      cSVFormat4.withIgnoreEmptyLines();
      cSVFormat0.format(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter1.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RecordSeparator=<");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      ArrayList<ObjectOutputStream> arrayList0 = new ArrayList<ObjectOutputStream>();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("RecordSeparator=<");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("RecordSeparator=<");
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter1, cSVFormat2);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[9];
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "RecordSeparator=<";
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) mockPrintWriter1;
      objectArray0[7] = (Object) cSVPrinter1;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter1, cSVFormat3);
      cSVPrinter2.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.format(objectArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.withCommentMarker('(');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('+');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('+');
      cSVFormat4.withQuote('R');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate('R');
      charset0.decode(byteBuffer0);
      CharBuffer charBuffer0 = CharBuffer.allocate('(');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(cSVFormat0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2295);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('h');
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) stringWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.withIgnoreEmptyLines();
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      // Undeclared exception!
//      try { 
        cSVFormat1.withDelimiter('h');
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The escape character and the delimiter cannot be the same ('h')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      cSVFormat0.withDelimiter('D');
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("out");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000001");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('H');
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('+');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat4.withRecordSeparator('+');
      cSVFormat1.withQuote('5');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1221);
      charset0.decode(byteBuffer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(18);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = null;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withQuote('#');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.withCommentMarker('H');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1221);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer.wrap((CharSequence) charBuffer0, 1221, 1221);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charset0;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.withCommentMarker('H');
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('6');
      cSVFormat2.withQuote('R');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1221);
      charset0.decode(byteBuffer0);
      CharBuffer charBuffer0 = CharBuffer.allocate('H');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charset0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('}');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("|uk]'vsDD{43K;t");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "|uk]'vsDD{43K;t";
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.withCommentMarker('H');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('6');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('6');
      cSVFormat4.withQuote('R');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1221);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1221, 1221);
      cSVFormat4.print(charBuffer1);
      Object[] objectArray0 = new Object[1];
      cSVFormat1.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      cSVPrinter0.println();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("NullString=<");
      cSVPrinter0.print(sQLTimeoutException0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer1);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('H');
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('6');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('6');
      cSVFormat5.withQuote('R');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1221);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1221, 1221);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(charBuffer1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charset0;
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat6.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat7.format(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.withCommentMarker('H');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('+');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('+');
      cSVFormat4.withQuote('R');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1221);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1221, 1221);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charset0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('^');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('^');
      CSVFormat.newFormat('t');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('^');
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat5.withQuote('n');
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) cSVFormat1;
      cSVFormat6.format(objectArray1);
      cSVFormat1.format(objectArray1);
      cSVPrinter0.println();
      Object object2 = new Object();
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("1(2%| GU{3#}5grO!0");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('^');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('?');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('t');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('^');
      Character.valueOf('?');
      Character character0 = Character.valueOf('');
      cSVFormat2.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat4.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[0];
      cSVFormat2.withHeaderComments(objectArray0);
      Stack<Console> stack0 = new Stack<Console>();
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(stack0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Delimiter=<");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "(cV~9Xu&c(";
      objectArray0[2] = (Object) "Delimiter=<";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "(cV~9Xu&c(", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('3');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat3);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      LinkedList<Console> linkedList0 = new LinkedList<Console>();
      cSVFormat0.withHeaderComments(objectArray0);
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(linkedList0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) cSVPrinter0;
      objectArray1[4] = (Object) "(cV~9Xu&c(";
      cSVPrinter0.printRecord(objectArray1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('u');
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("\"\",");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&CCO-1d{\"k)nks");
      Object object1 = new Object();
      Object object2 = new Object();
      cSVFormat3.format(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.println();
      cSVFormat0.withDelimiter('.');
      Vector<BufferedReader> vector0 = new Vector<BufferedReader>();
      ArrayDeque<BufferedReader> arrayDeque0 = new ArrayDeque<BufferedReader>(vector0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.print(object0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter1.close();
      cSVPrinter1.printComment("p");
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('^');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('?');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('t');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('^');
      Character.valueOf('?');
      Character character0 = Character.valueOf('r');
      cSVFormat2.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[0];
      cSVFormat5.format(objectArray0);
      cSVPrinter0.println();
      Object object2 = new Object();
      cSVFormat1.format(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("");
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(object2);
      cSVPrinter0.printComment("TDF");
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
      Character character0 = Character.valueOf('A');
      cSVFormat2.withCommentMarker(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      cSVFormat3.format(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter1.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "org.apache.commons.csv.CSVPrinter$1";
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
      cSVFormat2.withDelimiter('D');
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("org.apache.commons.csv.CSVPrinter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000002");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      char char0 = '.';
      int int0 = (-1916);
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-1916));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('^');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('?');
      CSVFormat.newFormat('t');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('^');
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      cSVPrinter1.printRecord(objectArray0);
      stringWriter0.append('t');
      cSVPrinter0.printComment("whyp`6n6;oe");
      cSVPrinter1.getOut();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('^');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('?');
      CSVFormat.newFormat('t');
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('^');
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) character0;
      objectArray0[8] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      cSVPrinter0.println();
      cSVFormat1.withDelimiter('3');
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "org.apache.commons.csv.CSVPrinter$1";
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
      char char0 = 'D';
      cSVFormat2.withDelimiter('D');
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat1.withNullString("org.apache.commons.csv.CSVPrinter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000002");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1261).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printRecords(objectArray0);
      mockPrintWriter0.close();
      cSVPrinter0.println();
      mockPrintWriter0.printf(string0, objectArray0);
      mockPrintWriter0.println((Object) cSVPrinter0);
      LinkedHashSet<MockPrintStream> linkedHashSet0 = new LinkedHashSet<MockPrintStream>(char0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, boolean0);
      linkedHashSet0.add(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "org.apache.commons.csv.CSVPrinter$1";
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
      cSVFormat2.withDelimiter('D');
      Object object0 = new Object();
      objectArray0[0] = object0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat1.withNullString("org.apache.commons.csv.CSVPrinter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000002");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printRecords(objectArray0);
      mockPrintWriter0.close();
      cSVPrinter0.println();
      mockPrintWriter0.printf(string0, objectArray0);
      int int0 = 0;
      mockPrintWriter0.println((Object) cSVPrinter0);
      LinkedHashSet<MockPrintStream> linkedHashSet0 = new LinkedHashSet<MockPrintStream>(int0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, boolean0);
      mockPrintStream0.println((long) int0);
      linkedHashSet0.add(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Q81;bFN_r#";
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat7 = cSVFormat6.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.withDelimiter('*');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat7);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RecordSeparator=<");
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator("RecordSeparator=<");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 122);
      cSVPrinter0.printRecord((Iterable<?>) sQLFeatureNotSupportedException0);
      StringWriter stringWriter0 = new StringWriter(122);
      StringWriter stringWriter1 = stringWriter0.append('M');
      stringWriter1.append('g');
      cSVPrinter0.printComment("}u0}");
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) sQLFeatureNotSupportedException0;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) cSVFormat5;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("RecordSeparator=<");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('^');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('?');
      CSVFormat.newFormat('t');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('^');
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      cSVPrinter0.printRecords((Iterable<?>) enumSet0);
      objectArray0[6] = object1;
      objectArray0[7] = (Object) character0;
      objectArray0[8] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      cSVPrinter0.println();
      cSVFormat1.withDelimiter('3');
      Vector<BufferedReader> vector0 = new Vector<BufferedReader>();
      ArrayDeque<BufferedReader> arrayDeque0 = new ArrayDeque<BufferedReader>(vector0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.print(objectArray0[4]);
      cSVPrinter0.close();
      cSVPrinter0.printComment("QEXpb,$;i");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      cSVPrinter0.print(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
      cSVFormat2.withDelimiter('D');
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat1.withNullString("org.apache.commons.csv.CSVPrinter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000002");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printComment("org.apache.commons.csv.CSVFormat@0000000002");
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printRecords(objectArray0);
      mockPrintWriter0.close();
      cSVPrinter0.println();
      mockPrintWriter0.printf("org.apache.commons.csv.CSVPrinter$1", objectArray0);
      mockPrintWriter0.println((Object) cSVPrinter0);
      LinkedHashSet<MockPrintStream> linkedHashSet0 = new LinkedHashSet<MockPrintStream>(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.csv.CSVPrinter$1", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      linkedHashSet0.add(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RecordSeparator=<");
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 122);
      cSVPrinter0.printRecord((Iterable<?>) sQLFeatureNotSupportedException0);
      ArrayList<ObjectOutputStream> arrayList0 = new ArrayList<ObjectOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('^');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('?');
      CSVFormat.newFormat('t');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('^');
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ServiceLoader<SQLTransientConnectionException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = '^';
      charArray0[2] = ']';
      charArray0[3] = 'G';
      charArray0[4] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      ArrayList<ObjectOutputStream> arrayList0 = new ArrayList<ObjectOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.flush();
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('^');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('?');
      CSVFormat.newFormat('t');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('^');
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) character0;
      objectArray0[8] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      cSVPrinter0.println();
      cSVFormat1.withDelimiter('3');
      Vector<BufferedReader> vector0 = new Vector<BufferedReader>();
      ArrayDeque<BufferedReader> arrayDeque0 = new ArrayDeque<BufferedReader>(vector0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.print(objectArray0[4]);
      cSVPrinter0.close();
      cSVPrinter0.printComment("QEXpb,$;i");
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[3];
      cSVFormat1.format(objectArray0);
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat0.withDelimiter('D');
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.withNullString("org.apache.commons.csv.CSVPrinter$1");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2295);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      cSVFormat1.format(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printRecord(objectArray0);
      stringWriter0.append('0');
      cSVPrinter0.printComment("\"\",,");
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "org.apache.commons.csv.CSVPrinter$1";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      char char0 = 'D';
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.withNullString((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      int int0 = (-1916);
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-1916));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVPrinter1.printComment("");
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
      cSVFormat2.withDelimiter('D');
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("org.apache.commons.csv.CSVPrinter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000002");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      Object object1 = new Object();
      Object object2 = new Object();
      cSVFormat0.format(objectArray0);
      cSVPrinter0.println();
      cSVFormat4.withDelimiter('V');
      Vector<BufferedReader> vector0 = new Vector<BufferedReader>();
      ArrayDeque<BufferedReader> arrayDeque0 = new ArrayDeque<BufferedReader>(vector0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      String string0 = "";
      MockFileWriter mockFileWriter0 = null;
//      try {
        mockFileWriter0 = new MockFileWriter("", true);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "org.apache.commons.csv.CSVPrinter$1";
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
      cSVFormat2.withDelimiter('D');
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat1.withNullString("org.apache.commons.csv.CSVPrinter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000002");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2295);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("");
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('^');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('?');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('t');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('^');
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat5);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter");
      cSVPrinter0.flush();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      objectArray0[1] = (Object) cSVFormat1;
      char char0 = 'D';
      cSVFormat3.withDelimiter('D');
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat2.withNullString("org.apache.commons.csv.CSVPrinter$1");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("u&\"%ua}", "org.apache.commons.csv.CSVPrinter$1", 567);
      cSVFormat4.withIgnoreSurroundingSpaces();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(567);
      // Undeclared exception!
//      try { 
        charArrayWriter0.append((CharSequence) "org.apache.commons.csv.CSVFormat@0000000003\t\torg.apache.commons.csv.CSVPrinter$1", 567, (-2273));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      boolean boolean0 = true;
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat3.withDelimiter('D');
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat2.withNullString("org.apache.commons.csv.CSVPrinter$1");
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(':');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('=');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2295);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = '^';
      charArray0[2] = ']';
      charArray0[3] = 'G';
      charArray0[4] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) '7';
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringWriter1.write(4);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.parse(pipedReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat1);
      cSVFormat1.withEscape('v');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charBuffer0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('^');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('?');
      CSVFormat.newFormat('t');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('^');
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) character0;
      objectArray0[8] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.print(cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      String string0 = "$8/t:q";
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("$8/t:q");
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('4');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      charBuffer0.codePoints();
      Character character0 = new Character('x');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("F0`~C");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat3);
      String string0 = "";
      cSVPrinter0.printComment("");
      Vector<InputStreamReader> vector0 = new Vector<InputStreamReader>();
      String string1 = "g6 :SiZ-?A";
      MockFileReader mockFileReader0 = null;
//      try {
        mockFileReader0 = new MockFileReader("g6 :SiZ-?A");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RecordSeparator=<");
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 122);
      cSVPrinter0.print(sQLFeatureNotSupportedException0);
      cSVPrinter0.flush();
      Character character0 = new Character('a');
      cSVFormat1.withQuote(character0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.printRecord((Iterable<?>) sQLFeatureNotSupportedException0);
      cSVPrinter0.printComment("RecordSeparator=<");
      cSVPrinter0.print(cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "format";
      stringArray0[1] = "EOF whilst processing escape sequence";
      stringArray0[2] = "/tKU";
      stringArray0[3] = "Q81;bFN_r#";
      stringArray0[4] = "i8]|t]O#2/&6";
      stringArray0[5] = "T3`MqkmuQ";
      stringArray0[6] = "";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('*');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat4);
      assertEquals("null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      cSVFormat1.print(mockPrintWriter0);
      String string0 = "M'~pUahw16T9";
      // Undeclared exception!
//      try { 
        CSVFormat.valueOf("M'~pUahw16T9");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.M'~pUahw16T9
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }
}
