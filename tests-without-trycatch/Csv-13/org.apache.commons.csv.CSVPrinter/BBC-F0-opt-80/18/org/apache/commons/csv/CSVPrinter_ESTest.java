/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 19:48:58 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("WIA+Ew|qD3r=8O");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLNonTransientConnectionException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9PO4cBqC&vG!{");
      StringWriter stringWriter1 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter1);
      Object[] objectArray0 = new Object[6];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('1');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) pipedWriter0;
      cSVFormat3.format(objectArray0);
      cSVFormat3.withRecordSeparator('A');
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("WIA+Ew|qD3r=8O");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLNonTransientConnectionException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
      cSVPrinter0.print(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(116);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.printComment("\r@\n");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(116);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0IHw{]h-R";
      charBuffer0.append('m');
      stringArray0[1] = "Bx";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      charBuffer1.chars();
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('^');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(116);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('a');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      File file0 = MockFile.createTempFile("'ZMX.H~ye9", "'ZMX.H~ye9");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(351);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.printComment("'ZMX.H~ye9");
      CSVPrinter cSVPrinter2 = cSVFormat0.print(mockPrintWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 351);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      ArrayDeque<ByteArrayOutputStream> arrayDeque0 = new ArrayDeque<ByteArrayOutputStream>(linkedList0);
      cSVPrinter1.printRecords((Iterable<?>) arrayDeque0);
      cSVFormat0.withAllowMissingColumnNames(false);
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(48);
      hashSet0.add(integer1);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("'ZMX.H~ye9", "'ZMX.H~ye9");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("'ZMX.H~ye9", "'ZMX.H~ye9", 351, (int[]) null);
      cSVPrinter2.print((Object) null);
      CSVPrinter cSVPrinter3 = cSVFormat0.print(mockFileWriter0);
//      try { 
        cSVPrinter3.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}2uE'");
      StringWriter stringWriter0 = new StringWriter(103);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[5];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/NONE");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      String[] stringArray0 = new String[3];
      Character character1 = null;
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter";
      String string0 = "";
      stringArray0[2] = "";
      CSVFormat cSVFormat5 = cSVFormat3.withHeader(stringArray0);
      String string1 = "";
      cSVFormat0.withQuote('A');
      MockFile mockFile0 = new MockFile("", "NONE");
      cSVFormat2.withIgnoreHeaderCase(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 'A');
      CSVPrinter cSVPrinter0 = cSVFormat5.print(bufferedWriter0);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
//      try { 
        cSVPrinter0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = ", recordNumber=";
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ", recordNumber=");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]jZp#Y?&");
      StringWriter stringWriter0 = new StringWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[2] = (Object) linkedHashSet0;
      objectArray0[4] = (Object) "iNs;$D p";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]jZp#Y?&");
      StringWriter stringWriter0 = new StringWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[2] = (Object) linkedHashSet0;
      objectArray0[4] = (Object) "iNs;$D p";
      cSVPrinter0.printRecord(objectArray0);
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?M6oKwR");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[6];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Integer integer0 = new Integer(48);
      CharBuffer charBuffer0 = CharBuffer.allocate(58);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('>');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 48);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, bufferedInputStream0);
      cSVPrinter0.print(sequenceInputStream1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("Unexpected Quote value: ");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" WIA+Ew|qD3r=8,");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('W');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('0');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      cSVFormat1.withIgnoreSurroundingSpaces();
      byteArray0[0] = (byte)71;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)71);
      cSVPrinter0.print(bufferedInputStream0);
      MockFileReader mockFileReader0 = new MockFileReader(" WIA+Ew|qD3r=8,");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVPrinter0.printComment("Unexpected Quote value: ");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      cSVFormat0.print(charBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) ", values=");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]d,p#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('-');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ".Sx,:]d,p#<;");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment(".Sx,:]d,p#<;");
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("2");
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "2";
      objectArray0[1] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVPrinter0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = ".Sx,:]d,p#<;";
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ".Sx,:]d,p#<;");
      charBuffer0.asReadOnlyBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      LinkedHashSet<OutputStreamWriter> linkedHashSet0 = new LinkedHashSet<OutputStreamWriter>(3);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!TVrUp;=4#yO`");
      cSVFormat1.withIgnoreHeaderCase();
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-1636));
      linkedHashSet0.add(integer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(286);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('#');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      charBuffer0.compact();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("Unexpected Quote value: ");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("X[Y7VFCG([");
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[5];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("X[Y7VFCG([");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" WaU6+Ew|qD3r=8,");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
      cSVFormat1.withAllowMissingColumnNames();
      String[] stringArray0 = new String[0];
      cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVPrinter0.print(cSVFormat1);
      cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" WaU6+Ew|qD3r=8,", " WaU6+Ew|qD3r=8,");
      cSVPrinter0.print(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(1459);
      linkedHashSet0.add(integer0);
      Object[] objectArray1 = new Object[7];
      objectArray1[4] = (Object) linkedHashSet0;
      objectArray1[1] = (Object) linkedHashSet0;
      objectArray1[2] = (Object) linkedHashSet0;
      objectArray1[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
      Character character0 = Character.valueOf('K');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
//      try { 
        cSVPrinter0.printComment("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('5');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("TOKEN");
      StringWriter stringWriter0 = new StringWriter(25);
      cSVFormat0.print(stringWriter0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('#');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(3659);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = " WaU6+Ew|qD3r=8,";
      MockPrintStream mockPrintStream0 = new MockPrintStream(" WaU6+Ew|qD3r=8,");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('q');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      cSVPrinter0.print(cSVFormat1);
      cSVFormat3.withAllowMissingColumnNames(boolean0);
      cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string0);
      cSVPrinter0.print(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" WaU6+Ew|qD3r=8,");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('q');
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(3);
      hashSet0.add(integer0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) hashSet0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) cSVFormat1;
      cSVFormat1.withHeaderComments(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecord(objectArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("JX.^>Ed", "", (-1069), (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(sQLClientInfoException1);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(116);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('S');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat1.withSkipHeaderRecord();
      cSVPrinter0.printComment("\rk");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(116);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('>');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Character character0 = new Character('A');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write((-2060));
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('A');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(bufferedWriter0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]d,p#<;");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) ".Sx,:]d,p#<;";
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat3.withIgnoreHeaderCase(true);
      Character character0 = new Character('M');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat2.withSkipHeaderRecord(true);
      Character character0 = new Character('W');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.csv.CSVPrinter";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat2.withQuote('W');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'W';
      charArray0[2] = '6';
      charArray0[3] = '`';
      charArray0[4] = '';
      charArray0[5] = 'Q';
      charArray0[6] = '=';
      charArray0[7] = 'j';
      charArray0[8] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "y63(ei";
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter$1";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('3');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('6');
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat4);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat2.withSkipHeaderRecord(true);
      Character character0 = new Character('W');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      String[] stringArray0 = new String[1];
      cSVFormat3.withNullString(".Sx,:]Ad,<#<;");
      stringArray0[0] = "org.apache.commons.csv.CSVPrinter";
      cSVFormat3.withHeader(stringArray0);
      cSVFormat2.withQuote('W');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(sQLTimeoutException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Integer integer0 = new Integer((-1636));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer1 = new Integer((-1636));
      linkedHashSet0.add(integer1);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("3J21KSxH2o-");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class1);
      HashSet<StringReader> hashSet0 = new HashSet<StringReader>(14);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) linkedHashSet0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) serviceLoader0;
      objectArray0[5] = (Object) "3J21KSxH2o-";
      cSVPrinter0.printRecord(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("3J21KSxH2o-");
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Integer integer0 = new Integer((-1636));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer1 = new Integer((-1636));
      linkedHashSet0.add(integer1);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("3J21KSxH2o-");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class1);
      HashSet<StringReader> hashSet0 = new HashSet<StringReader>(14);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) linkedHashSet0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) serviceLoader0;
      objectArray0[5] = (Object) "3J21KSxH2o-";
      cSVPrinter0.printRecord(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecord((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('0');
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      CharBuffer charBuffer0 = CharBuffer.allocate(2604);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 4, 4);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer2);
      cSVFormat1.print(bufferedWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(cSVFormat1);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.write(64);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 807);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      cSVFormat2.withNullString("c1m-%es=I");
      objectArray0[3] = (Object) cSVPrinter0;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat3.parse(pipedReader0);
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat0.withIgnoreHeaderCase();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.write(0);
      cSVFormat1.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 48);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat1);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      QuoteMode quoteMode1 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) bufferedWriter0;
      objectArray0[5] = (Object) quoteMode0;
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("\r\n");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('E');
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "\r\n";
      objectArray0[4] = (Object) outputStreamWriter0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) cSVPrinter0;
      objectArray0[8] = (Object) outputStreamWriter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[2] = "";
      Integer integer0 = new Integer((-1636));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer1 = new Integer((-1636));
      linkedHashSet0.add(integer1);
      CharBuffer charBuffer0 = CharBuffer.allocate(98);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.csv.CSVPrinter$1", (String) null);
      cSVFormat0.print(charBuffer0);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter1.getOut();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLTransientException0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
      Integer integer0 = new Integer((-1636));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer1 = new Integer((-907));
      Integer integer2 = new Integer((-1636));
      linkedHashSet0.add(integer2);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[3];
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.write(0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.print(stringWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withEscape(character0);
      Object object0 = new Object();
      Integer integer0 = new Integer(6);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer1 = new Integer(6);
      Integer integer2 = new Integer(97);
      hashSet0.add(integer2);
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("format", "format");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) integer2;
      objectArray0[2] = (Object) hashSet0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) sQLTransientException0;
      objectArray0[5] = (Object) hashSet0;
      objectArray0[6] = (Object) charBuffer0;
      objectArray0[7] = (Object) hashSet0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withEscape(character0);
      Object object0 = new Object();
      Integer integer0 = new Integer(6);
      HashSet<Integer> hashSet0 = new LinkedHashSet<Integer>();
      Integer integer1 = new Integer(6);
      Integer integer2 = new Integer(97);
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      cSVFormat1.print(charBuffer0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("format", "format");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) charBuffer0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat5);
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) quoteMode1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      cSVFormat2.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 48);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2{}1y&W+");
      cSVFormat3.withAllowMissingColumnNames(true);
      Object object0 = new Object();
      Integer integer0 = new Integer(86);
      hashSet0.add(integer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UjC>eK?f|#X";
      cSVFormat2.withCommentMarker((Character) null);
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[2] = "";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat0.withQuote('A');
      MockFile mockFile0 = new MockFile("file", "NONE");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 'A');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(bufferedWriter0);
      bufferedWriter0.newLine();
      cSVFormat2.withEscape('A');
      cSVFormat2.format(stringArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.close();
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) character0;
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[2] = (Object) ".Sx,:]Ad,<#<;";
      objectArray0[3] = (Object) ".Sx,:]Ad,<#<;";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) ".Sx,:]Ad,<#<;";
      objectArray0[6] = (Object) ".Sx,:]Ad,<#<;";
      Object object0 = new Object();
      objectArray0[7] = object0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      Character character0 = new Character('c');
      cSVFormat4.withQuote(character0);
      cSVFormat1.withCommentMarker((Character) null);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>(1533);
      File file0 = MockFile.createTempFile("+2#C'<X@k`7", "zC");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      cSVFormat0.parse(mockFileReader0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      linkedHashSet0.add(sQLClientInfoException0);
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(586);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Excel");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) charBuffer0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringBuffer0);
      cSVPrinter0.printComment(".Sx,:]Ad,<#<;");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 48);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      CSVPrinter cSVPrinter2 = cSVFormat4.print(stringWriter0);
      cSVPrinter2.printRecords((Iterable<?>) hashSet0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat.newFormat('y');
      cSVPrinter2.printRecord(objectArray0);
      cSVPrinter1.close();
      cSVPrinter1.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) ".Sx,:]Ad,<#<;";
      objectArray0[3] = (Object) ".Sx,:]Ad,<#<;";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) ".Sx,:]Ad,<#<;";
      objectArray0[6] = (Object) ".Sx,:]Ad,<#<;";
      Object object0 = new Object();
      objectArray0[7] = object0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      Character character0 = new Character('c');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      cSVFormat1.withCommentMarker((Character) null);
      Object object1 = new Object();
      cSVFormat5.format(objectArray0);
      URI uRI0 = MockURI.aFileURI;
      MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile(uRI0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat3.withQuoteMode(quoteMode0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat5);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("Gwz/@`Q~a;");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UjC>eK?f|#X";
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker((Character) null);
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[2] = "";
      cSVFormat3.withHeader(stringArray0);
      MockFile mockFile0 = new MockFile("file", "NONE");
      cSVFormat2.withIgnoreHeaderCase(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter", true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 'A');
      MockFileWriter mockFileWriter1 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(bufferedWriter0, cSVFormat4);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter1, cSVFormat5);
      cSVPrinter2.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile("` /M%E\">QC\"$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      vector0.removeAllElements();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      mockFile0.setReadable(false);
      PrintStream printStream0 = mockPrintStream0.append('a');
      Character character0 = new Character('q');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      mockPrintStream0.close();
      MockPrintStream mockPrintStream1 = new MockPrintStream("` /M%E\">QC\"$");
      cSVPrinter0.println();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.close();
      mockPrintStream0.print(548L);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.print(mockFile0);
      cSVPrinter0.printRecord(objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "` /M%E\">QC\"$";
      objectArray1[1] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) mockFileOutputStream0;
      objectArray1[4] = (Object) printStream0;
      objectArray1[5] = (Object) vector0;
      objectArray1[6] = (Object) mockPrintStream1;
      objectArray1[7] = (Object) cSVFormat1;
      objectArray1[8] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat3.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringBuffer0);
      cSVPrinter0.printComment(".Sx,:]Ad,<#<;");
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringBuffer0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 35);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter1.printRecords((Iterable<?>) hashSet0);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter2 = new CSVPrinter(bufferedWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) cSVFormat4;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) stringBuffer0;
      objectArray0[6] = (Object) cSVPrinter2;
      objectArray0[7] = (Object) hashSet0;
      Object object2 = new Object();
      objectArray0[8] = object2;
      cSVPrinter2.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[2] = "";
      CSVFormat cSVFormat5 = cSVFormat3.withHeader(stringArray0);
      cSVFormat0.withQuote('A');
      MockFile mockFile0 = new MockFile("", "NONE");
      cSVFormat2.withIgnoreHeaderCase(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 'A');
      CSVPrinter cSVPrinter0 = cSVFormat5.print(bufferedWriter0);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.print((Object) null);
      mockFile0.getAbsolutePath();
      cSVPrinter0.printComment(">8Ki>5k[\"O48]8kB");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UjC>eK?f|#X";
      cSVFormat2.withCommentMarker((Character) null);
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[2] = "";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat0.withQuote('A');
      MockFile mockFile0 = new MockFile("file", "NONE");
      cSVFormat2.withIgnoreHeaderCase(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 'A');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(bufferedWriter0);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UjC>eK?f|#X";
      cSVFormat2.withCommentMarker((Character) null);
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[2] = "";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat0.withQuote('A');
      MockFile mockFile0 = new MockFile("", "NONE");
      cSVFormat2.withIgnoreHeaderCase(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 'A');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(bufferedWriter0);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.print((Object) null);
//      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringBuffer0);
      cSVPrinter0.printComment(".Sx,:]Ad,<#<;");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 48);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVFormat2.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = (Object) stringBuffer0;
      Integer integer0 = new Integer(48);
      hashSet0.add(integer0);
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'v';
      stringWriter0.write(charArray0, 0, 0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter1.printRecords((Iterable<?>) hashSet0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(".Sx,:]Ad,<#<;", ".Sx,:]Ad,<#<;");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("6u", (int[]) null, sQLTransientException0);
      Float float0 = new Float(0.0F);
      cSVPrinter0.print(float0);
      cSVPrinter0.flush();
      cSVPrinter1.printRecord((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 48);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuffer0;
      Integer integer0 = new Integer(48);
      hashSet0.add(integer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException(".Sx,:]Ad,<#<;", ".Sx,:]Ad,<#<;");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("6u", "6u", (int[]) null);
      Float float0 = new Float(0.0F);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringBuffer0);
      cSVPrinter0.print(cSVFormat0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.withQuote((Character) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UjC>eK?f|#X";
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter";
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      Character character1 = new Character('A');
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat7 = cSVFormat6.withQuote((Character) null);
      cSVFormat5.withCommentMarker((Character) null);
      Object object0 = new Object();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat7);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat5);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      cSVPrinter2.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) ".Sx,:]Ad,<#<;";
      objectArray0[3] = (Object) ".Sx,:]Ad,<#<;";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) ".Sx,:]Ad,<#<;";
      objectArray0[6] = (Object) ".Sx,:]Ad,<#<;";
      Object object0 = new Object();
      objectArray0[7] = object0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      Character character0 = new Character('c');
      cSVFormat4.withQuote(character0);
      cSVFormat1.withCommentMarker((Character) null);
      Object object1 = new Object();
      URI uRI0 = MockURI.aFileURI;
      MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringBuffer0);
      cSVPrinter0.printComment(".Sx,:]Ad,<#<;");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 48);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuffer0;
      Integer integer0 = new Integer(48);
      hashSet0.add(integer0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter1.printRecords((Iterable<?>) hashSet0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(".Sx,:]Ad,<#<;", ".Sx,:]Ad,<#<;");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("6u", (int[]) null, sQLTransientException0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
      CSVPrinter cSVPrinter2 = cSVFormat5.print(bufferedWriter0);
      cSVPrinter2.print(".Sx,:]Ad,<#<;");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringBuffer0);
      cSVPrinter0.printComment(".Sx,:]Ad,<#<;");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 48);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuffer0;
      Integer integer0 = new Integer(48);
      hashSet0.add(integer0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter1.printRecords((Iterable<?>) hashSet0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(".Sx,:]Ad,<#<;", ".Sx,:]Ad,<#<;");
      cSVFormat5.print(bufferedWriter0);
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter2.getOut();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringBuffer0);
      cSVPrinter0.printComment(".Sx,:]Ad,<#<;");
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 48);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVFormat2.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuffer0;
      Integer integer0 = new Integer(48);
      hashSet0.add(integer0);
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) stringBuffer0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.close();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(".Sx,:]Ad,<#<;", ".Sx,:]Ad,<#<;");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(".Sx,:]Ad,<#<;", (int[]) null, sQLTransientException0);
      cSVPrinter0.print(batchUpdateException0);
      cSVPrinter1.flush();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringBuffer0);
      cSVPrinter0.printComment(".Sx,:]Ad,<#<;");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 48);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVFormat2.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuffer0;
      Integer integer0 = new Integer(48);
      hashSet0.add(integer0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter1.printRecords((Iterable<?>) hashSet0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(".Sx,:]Ad,<#<;", ".Sx,:]Ad,<#<;");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("6u", (int[]) null, sQLTransientException0);
      Float float0 = new Float(0.0F);
      cSVPrinter0.print(float0);
      cSVPrinter0.flush();
      cSVPrinter1.printRecord((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      File file0 = MockFile.createTempFile("'ZMX.H~ye9", "'ZMX.H~ye9");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(351);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.printComment("'ZMX.H~ye9");
      CSVPrinter cSVPrinter2 = cSVFormat0.print(mockPrintWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 351);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      ArrayDeque<ByteArrayOutputStream> arrayDeque0 = new ArrayDeque<ByteArrayOutputStream>(linkedList0);
      cSVPrinter1.printRecords((Iterable<?>) arrayDeque0);
      cSVFormat0.withAllowMissingColumnNames(false);
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(48);
      hashSet0.add(integer1);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("'ZMX.H~ye9", "'ZMX.H~ye9");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("'ZMX.H~ye9", "'ZMX.H~ye9", 351, (int[]) null);
      cSVPrinter2.print((Object) null);
      CSVPrinter cSVPrinter3 = cSVFormat0.print(mockFileWriter0);
//      try { 
        cSVPrinter3.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringBuffer0);
      cSVPrinter0.printComment(".Sx,:]Ad,<#<;");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 48);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVFormat2.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuffer0;
      Integer integer0 = new Integer(48);
      hashSet0.add(integer0);
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) stringBuffer0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.close();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(".Sx,:]Ad,<#<;", ".Sx,:]Ad,<#<;");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(".Sx,:]Ad,<#<;", (int[]) null, sQLTransientException0);
      cSVPrinter0.print(batchUpdateException0);
      cSVPrinter1.flush();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.withQuote((Character) null);
      cSVFormat0.withCommentMarker('<');
      String[] stringArray0 = new String[3];
      cSVFormat2.withCommentMarker((Character) null);
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[2] = "";
      cSVFormat0.withQuote('A');
      MockFile mockFile0 = new MockFile("file", "NONE");
      cSVFormat2.withIgnoreHeaderCase(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 31);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.withQuote((Character) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UjC>eK?f|#X";
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker((Character) null);
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[2] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('A');
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat4.withQuote('p');
      MockFile mockFile0 = new MockFile("FgbH5mCS", "");
      cSVFormat4.withIgnoreHeaderCase(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 31);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(bufferedWriter0);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
//      try { 
        cSVPrinter0.print("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(114);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat5 = cSVFormat3.withQuote('L');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVPrinter0.printComment(".Sx,:]Ad,<#<;");
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat5.print(stringBuffer0);
      cSVPrinter1.close();
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringBuffer0);
      cSVPrinter0.printComment(".Sx,:]Ad,<#<;");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 48);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) stringWriter0;
      CSVPrinter cSVPrinter2 = new CSVPrinter(bufferedWriter0, cSVFormat4);
      cSVPrinter1.flush();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MockFile mockFile0 = new MockFile("` /M%E\">QC\"$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      vector0.removeAllElements();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      mockFile0.setReadable(false);
      mockPrintStream0.append('a');
      Character character0 = new Character('q');
      cSVFormat0.withQuote(character0);
      mockPrintStream0.close();
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.close();
      mockPrintStream0.print(548L);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.print(mockFile0);
      String string0 = null;
      cSVPrinter0.printComment(string0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("')");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.printComment("");
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockFile mockFile0 = new MockFile("` /M%E\">QC\"$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      vector0.removeAllElements();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      mockFile0.setReadable(false);
      mockPrintStream0.append('a');
      Character character0 = new Character('q');
      cSVFormat0.withQuote(character0);
      mockPrintStream0.close();
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.close();
      mockPrintStream0.print(548L);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.print(mockFile0);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      File file0 = MockFile.createTempFile("'ZMX.H~ye9", "'ZMX.H~ye9");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) file0;
      cSVPrinter0.printRecord(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Class<Float> class0 = Float.class;
      ServiceLoader<Float> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.print("'ZMX.H~ye9");
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('F');
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter1.printComment("BM`'-Mf\".i%q=`*Z}iW");
      cSVPrinter0.close();
      CSVPrinter cSVPrinter2 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter2.close();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "Unexpected Quote value: ";
      objectArray0[6] = (Object) mockFileOutputStream0;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withSkipHeaderRecord(false);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "' must not be null!");
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat1.withRecordSeparator('\'');
      cSVFormat2.withAllowMissingColumnNames(false);
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      cSVPrinter0.printComment("L,$r)w2%07s=");
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("' must not be null!");
      LinkedHashSet<PipedOutputStream> linkedHashSet0 = new LinkedHashSet<PipedOutputStream>(1409, 1409);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      cSVFormat1.withNullString("");
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      PriorityQueue<SQLTransientException> priorityQueue0 = new PriorityQueue<SQLTransientException>();
      HashSet<Object> hashSet0 = new HashSet<Object>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0RI]TC{x);LS?c-Z|");
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '[';
      intArray0[1] = (int) '[';
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLTransientException0);
      cSVPrinter0.print("");
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) sQLTransientException0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringBuffer0);
      cSVPrinter0.printComment(".Sx,:]Ad,<#<;");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 48);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) stringBuffer0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.close();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(".Sx,:]Ad,<#<;", ".Sx,:]Ad,<#<;");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(".Sx,:]Ad,<#<;", (int[]) null, sQLTransientException0);
      cSVPrinter0.print(batchUpdateException0);
      cSVPrinter1.flush();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MockFile mockFile0 = new MockFile("` /M%E\">QC\"$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      vector0.addAll((Collection<? extends SQLTimeoutException>) treeSet0);
      vector0.removeAllElements();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "` /M%E\">QC\"$";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVPrinter0.printRecord(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withIgnoreHeaderCase(false);
      Class<Float> class0 = Float.class;
      ServiceLoader<Float> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.print(cSVFormat0);
      cSVFormat1.withQuote('%');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream1);
      cSVPrinter1.printComment("` /M%E\">QC\"$");
      cSVPrinter0.close();
      cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockFile mockFile0 = new MockFile("` /M%E\">QC\"$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      vector0.removeAllElements();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      mockFile0.setReadable(false);
      mockPrintStream0.append('a');
      Character character0 = new Character('q');
      cSVFormat0.withQuote(character0);
      mockPrintStream0.close();
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.close();
      mockPrintStream0.print(548L);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".Sx,:]Ad,<#<;");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringBuffer0);
      cSVPrinter0.printComment(".Sx,:]Ad,<#<;");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat2;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2964);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("P6-eb@)6[3H");
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('H');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat4);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "P6-eb@)6[3H";
      objectArray0[1] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat3.withRecordSeparator("P6-eb@)6[3H");
      objectArray0[3] = (Object) "P6-eb@)6[3H";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat4;
      cSVPrinter0.printRecord(objectArray0);
      Class<Float> class0 = Float.class;
      cSVFormat0.withAllowMissingColumnNames();
      ServiceLoader<Float> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.print(cSVFormat2);
      cSVPrinter0.printComment("P6-eb@)6[3H");
      cSVPrinter0.close();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = 'S';
      charArray0[2] = '{';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = null;
      stringWriter0.write(0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(stringWriter0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('[');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter2);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UjC>eK?f|#X";
      cSVFormat2.withCommentMarker((Character) null);
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[2] = "";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat0.withQuote('A');
      MockFile mockFile0 = new MockFile("file", "NONE");
      cSVFormat2.withIgnoreHeaderCase(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 31);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(bufferedWriter0);
      bufferedWriter0.newLine();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.print((Object) null);
      assertEquals(171L, mockFile0.length());
  }
}
