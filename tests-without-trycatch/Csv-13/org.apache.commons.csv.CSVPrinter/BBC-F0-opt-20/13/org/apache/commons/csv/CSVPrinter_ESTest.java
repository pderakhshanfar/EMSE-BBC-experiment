/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 19:31:07 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat1.withEscape('2');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      cSVPrinter0.print(pipedOutputStream0);
      cSVPrinter0.printComment("charset");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('m');
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[4] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[7] = (Object) "|-NW}>Nq/:0";
      Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.withNullString("A%X)9N4u");
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('M');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A%X)9N4u");
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A%X)9N4u");
      cSVFormat0.withEscape('M');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A%X)9N4u");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("?EpA]z\"K)(0");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!'U;)");
      MockFileWriter mockFileWriter0 = new MockFileWriter("D8S");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) "!'U;)";
      objectArray0[2] = (Object) "A%X)9N4u";
      objectArray0[3] = (Object) "!'U;)";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[6] = (Object) "D8S";
      objectArray0[7] = (Object) stringWriter0;
      objectArray0[8] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[7];
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A%X)9N4u");
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("W`yS1o!P=,q");
      MockFileWriter mockFileWriter0 = new MockFileWriter("W`yS1o!P=,q");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "W`yS1o!P=,q");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("The comment start and the escape character cannot be the same ('");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Integer integer0 = new Integer((-1000));
      cSVPrinter0.print(integer0);
      cSVPrinter0.print("The comment start and the escape character cannot be the same ('");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0");
      MockFileWriter mockFileWriter0 = new MockFileWriter("0");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.close();
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("`0");
      cSVFormat0.withAllowMissingColumnNames(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("`0");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.close();
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('o');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape((Character) null);
      MockFile mockFile0 = new MockFile(")[%qua<7>'HO8", ")[%qua<7>'HO8");
      MockFile mockFile1 = new MockFile(mockFile0, "ee}O9");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      cSVPrinter0.close();
//      try { 
        cSVPrinter0.printComment("ee}O9");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("`0");
      cSVFormat0.withAllowMissingColumnNames(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("`0");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('t');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockFileWriter0);
//      try { 
        cSVPrinter1.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character('^');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      Character character1 = Character.valueOf('^');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character1);
      cSVFormat3.withSkipHeaderRecord();
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '^';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character('q');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet0);
      Character character1 = Character.valueOf('q');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape(character1);
      CSVFormat cSVFormat5 = cSVFormat3.withNullString("");
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator("N'XUxHZ~t#.J");
      CSVFormat cSVFormat7 = cSVFormat0.withSkipHeaderRecord();
      MockFileWriter mockFileWriter0 = new MockFileWriter("N'XUxHZ~t#.J");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('b');
      CSVFormat cSVFormat9 = CSVFormat.RFC4180;
      cSVFormat9.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat8);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) resultSet0;
      objectArray0[4] = (Object) cSVFormat7;
      objectArray0[5] = (Object) cSVPrinter1;
      objectArray0[6] = (Object) cSVFormat5;
      objectArray0[7] = (Object) cSVFormat8;
      objectArray0[8] = (Object) cSVFormat6;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withEscape('p');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter1.print((Object) null);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('X');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.print(stringWriter0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printComment("LRhH'g");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet.allOf(class0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("i9J}_\"!");
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(';');
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 31);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(bufferedWriter0);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(';');
      cSVFormat2.print(mockFileWriter0);
      PriorityQueue<StringReader> priorityQueue0 = new PriorityQueue<StringReader>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Float float0 = new Float(0.0);
      cSVPrinter0.print(float0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.csv.CSVFormat$Predefined");
      FileSystemHandling.createFolder(evoSuiteFile0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      cSVPrinter0.print("i9J}_\"!");
      CSVPrinter cSVPrinter2 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter2.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter1.printComment("#KVNA}()U|m");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = false;
      cSVFormat0.withAllowMissingColumnNames(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter(") cL+-uu:{]l", false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) mockFileWriter0;
      cSVFormat0.withNullString(",U`V0");
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter(") cL+-uu:{]l");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter1 = new MockFileWriter(fileDescriptor0);
      cSVFormat1.print(mockFileWriter1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ") cL+-uu:{]l";
      objectArray0[1] = (Object) mockFileWriter0;
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.withQuote((Character) null);
      cSVFormat2.withEscape(' ');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter1);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('C');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(objectArray0[0]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter(") cL+-uu:{]l", false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) mockFileWriter0;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(") cL+-uu:{]l");
      cSVPrinter0.println();
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(false);
      MockFileWriter mockFileWriter1 = new MockFileWriter("V");
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter1);
      cSVPrinter1.printRecords(objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter2.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter2.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter(") cL+-uu:{]l", false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) mockFileWriter0;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(") cL+-uu:{]l");
      cSVPrinter0.println();
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(false);
      MockFileWriter mockFileWriter1 = new MockFileWriter("V");
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter1);
      cSVPrinter1.printRecords(objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat3.print(mockFileWriter0);
      CSVPrinter cSVPrinter3 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter2.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character('q');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape((Character) null);
      cSVFormat4.withNullString("RUv");
      CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator("RUv");
      cSVFormat5.withSkipHeaderRecord();
      MockFileWriter mockFileWriter0 = new MockFileWriter("&uBlGJK,m%*<]^oJ");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
      cSVFormat5.withRecordSeparator('q');
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockFileWriter0);
      PriorityQueue<StringReader> priorityQueue0 = new PriorityQueue<StringReader>();
      cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.print(rowSetMetaDataImpl0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.csv.CSVFormat$Predefined");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter2.print("org.apache.commons.csv.CSVFormat$Predefined");
      cSVPrinter2.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("%E5j4+");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) "%E5j4+";
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat3;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat1.withQuote((Character) null);
      cSVFormat1.withEscape(' ');
      cSVFormat4.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter1.print(objectArray0[1]);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withCommentMarker((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVFormat$Predefined");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "o1-WFuBD:#h;<%B");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) enumSet1);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('X');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('X');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('X');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("o1-WFuBD:#h;<%B");
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVFormat$Predefined");
      CSVPrinter cSVPrinter0 = cSVFormat5.print(mockFileWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) resultSet0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVPrinter0;
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat5.withQuote((Character) null);
      CSVFormat cSVFormat6 = cSVFormat1.withEscape('\u001C');
      cSVFormat5.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat6);
      cSVPrinter0.print(cSVFormat3);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat6.print(stringWriter0);
      cSVPrinter1.getOut();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter(") cL+-uu:{]l");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ") cL+-uu:{]l";
      objectArray0[1] = (Object) mockFileWriter0;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(",U`V0");
      cSVFormat1.withAllowMissingColumnNames(false);
      MockFileWriter mockFileWriter1 = new MockFileWriter("V");
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter1);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      cSVPrinter1.printRecords(objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter1.print(cSVFormat1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.csv.CSVFormat$Predefined");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(",U`V0");
      cSVPrinter0.print(sQLTransactionRollbackException0);
      cSVPrinter2.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(']');
      String string0 = "xUw>btD6OIEY$";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xUw>btD6OIEY$");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      objectArray0[2] = (Object) cSVFormat1;
      String string1 = "/vRui[uD[<";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/vRui[uD[<");
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      MockFileWriter mockFileWriter0 = new MockFileWriter("@8t\u0004{");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      String string2 = "w";
      mockFileWriter0.close();
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      cSVFormat0.withQuote('f');
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVPrinter0.printRecords(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "org.apache.commons.csv.CSVPrinter$1";
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('f');
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) cSVPrinter0;
      Object object2 = new Object();
      objectArray1[1] = object2;
      objectArray1[2] = (Object) cSVFormat1;
      objectArray1[3] = (Object) stringWriter0;
      objectArray1[4] = (Object) cSVFormat1;
      objectArray1[5] = object0;
      objectArray1[6] = (Object) mockPrintStream0;
      objectArray1[7] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray1[8] = object0;
      cSVPrinter0.printRecords(objectArray1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockFileWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.println();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = new Character('K');
      cSVFormat0.withCommentMarker(character0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
//      try { 
        cSVPrinter0.print(cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(",`0");
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.withSkipHeaderRecord();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ",`0");
      charBuffer0.clear();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("out");
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withAllowMissingColumnNames(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(") cL+-uu:{]l");
      cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      EnumSet.of(locale_Category0, locale_Category1, locale_Category2, locale_Category3);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.printComment("format");
      CSVFormat cSVFormat1 = CSVFormat.newFormat('t');
      cSVFormat1.print(mockFileWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      Object[] objectArray1 = new Object[9];
      Object object0 = new Object();
      objectArray1[0] = object0;
      Object object1 = new Object();
      objectArray1[1] = object1;
      Object object2 = new Object();
      objectArray1[2] = object2;
      objectArray1[3] = (Object) ") cL+-uu:{]l";
      objectArray1[4] = (Object) "format";
      objectArray1[5] = (Object) cSVPrinter1;
      objectArray1[6] = (Object) "format";
      objectArray1[7] = (Object) cSVFormat1;
      objectArray1[8] = (Object) "format";
      cSVPrinter1.printRecord(objectArray1);
      cSVFormat0.print(mockFileWriter0);
      cSVPrinter1.println();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter$1");
      cSVFormat1.print(mockPrintStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-43);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.csv.CSVPrinter$1");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1);
      EnumSet.copyOf(enumSet0);
      cSVFormat1.print(mockPrintStream0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('c');
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      cSVPrinter0.printRecords((Iterable<?>) enumSet0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter1.close();
      // Undeclared exception!
//      try { 
        Charset.forName("org.apache.commons.csv.CSVPrinter$1");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // org.apache.commons.csv.CSVPrinter$1
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withRecordSeparator((String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter$1");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1, locale_Category2, locale_Category3);
      EnumSet.copyOf(enumSet0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.printComment("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(42);
      cSVFormat2.print(charArrayWriter0);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('A');
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter1.close();
      cSVPrinter1.flush();
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      Object[] objectArray0 = new Object[7];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)115;
      mockPrintStream0.write(byteArray0);
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      cSVFormat2.withQuote('f');
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      boolean boolean0 = true;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(boolean0, false, false, false, false).when(resultSet0).next();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(',');
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat3.withRecordSeparator("charset");
      MockPrintStream mockPrintStream0 = new MockPrintStream("string");
      cSVFormat3.withQuote('k');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "charset");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "string";
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) locale_Category0;
      objectArray0[3] = (Object) cSVPrinter1;
      objectArray0[4] = (Object) cSVFormat2;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "\"";
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(539);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[3];
      cSVFormat0.print(charArrayWriter0);
      cSVFormat0.withIgnoreEmptyLines(false);
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) charArrayWriter0;
      Object object0 = new Object();
      cSVFormat0.withSkipHeaderRecord();
      objectArray0[2] = object0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('X');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("$4!5'u6RZej");
      cSVFormat2.withQuote('z');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}<");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category0, locale_Category2, locale_Category3, locale_Category4);
      enumSet0.clone();
      Object object0 = new Object();
      Object object1 = new Object();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("Ho6H");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('X');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('X');
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("1v?8Kl4 iuh^HJ");
      cSVFormat5.print(stringWriter0);
      CSVPrinter cSVPrinter2 = cSVFormat0.print(stringWriter0);
      DataTruncation dataTruncation0 = new DataTruncation((-835), true, true, (-835), (-835));
      cSVPrinter2.print(dataTruncation0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecords((Iterable<?>) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("jzEPjpY-N=");
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = 't';
      charArray0[6] = 't';
      charArray0[7] = 't';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object object0 = new Object();
      charBuffer0.asReadOnlyBuffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) locale_Category0;
      objectArray0[4] = (Object) "jzEPjpY-N=";
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      Character character0 = new Character('$');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('U');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('$');
      MockFileWriter mockFileWriter0 = new MockFileWriter("out");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      cSVPrinter0.flush();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      Character character0 = new Character('$');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('U');
      cSVFormat3.withEscape('$');
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = '$';
      charArray0[2] = '$';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter1.flush();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u2028");
      cSVFormat2.print(mockPrintStream0);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('v');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "\u2028";
      objectArray0[3] = object2;
      objectArray0[4] = object1;
      cSVPrinter1.printRecords(objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, (byte)28);
      Long long0 = new Long(4);
      cSVPrinter0.print(long0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('S');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("k^6#@ZI)Q1:1m-z@H ");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('o');
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "k^6#@ZI)Q1:1m-z@H ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat4);
      Object object0 = new Object();
      cSVPrinter0.printComment("1v?8Kl4 iuh^HJ");
      cSVFormat5.print(charBuffer0);
      cSVFormat5.print(charBuffer0);
      Object[] objectArray0 = new Object[6];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "1v?8Kl4 iuh^HJ";
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      Character character1 = new Character('X');
      cSVFormat5.withQuote(character1);
      cSVFormat3.print(charBuffer0);
      CSVFormat cSVFormat6 = cSVFormat2.withEscape(character1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat6);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charBuffer0, cSVFormat4);
      // Undeclared exception!
//      try { 
        cSVPrinter2.print(cSVFormat0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Object object0 = new Object();
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>();
      TreeSet<CharArrayWriter> treeSet1 = new TreeSet<CharArrayWriter>((SortedSet<CharArrayWriter>) treeSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E");
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet.of(locale_Category0, locale_Category1, locale_Category2, locale_Category0, locale_Category0);
      cSVPrinter0.printComment("WDR{");
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat2.print(pipedWriter0);
      cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "E";
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) treeSet0;
      objectArray0[3] = (Object) locale_Category2;
      cSVFormat2.withDelimiter('7');
      cSVFormat1.withHeaderComments(objectArray0);
      Character character0 = Character.valueOf('C');
      cSVFormat0.withQuote(character0);
      cSVFormat2.print(pipedWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat2);
//      try { 
        cSVPrinter0.print(locale_Category1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("{I<dyYhyX`");
      char[] charArray0 = new char[2];
      cSVFormat2.withRecordSeparator("");
      charArray0[0] = '%';
      charArray0[1] = '9';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.print(charBuffer0);
      charBuffer0.asReadOnlyBuffer();
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      String string0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "", (-965));
      cSVPrinter0.flush();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(sQLDataException0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter$1");
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('A');
      cSVFormat2.withQuote(',');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = object0;
      Object object3 = new Object();
      objectArray0[3] = object3;
      objectArray0[4] = object2;
      objectArray0[5] = (Object) "\"";
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) cSVFormat4;
      cSVPrinter0.printRecords(objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1237);
      CSVPrinter cSVPrinter2 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter2.print(object3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter$1");
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      cSVFormat3.withQuote('A');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1, locale_Category0, locale_Category0);
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      cSVPrinter0.printRecords((Iterable<?>) enumSet1);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat3;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter$1");
      Character.valueOf('u');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVFormat2.withQuote('A');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[6];
      Object object3 = new Object();
      objectArray0[0] = object3;
      objectArray0[1] = object0;
      objectArray0[3] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[5] = (Object) "\"";
      cSVPrinter0.printRecords(objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
      Character character0 = Character.valueOf('`');
      cSVFormat0.withEscape(character0);
      MockFile mockFile0 = new MockFile(")[%qua<7>'HO8", " SkipHeaderRecord:");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.close();
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter$1");
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVFormat2.withQuote('A');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[6];
      Object object3 = new Object();
      objectArray0[0] = object3;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[4] = (Object) cSVPrinter1;
      objectArray0[5] = (Object) "\"";
      cSVPrinter0.printRecords(objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
      cSVPrinter1.print(object1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("org.apacue.commons.csv.CSoPrinter$1");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apacue.commons.csv.CSoPrinter$1");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[2] = (byte)122;
      byteArray0[2] = (byte)16;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1, locale_Category2, locale_Category3);
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      cSVPrinter0.printRecords((Iterable<?>) enumSet1);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = object0;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("{I<dyYhyX`");
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '9';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.print(charBuffer0);
      charBuffer0.asReadOnlyBuffer();
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      String string0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "", (-965));
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(sQLDataException0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withRecordSeparator("Unexpected Token type: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-43);
      mockPrintStream0.write(byteArray0);
      Object object0 = new Object();
      cSVFormat1.withQuote('0');
      Object[] objectArray0 = null;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('X');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVFormat1;
      cSVPrinter0.printComment("1v?8Kl4 iuh^HJ");
      cSVFormat2.print(stringWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('o');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape((Character) null);
      MockFile mockFile0 = new MockFile(")[%qua<7>'HO8", ")[%qua<7>'HO8");
      MockFile mockFile1 = new MockFile(mockFile0, ")[%qua<7>'HO8");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      cSVPrinter0.close();
//      try { 
        cSVPrinter0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      Character character0 = new Character('$');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('U');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('$');
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat4);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      String string0 = "";
      MockFile mockFile0 = new MockFile("out", "");
      MockFile mockFile1 = new MockFile(mockFile0, "The comment start and the escape character cannot be the same ('");
      mockFile1.getAbsolutePath();
      mockFile1.delete();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('+');
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      cSVPrinter0.printComment("");
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      Object[] objectArray0 = new Object[7];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)115;
      mockPrintStream0.write(byteArray0);
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      cSVFormat2.withQuote('f');
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>();
      TreeSet<CharArrayWriter> treeSet1 = new TreeSet<CharArrayWriter>((SortedSet<CharArrayWriter>) treeSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#<8%ioLzCqAXuON");
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category2, locale_Category3, locale_Category1, locale_Category0);
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      cSVPrinter1.printRecords((Iterable<?>) treeSet0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale_Category3;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) treeSet0;
      objectArray0[5] = (Object) locale_Category0;
      objectArray0[6] = (Object) treeSet0;
      cSVPrinter1.printRecords(objectArray0);
      enumSet1.add(locale_Category0);
      ArrayDeque<Float> arrayDeque0 = new ArrayDeque<Float>(1731);
      cSVPrinter0.printRecord((Iterable<?>) enumSet0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("jzEPjpY-N=");
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = 't';
      charArray0[6] = 't';
      charArray0[7] = 't';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 't';
      objectArray0[1] = (Object) 't';
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object1 = new Object();
      objectArray0[2] = object1;
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>();
      TreeSet<CharArrayWriter> treeSet1 = new TreeSet<CharArrayWriter>((SortedSet<CharArrayWriter>) treeSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object object2 = new Object();
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("jzEPjpY-N=");
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = 't';
      charArray0[6] = 't';
      charArray0[7] = 't';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2, locale_Category1, locale_Category2);
      EnumSet.copyOf(enumSet0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) enumSet0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>();
      TreeSet<CharArrayWriter> treeSet1 = new TreeSet<CharArrayWriter>((SortedSet<CharArrayWriter>) treeSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2, locale_Category0, locale_Category3);
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) enumSet1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('X');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character1 = new Character('Q');
      cSVFormat0.withEscape(character1);
      MockFile mockFile0 = new MockFile(")[%qua<7>'HO8", "d8OFqU!Ad+t3~s;");
      MockFile mockFile1 = new MockFile(mockFile0, "d8OFqU!Ad+t3~s;");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      CSVPrinter cSVPrinter2 = cSVFormat3.print(stringWriter0);
      cSVPrinter2.close();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "d8OFqU!Ad+t3~s;";
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) mockFile1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) stringWriter0;
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.toString();
      Character character0 = Character.valueOf('r');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat1.withSkipHeaderRecord();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "The header contains a duplicate name: \"";
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "x|F;1*L<ff[SL", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat2);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.toString();
      MockFile mockFile0 = new MockFile((String) null, "%sMro'{=");
      File file0 = MockFile.createTempFile("The header contains a duplicate name: \"", "org.apache.commons.csv.CSVPrinter", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFileWriter0.write("%sMro'{=");
      cSVPrinter0.flush();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "%sMro'{=";
      objectArray0[8] = (Object) "org.apache.commons.csv.CSVPrinter";
      cSVFormat0.format(objectArray0);
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.println();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(appendable0);
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("jzEPjpY-N=");
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = 't';
      charArray0[6] = 't';
      charArray0[7] = 't';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 't';
      objectArray0[1] = (Object) 't';
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) 't';
      objectArray0[5] = (Object) 't';
      objectArray0[6] = (Object) 't';
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.toString();
      MockFile mockFile0 = new MockFile((String) null, "%sMro'{=");
      File file0 = MockFile.createTempFile("The header contains a duplicate name: \"", "org.apache.commons.csv.CSVPrinter", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFileWriter0.write("%sMro'{=");
      cSVPrinter0.flush();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "%sMro'{=";
      objectArray0[8] = (Object) "org.apache.commons.csv.CSVPrinter";
      cSVFormat0.format(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVPrinter0.printComment("The header contains a duplicate name: \"");
      cSVPrinter0.printComment("MINIMAL");
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.print(objectArray0[6]);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      Character character0 = new Character('$');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('U');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('$');
      MockFileWriter mockFileWriter0 = new MockFileWriter("out");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.toString();
      MockFile mockFile0 = new MockFile((String) null, "%sMro'{=");
      File file0 = MockFile.createTempFile("The header contains a duplicate name: \"", "org.apache.commons.csv.CSVPrinter", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFileWriter0.write("%sMro'{=");
      cSVPrinter0.flush();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "%sMro'{=";
      objectArray0[8] = (Object) "org.apache.commons.csv.CSVPrinter";
      cSVFormat0.format(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVPrinter0.printComment("The header contains a duplicate name: \"");
      cSVPrinter0.printComment("MINIMAL");
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      Object[] objectArray0 = new Object[7];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)115;
      mockPrintStream0.write(byteArray0);
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      cSVFormat2.withQuote('f');
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('o');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape((Character) null);
      MockFile mockFile0 = new MockFile(")[%qua<7>'HO8", ")[%qua<7>'HO8");
      MockFile mockFile1 = new MockFile(mockFile0, "ee}O9");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charArrayWriter0;
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>();
      TreeSet<CharArrayWriter> treeSet1 = new TreeSet<CharArrayWriter>((SortedSet<CharArrayWriter>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet1);
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<Float> arrayDeque0 = new ArrayDeque<Float>(0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The escape character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.print(stringWriter0);
      cSVPrinter0.printComment("i8qqXST+V|I`1|");
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.println();
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      File file0 = MockFile.createTempFile("(y4ai#2RL.j1Q", "i8qqXST+V|I`1|", (File) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      cSVPrinter0.print(mockFileWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) appendable0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "(y4ai#2RL.j1Q";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('X');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      Object object3 = new Object();
      objectArray0[6] = object3;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(7, objectArray0.length);
  }
}
