/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:46:38 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('H');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) sQLRecoverableException0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MockThrowable mockThrowable0 = new MockThrowable(sQLRecoverableException0);
      sQLRecoverableException0.initCause(mockThrowable0);
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printComment("java.sql.SQLRecoverableException@0000000003,java.lang.Object@0000000004,java.io.StringWriter@0000000005,java.io.StringWriter@0000000005");
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("IJgejAo[s?RC");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('5');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "IJgejAo[s?RC";
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat0.withIgnoreHeaderCase();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("IJgejAo[s?RC");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byte[] byteArray0 = new byte[1];
      objectArray0[4] = (Object) (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[3] = (Object) "IJgejAo[s?RC";
      Object object0 = new Object();
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printComment("INVALID");
//      try { 
        cSVPrinter0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLRecoverableException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLRecoverableException0.setNextException(sQLTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("K/jD", "", (-954), sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)sQLRecoverableException0.initCause(sQLTransactionRollbackException0);
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.printRecord((Iterable<?>) sQLRecoverableException1);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      cSVPrinter1.getOut();
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter2.printRecords((Iterable<?>) sQLRecoverableException0);
      String string0 = null;
      cSVPrinter2.printComment(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[10];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charset0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      CSVParser cSVParser0 = cSVFormat0.parse(lineNumberReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9gr mFg5Y-%yBT5`");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000001,");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printComment("Vd(E1");
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[16];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#O]Wr]WGB7");
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("K/jD", "", (-954), sQLRecoverableException0);
      sQLRecoverableException0.initCause(sQLTransactionRollbackException0);
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3x");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('O');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
//      try { 
        cSVPrinter0.printComment("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('3');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("A.fs+k;v@Kg<2xY");
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('S');
      String string0 = "uUF5h[8";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("uUF5h[8");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append('3');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(printWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat4;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      cSVPrinter0.printRecords(objectArray0);
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) printWriter0;
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]kQzOtwt}='FXU");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      String string0 = "}J23^man~5y !r";
      File file0 = MockFile.createTempFile("Default", "}J23^man~5y !r");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      mockFileWriter0.close();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.printComment("}J23^man~5y !r");
//      try { 
        cSVPrinter0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[1];
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Character character0 = new Character('P');
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character1 = Character.valueOf('P');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      CharBuffer.wrap((CharSequence) charBuffer1);
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      Character character2 = new Character('P');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character2);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.withHeaderComments((Object[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat5);
      Object[] objectArray0 = new Object[4];
      Object object2 = new Object();
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character1;
      objectArray0[3] = (Object) character2;
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer1, cSVFormat5);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Character character0 = new Character('P');
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character1 = Character.valueOf('Z');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      CharBuffer.wrap((CharSequence) charBuffer1);
      Character character2 = new Character('Z');
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      Character character3 = new Character('Z');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character3);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.withHeaderComments((Object[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat5);
      Object[] objectArray0 = new Object[4];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character2;
      objectArray0[3] = (Object) character3;
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer1, cSVFormat5);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("\u2028");
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("<B~..B|EB:6YO^f5");
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) charBuffer0;
      cSVFormat1.withHeaderComments(objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "format";
      stringArray0[2] = "CommentStart=<";
      stringArray0[3] = "Q<X:";
      stringArray0[4] = "id%Ms)~V?4l7w]K#Fl";
      stringArray0[5] = "L9,'%,ZV]1~EPfa1=";
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[15];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9gr mFg5Y-1yT5`");
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('\u001F');
      cSVFormat3.withSkipHeaderRecord(false);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[5];
      CSVFormat.newFormat('\u001F');
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-48);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVFormat0.withDelimiter('\u001F');
      MockFileWriter mockFileWriter0 = new MockFileWriter("ChsB-6");
      cSVFormat0.print(mockFileWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("6.D9@B,@&m");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharBuffer charBuffer2 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer3 = CharBuffer.wrap((CharSequence) charBuffer1);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
      Character character0 = Character.valueOf('m');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charBuffer3;
      objectArray0[1] = object2;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = object2;
      objectArray0[4] = (Object) charBuffer2;
      objectArray0[5] = (Object) charBuffer2;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer3, cSVFormat0);
      cSVFormat2.format(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreSurroundingSpaces();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("l_0xzl|=j6z`Y/", "l_0xzl|=j6z`Y/", 1);
      File file0 = MockFile.createTempFile("l_0xzl|=j6z`Y/", "out");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      Charset.defaultCharset();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(bufferedWriter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)80;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('S');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringWriter0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      Character character0 = new Character('b');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat4);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("8B@3.,3|y7nb\"", "Sl3J&'XqW", 64);
      StringWriter stringWriter0 = new StringWriter(64);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLRecoverableException0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[15];
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("I");
      StringWriter stringWriter0 = new StringWriter(753);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      HashSet<BufferedWriter> hashSet0 = new HashSet<BufferedWriter>();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      hashSet0.add(bufferedWriter0);
      PriorityQueue<BufferedWriter> priorityQueue0 = new PriorityQueue<BufferedWriter>(hashSet0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      cSVFormat3.withCommentMarker(character0);
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat4.withNullString("n+mF");
      cSVFormat4.print(stringWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) stringWriter0;
      CSVFormat cSVFormat5 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat1.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat5);
      TreeSet<FilterInputStream> treeSet0 = new TreeSet<FilterInputStream>();
      Long long0 = Long.valueOf((long) 1237);
      cSVPrinter0.print(long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'X';
      charArray0[3] = 'X';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('X');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("%!k}7bvoSc'^hCh0");
      Object[] objectArray0 = new Object[8];
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      cSVFormat3.withCommentMarker(character0);
      String string0 = "The comment start and the escape character cannot be the same ('";
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.print("gGKJF pbGA?1QM[");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      cSVPrinter0.printComment("1.4*A");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, true, true, true, true).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      TreeSet<FilterInputStream> treeSet0 = new TreeSet<FilterInputStream>();
      cSVPrinter0.print(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      cSVFormat3.withCommentMarker(character0);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.print("gGKJF pbGA?1QM[");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      LinkedHashSet<SQLSyntaxErrorException> linkedHashSet0 = new LinkedHashSet<SQLSyntaxErrorException>(arrayDeque0);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'c';
      charArray0[3] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat(',');
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[3] = (Object) charBuffer1;
      objectArray0[7] = (Object) charBuffer0;
      objectArray0[5] = (Object) ',';
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) cSVFormat1;
      Object object2 = new Object();
      objectArray0[8] = object2;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
      cSVFormat1.format(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'c';
      charArray0[3] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      Character character1 = Character.valueOf('1');
      cSVFormat1.withCommentMarker(character1);
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) charBuffer1;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) ',';
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'c';
      charArray0[3] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) charBuffer1;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) ',';
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) cSVFormat1;
      Object object2 = new Object();
      objectArray0[8] = object2;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
      cSVFormat1.format(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(3220, comparator0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = 'e';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) '\u0000';
      objectArray0[2] = (Object) 'e';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 'X';
      objectArray0[5] = (Object) 'e';
      objectArray0[6] = (Object) '\u0000';
      objectArray0[7] = (Object) charBuffer0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("out", "l_0xzl|=j6z`Y/", 2292);
      StringWriter stringWriter0 = new StringWriter(1207);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLRecoverableException0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      charArray0[3] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("I");
      Object[] objectArray0 = new Object[8];
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.close();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Delimiter=<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[3] = object0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVFormat1.format(objectArray0);
      mockFileOutputStream0.flush();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.withHeader((ResultSetMetaData) null);
      cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('6');
      cSVFormat4.format(objectArray0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      cSVPrinter2.printRecord(objectArray0);
      cSVPrinter2.getOut();
      Class<MockFileWriter> class0 = MockFileWriter.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<MockFileWriter> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter2.printRecord((Iterable<?>) serviceLoader0);
      // Undeclared exception!
//      try { 
        cSVPrinter2.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      charArray0[3] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("I");
      Object[] objectArray0 = new Object[8];
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) cSVFormat2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) stack0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) '\u0000';
      objectArray0[2] = (Object) 'e';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 'X';
      objectArray0[5] = (Object) 'v';
      objectArray0[6] = (Object) '\u0000';
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      cSVPrinter0.printComment("8B@3.,3|y7nb\"");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("8B@3.,3|y7nb\"");
      charBuffer1.flip();
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer1, cSVFormat2);
      cSVPrinter0.close();
      TreeSet<FilterInputStream> treeSet0 = new TreeSet<FilterInputStream>();
      PriorityQueue<MockPrintWriter> priorityQueue0 = new PriorityQueue<MockPrintWriter>();
      TreeSet<MockPrintWriter> treeSet1 = new TreeSet<MockPrintWriter>();
      PriorityQueue<MockPrintWriter> priorityQueue1 = new PriorityQueue<MockPrintWriter>((Collection<? extends MockPrintWriter>) treeSet1);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(objectArray0[5]);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      charArray0[3] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      Object[] objectArray0 = new Object[8];
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("IJgejAo[s?RC");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVPrinter0.printComment("IJgejAo[s?RC");
      MockFileReader mockFileReader0 = new MockFileReader("IJgejAo[s?RC");
      cSVPrinter0.print(mockFileReader0);
      cSVPrinter0.close();
      PriorityQueue<Short> priorityQueue0 = new PriorityQueue<Short>(13);
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Delimiter=<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) cSVFormat0;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<");
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat1.withNullString((String) null);
      Character character0 = Character.valueOf('n');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVFormat1.format(objectArray0);
      cSVPrinter0.close();
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) charBuffer0;
      objectArray1[3] = (Object) cSVFormat5;
      objectArray1[4] = (Object) cSVFormat3;
      objectArray1[5] = (Object) mockPrintStream0;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      charArray0[3] = 'o';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) 'o';
      Character character0 = Character.valueOf('v');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      cSVFormat3.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVFormat2.format(objectArray0);
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(2330, (Comparator<? super Console>) null);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.close();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      charArray0[3] = 'o';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) 'o';
      Character character0 = Character.valueOf('v');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      cSVFormat3.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVFormat2.format(objectArray0);
      cSVFormat3.withQuote('o');
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(2330, (Comparator<? super Console>) null);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(character0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) '\u0000';
      objectArray0[2] = (Object) 'e';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 'X';
      objectArray0[5] = (Object) 'v';
      objectArray0[6] = (Object) '\u0000';
      objectArray0[7] = (Object) charBuffer0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) '\u0000';
      objectArray0[2] = (Object) 'e';
      Object object0 = new Object();
      objectArray0[3] = object0;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'c';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      Character character0 = Character.valueOf('c');
      Character character1 = new Character('9');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character1);
      Object object1 = new Object();
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer1, cSVFormat3);
      TreeSet<FilterInputStream> treeSet0 = new TreeSet<FilterInputStream>();
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(character0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\r\n", "\r\n", 64);
      Character character0 = new Character('q');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('m');
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('>');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      cSVFormat1.withEscape(character0);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("z,,}5%4", "The comment start and the escape character cannot be the same ('", 49);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.print("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter1.close();
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('>');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      cSVFormat1.withEscape(character0);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("z,,}5%4", "The comment start and the escape character cannot be the same ('", 49);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("z,,}5%4", sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("gGKJF pbGA?1QM[", "", sQLFeatureNotSupportedException0);
      priorityQueue0.add(sQLRecoverableException0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.print("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter1.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = new Character(']');
      Character character1 = new Character('(');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      cSVPrinter1.printComment("");
      cSVPrinter1.print(cSVPrinter0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('&');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      Character character0 = new Character('i');
      Character character1 = new Character('|');
      cSVFormat2.withCommentMarker(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('v');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "8B@3.,3|y7nb\"";
      objectArray0[1] = (Object) 'v';
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) 'X';
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) 'X';
      Object object0 = new Object();
      objectArray0[7] = object0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      String string0 = " |iR-s-)";
      cSVPrinter0.printComment(" |iR-s-)");
      cSVPrinter0.printComment("b2eYvO>J8=ZI)rR$");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("zN");
      cSVPrinter0.printComment(".`N5`");
      cSVPrinter0.println();
      cSVPrinter0.printComment("");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("IJgejAo[s?RC");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVPrinter0.printComment("IJgejAo[s?RC");
      MockFileReader mockFileReader0 = new MockFileReader("IJgejAo[s?RC");
      cSVPrinter0.print(mockFileReader0);
      cSVPrinter0.close();
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      charArray0[3] = 'o';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) 'o';
      objectArray0[2] = (Object) 'e';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 'X';
      objectArray0[6] = (Object) 'o';
      objectArray0[7] = (Object) charBuffer0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(71, comparator0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) '\u0000';
      objectArray0[2] = (Object) 'e';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 'X';
      objectArray0[5] = (Object) 'v';
      objectArray0[6] = (Object) '\u0000';
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      cSVPrinter0.printComment("8B@3.,3|y7nb\"");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("8B@3.,3|y7nb\"");
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer1, cSVFormat2);
      cSVPrinter0.close();
      TreeSet<FilterInputStream> treeSet0 = new TreeSet<FilterInputStream>();
      PriorityQueue<MockPrintWriter> priorityQueue0 = new PriorityQueue<MockPrintWriter>();
      TreeSet<MockPrintWriter> treeSet1 = new TreeSet<MockPrintWriter>();
      PriorityQueue<MockPrintWriter> priorityQueue1 = new PriorityQueue<MockPrintWriter>((Collection<? extends MockPrintWriter>) treeSet1);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) '\u0000';
      objectArray0[2] = (Object) 'e';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 'X';
      objectArray0[5] = (Object) 'v';
      objectArray0[6] = (Object) '\u0000';
      objectArray0[7] = (Object) charBuffer0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      cSVFormat1.format(objectArray0);
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(71, comparator0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      charArray0[3] = 'o';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) 'o';
      objectArray0[2] = (Object) 'e';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 'X';
      objectArray0[5] = (Object) 'v';
      objectArray0[6] = (Object) 'o';
      objectArray0[7] = (Object) charBuffer0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(71, comparator0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      cSVFormat3.withCommentMarker(character0);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.print("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      cSVPrinter0.printComment("1.4*A");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat4 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVPrinter1.printComment("");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = 'v';
      charArray0[3] = 'o';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withNullString("8B@3.,3|y7nb\"");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer1;
      objectArray0[1] = (Object) 'o';
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      cSVFormat2.format(objectArray0);
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>(2330, (Comparator<? super Console>) null);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\u0013');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("oF`&[", true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.print(mockFileWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(0);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = new Locale("qi_,B5,i19=LT*C}pR");
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringWriter1;
      locale1.getDisplayCountry(locale0);
      objectArray0[2] = (Object) stringWriter0;
      mockPrintWriter0.format(locale1, "qi_,B5,i19=LT*C}pR", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.close();
      TreeSet<FilterInputStream> treeSet0 = new TreeSet<FilterInputStream>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Character character0 = new Character('&');
      Character character1 = new Character('&');
      cSVFormat0.withCommentMarker(character1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      cSVPrinter0.printComment("iH*/FmJx|%sdxuIKIN");
      cSVPrinter0.print((Object) null);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('3');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat3);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charBuffer0;
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('6');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      cSVFormat3.withCommentMarker(character0);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.print("gGKJF pbGA?1QM[");
      SQLTransientException sQLTransientException0 = new SQLTransientException("gGKJF pbGA?1QM[");
      int[] intArray0 = new int[7];
      intArray0[0] = 1237;
      intArray0[1] = 1237;
      intArray0[2] = (int) 'V';
      intArray0[3] = 1237;
      intArray0[4] = 1237;
      intArray0[5] = 9;
      intArray0[6] = (int) 'V';
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.csv.Token$Type", "The comment start and the escape character cannot be the same ('", 9, intArray0, sQLTransientException0);
      cSVPrinter0.print("org.apache.commons.csv.Token$Type");
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('>');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      cSVFormat3.withCommentMarker(character0);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("z,,}5%4", "The comment start and the escape character cannot be the same ('", 49);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("z,,}5%4", sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("gGKJF pbGA?1QM[", "", sQLFeatureNotSupportedException0);
      priorityQueue0.add(sQLRecoverableException0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.print("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter1.close();
      TreeSet<FilterInputStream> treeSet0 = new TreeSet<FilterInputStream>();
      PriorityQueue<MockPrintWriter> priorityQueue1 = new PriorityQueue<MockPrintWriter>();
      PriorityQueue<MockPrintWriter> priorityQueue2 = new PriorityQueue<MockPrintWriter>((Collection<? extends MockPrintWriter>) priorityQueue1);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.print("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      SQLTransientException sQLTransientException0 = new SQLTransientException("gGKJF pbGA?1QM[");
      int[] intArray0 = new int[1];
      intArray0[0] = 1237;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("gGKJF pbGA?1QM[", "XR", 1237, intArray0, sQLTransientException0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(26);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter1.print((Object) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('>');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      cSVFormat3.withCommentMarker(character0);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.print("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      cSVPrinter0.printComment("1.4*A");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl1).when(resultSet1).getMetaData();
      doReturn(false).when(resultSet1).next();
      cSVPrinter0.printRecords(resultSet1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("IJgejAo[s?RC");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('5');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "IJgejAo[s?RC";
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      byte[] byteArray0 = new byte[1];
      objectArray0[4] = (Object) (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[3] = (Object) "IJgejAo[s?RC";
      Object object0 = new Object();
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printComment("INVALID");
      cSVPrinter0.close();
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringWriter stringWriter1 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('+');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) charBuffer0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      char char0 = '?';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      boolean boolean0 = true;
      cSVFormat1.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat1);
      char char1 = '|';
      Character character0 = new Character('|');
      char char2 = '@';
      Character character1 = new Character('@');
      cSVFormat0.withCommentMarker(character1);
      String string0 = "The comment start and the escape character cannot be the same ('";
      CSVPrinter cSVPrinter2 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVPrinter2.printComment((String) null);
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
//      try { 
        cSVPrinter0.print(character0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Character character0 = Character.valueOf('|');
      Character character1 = new Character('@');
      cSVFormat0.withCommentMarker(character1);
      String string0 = "The comment start and the escape character cannot be the same ('";
      CSVPrinter cSVPrinter2 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVPrinter2.printComment((String) null);
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
//      try { 
        cSVPrinter0.print(character0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat0.withIgnoreEmptyLines();
      ResultSet resultSet0 = null;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSet) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat2;
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      cSVFormat2.parse(charArrayReader0);
      objectArray0[6] = (Object) null;
      cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      Object[] objectArray1 = new Object[5];
      cSVFormat3.withAllowMissingColumnNames();
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) cSVFormat3;
      objectArray1[2] = (Object) pipedWriter0;
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      cSVFormat3.withCommentMarker(character0);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.print("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      cSVPrinter0.printComment("1.4*A");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '6';
      intArray0[1] = (int) '6';
      intArray0[2] = 1237;
      SQLTransientException sQLTransientException0 = new SQLTransientException("gGKJF pbGA?1QM[");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "lFUIkYGE8=&11$87FHu", (-1415), intArray0, sQLTransientException0);
      cSVPrinter0.print(batchUpdateException0);
      cSVPrinter0.printRecords(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withRecordSeparator('E');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = object0;
      cSVFormat2.withDelimiter('E');
      objectArray0[4] = (Object) stringWriter1;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) stringWriter2;
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<BufferedInputStream> arrayDeque0 = new ArrayDeque<BufferedInputStream>();
      Vector<BufferedInputStream> vector0 = new Vector<BufferedInputStream>(arrayDeque0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('3');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat3);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charBuffer0;
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat3);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) charBuffer0;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("No header mapping was specified, the record values can't be accessed by name", true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter0.printComment("MINIMAL");
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      cSVFormat3.withCommentMarker(character0);
      String string0 = "The comment start and the escape character cannot be the same ('";
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.print("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1237);
      PipedWriter pipedWriter1 = null;
//      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Already connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character('V');
      cSVFormat3.withCommentMarker(character0);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.print("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("");
      cSVPrinter0.println();
      cSVPrinter0.printComment("1.4*A");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Character character0 = new Character('|');
      Character character1 = new Character('@');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVPrinter cSVPrinter2 = cSVFormat4.print(pipedWriter0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter2.flush();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) "qi_,B5,i19=LT*C}pR";
      objectArray0[3] = (Object) "qi_,B5,i19=LT*C}pR";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "qi_,B5,i19=LT*C}pR", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat0.withHeader((ResultSet) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      cSVFormat3.withCommentMarker('6');
      objectArray0[5] = (Object) cSVFormat3;
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("IJgejAo[s?RC");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('5');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "IJgejAo[s?RC";
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[3] = (Object) "IJgejAo[s?RC";
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printComment("INVALID");
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1237);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('>');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.printComment("The comment start and the escape character cannot be the same ('");
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord();
      cSVPrinter0.printComment("gGKJF pbGA?1QM[");
      cSVPrinter0.printComment("z,,}5%4");
      cSVPrinter0.print(cSVFormat3);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) priorityQueue0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("IJgejAo[s?RC");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('5');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "IJgejAo[s?RC";
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "IJgejAo[s?RC";
      objectArray0[4] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('+');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat3);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) charBuffer0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSet) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      cSVFormat2.withCommentMarker('6');
      objectArray0[5] = (Object) cSVFormat2;
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      cSVFormat2.parse(charArrayReader0);
      objectArray0[6] = (Object) null;
      cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat3.print(pipedWriter0);
      Object[] objectArray1 = new Object[5];
      cSVFormat3.withAllowMissingColumnNames();
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) cSVFormat3;
      objectArray1[2] = (Object) pipedWriter0;
      pipedWriter0.close();
      // Undeclared exception!
//      try { 
        CSVFormat.valueOf("nIjV<-g*");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.nIjV<-g*
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      // Undeclared exception!
//      try { 
        cSVFormat1.print((Appendable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }
}
